{"id":"../node_modules/standardized-audio-context/build/es2019/interfaces/minimal-base-audio-context.js","dependencies":[{"name":"/Users/daiki/Sketches/20200912/node_modules/standardized-audio-context/build/es2019/interfaces/minimal-base-audio-context.js.map","includedInParent":true,"mtime":499162500000},{"name":"/Users/daiki/Sketches/20200912/node_modules/standardized-audio-context/src/interfaces/minimal-base-audio-context.ts","includedInParent":true,"mtime":499162500000},{"name":"/Users/daiki/Sketches/20200912/package.json","includedInParent":true,"mtime":1600613796599},{"name":"/Users/daiki/Sketches/20200912/node_modules/standardized-audio-context/package.json","includedInParent":true,"mtime":1600612523678}],"generated":{"js":""},"sourceMaps":{"js":{"version":3,"file":"minimal-base-audio-context.js","sourceRoot":"","sources":["../../../src/interfaces/minimal-base-audio-context.ts"],"names":[],"mappings":"","sourcesContent":["import { TAudioContextState, TContext, TEventHandler, TNativeEventTarget } from '../types';\nimport { IAudioDestinationNode } from './audio-destination-node';\nimport { IAudioListener } from './audio-listener';\nimport { IMinimalBaseAudioContextEventMap } from './minimal-base-audio-context-event-map';\n\nexport interface IMinimalBaseAudioContext<T extends TContext> extends TNativeEventTarget {\n    readonly currentTime: number;\n\n    readonly destination: IAudioDestinationNode<T>;\n\n    readonly listener: IAudioListener;\n\n    onstatechange: null | TEventHandler<T>;\n\n    readonly sampleRate: number;\n\n    readonly state: TAudioContextState;\n\n    addEventListener<K extends keyof IMinimalBaseAudioContextEventMap>(\n        type: K,\n        listener: (this: this, event: IMinimalBaseAudioContextEventMap[K]) => void,\n        options?: boolean | AddEventListenerOptions\n    ): void;\n\n    addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;\n\n    removeEventListener<K extends keyof IMinimalBaseAudioContextEventMap>(\n        type: K,\n        listener: (this: this, event: IMinimalBaseAudioContextEventMap[K]) => void,\n        options?: boolean | EventListenerOptions\n    ): void;\n\n    removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;\n}\n"]}},"error":null,"hash":"fb171c4de4046cba97f39b77bad26b76","cacheData":{"env":{}}}