{"id":"../node_modules/standardized-audio-context/build/es2019/types/decode-audio-data-function.js","dependencies":[{"name":"/Users/daiki/Sketches/20200912/node_modules/standardized-audio-context/build/es2019/types/decode-audio-data-function.js.map","includedInParent":true,"mtime":499162500000},{"name":"/Users/daiki/Sketches/20200912/node_modules/standardized-audio-context/src/types/decode-audio-data-function.ts","includedInParent":true,"mtime":499162500000},{"name":"/Users/daiki/Sketches/20200912/package.json","includedInParent":true,"mtime":1600613796599},{"name":"/Users/daiki/Sketches/20200912/node_modules/standardized-audio-context/package.json","includedInParent":true,"mtime":1600612523678}],"generated":{"js":""},"sourceMaps":{"js":{"version":3,"file":"decode-audio-data-function.js","sourceRoot":"","sources":["../../../src/types/decode-audio-data-function.ts"],"names":[],"mappings":"","sourcesContent":["import { IAudioBuffer } from '../interfaces';\nimport { TAnyContext } from './any-context';\n\nexport type TDecodeAudioDataFunction = (anyContext: TAnyContext, audioData: ArrayBuffer) => Promise<IAudioBuffer>;\n"]}},"error":null,"hash":"729cca5d6cd15d2437db3374b4bc3cb7","cacheData":{"env":{}}}