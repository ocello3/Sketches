{"id":"../node_modules/standardized-audio-context/build/es2019/types/audio-buffer-source-node-constructor-factory.js","dependencies":[{"name":"/Users/daiki/Sketches/20200912/node_modules/standardized-audio-context/build/es2019/types/audio-buffer-source-node-constructor-factory.js.map","includedInParent":true,"mtime":499162500000},{"name":"/Users/daiki/Sketches/20200912/node_modules/standardized-audio-context/src/types/audio-buffer-source-node-constructor-factory.ts","includedInParent":true,"mtime":499162500000},{"name":"/Users/daiki/Sketches/20200912/package.json","includedInParent":true,"mtime":1600613796599},{"name":"/Users/daiki/Sketches/20200912/node_modules/standardized-audio-context/package.json","includedInParent":true,"mtime":1600612523678}],"generated":{"js":""},"sourceMaps":{"js":{"version":3,"file":"audio-buffer-source-node-constructor-factory.js","sourceRoot":"","sources":["../../../src/types/audio-buffer-source-node-constructor-factory.ts"],"names":[],"mappings":"","sourcesContent":["import { TAudioBufferSourceNodeConstructor } from './audio-buffer-source-node-constructor';\nimport { TAudioBufferSourceNodeRendererFactory } from './audio-buffer-source-node-renderer-factory';\nimport { TAudioNodeConstructor } from './audio-node-constructor';\nimport { TAudioParamFactory } from './audio-param-factory';\nimport { TGetNativeContextFunction } from './get-native-context-function';\nimport { TInvalidStateErrorFactory } from './invalid-state-error-factory';\nimport { TIsNativeOfflineAudioContextFunction } from './is-native-offline-audio-context-function';\nimport { TNativeAudioBufferSourceNodeFactory } from './native-audio-buffer-source-node-factory';\nimport { TWrapEventListenerFunction } from './wrap-event-listener-function';\n\nexport type TAudioBufferSourceNodeConstructorFactory = (\n    audioNodeConstructor: TAudioNodeConstructor,\n    createAudioBufferSourceNodeRenderer: TAudioBufferSourceNodeRendererFactory,\n    createAudioParam: TAudioParamFactory,\n    createInvalidStateError: TInvalidStateErrorFactory,\n    createNativeAudioBufferSourceNode: TNativeAudioBufferSourceNodeFactory,\n    getNativeContext: TGetNativeContextFunction,\n    isNativeOfflineAudioContext: TIsNativeOfflineAudioContextFunction,\n    wrapEventListener: TWrapEventListenerFunction\n) => TAudioBufferSourceNodeConstructor;\n"]}},"error":null,"hash":"88288fba0a34bfa63a49969ddf043873","cacheData":{"env":{}}}