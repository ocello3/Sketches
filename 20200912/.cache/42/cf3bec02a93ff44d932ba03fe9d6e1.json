{"id":"../node_modules/standardized-audio-context/build/es2019/interfaces/read-only-map.js","dependencies":[{"name":"/Users/daiki/Sketches/20200912/node_modules/standardized-audio-context/build/es2019/interfaces/read-only-map.js.map","includedInParent":true,"mtime":499162500000},{"name":"/Users/daiki/Sketches/20200912/node_modules/standardized-audio-context/src/interfaces/read-only-map.ts","includedInParent":true,"mtime":499162500000},{"name":"/Users/daiki/Sketches/20200912/package.json","includedInParent":true,"mtime":1600613796599},{"name":"/Users/daiki/Sketches/20200912/node_modules/standardized-audio-context/package.json","includedInParent":true,"mtime":1600612523678}],"generated":{"js":""},"sourceMaps":{"js":{"version":3,"file":"read-only-map.js","sourceRoot":"","sources":["../../../src/interfaces/read-only-map.ts"],"names":[],"mappings":"","sourcesContent":["export interface IReadOnlyMap<T, U> {\n    readonly entries: Map<T, U>['entries'];\n\n    readonly get: Map<T, U>['get'];\n\n    readonly has: Map<T, U>['has'];\n\n    readonly keys: Map<T, U>['keys'];\n\n    readonly size: Map<T, U>['size'];\n\n    readonly values: Map<T, U>['values'];\n\n    /*\n     * The signature of forEach() differs from the signature Map's forEach() function because the callback receives a IReadOnlyMap as third\n     * argument.\n     */\n    forEach(callback: (value: U, key: T, map: IReadOnlyMap<T, U>) => void, thisArg?: any): void;\n\n    // @todo Symbol.iterator\n}\n"]}},"error":null,"hash":"09588865d4a8f5e40cdd52230cd44c65","cacheData":{"env":{}}}