{"id":"../node_modules/standardized-audio-context/build/es2019/types/audio-worklet-node-constructor-factory.js","dependencies":[{"name":"/Users/daiki/Sketches/20200912/node_modules/standardized-audio-context/build/es2019/types/audio-worklet-node-constructor-factory.js.map","includedInParent":true,"mtime":499162500000},{"name":"/Users/daiki/Sketches/20200912/node_modules/standardized-audio-context/src/types/audio-worklet-node-constructor-factory.ts","includedInParent":true,"mtime":499162500000},{"name":"/Users/daiki/Sketches/20200912/package.json","includedInParent":true,"mtime":1600613796599},{"name":"/Users/daiki/Sketches/20200912/node_modules/standardized-audio-context/package.json","includedInParent":true,"mtime":1600612523678}],"generated":{"js":""},"sourceMaps":{"js":{"version":3,"file":"audio-worklet-node-constructor-factory.js","sourceRoot":"","sources":["../../../src/types/audio-worklet-node-constructor-factory.ts"],"names":[],"mappings":"","sourcesContent":["import { TAddUnrenderedAudioWorkletNodeFunction } from './add-unrendered-audio-worklet-node-function';\nimport { TAudioNodeConstructor } from './audio-node-constructor';\nimport { TAudioParamFactory } from './audio-param-factory';\nimport { TAudioWorkletNodeConstructor } from './audio-worklet-node-constructor';\nimport { TAudioWorkletNodeRendererFactory } from './audio-worklet-node-renderer-factory';\nimport { TGetNativeContextFunction } from './get-native-context-function';\nimport { TIsNativeOfflineAudioContextFunction } from './is-native-offline-audio-context-function';\nimport { TNativeAudioWorkletNodeConstructor } from './native-audio-worklet-node-constructor';\nimport { TNativeAudioWorkletNodeFactory } from './native-audio-worklet-node-factory';\nimport { TWrapEventListenerFunction } from './wrap-event-listener-function';\n\nexport type TAudioWorkletNodeConstructorFactory = (\n    addUnrenderedAudioWorkletNode: TAddUnrenderedAudioWorkletNodeFunction,\n    audioNodeConstructor: TAudioNodeConstructor,\n    createAudioParam: TAudioParamFactory,\n    createAudioWorkletNodeRenderer: TAudioWorkletNodeRendererFactory,\n    createNativeAudioWorkletNode: TNativeAudioWorkletNodeFactory,\n    getNativeContext: TGetNativeContextFunction,\n    isNativeOfflineAudioContext: TIsNativeOfflineAudioContextFunction,\n    nativeAudioWorkletNodeConstructor: null | TNativeAudioWorkletNodeConstructor,\n    wrapEventListener: TWrapEventListenerFunction\n) => TAudioWorkletNodeConstructor;\n"]}},"error":null,"hash":"eca6c6e39c6f0e92b2ec8421319a9f01","cacheData":{"env":{}}}