// modules are defined as an array
// [ module function, map of requires ]
//
// map of requires is short require name -> numeric require
//
// anything defined in a previous bundle is accessed via the
// orig method which is the require for previous bundles
parcelRequire = (function (modules, cache, entry, globalName) {
  // Save the require from previous bundle to this closure if any
  var previousRequire = typeof parcelRequire === 'function' && parcelRequire;
  var nodeRequire = typeof require === 'function' && require;

  function newRequire(name, jumped) {
    if (!cache[name]) {
      if (!modules[name]) {
        // if we cannot find the module within our internal map or
        // cache jump to the current global require ie. the last bundle
        // that was added to the page.
        var currentRequire = typeof parcelRequire === 'function' && parcelRequire;
        if (!jumped && currentRequire) {
          return currentRequire(name, true);
        }

        // If there are other bundles on this page the require from the
        // previous one is saved to 'previousRequire'. Repeat this as
        // many times as there are bundles until the module is found or
        // we exhaust the require chain.
        if (previousRequire) {
          return previousRequire(name, true);
        }

        // Try the node require function if it exists.
        if (nodeRequire && typeof name === 'string') {
          return nodeRequire(name);
        }

        var err = new Error('Cannot find module \'' + name + '\'');
        err.code = 'MODULE_NOT_FOUND';
        throw err;
      }

      localRequire.resolve = resolve;
      localRequire.cache = {};

      var module = cache[name] = new newRequire.Module(name);

      modules[name][0].call(module.exports, localRequire, module, module.exports, this);
    }

    return cache[name].exports;

    function localRequire(x){
      return newRequire(localRequire.resolve(x));
    }

    function resolve(x){
      return modules[name][1][x] || x;
    }
  }

  function Module(moduleName) {
    this.id = moduleName;
    this.bundle = newRequire;
    this.exports = {};
  }

  newRequire.isParcelRequire = true;
  newRequire.Module = Module;
  newRequire.modules = modules;
  newRequire.cache = cache;
  newRequire.parent = previousRequire;
  newRequire.register = function (id, exports) {
    modules[id] = [function (require, module) {
      module.exports = exports;
    }, {}];
  };

  var error;
  for (var i = 0; i < entry.length; i++) {
    try {
      newRequire(entry[i]);
    } catch (e) {
      // Save first error but execute all entries
      if (!error) {
        error = e;
      }
    }
  }

  if (entry.length) {
    // Expose entry point to Node, AMD or browser globals
    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js
    var mainExports = newRequire(entry[entry.length - 1]);

    // CommonJS
    if (typeof exports === "object" && typeof module !== "undefined") {
      module.exports = mainExports;

    // RequireJS
    } else if (typeof define === "function" && define.amd) {
     define(function () {
       return mainExports;
     });

    // <script>
    } else if (globalName) {
      this[globalName] = mainExports;
    }
  }

  // Override the current require with this new one
  parcelRequire = newRequire;

  if (error) {
    // throw error from earlier, _after updating parcelRequire_
    throw error;
  }

  return newRequire;
})({"../node_modules/p5/lib/p5.min.js":[function(require,module,exports) {
var define;
var global = arguments[3];
/*! p5.js v1.1.9 July 22, 2020 */
!function (e) {
  if ("object" == typeof exports && "undefined" != typeof module) module.exports = e();else if ("function" == typeof define && define.amd) define([], e);else {
    ("undefined" != typeof window ? window : "undefined" != typeof global ? global : "undefined" != typeof self ? self : this).p5 = e();
  }
}(function () {
  return function o(i, s, l) {
    function p(t, e) {
      if (!s[t]) {
        if (!i[t]) {
          var r = "function" == typeof require && require;
          if (!e && r) return r(t, !0);
          if (u) return u(t, !0);
          var n = new Error("Cannot find module '" + t + "'");
          throw n.code = "MODULE_NOT_FOUND", n;
        }

        var a = s[t] = {
          exports: {}
        };
        i[t][0].call(a.exports, function (e) {
          return p(i[t][1][e] || e);
        }, a, a.exports, o, i, s, l);
      }

      return s[t].exports;
    }

    for (var u = "function" == typeof require && require, e = 0; e < l.length; e++) p(l[e]);

    return p;
  }({
    1: [function (e, t, r) {
      t.exports = {
        p5: {
          alpha: {
            name: "alpha",
            params: [{
              name: "color",
              description: '<p><a href="#/p5.Color">p5.Color</a> object, color components,\n                                        or CSS color</p>\n',
              type: "p5.Color|Number[]|String"
            }],
            class: "p5",
            module: "Color"
          },
          blue: {
            name: "blue",
            params: [{
              name: "color",
              description: '<p><a href="#/p5.Color">p5.Color</a> object, color components,\n                                        or CSS color</p>\n',
              type: "p5.Color|Number[]|String"
            }],
            class: "p5",
            module: "Color"
          },
          brightness: {
            name: "brightness",
            params: [{
              name: "color",
              description: '<p><a href="#/p5.Color">p5.Color</a> object, color components,\n                                        or CSS color</p>\n',
              type: "p5.Color|Number[]|String"
            }],
            class: "p5",
            module: "Color"
          },
          color: {
            name: "color",
            class: "p5",
            module: "Color",
            overloads: [{
              params: [{
                name: "gray",
                description: "<p>number specifying value between white and black.</p>\n",
                type: "Number"
              }, {
                name: "alpha",
                description: "<p>alpha value relative to current color range\n                                (default is 0-255)</p>\n",
                type: "Number",
                optional: !0
              }]
            }, {
              params: [{
                name: "v1",
                description: "<p>red or hue value relative to\n                                the current color range</p>\n",
                type: "Number"
              }, {
                name: "v2",
                description: "<p>green or saturation value\n                                relative to the current color range</p>\n",
                type: "Number"
              }, {
                name: "v3",
                description: "<p>blue or brightness value\n                                relative to the current color range</p>\n",
                type: "Number"
              }, {
                name: "alpha",
                description: "",
                type: "Number",
                optional: !0
              }]
            }, {
              params: [{
                name: "value",
                description: "<p>a color string</p>\n",
                type: "String"
              }]
            }, {
              params: [{
                name: "values",
                description: "<p>an array containing the red,green,blue &\n                                and alpha components of the color</p>\n",
                type: "Number[]"
              }]
            }, {
              params: [{
                name: "color",
                description: "",
                type: "p5.Color"
              }]
            }]
          },
          green: {
            name: "green",
            params: [{
              name: "color",
              description: '<p><a href="#/p5.Color">p5.Color</a> object, color components,\n                                        or CSS color</p>\n',
              type: "p5.Color|Number[]|String"
            }],
            class: "p5",
            module: "Color"
          },
          hue: {
            name: "hue",
            params: [{
              name: "color",
              description: '<p><a href="#/p5.Color">p5.Color</a> object, color components,\n                                        or CSS color</p>\n',
              type: "p5.Color|Number[]|String"
            }],
            class: "p5",
            module: "Color"
          },
          lerpColor: {
            name: "lerpColor",
            params: [{
              name: "c1",
              description: "<p>interpolate from this color</p>\n",
              type: "p5.Color"
            }, {
              name: "c2",
              description: "<p>interpolate to this color</p>\n",
              type: "p5.Color"
            }, {
              name: "amt",
              description: "<p>number between 0 and 1</p>\n",
              type: "Number"
            }],
            class: "p5",
            module: "Color"
          },
          lightness: {
            name: "lightness",
            params: [{
              name: "color",
              description: '<p><a href="#/p5.Color">p5.Color</a> object, color components,\n                                        or CSS color</p>\n',
              type: "p5.Color|Number[]|String"
            }],
            class: "p5",
            module: "Color"
          },
          red: {
            name: "red",
            params: [{
              name: "color",
              description: '<p><a href="#/p5.Color">p5.Color</a> object, color components,\n                                        or CSS color</p>\n',
              type: "p5.Color|Number[]|String"
            }],
            class: "p5",
            module: "Color"
          },
          saturation: {
            name: "saturation",
            params: [{
              name: "color",
              description: '<p><a href="#/p5.Color">p5.Color</a> object, color components,\n                                        or CSS color</p>\n',
              type: "p5.Color|Number[]|String"
            }],
            class: "p5",
            module: "Color"
          },
          background: {
            name: "background",
            class: "p5",
            module: "Color",
            overloads: [{
              params: [{
                name: "color",
                description: '<p>any value created by the <a href="#/p5/color">color()</a> function</p>\n',
                type: "p5.Color"
              }],
              chainable: 1
            }, {
              params: [{
                name: "colorstring",
                description: "<p>color string, possible formats include: integer\n                        rgb() or rgba(), percentage rgb() or rgba(),\n                        3-digit hex, 6-digit hex</p>\n",
                type: "String"
              }, {
                name: "a",
                description: "<p>opacity of the background relative to current\n                            color range (default is 0-255)</p>\n",
                type: "Number",
                optional: !0
              }],
              chainable: 1
            }, {
              params: [{
                name: "gray",
                description: "<p>specifies a value between white and black</p>\n",
                type: "Number"
              }, {
                name: "a",
                description: "",
                type: "Number",
                optional: !0
              }],
              chainable: 1
            }, {
              params: [{
                name: "v1",
                description: "<p>red or hue value (depending on the current color\n                       mode)</p>\n",
                type: "Number"
              }, {
                name: "v2",
                description: "<p>green or saturation value (depending on the current\n                       color mode)</p>\n",
                type: "Number"
              }, {
                name: "v3",
                description: "<p>blue or brightness value (depending on the current\n                       color mode)</p>\n",
                type: "Number"
              }, {
                name: "a",
                description: "",
                type: "Number",
                optional: !0
              }],
              chainable: 1
            }, {
              params: [{
                name: "values",
                description: "<p>an array containing the red, green, blue\n                                and alpha components of the color</p>\n",
                type: "Number[]"
              }],
              chainable: 1
            }, {
              params: [{
                name: "image",
                description: '<p>image created with <a href="#/p5/loadImage">loadImage()</a> or <a href="#/p5/createImage">createImage()</a>,\n                            to set as background\n                            (must be same size as the sketch window)</p>\n',
                type: "p5.Image"
              }, {
                name: "a",
                description: "",
                type: "Number",
                optional: !0
              }],
              chainable: 1
            }]
          },
          clear: {
            name: "clear",
            class: "p5",
            module: "Color"
          },
          colorMode: {
            name: "colorMode",
            class: "p5",
            module: "Color",
            overloads: [{
              params: [{
                name: "mode",
                description: "<p>either RGB, HSB or HSL, corresponding to\n                         Red/Green/Blue and Hue/Saturation/Brightness\n                         (or Lightness)</p>\n",
                type: "Constant"
              }, {
                name: "max",
                description: "<p>range for all values</p>\n",
                type: "Number",
                optional: !0
              }],
              chainable: 1
            }, {
              params: [{
                name: "mode",
                description: "",
                type: "Constant"
              }, {
                name: "max1",
                description: "<p>range for the red or hue depending on the\n                             current color mode</p>\n",
                type: "Number"
              }, {
                name: "max2",
                description: "<p>range for the green or saturation depending\n                             on the current color mode</p>\n",
                type: "Number"
              }, {
                name: "max3",
                description: "<p>range for the blue or brightness/lightness\n                             depending on the current color mode</p>\n",
                type: "Number"
              }, {
                name: "maxA",
                description: "<p>range for the alpha</p>\n",
                type: "Number",
                optional: !0
              }],
              chainable: 1
            }]
          },
          fill: {
            name: "fill",
            class: "p5",
            module: "Color",
            overloads: [{
              params: [{
                name: "v1",
                description: "<p>red or hue value relative to\n                                the current color range</p>\n",
                type: "Number"
              }, {
                name: "v2",
                description: "<p>green or saturation value\n                                relative to the current color range</p>\n",
                type: "Number"
              }, {
                name: "v3",
                description: "<p>blue or brightness value\n                                relative to the current color range</p>\n",
                type: "Number"
              }, {
                name: "alpha",
                description: "",
                type: "Number",
                optional: !0
              }],
              chainable: 1
            }, {
              params: [{
                name: "value",
                description: "<p>a color string</p>\n",
                type: "String"
              }],
              chainable: 1
            }, {
              params: [{
                name: "gray",
                description: "<p>a gray value</p>\n",
                type: "Number"
              }, {
                name: "alpha",
                description: "",
                type: "Number",
                optional: !0
              }],
              chainable: 1
            }, {
              params: [{
                name: "values",
                description: "<p>an array containing the red,green,blue &\n                                and alpha components of the color</p>\n",
                type: "Number[]"
              }],
              chainable: 1
            }, {
              params: [{
                name: "color",
                description: "<p>the fill color</p>\n",
                type: "p5.Color"
              }],
              chainable: 1
            }]
          },
          noFill: {
            name: "noFill",
            class: "p5",
            module: "Color"
          },
          noStroke: {
            name: "noStroke",
            class: "p5",
            module: "Color"
          },
          stroke: {
            name: "stroke",
            class: "p5",
            module: "Color",
            overloads: [{
              params: [{
                name: "v1",
                description: "<p>red or hue value relative to\n                                the current color range</p>\n",
                type: "Number"
              }, {
                name: "v2",
                description: "<p>green or saturation value\n                                relative to the current color range</p>\n",
                type: "Number"
              }, {
                name: "v3",
                description: "<p>blue or brightness value\n                                relative to the current color range</p>\n",
                type: "Number"
              }, {
                name: "alpha",
                description: "",
                type: "Number",
                optional: !0
              }],
              chainable: 1
            }, {
              params: [{
                name: "value",
                description: "<p>a color string</p>\n",
                type: "String"
              }],
              chainable: 1
            }, {
              params: [{
                name: "gray",
                description: "<p>a gray value</p>\n",
                type: "Number"
              }, {
                name: "alpha",
                description: "",
                type: "Number",
                optional: !0
              }],
              chainable: 1
            }, {
              params: [{
                name: "values",
                description: "<p>an array containing the red,green,blue &\n                                and alpha components of the color</p>\n",
                type: "Number[]"
              }],
              chainable: 1
            }, {
              params: [{
                name: "color",
                description: "<p>the stroke color</p>\n",
                type: "p5.Color"
              }],
              chainable: 1
            }]
          },
          erase: {
            name: "erase",
            params: [{
              name: "strengthFill",
              description: "<p>A number (0-255) for the strength of erasing for a shape's fill.\n                                       This will default to 255 when no argument is given, which\n                                       is full strength.</p>\n",
              type: "Number",
              optional: !0
            }, {
              name: "strengthStroke",
              description: "<p>A number (0-255) for the strength of erasing for a shape's stroke.\n                                       This will default to 255 when no argument is given, which\n                                       is full strength.</p>\n",
              type: "Number",
              optional: !0
            }],
            class: "p5",
            module: "Color"
          },
          noErase: {
            name: "noErase",
            class: "p5",
            module: "Color"
          },
          arc: {
            name: "arc",
            params: [{
              name: "x",
              description: "<p>x-coordinate of the arc's ellipse</p>\n",
              type: "Number"
            }, {
              name: "y",
              description: "<p>y-coordinate of the arc's ellipse</p>\n",
              type: "Number"
            }, {
              name: "w",
              description: "<p>width of the arc's ellipse by default</p>\n",
              type: "Number"
            }, {
              name: "h",
              description: "<p>height of the arc's ellipse by default</p>\n",
              type: "Number"
            }, {
              name: "start",
              description: "<p>angle to start the arc, specified in radians</p>\n",
              type: "Number"
            }, {
              name: "stop",
              description: "<p>angle to stop the arc, specified in radians</p>\n",
              type: "Number"
            }, {
              name: "mode",
              description: "<p>optional parameter to determine the way of drawing\n                        the arc. either CHORD, PIE or OPEN</p>\n",
              type: "Constant",
              optional: !0
            }, {
              name: "detail",
              description: "<p>optional parameter for WebGL mode only. This is to\n                        specify the number of vertices that makes up the\n                        perimeter of the arc. Default value is 25.</p>\n",
              type: "Number",
              optional: !0
            }],
            class: "p5",
            module: "Shape"
          },
          ellipse: {
            name: "ellipse",
            class: "p5",
            module: "Shape",
            overloads: [{
              params: [{
                name: "x",
                description: "<p>x-coordinate of the center of ellipse.</p>\n",
                type: "Number"
              }, {
                name: "y",
                description: "<p>y-coordinate of the center of ellipse.</p>\n",
                type: "Number"
              }, {
                name: "w",
                description: "<p>width of the ellipse.</p>\n",
                type: "Number"
              }, {
                name: "h",
                description: "<p>height of the ellipse.</p>\n",
                type: "Number",
                optional: !0
              }],
              chainable: 1
            }, {
              params: [{
                name: "x",
                description: "",
                type: "Number"
              }, {
                name: "y",
                description: "",
                type: "Number"
              }, {
                name: "w",
                description: "",
                type: "Number"
              }, {
                name: "h",
                description: "",
                type: "Number"
              }, {
                name: "detail",
                description: "<p>number of radial sectors to draw (for WebGL mode)</p>\n",
                type: "Integer"
              }]
            }]
          },
          circle: {
            name: "circle",
            params: [{
              name: "x",
              description: "<p>x-coordinate of the centre of the circle.</p>\n",
              type: "Number"
            }, {
              name: "y",
              description: "<p>y-coordinate of the centre of the circle.</p>\n",
              type: "Number"
            }, {
              name: "d",
              description: "<p>diameter of the circle.</p>\n",
              type: "Number"
            }],
            class: "p5",
            module: "Shape"
          },
          line: {
            name: "line",
            class: "p5",
            module: "Shape",
            overloads: [{
              params: [{
                name: "x1",
                description: "<p>the x-coordinate of the first point</p>\n",
                type: "Number"
              }, {
                name: "y1",
                description: "<p>the y-coordinate of the first point</p>\n",
                type: "Number"
              }, {
                name: "x2",
                description: "<p>the x-coordinate of the second point</p>\n",
                type: "Number"
              }, {
                name: "y2",
                description: "<p>the y-coordinate of the second point</p>\n",
                type: "Number"
              }],
              chainable: 1
            }, {
              params: [{
                name: "x1",
                description: "",
                type: "Number"
              }, {
                name: "y1",
                description: "",
                type: "Number"
              }, {
                name: "z1",
                description: "<p>the z-coordinate of the first point</p>\n",
                type: "Number"
              }, {
                name: "x2",
                description: "",
                type: "Number"
              }, {
                name: "y2",
                description: "",
                type: "Number"
              }, {
                name: "z2",
                description: "<p>the z-coordinate of the second point</p>\n",
                type: "Number"
              }],
              chainable: 1
            }]
          },
          point: {
            name: "point",
            class: "p5",
            module: "Shape",
            overloads: [{
              params: [{
                name: "x",
                description: "<p>the x-coordinate</p>\n",
                type: "Number"
              }, {
                name: "y",
                description: "<p>the y-coordinate</p>\n",
                type: "Number"
              }, {
                name: "z",
                description: "<p>the z-coordinate (for WebGL mode)</p>\n",
                type: "Number",
                optional: !0
              }],
              chainable: 1
            }, {
              params: [{
                name: "coordinate_vector",
                description: "<p>the coordinate vector</p>\n",
                type: "p5.Vector"
              }],
              chainable: 1
            }]
          },
          quad: {
            name: "quad",
            class: "p5",
            module: "Shape",
            overloads: [{
              params: [{
                name: "x1",
                description: "<p>the x-coordinate of the first point</p>\n",
                type: "Number"
              }, {
                name: "y1",
                description: "<p>the y-coordinate of the first point</p>\n",
                type: "Number"
              }, {
                name: "x2",
                description: "<p>the x-coordinate of the second point</p>\n",
                type: "Number"
              }, {
                name: "y2",
                description: "<p>the y-coordinate of the second point</p>\n",
                type: "Number"
              }, {
                name: "x3",
                description: "<p>the x-coordinate of the third point</p>\n",
                type: "Number"
              }, {
                name: "y3",
                description: "<p>the y-coordinate of the third point</p>\n",
                type: "Number"
              }, {
                name: "x4",
                description: "<p>the x-coordinate of the fourth point</p>\n",
                type: "Number"
              }, {
                name: "y4",
                description: "<p>the y-coordinate of the fourth point</p>\n",
                type: "Number"
              }],
              chainable: 1
            }, {
              params: [{
                name: "x1",
                description: "",
                type: "Number"
              }, {
                name: "y1",
                description: "",
                type: "Number"
              }, {
                name: "z1",
                description: "<p>the z-coordinate of the first point</p>\n",
                type: "Number"
              }, {
                name: "x2",
                description: "",
                type: "Number"
              }, {
                name: "y2",
                description: "",
                type: "Number"
              }, {
                name: "z2",
                description: "<p>the z-coordinate of the second point</p>\n",
                type: "Number"
              }, {
                name: "x3",
                description: "",
                type: "Number"
              }, {
                name: "y3",
                description: "",
                type: "Number"
              }, {
                name: "z3",
                description: "<p>the z-coordinate of the third point</p>\n",
                type: "Number"
              }, {
                name: "x4",
                description: "",
                type: "Number"
              }, {
                name: "y4",
                description: "",
                type: "Number"
              }, {
                name: "z4",
                description: "<p>the z-coordinate of the fourth point</p>\n",
                type: "Number"
              }],
              chainable: 1
            }]
          },
          rect: {
            name: "rect",
            class: "p5",
            module: "Shape",
            overloads: [{
              params: [{
                name: "x",
                description: "<p>x-coordinate of the rectangle.</p>\n",
                type: "Number"
              }, {
                name: "y",
                description: "<p>y-coordinate of the rectangle.</p>\n",
                type: "Number"
              }, {
                name: "w",
                description: "<p>width of the rectangle.</p>\n",
                type: "Number"
              }, {
                name: "h",
                description: "<p>height of the rectangle.</p>\n",
                type: "Number",
                optional: !0
              }, {
                name: "tl",
                description: "<p>optional radius of top-left corner.</p>\n",
                type: "Number",
                optional: !0
              }, {
                name: "tr",
                description: "<p>optional radius of top-right corner.</p>\n",
                type: "Number",
                optional: !0
              }, {
                name: "br",
                description: "<p>optional radius of bottom-right corner.</p>\n",
                type: "Number",
                optional: !0
              }, {
                name: "bl",
                description: "<p>optional radius of bottom-left corner.</p>\n",
                type: "Number",
                optional: !0
              }],
              chainable: 1
            }, {
              params: [{
                name: "x",
                description: "",
                type: "Number"
              }, {
                name: "y",
                description: "",
                type: "Number"
              }, {
                name: "w",
                description: "",
                type: "Number"
              }, {
                name: "h",
                description: "",
                type: "Number"
              }, {
                name: "detailX",
                description: "<p>number of segments in the x-direction (for WebGL mode)</p>\n",
                type: "Integer",
                optional: !0
              }, {
                name: "detailY",
                description: "<p>number of segments in the y-direction (for WebGL mode)</p>\n",
                type: "Integer",
                optional: !0
              }],
              chainable: 1
            }]
          },
          square: {
            name: "square",
            params: [{
              name: "x",
              description: "<p>x-coordinate of the square.</p>\n",
              type: "Number"
            }, {
              name: "y",
              description: "<p>y-coordinate of the square.</p>\n",
              type: "Number"
            }, {
              name: "s",
              description: "<p>side size of the square.</p>\n",
              type: "Number"
            }, {
              name: "tl",
              description: "<p>optional radius of top-left corner.</p>\n",
              type: "Number",
              optional: !0
            }, {
              name: "tr",
              description: "<p>optional radius of top-right corner.</p>\n",
              type: "Number",
              optional: !0
            }, {
              name: "br",
              description: "<p>optional radius of bottom-right corner.</p>\n",
              type: "Number",
              optional: !0
            }, {
              name: "bl",
              description: "<p>optional radius of bottom-left corner.</p>\n",
              type: "Number",
              optional: !0
            }],
            class: "p5",
            module: "Shape"
          },
          triangle: {
            name: "triangle",
            params: [{
              name: "x1",
              description: "<p>x-coordinate of the first point</p>\n",
              type: "Number"
            }, {
              name: "y1",
              description: "<p>y-coordinate of the first point</p>\n",
              type: "Number"
            }, {
              name: "x2",
              description: "<p>x-coordinate of the second point</p>\n",
              type: "Number"
            }, {
              name: "y2",
              description: "<p>y-coordinate of the second point</p>\n",
              type: "Number"
            }, {
              name: "x3",
              description: "<p>x-coordinate of the third point</p>\n",
              type: "Number"
            }, {
              name: "y3",
              description: "<p>y-coordinate of the third point</p>\n",
              type: "Number"
            }],
            class: "p5",
            module: "Shape"
          },
          ellipseMode: {
            name: "ellipseMode",
            params: [{
              name: "mode",
              description: "<p>either CENTER, RADIUS, CORNER, or CORNERS</p>\n",
              type: "Constant"
            }],
            class: "p5",
            module: "Shape"
          },
          noSmooth: {
            name: "noSmooth",
            class: "p5",
            module: "Shape"
          },
          rectMode: {
            name: "rectMode",
            params: [{
              name: "mode",
              description: "<p>either CORNER, CORNERS, CENTER, or RADIUS</p>\n",
              type: "Constant"
            }],
            class: "p5",
            module: "Shape"
          },
          smooth: {
            name: "smooth",
            class: "p5",
            module: "Shape"
          },
          strokeCap: {
            name: "strokeCap",
            params: [{
              name: "cap",
              description: "<p>either ROUND, SQUARE or PROJECT</p>\n",
              type: "Constant"
            }],
            class: "p5",
            module: "Shape"
          },
          strokeJoin: {
            name: "strokeJoin",
            params: [{
              name: "join",
              description: "<p>either MITER, BEVEL, ROUND</p>\n",
              type: "Constant"
            }],
            class: "p5",
            module: "Shape"
          },
          strokeWeight: {
            name: "strokeWeight",
            params: [{
              name: "weight",
              description: "<p>the weight of the stroke (in pixels)</p>\n",
              type: "Number"
            }],
            class: "p5",
            module: "Shape"
          },
          bezier: {
            name: "bezier",
            class: "p5",
            module: "Shape",
            overloads: [{
              params: [{
                name: "x1",
                description: "<p>x-coordinate for the first anchor point</p>\n",
                type: "Number"
              }, {
                name: "y1",
                description: "<p>y-coordinate for the first anchor point</p>\n",
                type: "Number"
              }, {
                name: "x2",
                description: "<p>x-coordinate for the first control point</p>\n",
                type: "Number"
              }, {
                name: "y2",
                description: "<p>y-coordinate for the first control point</p>\n",
                type: "Number"
              }, {
                name: "x3",
                description: "<p>x-coordinate for the second control point</p>\n",
                type: "Number"
              }, {
                name: "y3",
                description: "<p>y-coordinate for the second control point</p>\n",
                type: "Number"
              }, {
                name: "x4",
                description: "<p>x-coordinate for the second anchor point</p>\n",
                type: "Number"
              }, {
                name: "y4",
                description: "<p>y-coordinate for the second anchor point</p>\n",
                type: "Number"
              }],
              chainable: 1
            }, {
              params: [{
                name: "x1",
                description: "",
                type: "Number"
              }, {
                name: "y1",
                description: "",
                type: "Number"
              }, {
                name: "z1",
                description: "<p>z-coordinate for the first anchor point</p>\n",
                type: "Number"
              }, {
                name: "x2",
                description: "",
                type: "Number"
              }, {
                name: "y2",
                description: "",
                type: "Number"
              }, {
                name: "z2",
                description: "<p>z-coordinate for the first control point</p>\n",
                type: "Number"
              }, {
                name: "x3",
                description: "",
                type: "Number"
              }, {
                name: "y3",
                description: "",
                type: "Number"
              }, {
                name: "z3",
                description: "<p>z-coordinate for the second control point</p>\n",
                type: "Number"
              }, {
                name: "x4",
                description: "",
                type: "Number"
              }, {
                name: "y4",
                description: "",
                type: "Number"
              }, {
                name: "z4",
                description: "<p>z-coordinate for the second anchor point</p>\n",
                type: "Number"
              }],
              chainable: 1
            }]
          },
          bezierDetail: {
            name: "bezierDetail",
            params: [{
              name: "detail",
              description: "<p>resolution of the curves</p>\n",
              type: "Number"
            }],
            class: "p5",
            module: "Shape"
          },
          bezierPoint: {
            name: "bezierPoint",
            params: [{
              name: "a",
              description: "<p>coordinate of first point on the curve</p>\n",
              type: "Number"
            }, {
              name: "b",
              description: "<p>coordinate of first control point</p>\n",
              type: "Number"
            }, {
              name: "c",
              description: "<p>coordinate of second control point</p>\n",
              type: "Number"
            }, {
              name: "d",
              description: "<p>coordinate of second point on the curve</p>\n",
              type: "Number"
            }, {
              name: "t",
              description: "<p>value between 0 and 1</p>\n",
              type: "Number"
            }],
            class: "p5",
            module: "Shape"
          },
          bezierTangent: {
            name: "bezierTangent",
            params: [{
              name: "a",
              description: "<p>coordinate of first point on the curve</p>\n",
              type: "Number"
            }, {
              name: "b",
              description: "<p>coordinate of first control point</p>\n",
              type: "Number"
            }, {
              name: "c",
              description: "<p>coordinate of second control point</p>\n",
              type: "Number"
            }, {
              name: "d",
              description: "<p>coordinate of second point on the curve</p>\n",
              type: "Number"
            }, {
              name: "t",
              description: "<p>value between 0 and 1</p>\n",
              type: "Number"
            }],
            class: "p5",
            module: "Shape"
          },
          curve: {
            name: "curve",
            class: "p5",
            module: "Shape",
            overloads: [{
              params: [{
                name: "x1",
                description: "<p>x-coordinate for the beginning control point</p>\n",
                type: "Number"
              }, {
                name: "y1",
                description: "<p>y-coordinate for the beginning control point</p>\n",
                type: "Number"
              }, {
                name: "x2",
                description: "<p>x-coordinate for the first point</p>\n",
                type: "Number"
              }, {
                name: "y2",
                description: "<p>y-coordinate for the first point</p>\n",
                type: "Number"
              }, {
                name: "x3",
                description: "<p>x-coordinate for the second point</p>\n",
                type: "Number"
              }, {
                name: "y3",
                description: "<p>y-coordinate for the second point</p>\n",
                type: "Number"
              }, {
                name: "x4",
                description: "<p>x-coordinate for the ending control point</p>\n",
                type: "Number"
              }, {
                name: "y4",
                description: "<p>y-coordinate for the ending control point</p>\n",
                type: "Number"
              }],
              chainable: 1
            }, {
              params: [{
                name: "x1",
                description: "",
                type: "Number"
              }, {
                name: "y1",
                description: "",
                type: "Number"
              }, {
                name: "z1",
                description: "<p>z-coordinate for the beginning control point</p>\n",
                type: "Number"
              }, {
                name: "x2",
                description: "",
                type: "Number"
              }, {
                name: "y2",
                description: "",
                type: "Number"
              }, {
                name: "z2",
                description: "<p>z-coordinate for the first point</p>\n",
                type: "Number"
              }, {
                name: "x3",
                description: "",
                type: "Number"
              }, {
                name: "y3",
                description: "",
                type: "Number"
              }, {
                name: "z3",
                description: "<p>z-coordinate for the second point</p>\n",
                type: "Number"
              }, {
                name: "x4",
                description: "",
                type: "Number"
              }, {
                name: "y4",
                description: "",
                type: "Number"
              }, {
                name: "z4",
                description: "<p>z-coordinate for the ending control point</p>\n",
                type: "Number"
              }],
              chainable: 1
            }]
          },
          curveDetail: {
            name: "curveDetail",
            params: [{
              name: "resolution",
              description: "<p>resolution of the curves</p>\n",
              type: "Number"
            }],
            class: "p5",
            module: "Shape"
          },
          curveTightness: {
            name: "curveTightness",
            params: [{
              name: "amount",
              description: "<p>amount of deformation from the original vertices</p>\n",
              type: "Number"
            }],
            class: "p5",
            module: "Shape"
          },
          curvePoint: {
            name: "curvePoint",
            params: [{
              name: "a",
              description: "<p>coordinate of first control point of the curve</p>\n",
              type: "Number"
            }, {
              name: "b",
              description: "<p>coordinate of first point</p>\n",
              type: "Number"
            }, {
              name: "c",
              description: "<p>coordinate of second point</p>\n",
              type: "Number"
            }, {
              name: "d",
              description: "<p>coordinate of second control point</p>\n",
              type: "Number"
            }, {
              name: "t",
              description: "<p>value between 0 and 1</p>\n",
              type: "Number"
            }],
            class: "p5",
            module: "Shape"
          },
          curveTangent: {
            name: "curveTangent",
            params: [{
              name: "a",
              description: "<p>coordinate of first control point</p>\n",
              type: "Number"
            }, {
              name: "b",
              description: "<p>coordinate of first point on the curve</p>\n",
              type: "Number"
            }, {
              name: "c",
              description: "<p>coordinate of second point on the curve</p>\n",
              type: "Number"
            }, {
              name: "d",
              description: "<p>coordinate of second conrol point</p>\n",
              type: "Number"
            }, {
              name: "t",
              description: "<p>value between 0 and 1</p>\n",
              type: "Number"
            }],
            class: "p5",
            module: "Shape"
          },
          beginContour: {
            name: "beginContour",
            class: "p5",
            module: "Shape"
          },
          beginShape: {
            name: "beginShape",
            params: [{
              name: "kind",
              description: "<p>either POINTS, LINES, TRIANGLES, TRIANGLE_FAN\n                               TRIANGLE_STRIP, QUADS, QUAD_STRIP or TESS</p>\n",
              type: "Constant",
              optional: !0
            }],
            class: "p5",
            module: "Shape"
          },
          bezierVertex: {
            name: "bezierVertex",
            class: "p5",
            module: "Shape",
            overloads: [{
              params: [{
                name: "x2",
                description: "<p>x-coordinate for the first control point</p>\n",
                type: "Number"
              }, {
                name: "y2",
                description: "<p>y-coordinate for the first control point</p>\n",
                type: "Number"
              }, {
                name: "x3",
                description: "<p>x-coordinate for the second control point</p>\n",
                type: "Number"
              }, {
                name: "y3",
                description: "<p>y-coordinate for the second control point</p>\n",
                type: "Number"
              }, {
                name: "x4",
                description: "<p>x-coordinate for the anchor point</p>\n",
                type: "Number"
              }, {
                name: "y4",
                description: "<p>y-coordinate for the anchor point</p>\n",
                type: "Number"
              }],
              chainable: 1
            }, {
              params: [{
                name: "x2",
                description: "",
                type: "Number"
              }, {
                name: "y2",
                description: "",
                type: "Number"
              }, {
                name: "z2",
                description: "<p>z-coordinate for the first control point (for WebGL mode)</p>\n",
                type: "Number"
              }, {
                name: "x3",
                description: "",
                type: "Number"
              }, {
                name: "y3",
                description: "",
                type: "Number"
              }, {
                name: "z3",
                description: "<p>z-coordinate for the second control point (for WebGL mode)</p>\n",
                type: "Number"
              }, {
                name: "x4",
                description: "",
                type: "Number"
              }, {
                name: "y4",
                description: "",
                type: "Number"
              }, {
                name: "z4",
                description: "<p>z-coordinate for the anchor point (for WebGL mode)</p>\n",
                type: "Number"
              }],
              chainable: 1
            }]
          },
          curveVertex: {
            name: "curveVertex",
            class: "p5",
            module: "Shape",
            overloads: [{
              params: [{
                name: "x",
                description: "<p>x-coordinate of the vertex</p>\n",
                type: "Number"
              }, {
                name: "y",
                description: "<p>y-coordinate of the vertex</p>\n",
                type: "Number"
              }],
              chainable: 1
            }, {
              params: [{
                name: "x",
                description: "",
                type: "Number"
              }, {
                name: "y",
                description: "",
                type: "Number"
              }, {
                name: "z",
                description: "<p>z-coordinate of the vertex (for WebGL mode)</p>\n",
                type: "Number",
                optional: !0
              }],
              chainable: 1
            }]
          },
          endContour: {
            name: "endContour",
            class: "p5",
            module: "Shape"
          },
          endShape: {
            name: "endShape",
            params: [{
              name: "mode",
              description: "<p>use CLOSE to close the shape</p>\n",
              type: "Constant",
              optional: !0
            }],
            class: "p5",
            module: "Shape"
          },
          quadraticVertex: {
            name: "quadraticVertex",
            class: "p5",
            module: "Shape",
            overloads: [{
              params: [{
                name: "cx",
                description: "<p>x-coordinate for the control point</p>\n",
                type: "Number"
              }, {
                name: "cy",
                description: "<p>y-coordinate for the control point</p>\n",
                type: "Number"
              }, {
                name: "x3",
                description: "<p>x-coordinate for the anchor point</p>\n",
                type: "Number"
              }, {
                name: "y3",
                description: "<p>y-coordinate for the anchor point</p>\n",
                type: "Number"
              }],
              chainable: 1
            }, {
              params: [{
                name: "cx",
                description: "",
                type: "Number"
              }, {
                name: "cy",
                description: "",
                type: "Number"
              }, {
                name: "cz",
                description: "<p>z-coordinate for the control point (for WebGL mode)</p>\n",
                type: "Number"
              }, {
                name: "x3",
                description: "",
                type: "Number"
              }, {
                name: "y3",
                description: "",
                type: "Number"
              }, {
                name: "z3",
                description: "<p>z-coordinate for the anchor point (for WebGL mode)</p>\n",
                type: "Number"
              }],
              chainable: 1
            }]
          },
          vertex: {
            name: "vertex",
            class: "p5",
            module: "Shape",
            overloads: [{
              params: [{
                name: "x",
                description: "<p>x-coordinate of the vertex</p>\n",
                type: "Number"
              }, {
                name: "y",
                description: "<p>y-coordinate of the vertex</p>\n",
                type: "Number"
              }],
              chainable: 1
            }, {
              params: [{
                name: "x",
                description: "",
                type: "Number"
              }, {
                name: "y",
                description: "",
                type: "Number"
              }, {
                name: "z",
                description: "<p>z-coordinate of the vertex</p>\n",
                type: "Number"
              }, {
                name: "u",
                description: "<p>the vertex's texture u-coordinate</p>\n",
                type: "Number",
                optional: !0
              }, {
                name: "v",
                description: "<p>the vertex's texture v-coordinate</p>\n",
                type: "Number",
                optional: !0
              }],
              chainable: 1
            }]
          },
          P2D: {
            name: "P2D",
            class: "p5",
            module: "Constants"
          },
          WEBGL: {
            name: "WEBGL",
            class: "p5",
            module: "Constants"
          },
          ARROW: {
            name: "ARROW",
            class: "p5",
            module: "Constants"
          },
          CROSS: {
            name: "CROSS",
            class: "p5",
            module: "Constants"
          },
          HAND: {
            name: "HAND",
            class: "p5",
            module: "Constants"
          },
          MOVE: {
            name: "MOVE",
            class: "p5",
            module: "Constants"
          },
          TEXT: {
            name: "TEXT",
            class: "p5",
            module: "Constants"
          },
          WAIT: {
            name: "WAIT",
            class: "p5",
            module: "Constants"
          },
          HALF_PI: {
            name: "HALF_PI",
            class: "p5",
            module: "Constants"
          },
          PI: {
            name: "PI",
            class: "p5",
            module: "Constants"
          },
          QUARTER_PI: {
            name: "QUARTER_PI",
            class: "p5",
            module: "Constants"
          },
          TAU: {
            name: "TAU",
            class: "p5",
            module: "Constants"
          },
          TWO_PI: {
            name: "TWO_PI",
            class: "p5",
            module: "Constants"
          },
          DEGREES: {
            name: "DEGREES",
            class: "p5",
            module: "Constants"
          },
          RADIANS: {
            name: "RADIANS",
            class: "p5",
            module: "Constants"
          },
          CORNER: {
            name: "CORNER",
            class: "p5",
            module: "Constants"
          },
          CORNERS: {
            name: "CORNERS",
            class: "p5",
            module: "Constants"
          },
          RADIUS: {
            name: "RADIUS",
            class: "p5",
            module: "Constants"
          },
          RIGHT: {
            name: "RIGHT",
            class: "p5",
            module: "Constants"
          },
          LEFT: {
            name: "LEFT",
            class: "p5",
            module: "Constants"
          },
          CENTER: {
            name: "CENTER",
            class: "p5",
            module: "Constants"
          },
          TOP: {
            name: "TOP",
            class: "p5",
            module: "Constants"
          },
          BOTTOM: {
            name: "BOTTOM",
            class: "p5",
            module: "Constants"
          },
          BASELINE: {
            name: "BASELINE",
            class: "p5",
            module: "Constants"
          },
          POINTS: {
            name: "POINTS",
            class: "p5",
            module: "Constants"
          },
          LINES: {
            name: "LINES",
            class: "p5",
            module: "Constants"
          },
          LINE_STRIP: {
            name: "LINE_STRIP",
            class: "p5",
            module: "Constants"
          },
          LINE_LOOP: {
            name: "LINE_LOOP",
            class: "p5",
            module: "Constants"
          },
          TRIANGLES: {
            name: "TRIANGLES",
            class: "p5",
            module: "Constants"
          },
          TRIANGLE_FAN: {
            name: "TRIANGLE_FAN",
            class: "p5",
            module: "Constants"
          },
          TRIANGLE_STRIP: {
            name: "TRIANGLE_STRIP",
            class: "p5",
            module: "Constants"
          },
          QUADS: {
            name: "QUADS",
            class: "p5",
            module: "Constants"
          },
          QUAD_STRIP: {
            name: "QUAD_STRIP",
            class: "p5",
            module: "Constants"
          },
          TESS: {
            name: "TESS",
            class: "p5",
            module: "Constants"
          },
          CLOSE: {
            name: "CLOSE",
            class: "p5",
            module: "Constants"
          },
          OPEN: {
            name: "OPEN",
            class: "p5",
            module: "Constants"
          },
          CHORD: {
            name: "CHORD",
            class: "p5",
            module: "Constants"
          },
          PIE: {
            name: "PIE",
            class: "p5",
            module: "Constants"
          },
          PROJECT: {
            name: "PROJECT",
            class: "p5",
            module: "Constants"
          },
          SQUARE: {
            name: "SQUARE",
            class: "p5",
            module: "Constants"
          },
          ROUND: {
            name: "ROUND",
            class: "p5",
            module: "Constants"
          },
          BEVEL: {
            name: "BEVEL",
            class: "p5",
            module: "Constants"
          },
          MITER: {
            name: "MITER",
            class: "p5",
            module: "Constants"
          },
          RGB: {
            name: "RGB",
            class: "p5",
            module: "Constants"
          },
          HSB: {
            name: "HSB",
            class: "p5",
            module: "Constants"
          },
          HSL: {
            name: "HSL",
            class: "p5",
            module: "Constants"
          },
          AUTO: {
            name: "AUTO",
            class: "p5",
            module: "Constants"
          },
          ALT: {
            name: "ALT",
            class: "p5",
            module: "Constants"
          },
          BACKSPACE: {
            name: "BACKSPACE",
            class: "p5",
            module: "Constants"
          },
          CONTROL: {
            name: "CONTROL",
            class: "p5",
            module: "Constants"
          },
          DELETE: {
            name: "DELETE",
            class: "p5",
            module: "Constants"
          },
          DOWN_ARROW: {
            name: "DOWN_ARROW",
            class: "p5",
            module: "Constants"
          },
          ENTER: {
            name: "ENTER",
            class: "p5",
            module: "Constants"
          },
          ESCAPE: {
            name: "ESCAPE",
            class: "p5",
            module: "Constants"
          },
          LEFT_ARROW: {
            name: "LEFT_ARROW",
            class: "p5",
            module: "Constants"
          },
          OPTION: {
            name: "OPTION",
            class: "p5",
            module: "Constants"
          },
          RETURN: {
            name: "RETURN",
            class: "p5",
            module: "Constants"
          },
          RIGHT_ARROW: {
            name: "RIGHT_ARROW",
            class: "p5",
            module: "Constants"
          },
          SHIFT: {
            name: "SHIFT",
            class: "p5",
            module: "Constants"
          },
          TAB: {
            name: "TAB",
            class: "p5",
            module: "Constants"
          },
          UP_ARROW: {
            name: "UP_ARROW",
            class: "p5",
            module: "Constants"
          },
          BLEND: {
            name: "BLEND",
            class: "p5",
            module: "Constants"
          },
          REMOVE: {
            name: "REMOVE",
            class: "p5",
            module: "Constants"
          },
          ADD: {
            name: "ADD",
            class: "p5",
            module: "Constants"
          },
          DARKEST: {
            name: "DARKEST",
            class: "p5",
            module: "Constants"
          },
          LIGHTEST: {
            name: "LIGHTEST",
            class: "p5",
            module: "Constants"
          },
          DIFFERENCE: {
            name: "DIFFERENCE",
            class: "p5",
            module: "Constants"
          },
          SUBTRACT: {
            name: "SUBTRACT",
            class: "p5",
            module: "Constants"
          },
          EXCLUSION: {
            name: "EXCLUSION",
            class: "p5",
            module: "Constants"
          },
          MULTIPLY: {
            name: "MULTIPLY",
            class: "p5",
            module: "Constants"
          },
          SCREEN: {
            name: "SCREEN",
            class: "p5",
            module: "Constants"
          },
          REPLACE: {
            name: "REPLACE",
            class: "p5",
            module: "Constants"
          },
          OVERLAY: {
            name: "OVERLAY",
            class: "p5",
            module: "Constants"
          },
          HARD_LIGHT: {
            name: "HARD_LIGHT",
            class: "p5",
            module: "Constants"
          },
          SOFT_LIGHT: {
            name: "SOFT_LIGHT",
            class: "p5",
            module: "Constants"
          },
          DODGE: {
            name: "DODGE",
            class: "p5",
            module: "Constants"
          },
          BURN: {
            name: "BURN",
            class: "p5",
            module: "Constants"
          },
          THRESHOLD: {
            name: "THRESHOLD",
            class: "p5",
            module: "Constants"
          },
          GRAY: {
            name: "GRAY",
            class: "p5",
            module: "Constants"
          },
          OPAQUE: {
            name: "OPAQUE",
            class: "p5",
            module: "Constants"
          },
          INVERT: {
            name: "INVERT",
            class: "p5",
            module: "Constants"
          },
          POSTERIZE: {
            name: "POSTERIZE",
            class: "p5",
            module: "Constants"
          },
          DILATE: {
            name: "DILATE",
            class: "p5",
            module: "Constants"
          },
          ERODE: {
            name: "ERODE",
            class: "p5",
            module: "Constants"
          },
          BLUR: {
            name: "BLUR",
            class: "p5",
            module: "Constants"
          },
          NORMAL: {
            name: "NORMAL",
            class: "p5",
            module: "Constants"
          },
          ITALIC: {
            name: "ITALIC",
            class: "p5",
            module: "Constants"
          },
          BOLD: {
            name: "BOLD",
            class: "p5",
            module: "Constants"
          },
          BOLDITALIC: {
            name: "BOLDITALIC",
            class: "p5",
            module: "Constants"
          },
          LINEAR: {
            name: "LINEAR",
            class: "p5",
            module: "Constants"
          },
          QUADRATIC: {
            name: "QUADRATIC",
            class: "p5",
            module: "Constants"
          },
          BEZIER: {
            name: "BEZIER",
            class: "p5",
            module: "Constants"
          },
          CURVE: {
            name: "CURVE",
            class: "p5",
            module: "Constants"
          },
          STROKE: {
            name: "STROKE",
            class: "p5",
            module: "Constants"
          },
          FILL: {
            name: "FILL",
            class: "p5",
            module: "Constants"
          },
          TEXTURE: {
            name: "TEXTURE",
            class: "p5",
            module: "Constants"
          },
          IMMEDIATE: {
            name: "IMMEDIATE",
            class: "p5",
            module: "Constants"
          },
          IMAGE: {
            name: "IMAGE",
            class: "p5",
            module: "Constants"
          },
          NEAREST: {
            name: "NEAREST",
            class: "p5",
            module: "Constants"
          },
          REPEAT: {
            name: "REPEAT",
            class: "p5",
            module: "Constants"
          },
          CLAMP: {
            name: "CLAMP",
            class: "p5",
            module: "Constants"
          },
          MIRROR: {
            name: "MIRROR",
            class: "p5",
            module: "Constants"
          },
          LANDSCAPE: {
            name: "LANDSCAPE",
            class: "p5",
            module: "Constants"
          },
          PORTRAIT: {
            name: "PORTRAIT",
            class: "p5",
            module: "Constants"
          },
          GRID: {
            name: "GRID",
            class: "p5",
            module: "Constants"
          },
          AXES: {
            name: "AXES",
            class: "p5",
            module: "Constants"
          },
          print: {
            name: "print",
            params: [{
              name: "contents",
              description: "<p>any combination of Number, String, Object, Boolean,\n                      Array to print</p>\n",
              type: "Any"
            }],
            class: "p5",
            module: "Environment"
          },
          frameCount: {
            name: "frameCount",
            class: "p5",
            module: "Environment"
          },
          deltaTime: {
            name: "deltaTime",
            class: "p5",
            module: "Environment"
          },
          focused: {
            name: "focused",
            class: "p5",
            module: "Environment"
          },
          cursor: {
            name: "cursor",
            params: [{
              name: "type",
              description: "<p>Built-In: either ARROW, CROSS, HAND, MOVE, TEXT and WAIT\n                              Native CSS properties: 'grab', 'progress', 'cell' etc.\n                              External: path for cursor's images\n                              (Allowed File extensions: .cur, .gif, .jpg, .jpeg, .png)\n                              For more information on Native CSS cursors and url visit:\n                              <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/cursor\">https://developer.mozilla.org/en-US/docs/Web/CSS/cursor</a></p>\n",
              type: "String|Constant"
            }, {
              name: "x",
              description: "<p>the horizontal active spot of the cursor (must be less than 32)</p>\n",
              type: "Number",
              optional: !0
            }, {
              name: "y",
              description: "<p>the vertical active spot of the cursor (must be less than 32)</p>\n",
              type: "Number",
              optional: !0
            }],
            class: "p5",
            module: "Environment"
          },
          frameRate: {
            name: "frameRate",
            class: "p5",
            module: "Environment",
            overloads: [{
              params: [{
                name: "fps",
                description: "<p>number of frames to be displayed every second</p>\n",
                type: "Number"
              }],
              chainable: 1
            }, {
              params: []
            }]
          },
          noCursor: {
            name: "noCursor",
            class: "p5",
            module: "Environment"
          },
          displayWidth: {
            name: "displayWidth",
            class: "p5",
            module: "Environment"
          },
          displayHeight: {
            name: "displayHeight",
            class: "p5",
            module: "Environment"
          },
          windowWidth: {
            name: "windowWidth",
            class: "p5",
            module: "Environment"
          },
          windowHeight: {
            name: "windowHeight",
            class: "p5",
            module: "Environment"
          },
          windowResized: {
            name: "windowResized",
            class: "p5",
            module: "Environment"
          },
          width: {
            name: "width",
            class: "p5",
            module: "Environment"
          },
          height: {
            name: "height",
            class: "p5",
            module: "Environment"
          },
          fullscreen: {
            name: "fullscreen",
            params: [{
              name: "val",
              description: "<p>whether the sketch should be in fullscreen mode\nor not</p>\n",
              type: "Boolean",
              optional: !0
            }],
            class: "p5",
            module: "Environment"
          },
          pixelDensity: {
            name: "pixelDensity",
            class: "p5",
            module: "Environment",
            overloads: [{
              params: [{
                name: "val",
                description: "<p>whether or how much the sketch should scale</p>\n",
                type: "Number"
              }],
              chainable: 1
            }, {
              params: []
            }]
          },
          displayDensity: {
            name: "displayDensity",
            class: "p5",
            module: "Environment"
          },
          getURL: {
            name: "getURL",
            class: "p5",
            module: "Environment"
          },
          getURLPath: {
            name: "getURLPath",
            class: "p5",
            module: "Environment"
          },
          getURLParams: {
            name: "getURLParams",
            class: "p5",
            module: "Environment"
          },
          preload: {
            name: "preload",
            class: "p5",
            module: "Structure"
          },
          setup: {
            name: "setup",
            class: "p5",
            module: "Structure"
          },
          draw: {
            name: "draw",
            class: "p5",
            module: "Structure"
          },
          remove: {
            name: "remove",
            class: "p5",
            module: "Structure"
          },
          disableFriendlyErrors: {
            name: "disableFriendlyErrors",
            class: "p5",
            module: "Structure"
          },
          let: {
            name: "let",
            class: "p5",
            module: "Foundation"
          },
          const: {
            name: "const",
            class: "p5",
            module: "Foundation"
          },
          "===": {
            name: "===",
            class: "p5",
            module: "Foundation"
          },
          ">": {
            name: ">",
            class: "p5",
            module: "Foundation"
          },
          ">=": {
            name: ">=",
            class: "p5",
            module: "Foundation"
          },
          "<": {
            name: "<",
            class: "p5",
            module: "Foundation"
          },
          "<=": {
            name: "<=",
            class: "p5",
            module: "Foundation"
          },
          "if-else": {
            name: "if-else",
            class: "p5",
            module: "Foundation"
          },
          function: {
            name: "function",
            class: "p5",
            module: "Foundation"
          },
          return: {
            name: "return",
            class: "p5",
            module: "Foundation"
          },
          boolean: {
            name: "boolean",
            params: [{
              name: "n",
              description: "<p>value to parse</p>\n",
              type: "String|Boolean|Number|Array"
            }],
            class: "p5",
            module: "Data"
          },
          string: {
            name: "string",
            class: "p5",
            module: "Foundation"
          },
          number: {
            name: "number",
            class: "p5",
            module: "Foundation"
          },
          object: {
            name: "object",
            class: "p5",
            module: "Foundation"
          },
          class: {
            name: "class",
            class: "p5",
            module: "Foundation"
          },
          for: {
            name: "for",
            class: "p5",
            module: "Foundation"
          },
          while: {
            name: "while",
            class: "p5",
            module: "Foundation"
          },
          createCanvas: {
            name: "createCanvas",
            params: [{
              name: "w",
              description: "<p>width of the canvas</p>\n",
              type: "Number"
            }, {
              name: "h",
              description: "<p>height of the canvas</p>\n",
              type: "Number"
            }, {
              name: "renderer",
              description: "<p>either P2D or WEBGL</p>\n",
              type: "Constant",
              optional: !0
            }],
            class: "p5",
            module: "Rendering"
          },
          resizeCanvas: {
            name: "resizeCanvas",
            params: [{
              name: "w",
              description: "<p>width of the canvas</p>\n",
              type: "Number"
            }, {
              name: "h",
              description: "<p>height of the canvas</p>\n",
              type: "Number"
            }, {
              name: "noRedraw",
              description: "<p>don't redraw the canvas immediately</p>\n",
              type: "Boolean",
              optional: !0
            }],
            class: "p5",
            module: "Rendering"
          },
          noCanvas: {
            name: "noCanvas",
            class: "p5",
            module: "Rendering"
          },
          createGraphics: {
            name: "createGraphics",
            params: [{
              name: "w",
              description: "<p>width of the offscreen graphics buffer</p>\n",
              type: "Number"
            }, {
              name: "h",
              description: "<p>height of the offscreen graphics buffer</p>\n",
              type: "Number"
            }, {
              name: "renderer",
              description: "<p>either P2D or WEBGL\n                              undefined defaults to p2d</p>\n",
              type: "Constant",
              optional: !0
            }],
            class: "p5",
            module: "Rendering"
          },
          blendMode: {
            name: "blendMode",
            params: [{
              name: "mode",
              description: "<p>blend mode to set for canvas.\n               either BLEND, DARKEST, LIGHTEST, DIFFERENCE, MULTIPLY,\n               EXCLUSION, SCREEN, REPLACE, OVERLAY, HARD_LIGHT,\n               SOFT_LIGHT, DODGE, BURN, ADD, REMOVE or SUBTRACT</p>\n",
              type: "Constant"
            }],
            class: "p5",
            module: "Rendering"
          },
          drawingContext: {
            name: "drawingContext",
            class: "p5",
            module: "Rendering"
          },
          noLoop: {
            name: "noLoop",
            class: "p5",
            module: "Structure"
          },
          loop: {
            name: "loop",
            class: "p5",
            module: "Structure"
          },
          isLooping: {
            name: "isLooping",
            class: "p5",
            module: "Structure"
          },
          push: {
            name: "push",
            class: "p5",
            module: "Structure"
          },
          pop: {
            name: "pop",
            class: "p5",
            module: "Structure"
          },
          redraw: {
            name: "redraw",
            params: [{
              name: "n",
              description: "<p>Redraw for n-times. The default value is 1.</p>\n",
              type: "Integer",
              optional: !0
            }],
            class: "p5",
            module: "Structure"
          },
          p5: {
            name: "p5",
            params: [{
              name: "sketch",
              description: "<p>a function containing a p5.js sketch</p>\n",
              type: "Object"
            }, {
              name: "node",
              description: "<p>ID or pointer to HTML DOM node to contain sketch in</p>\n",
              type: "String|Object"
            }],
            class: "p5",
            module: "Structure"
          },
          applyMatrix: {
            name: "applyMatrix",
            params: [{
              name: "a",
              description: "<p>numbers which define the 2x3 matrix to be multiplied</p>\n",
              type: "Number"
            }, {
              name: "b",
              description: "<p>numbers which define the 2x3 matrix to be multiplied</p>\n",
              type: "Number"
            }, {
              name: "c",
              description: "<p>numbers which define the 2x3 matrix to be multiplied</p>\n",
              type: "Number"
            }, {
              name: "d",
              description: "<p>numbers which define the 2x3 matrix to be multiplied</p>\n",
              type: "Number"
            }, {
              name: "e",
              description: "<p>numbers which define the 2x3 matrix to be multiplied</p>\n",
              type: "Number"
            }, {
              name: "f",
              description: "<p>numbers which define the 2x3 matrix to be multiplied</p>\n",
              type: "Number"
            }],
            class: "p5",
            module: "Transform"
          },
          resetMatrix: {
            name: "resetMatrix",
            class: "p5",
            module: "Transform"
          },
          rotate: {
            name: "rotate",
            params: [{
              name: "angle",
              description: "<p>the angle of rotation, specified in radians\n                       or degrees, depending on current angleMode</p>\n",
              type: "Number"
            }, {
              name: "axis",
              description: "<p>(in 3d) the axis to rotate around</p>\n",
              type: "p5.Vector|Number[]",
              optional: !0
            }],
            class: "p5",
            module: "Transform"
          },
          rotateX: {
            name: "rotateX",
            params: [{
              name: "angle",
              description: "<p>the angle of rotation, specified in radians\n                       or degrees, depending on current angleMode</p>\n",
              type: "Number"
            }],
            class: "p5",
            module: "Transform"
          },
          rotateY: {
            name: "rotateY",
            params: [{
              name: "angle",
              description: "<p>the angle of rotation, specified in radians\n                       or degrees, depending on current angleMode</p>\n",
              type: "Number"
            }],
            class: "p5",
            module: "Transform"
          },
          rotateZ: {
            name: "rotateZ",
            params: [{
              name: "angle",
              description: "<p>the angle of rotation, specified in radians\n                       or degrees, depending on current angleMode</p>\n",
              type: "Number"
            }],
            class: "p5",
            module: "Transform"
          },
          scale: {
            name: "scale",
            class: "p5",
            module: "Transform",
            overloads: [{
              params: [{
                name: "s",
                description: "<p>percent to scale the object, or percentage to\n                     scale the object in the x-axis if multiple arguments\n                     are given</p>\n",
                type: "Number|p5.Vector|Number[]"
              }, {
                name: "y",
                description: "<p>percent to scale the object in the y-axis</p>\n",
                type: "Number",
                optional: !0
              }, {
                name: "z",
                description: "<p>percent to scale the object in the z-axis (webgl only)</p>\n",
                type: "Number",
                optional: !0
              }],
              chainable: 1
            }, {
              params: [{
                name: "scales",
                description: "<p>per-axis percents to scale the object</p>\n",
                type: "p5.Vector|Number[]"
              }],
              chainable: 1
            }]
          },
          shearX: {
            name: "shearX",
            params: [{
              name: "angle",
              description: "<p>angle of shear specified in radians or degrees,\n                       depending on current angleMode</p>\n",
              type: "Number"
            }],
            class: "p5",
            module: "Transform"
          },
          shearY: {
            name: "shearY",
            params: [{
              name: "angle",
              description: "<p>angle of shear specified in radians or degrees,\n                       depending on current angleMode</p>\n",
              type: "Number"
            }],
            class: "p5",
            module: "Transform"
          },
          translate: {
            name: "translate",
            class: "p5",
            module: "Transform",
            overloads: [{
              params: [{
                name: "x",
                description: "<p>left/right translation</p>\n",
                type: "Number"
              }, {
                name: "y",
                description: "<p>up/down translation</p>\n",
                type: "Number"
              }, {
                name: "z",
                description: "<p>forward/backward translation (webgl only)</p>\n",
                type: "Number",
                optional: !0
              }],
              chainable: 1
            }, {
              params: [{
                name: "vector",
                description: "<p>the vector to translate by</p>\n",
                type: "p5.Vector"
              }],
              chainable: 1
            }]
          },
          storeItem: {
            name: "storeItem",
            params: [{
              name: "key",
              description: "",
              type: "String"
            }, {
              name: "value",
              description: "",
              type: "String|Number|Object|Boolean|p5.Color|p5.Vector"
            }],
            class: "p5",
            module: "Data"
          },
          getItem: {
            name: "getItem",
            params: [{
              name: "key",
              description: "<p>name that you wish to use to store in local storage</p>\n",
              type: "String"
            }],
            class: "p5",
            module: "Data"
          },
          clearStorage: {
            name: "clearStorage",
            class: "p5",
            module: "Data"
          },
          removeItem: {
            name: "removeItem",
            params: [{
              name: "key",
              description: "",
              type: "String"
            }],
            class: "p5",
            module: "Data"
          },
          createStringDict: {
            name: "createStringDict",
            class: "p5",
            module: "Data",
            overloads: [{
              params: [{
                name: "key",
                description: "",
                type: "String"
              }, {
                name: "value",
                description: "",
                type: "String"
              }]
            }, {
              params: [{
                name: "object",
                description: "<p>object</p>\n",
                type: "Object"
              }]
            }]
          },
          createNumberDict: {
            name: "createNumberDict",
            class: "p5",
            module: "Data",
            overloads: [{
              params: [{
                name: "key",
                description: "",
                type: "Number"
              }, {
                name: "value",
                description: "",
                type: "Number"
              }]
            }, {
              params: [{
                name: "object",
                description: "<p>object</p>\n",
                type: "Object"
              }]
            }]
          },
          select: {
            name: "select",
            params: [{
              name: "selectors",
              description: "<p>CSS selector string of element to search for</p>\n",
              type: "String"
            }, {
              name: "container",
              description: '<p>CSS selector string, <a href="#/p5.Element">p5.Element</a>, or\n                                            HTML element to search within</p>\n',
              type: "String|p5.Element|HTMLElement",
              optional: !0
            }],
            class: "p5",
            module: "DOM"
          },
          selectAll: {
            name: "selectAll",
            params: [{
              name: "selectors",
              description: "<p>CSS selector string of elements to search for</p>\n",
              type: "String"
            }, {
              name: "container",
              description: '<p>CSS selector string, <a href="#/p5.Element">p5.Element</a>\n                                            , or HTML element to search within</p>\n',
              type: "String|p5.Element|HTMLElement",
              optional: !0
            }],
            class: "p5",
            module: "DOM"
          },
          removeElements: {
            name: "removeElements",
            class: "p5",
            module: "DOM"
          },
          changed: {
            name: "changed",
            params: [{
              name: "fxn",
              description: "<p>function to be fired when the value of\n                               an element changes.\n                               if <code>false</code> is passed instead, the previously\n                               firing function will no longer fire.</p>\n",
              type: "Function|Boolean"
            }],
            class: "p5",
            module: "DOM"
          },
          input: {
            name: "input",
            params: [{
              name: "fxn",
              description: "<p>function to be fired when any user input is\n                               detected within the element.\n                               if <code>false</code> is passed instead, the previously\n                               firing function will no longer fire.</p>\n",
              type: "Function|Boolean"
            }],
            class: "p5",
            module: "DOM"
          },
          createDiv: {
            name: "createDiv",
            params: [{
              name: "html",
              description: "<p>inner HTML for element created</p>\n",
              type: "String",
              optional: !0
            }],
            class: "p5",
            module: "DOM"
          },
          createP: {
            name: "createP",
            params: [{
              name: "html",
              description: "<p>inner HTML for element created</p>\n",
              type: "String",
              optional: !0
            }],
            class: "p5",
            module: "DOM"
          },
          createSpan: {
            name: "createSpan",
            params: [{
              name: "html",
              description: "<p>inner HTML for element created</p>\n",
              type: "String",
              optional: !0
            }],
            class: "p5",
            module: "DOM"
          },
          createImg: {
            name: "createImg",
            class: "p5",
            module: "DOM",
            overloads: [{
              params: [{
                name: "src",
                description: "<p>src path or url for image</p>\n",
                type: "String"
              }, {
                name: "alt",
                description: '<p><a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/Img#Attributes">alternate text</a> to be used if image does not load. You can use also an empty string (<code>""</code>) if that an image is not intended to be viewed.</p>\n',
                type: "String"
              }]
            }, {
              params: [{
                name: "src",
                description: "",
                type: "String"
              }, {
                name: "alt",
                description: "",
                type: "String"
              }, {
                name: "crossOrigin",
                description: "<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_settings_attributes\">crossOrigin property</a> of the <code>img</code> element; use either 'anonymous' or 'use-credentials' to retrieve the image with cross-origin access (for later use with <code>canvas</code>. if an empty string(<code>\"\"</code>) is passed, CORS is not used</p>\n",
                type: "String"
              }, {
                name: "successCallback",
                description: '<p>callback to be called once image data is loaded with the <a href="#/p5.Element">p5.Element</a> as argument</p>\n',
                type: "Function",
                optional: !0
              }]
            }]
          },
          createA: {
            name: "createA",
            params: [{
              name: "href",
              description: "<p>url of page to link to</p>\n",
              type: "String"
            }, {
              name: "html",
              description: "<p>inner html of link element to display</p>\n",
              type: "String"
            }, {
              name: "target",
              description: "<p>target where new link should open,\n                            could be _blank, _self, _parent, _top.</p>\n",
              type: "String",
              optional: !0
            }],
            class: "p5",
            module: "DOM"
          },
          createSlider: {
            name: "createSlider",
            params: [{
              name: "min",
              description: "<p>minimum value of the slider</p>\n",
              type: "Number"
            }, {
              name: "max",
              description: "<p>maximum value of the slider</p>\n",
              type: "Number"
            }, {
              name: "value",
              description: "<p>default value of the slider</p>\n",
              type: "Number",
              optional: !0
            }, {
              name: "step",
              description: "<p>step size for each tick of the slider (if step is set to 0, the slider will move continuously from the minimum to the maximum value)</p>\n",
              type: "Number",
              optional: !0
            }],
            class: "p5",
            module: "DOM"
          },
          createButton: {
            name: "createButton",
            params: [{
              name: "label",
              description: "<p>label displayed on the button</p>\n",
              type: "String"
            }, {
              name: "value",
              description: "<p>value of the button</p>\n",
              type: "String",
              optional: !0
            }],
            class: "p5",
            module: "DOM"
          },
          createCheckbox: {
            name: "createCheckbox",
            params: [{
              name: "label",
              description: "<p>label displayed after checkbox</p>\n",
              type: "String",
              optional: !0
            }, {
              name: "value",
              description: "<p>value of the checkbox; checked is true, unchecked is false</p>\n",
              type: "Boolean",
              optional: !0
            }],
            class: "p5",
            module: "DOM"
          },
          createSelect: {
            name: "createSelect",
            class: "p5",
            module: "DOM",
            overloads: [{
              params: [{
                name: "multiple",
                description: "<p>true if dropdown should support multiple selections</p>\n",
                type: "Boolean",
                optional: !0
              }]
            }, {
              params: [{
                name: "existing",
                description: "<p>DOM select element</p>\n",
                type: "Object"
              }]
            }]
          },
          createRadio: {
            name: "createRadio",
            class: "p5",
            module: "DOM",
            overloads: [{
              params: [{
                name: "containerElement",
                description: "<p>An container HTML Element either a div\nor span inside which all existing radio inputs will be considered as options.</p>\n",
                type: "Object"
              }, {
                name: "name",
                description: "<p>A name parameter for each Input Element.</p>\n",
                type: "String",
                optional: !0
              }]
            }, {
              params: [{
                name: "name",
                description: "",
                type: "String"
              }]
            }, {
              params: []
            }]
          },
          createColorPicker: {
            name: "createColorPicker",
            params: [{
              name: "value",
              description: "<p>default color of element</p>\n",
              type: "String|p5.Color",
              optional: !0
            }],
            class: "p5",
            module: "DOM"
          },
          createInput: {
            name: "createInput",
            class: "p5",
            module: "DOM",
            overloads: [{
              params: [{
                name: "value",
                description: "<p>default value of the input box</p>\n",
                type: "String"
              }, {
                name: "type",
                description: "<p>type of text, ie text, password etc. Defaults to text.\n  Needs a value to be specified first.</p>\n",
                type: "String",
                optional: !0
              }]
            }, {
              params: [{
                name: "value",
                description: "",
                type: "String",
                optional: !0
              }]
            }]
          },
          createFileInput: {
            name: "createFileInput",
            params: [{
              name: "callback",
              description: "<p>callback function for when a file is loaded</p>\n",
              type: "Function"
            }, {
              name: "multiple",
              description: "<p>optional, to allow multiple files to be selected</p>\n",
              type: "Boolean",
              optional: !0
            }],
            class: "p5",
            module: "DOM"
          },
          createVideo: {
            name: "createVideo",
            params: [{
              name: "src",
              description: "<p>path to a video file, or array of paths for\n                            supporting different browsers</p>\n",
              type: "String|String[]"
            }, {
              name: "callback",
              description: "<p>callback function to be called upon\n                            'canplaythrough' event fire, that is, when the\n                            browser can play the media, and estimates that\n                            enough data has been loaded to play the media\n                            up to its end without having to stop for\n                            further buffering of content</p>\n",
              type: "Function",
              optional: !0
            }],
            class: "p5",
            module: "DOM"
          },
          createAudio: {
            name: "createAudio",
            params: [{
              name: "src",
              description: "<p>path to an audio file, or array of paths\n                            for supporting different browsers</p>\n",
              type: "String|String[]",
              optional: !0
            }, {
              name: "callback",
              description: "<p>callback function to be called upon\n                            'canplaythrough' event fire, that is, when the\n                            browser can play the media, and estimates that\n                            enough data has been loaded to play the media\n                            up to its end without having to stop for\n                            further buffering of content</p>\n",
              type: "Function",
              optional: !0
            }],
            class: "p5",
            module: "DOM"
          },
          VIDEO: {
            name: "VIDEO",
            class: "p5",
            module: "DOM"
          },
          AUDIO: {
            name: "AUDIO",
            class: "p5",
            module: "DOM"
          },
          createCapture: {
            name: "createCapture",
            params: [{
              name: "type",
              description: "<p>type of capture, either VIDEO or\n                                  AUDIO if none specified, default both,\n                                  or a Constraints object</p>\n",
              type: "String|Constant|Object"
            }, {
              name: "callback",
              description: "<p>function to be called once\n                                  stream has loaded</p>\n",
              type: "Function",
              optional: !0
            }],
            class: "p5",
            module: "DOM"
          },
          createElement: {
            name: "createElement",
            params: [{
              name: "tag",
              description: "<p>tag for the new element</p>\n",
              type: "String"
            }, {
              name: "content",
              description: "<p>html content to be inserted into the element</p>\n",
              type: "String",
              optional: !0
            }],
            class: "p5",
            module: "DOM"
          },
          deviceOrientation: {
            name: "deviceOrientation",
            class: "p5",
            module: "Events"
          },
          accelerationX: {
            name: "accelerationX",
            class: "p5",
            module: "Events"
          },
          accelerationY: {
            name: "accelerationY",
            class: "p5",
            module: "Events"
          },
          accelerationZ: {
            name: "accelerationZ",
            class: "p5",
            module: "Events"
          },
          pAccelerationX: {
            name: "pAccelerationX",
            class: "p5",
            module: "Events"
          },
          pAccelerationY: {
            name: "pAccelerationY",
            class: "p5",
            module: "Events"
          },
          pAccelerationZ: {
            name: "pAccelerationZ",
            class: "p5",
            module: "Events"
          },
          rotationX: {
            name: "rotationX",
            class: "p5",
            module: "Events"
          },
          rotationY: {
            name: "rotationY",
            class: "p5",
            module: "Events"
          },
          rotationZ: {
            name: "rotationZ",
            class: "p5",
            module: "Events"
          },
          pRotationX: {
            name: "pRotationX",
            class: "p5",
            module: "Events"
          },
          pRotationY: {
            name: "pRotationY",
            class: "p5",
            module: "Events"
          },
          pRotationZ: {
            name: "pRotationZ",
            class: "p5",
            module: "Events"
          },
          turnAxis: {
            name: "turnAxis",
            class: "p5",
            module: "Events"
          },
          setMoveThreshold: {
            name: "setMoveThreshold",
            params: [{
              name: "value",
              description: "<p>The threshold value</p>\n",
              type: "Number"
            }],
            class: "p5",
            module: "Events"
          },
          setShakeThreshold: {
            name: "setShakeThreshold",
            params: [{
              name: "value",
              description: "<p>The threshold value</p>\n",
              type: "Number"
            }],
            class: "p5",
            module: "Events"
          },
          deviceMoved: {
            name: "deviceMoved",
            class: "p5",
            module: "Events"
          },
          deviceTurned: {
            name: "deviceTurned",
            class: "p5",
            module: "Events"
          },
          deviceShaken: {
            name: "deviceShaken",
            class: "p5",
            module: "Events"
          },
          keyIsPressed: {
            name: "keyIsPressed",
            class: "p5",
            module: "Events"
          },
          key: {
            name: "key",
            class: "p5",
            module: "Events"
          },
          keyCode: {
            name: "keyCode",
            class: "p5",
            module: "Events"
          },
          keyPressed: {
            name: "keyPressed",
            class: "p5",
            module: "Events"
          },
          keyReleased: {
            name: "keyReleased",
            class: "p5",
            module: "Events"
          },
          keyTyped: {
            name: "keyTyped",
            class: "p5",
            module: "Events"
          },
          keyIsDown: {
            name: "keyIsDown",
            params: [{
              name: "code",
              description: "<p>The key to check for.</p>\n",
              type: "Number"
            }],
            class: "p5",
            module: "Events"
          },
          movedX: {
            name: "movedX",
            class: "p5",
            module: "Events"
          },
          movedY: {
            name: "movedY",
            class: "p5",
            module: "Events"
          },
          mouseX: {
            name: "mouseX",
            class: "p5",
            module: "Events"
          },
          mouseY: {
            name: "mouseY",
            class: "p5",
            module: "Events"
          },
          pmouseX: {
            name: "pmouseX",
            class: "p5",
            module: "Events"
          },
          pmouseY: {
            name: "pmouseY",
            class: "p5",
            module: "Events"
          },
          winMouseX: {
            name: "winMouseX",
            class: "p5",
            module: "Events"
          },
          winMouseY: {
            name: "winMouseY",
            class: "p5",
            module: "Events"
          },
          pwinMouseX: {
            name: "pwinMouseX",
            class: "p5",
            module: "Events"
          },
          pwinMouseY: {
            name: "pwinMouseY",
            class: "p5",
            module: "Events"
          },
          mouseButton: {
            name: "mouseButton",
            class: "p5",
            module: "Events"
          },
          mouseIsPressed: {
            name: "mouseIsPressed",
            class: "p5",
            module: "Events"
          },
          mouseMoved: {
            name: "mouseMoved",
            params: [{
              name: "event",
              description: "<p>optional MouseEvent callback argument.</p>\n",
              type: "Object",
              optional: !0
            }],
            class: "p5",
            module: "Events"
          },
          mouseDragged: {
            name: "mouseDragged",
            params: [{
              name: "event",
              description: "<p>optional MouseEvent callback argument.</p>\n",
              type: "Object",
              optional: !0
            }],
            class: "p5",
            module: "Events"
          },
          mousePressed: {
            name: "mousePressed",
            params: [{
              name: "event",
              description: "<p>optional MouseEvent callback argument.</p>\n",
              type: "Object",
              optional: !0
            }],
            class: "p5",
            module: "Events"
          },
          mouseReleased: {
            name: "mouseReleased",
            params: [{
              name: "event",
              description: "<p>optional MouseEvent callback argument.</p>\n",
              type: "Object",
              optional: !0
            }],
            class: "p5",
            module: "Events"
          },
          mouseClicked: {
            name: "mouseClicked",
            params: [{
              name: "event",
              description: "<p>optional MouseEvent callback argument.</p>\n",
              type: "Object",
              optional: !0
            }],
            class: "p5",
            module: "Events"
          },
          doubleClicked: {
            name: "doubleClicked",
            params: [{
              name: "event",
              description: "<p>optional MouseEvent callback argument.</p>\n",
              type: "Object",
              optional: !0
            }],
            class: "p5",
            module: "Events"
          },
          mouseWheel: {
            name: "mouseWheel",
            params: [{
              name: "event",
              description: "<p>optional WheelEvent callback argument.</p>\n",
              type: "Object",
              optional: !0
            }],
            class: "p5",
            module: "Events"
          },
          requestPointerLock: {
            name: "requestPointerLock",
            class: "p5",
            module: "Events"
          },
          exitPointerLock: {
            name: "exitPointerLock",
            class: "p5",
            module: "Events"
          },
          touches: {
            name: "touches",
            class: "p5",
            module: "Events"
          },
          touchStarted: {
            name: "touchStarted",
            params: [{
              name: "event",
              description: "<p>optional TouchEvent callback argument.</p>\n",
              type: "Object",
              optional: !0
            }],
            class: "p5",
            module: "Events"
          },
          touchMoved: {
            name: "touchMoved",
            params: [{
              name: "event",
              description: "<p>optional TouchEvent callback argument.</p>\n",
              type: "Object",
              optional: !0
            }],
            class: "p5",
            module: "Events"
          },
          touchEnded: {
            name: "touchEnded",
            params: [{
              name: "event",
              description: "<p>optional TouchEvent callback argument.</p>\n",
              type: "Object",
              optional: !0
            }],
            class: "p5",
            module: "Events"
          },
          createImage: {
            name: "createImage",
            params: [{
              name: "width",
              description: "<p>width in pixels</p>\n",
              type: "Integer"
            }, {
              name: "height",
              description: "<p>height in pixels</p>\n",
              type: "Integer"
            }],
            class: "p5",
            module: "Image"
          },
          saveCanvas: {
            name: "saveCanvas",
            class: "p5",
            module: "Image",
            overloads: [{
              params: [{
                name: "selectedCanvas",
                description: "<p>a variable\n                                representing a specific html5 canvas (optional)</p>\n",
                type: "p5.Element|HTMLCanvasElement"
              }, {
                name: "filename",
                description: "",
                type: "String",
                optional: !0
              }, {
                name: "extension",
                description: "<p>'jpg' or 'png'</p>\n",
                type: "String",
                optional: !0
              }]
            }, {
              params: [{
                name: "filename",
                description: "",
                type: "String",
                optional: !0
              }, {
                name: "extension",
                description: "",
                type: "String",
                optional: !0
              }]
            }]
          },
          saveFrames: {
            name: "saveFrames",
            params: [{
              name: "filename",
              description: "",
              type: "String"
            }, {
              name: "extension",
              description: "<p>'jpg' or 'png'</p>\n",
              type: "String"
            }, {
              name: "duration",
              description: "<p>Duration in seconds to save the frames for.</p>\n",
              type: "Number"
            }, {
              name: "framerate",
              description: "<p>Framerate to save the frames in.</p>\n",
              type: "Number"
            }, {
              name: "callback",
              description: "<p>A callback function that will be executed\n                                to handle the image data. This function\n                                should accept an array as argument. The\n                                array will contain the specified number of\n                                frames of objects. Each object has three\n                                properties: imageData - an\n                                image/octet-stream, filename and extension.</p>\n",
              type: "Function(Array)",
              optional: !0
            }],
            class: "p5",
            module: "Image"
          },
          loadImage: {
            name: "loadImage",
            params: [{
              name: "path",
              description: "<p>Path of the image to be loaded</p>\n",
              type: "String"
            }, {
              name: "successCallback",
              description: '<p>Function to be called once\n                               the image is loaded. Will be passed the\n                               <a href="#/p5.Image">p5.Image</a>.</p>\n',
              type: "function(p5.Image)",
              optional: !0
            }, {
              name: "failureCallback",
              description: "<p>called with event error if\n                               the image fails to load.</p>\n",
              type: "Function(Event)",
              optional: !0
            }],
            class: "p5",
            module: "Image"
          },
          image: {
            name: "image",
            class: "p5",
            module: "Image",
            overloads: [{
              params: [{
                name: "img",
                description: "<p>the image to display</p>\n",
                type: "p5.Image|p5.Element"
              }, {
                name: "x",
                description: "<p>the x-coordinate of the top-left corner of the image</p>\n",
                type: "Number"
              }, {
                name: "y",
                description: "<p>the y-coordinate of the top-left corner of the image</p>\n",
                type: "Number"
              }, {
                name: "width",
                description: "<p>the width to draw the image</p>\n",
                type: "Number",
                optional: !0
              }, {
                name: "height",
                description: "<p>the height to draw the image</p>\n",
                type: "Number",
                optional: !0
              }]
            }, {
              params: [{
                name: "img",
                description: "",
                type: "p5.Image|p5.Element"
              }, {
                name: "dx",
                description: "<p>the x-coordinate of the destination\n                          rectangle in which to draw the source image</p>\n",
                type: "Number"
              }, {
                name: "dy",
                description: "<p>the y-coordinate of the destination\n                          rectangle in which to draw the source image</p>\n",
                type: "Number"
              }, {
                name: "dWidth",
                description: "<p>the width of the destination rectangle</p>\n",
                type: "Number"
              }, {
                name: "dHeight",
                description: "<p>the height of the destination rectangle</p>\n",
                type: "Number"
              }, {
                name: "sx",
                description: "<p>the x-coordinate of the subsection of the source\nimage to draw into the destination rectangle</p>\n",
                type: "Number"
              }, {
                name: "sy",
                description: "<p>the y-coordinate of the subsection of the source\nimage to draw into the destination rectangle</p>\n",
                type: "Number"
              }, {
                name: "sWidth",
                description: "<p>the width of the subsection of the\n                          source image to draw into the destination\n                          rectangle</p>\n",
                type: "Number",
                optional: !0
              }, {
                name: "sHeight",
                description: "<p>the height of the subsection of the\n                           source image to draw into the destination rectangle</p>\n",
                type: "Number",
                optional: !0
              }]
            }]
          },
          tint: {
            name: "tint",
            class: "p5",
            module: "Image",
            overloads: [{
              params: [{
                name: "v1",
                description: "<p>red or hue value relative to\n                                the current color range</p>\n",
                type: "Number"
              }, {
                name: "v2",
                description: "<p>green or saturation value\n                                relative to the current color range</p>\n",
                type: "Number"
              }, {
                name: "v3",
                description: "<p>blue or brightness value\n                                relative to the current color range</p>\n",
                type: "Number"
              }, {
                name: "alpha",
                description: "",
                type: "Number",
                optional: !0
              }]
            }, {
              params: [{
                name: "value",
                description: "<p>a color string</p>\n",
                type: "String"
              }]
            }, {
              params: [{
                name: "gray",
                description: "<p>a gray value</p>\n",
                type: "Number"
              }, {
                name: "alpha",
                description: "",
                type: "Number",
                optional: !0
              }]
            }, {
              params: [{
                name: "values",
                description: "<p>an array containing the red,green,blue &\n                                and alpha components of the color</p>\n",
                type: "Number[]"
              }]
            }, {
              params: [{
                name: "color",
                description: "<p>the tint color</p>\n",
                type: "p5.Color"
              }]
            }]
          },
          noTint: {
            name: "noTint",
            class: "p5",
            module: "Image"
          },
          imageMode: {
            name: "imageMode",
            params: [{
              name: "mode",
              description: "<p>either CORNER, CORNERS, or CENTER</p>\n",
              type: "Constant"
            }],
            class: "p5",
            module: "Image"
          },
          pixels: {
            name: "pixels",
            class: "p5",
            module: "Image"
          },
          blend: {
            name: "blend",
            class: "p5",
            module: "Image",
            overloads: [{
              params: [{
                name: "srcImage",
                description: "<p>source image</p>\n",
                type: "p5.Image"
              }, {
                name: "sx",
                description: "<p>X coordinate of the source's upper left corner</p>\n",
                type: "Integer"
              }, {
                name: "sy",
                description: "<p>Y coordinate of the source's upper left corner</p>\n",
                type: "Integer"
              }, {
                name: "sw",
                description: "<p>source image width</p>\n",
                type: "Integer"
              }, {
                name: "sh",
                description: "<p>source image height</p>\n",
                type: "Integer"
              }, {
                name: "dx",
                description: "<p>X coordinate of the destination's upper left corner</p>\n",
                type: "Integer"
              }, {
                name: "dy",
                description: "<p>Y coordinate of the destination's upper left corner</p>\n",
                type: "Integer"
              }, {
                name: "dw",
                description: "<p>destination image width</p>\n",
                type: "Integer"
              }, {
                name: "dh",
                description: "<p>destination image height</p>\n",
                type: "Integer"
              }, {
                name: "blendMode",
                description: "<p>the blend mode. either\n    BLEND, DARKEST, LIGHTEST, DIFFERENCE,\n    MULTIPLY, EXCLUSION, SCREEN, REPLACE, OVERLAY, HARD_LIGHT,\n    SOFT_LIGHT, DODGE, BURN, ADD or NORMAL.</p>\n",
                type: "Constant"
              }]
            }, {
              params: [{
                name: "sx",
                description: "",
                type: "Integer"
              }, {
                name: "sy",
                description: "",
                type: "Integer"
              }, {
                name: "sw",
                description: "",
                type: "Integer"
              }, {
                name: "sh",
                description: "",
                type: "Integer"
              }, {
                name: "dx",
                description: "",
                type: "Integer"
              }, {
                name: "dy",
                description: "",
                type: "Integer"
              }, {
                name: "dw",
                description: "",
                type: "Integer"
              }, {
                name: "dh",
                description: "",
                type: "Integer"
              }, {
                name: "blendMode",
                description: "",
                type: "Constant"
              }]
            }]
          },
          copy: {
            name: "copy",
            class: "p5",
            module: "Image",
            overloads: [{
              params: [{
                name: "srcImage",
                description: "<p>source image</p>\n",
                type: "p5.Image|p5.Element"
              }, {
                name: "sx",
                description: "<p>X coordinate of the source's upper left corner</p>\n",
                type: "Integer"
              }, {
                name: "sy",
                description: "<p>Y coordinate of the source's upper left corner</p>\n",
                type: "Integer"
              }, {
                name: "sw",
                description: "<p>source image width</p>\n",
                type: "Integer"
              }, {
                name: "sh",
                description: "<p>source image height</p>\n",
                type: "Integer"
              }, {
                name: "dx",
                description: "<p>X coordinate of the destination's upper left corner</p>\n",
                type: "Integer"
              }, {
                name: "dy",
                description: "<p>Y coordinate of the destination's upper left corner</p>\n",
                type: "Integer"
              }, {
                name: "dw",
                description: "<p>destination image width</p>\n",
                type: "Integer"
              }, {
                name: "dh",
                description: "<p>destination image height</p>\n",
                type: "Integer"
              }]
            }, {
              params: [{
                name: "sx",
                description: "",
                type: "Integer"
              }, {
                name: "sy",
                description: "",
                type: "Integer"
              }, {
                name: "sw",
                description: "",
                type: "Integer"
              }, {
                name: "sh",
                description: "",
                type: "Integer"
              }, {
                name: "dx",
                description: "",
                type: "Integer"
              }, {
                name: "dy",
                description: "",
                type: "Integer"
              }, {
                name: "dw",
                description: "",
                type: "Integer"
              }, {
                name: "dh",
                description: "",
                type: "Integer"
              }]
            }]
          },
          filter: {
            name: "filter",
            params: [{
              name: "filterType",
              description: "<p>either THRESHOLD, GRAY, OPAQUE, INVERT,\n                               POSTERIZE, BLUR, ERODE, DILATE or BLUR.\n                               See Filters.js for docs on\n                               each available filter</p>\n",
              type: "Constant"
            }, {
              name: "filterParam",
              description: "<p>an optional parameter unique\n                               to each filter, see above</p>\n",
              type: "Number",
              optional: !0
            }],
            class: "p5",
            module: "Image"
          },
          get: {
            name: "get",
            class: "p5",
            module: "Image",
            overloads: [{
              params: [{
                name: "x",
                description: "<p>x-coordinate of the pixel</p>\n",
                type: "Number"
              }, {
                name: "y",
                description: "<p>y-coordinate of the pixel</p>\n",
                type: "Number"
              }, {
                name: "w",
                description: "<p>width</p>\n",
                type: "Number"
              }, {
                name: "h",
                description: "<p>height</p>\n",
                type: "Number"
              }]
            }, {
              params: []
            }, {
              params: [{
                name: "x",
                description: "",
                type: "Number"
              }, {
                name: "y",
                description: "",
                type: "Number"
              }]
            }]
          },
          loadPixels: {
            name: "loadPixels",
            class: "p5",
            module: "Image"
          },
          set: {
            name: "set",
            params: [{
              name: "x",
              description: "<p>x-coordinate of the pixel</p>\n",
              type: "Number"
            }, {
              name: "y",
              description: "<p>y-coordinate of the pixel</p>\n",
              type: "Number"
            }, {
              name: "c",
              description: '<p>insert a grayscale value | a pixel array |\n                               a <a href="#/p5.Color">p5.Color</a> object | a <a href="#/p5.Image">p5.Image</a> to copy</p>\n',
              type: "Number|Number[]|Object"
            }],
            class: "p5",
            module: "Image"
          },
          updatePixels: {
            name: "updatePixels",
            params: [{
              name: "x",
              description: "<p>x-coordinate of the upper-left corner of region\n                        to update</p>\n",
              type: "Number",
              optional: !0
            }, {
              name: "y",
              description: "<p>y-coordinate of the upper-left corner of region\n                        to update</p>\n",
              type: "Number",
              optional: !0
            }, {
              name: "w",
              description: "<p>width of region to update</p>\n",
              type: "Number",
              optional: !0
            }, {
              name: "h",
              description: "<p>height of region to update</p>\n",
              type: "Number",
              optional: !0
            }],
            class: "p5",
            module: "Image"
          },
          loadJSON: {
            name: "loadJSON",
            class: "p5",
            module: "IO",
            overloads: [{
              params: [{
                name: "path",
                description: "<p>name of the file or url to load</p>\n",
                type: "String"
              }, {
                name: "jsonpOptions",
                description: "<p>options object for jsonp related settings</p>\n",
                type: "Object",
                optional: !0
              }, {
                name: "datatype",
                description: '<p>"json" or "jsonp"</p>\n',
                type: "String",
                optional: !0
              }, {
                name: "callback",
                description: '<p>function to be executed after\n                                   <a href="#/p5/loadJSON">loadJSON()</a> completes, data is passed\n                                   in as first argument</p>\n',
                type: "Function",
                optional: !0
              }, {
                name: "errorCallback",
                description: "<p>function to be executed if\n                                   there is an error, response is passed\n                                   in as first argument</p>\n",
                type: "Function",
                optional: !0
              }]
            }, {
              params: [{
                name: "path",
                description: "",
                type: "String"
              }, {
                name: "datatype",
                description: "",
                type: "String"
              }, {
                name: "callback",
                description: "",
                type: "Function",
                optional: !0
              }, {
                name: "errorCallback",
                description: "",
                type: "Function",
                optional: !0
              }]
            }, {
              params: [{
                name: "path",
                description: "",
                type: "String"
              }, {
                name: "callback",
                description: "",
                type: "Function"
              }, {
                name: "errorCallback",
                description: "",
                type: "Function",
                optional: !0
              }]
            }]
          },
          loadStrings: {
            name: "loadStrings",
            params: [{
              name: "filename",
              description: "<p>name of the file or url to load</p>\n",
              type: "String"
            }, {
              name: "callback",
              description: '<p>function to be executed after <a href="#/p5/loadStrings">loadStrings()</a>\n                              completes, Array is passed in as first\n                              argument</p>\n',
              type: "Function",
              optional: !0
            }, {
              name: "errorCallback",
              description: "<p>function to be executed if\n                              there is an error, response is passed\n                              in as first argument</p>\n",
              type: "Function",
              optional: !0
            }],
            class: "p5",
            module: "IO"
          },
          loadTable: {
            name: "loadTable",
            params: [{
              name: "filename",
              description: "<p>name of the file or URL to load</p>\n",
              type: "String"
            }, {
              name: "extension",
              description: '<p>parse the table by comma-separated values "csv", semicolon-separated\n                                     values "ssv", or tab-separated values "tsv"</p>\n',
              type: "String",
              optional: !0
            }, {
              name: "header",
              description: '<p>"header" to indicate table has header row</p>\n',
              type: "String",
              optional: !0
            }, {
              name: "callback",
              description: '<p>function to be executed after\n                                     <a href="#/p5/loadTable">loadTable()</a> completes. On success, the\n                                     <a href="#/p5.Table">Table</a> object is passed in as the\n                                     first argument.</p>\n',
              type: "Function",
              optional: !0
            }, {
              name: "errorCallback",
              description: "<p>function to be executed if\n                                     there is an error, response is passed\n                                     in as first argument</p>\n",
              type: "Function",
              optional: !0
            }],
            class: "p5",
            module: "IO"
          },
          loadXML: {
            name: "loadXML",
            params: [{
              name: "filename",
              description: "<p>name of the file or URL to load</p>\n",
              type: "String"
            }, {
              name: "callback",
              description: '<p>function to be executed after <a href="#/p5/loadXML">loadXML()</a>\n                              completes, XML object is passed in as\n                              first argument</p>\n',
              type: "Function",
              optional: !0
            }, {
              name: "errorCallback",
              description: "<p>function to be executed if\n                              there is an error, response is passed\n                              in as first argument</p>\n",
              type: "Function",
              optional: !0
            }],
            class: "p5",
            module: "IO"
          },
          loadBytes: {
            name: "loadBytes",
            params: [{
              name: "file",
              description: "<p>name of the file or URL to load</p>\n",
              type: "String"
            }, {
              name: "callback",
              description: '<p>function to be executed after <a href="#/p5/loadBytes">loadBytes()</a>\n                                   completes</p>\n',
              type: "Function",
              optional: !0
            }, {
              name: "errorCallback",
              description: "<p>function to be executed if there\n                                   is an error</p>\n",
              type: "Function",
              optional: !0
            }],
            class: "p5",
            module: "IO"
          },
          httpGet: {
            name: "httpGet",
            class: "p5",
            module: "IO",
            overloads: [{
              params: [{
                name: "path",
                description: "<p>name of the file or url to load</p>\n",
                type: "String"
              }, {
                name: "datatype",
                description: '<p>"json", "jsonp", "binary", "arrayBuffer",\n                                   "xml", or "text"</p>\n',
                type: "String",
                optional: !0
              }, {
                name: "data",
                description: "<p>param data passed sent with request</p>\n",
                type: "Object|Boolean",
                optional: !0
              }, {
                name: "callback",
                description: '<p>function to be executed after\n                                   <a href="#/p5/httpGet">httpGet()</a> completes, data is passed in\n                                   as first argument</p>\n',
                type: "Function",
                optional: !0
              }, {
                name: "errorCallback",
                description: "<p>function to be executed if\n                                   there is an error, response is passed\n                                   in as first argument</p>\n",
                type: "Function",
                optional: !0
              }]
            }, {
              params: [{
                name: "path",
                description: "",
                type: "String"
              }, {
                name: "data",
                description: "",
                type: "Object|Boolean"
              }, {
                name: "callback",
                description: "",
                type: "Function",
                optional: !0
              }, {
                name: "errorCallback",
                description: "",
                type: "Function",
                optional: !0
              }]
            }, {
              params: [{
                name: "path",
                description: "",
                type: "String"
              }, {
                name: "callback",
                description: "",
                type: "Function"
              }, {
                name: "errorCallback",
                description: "",
                type: "Function",
                optional: !0
              }]
            }]
          },
          httpPost: {
            name: "httpPost",
            class: "p5",
            module: "IO",
            overloads: [{
              params: [{
                name: "path",
                description: "<p>name of the file or url to load</p>\n",
                type: "String"
              }, {
                name: "datatype",
                description: '<p>"json", "jsonp", "xml", or "text".\n                                   If omitted, <a href="#/p5/httpPost">httpPost()</a> will guess.</p>\n',
                type: "String",
                optional: !0
              }, {
                name: "data",
                description: "<p>param data passed sent with request</p>\n",
                type: "Object|Boolean",
                optional: !0
              }, {
                name: "callback",
                description: '<p>function to be executed after\n                                   <a href="#/p5/httpPost">httpPost()</a> completes, data is passed in\n                                   as first argument</p>\n',
                type: "Function",
                optional: !0
              }, {
                name: "errorCallback",
                description: "<p>function to be executed if\n                                   there is an error, response is passed\n                                   in as first argument</p>\n",
                type: "Function",
                optional: !0
              }]
            }, {
              params: [{
                name: "path",
                description: "",
                type: "String"
              }, {
                name: "data",
                description: "",
                type: "Object|Boolean"
              }, {
                name: "callback",
                description: "",
                type: "Function",
                optional: !0
              }, {
                name: "errorCallback",
                description: "",
                type: "Function",
                optional: !0
              }]
            }, {
              params: [{
                name: "path",
                description: "",
                type: "String"
              }, {
                name: "callback",
                description: "",
                type: "Function"
              }, {
                name: "errorCallback",
                description: "",
                type: "Function",
                optional: !0
              }]
            }]
          },
          httpDo: {
            name: "httpDo",
            class: "p5",
            module: "IO",
            overloads: [{
              params: [{
                name: "path",
                description: "<p>name of the file or url to load</p>\n",
                type: "String"
              }, {
                name: "method",
                description: '<p>either "GET", "POST", or "PUT",\n                                   defaults to "GET"</p>\n',
                type: "String",
                optional: !0
              }, {
                name: "datatype",
                description: '<p>"json", "jsonp", "xml", or "text"</p>\n',
                type: "String",
                optional: !0
              }, {
                name: "data",
                description: "<p>param data passed sent with request</p>\n",
                type: "Object",
                optional: !0
              }, {
                name: "callback",
                description: '<p>function to be executed after\n                                   <a href="#/p5/httpGet">httpGet()</a> completes, data is passed in\n                                   as first argument</p>\n',
                type: "Function",
                optional: !0
              }, {
                name: "errorCallback",
                description: "<p>function to be executed if\n                                   there is an error, response is passed\n                                   in as first argument</p>\n",
                type: "Function",
                optional: !0
              }]
            }, {
              params: [{
                name: "path",
                description: "",
                type: "String"
              }, {
                name: "options",
                description: '<p>Request object options as documented in the\n                                   "fetch" API\n<a href="https://developer.mozilla.org/en/docs/Web/API/Fetch_API">reference</a></p>\n',
                type: "Object"
              }, {
                name: "callback",
                description: "",
                type: "Function",
                optional: !0
              }, {
                name: "errorCallback",
                description: "",
                type: "Function",
                optional: !0
              }]
            }]
          },
          createWriter: {
            name: "createWriter",
            params: [{
              name: "name",
              description: "<p>name of the file to be created</p>\n",
              type: "String"
            }, {
              name: "extension",
              description: "",
              type: "String",
              optional: !0
            }],
            class: "p5",
            module: "IO"
          },
          save: {
            name: "save",
            params: [{
              name: "objectOrFilename",
              description: "<p>If filename is provided, will\n                                           save canvas as an image with\n                                           either png or jpg extension\n                                           depending on the filename.\n                                           If object is provided, will\n                                           save depending on the object\n                                           and filename (see examples\n                                           above).</p>\n",
              type: "Object|String",
              optional: !0
            }, {
              name: "filename",
              description: "<p>If an object is provided as the first\n                             parameter, then the second parameter\n                             indicates the filename,\n                             and should include an appropriate\n                             file extension (see examples above).</p>\n",
              type: "String",
              optional: !0
            }, {
              name: "options",
              description: "<p>Additional options depend on\n                          filetype. For example, when saving JSON,\n                          <code>true</code> indicates that the\n                          output will be optimized for filesize,\n                          rather than readability.</p>\n",
              type: "Boolean|String",
              optional: !0
            }],
            class: "p5",
            module: "IO"
          },
          saveJSON: {
            name: "saveJSON",
            params: [{
              name: "json",
              description: "",
              type: "Array|Object"
            }, {
              name: "filename",
              description: "",
              type: "String"
            }, {
              name: "optimize",
              description: "<p>If true, removes line breaks\n                               and spaces from the output\n                               file to optimize filesize\n                               (but not readability).</p>\n",
              type: "Boolean",
              optional: !0
            }],
            class: "p5",
            module: "IO"
          },
          saveStrings: {
            name: "saveStrings",
            params: [{
              name: "list",
              description: "<p>string array to be written</p>\n",
              type: "String[]"
            }, {
              name: "filename",
              description: "<p>filename for output</p>\n",
              type: "String"
            }, {
              name: "extension",
              description: "<p>the filename's extension</p>\n",
              type: "String",
              optional: !0
            }, {
              name: "isCRLF",
              description: "<p>if true, change line-break to CRLF</p>\n",
              type: "Boolean",
              optional: !0
            }],
            class: "p5",
            module: "IO"
          },
          saveTable: {
            name: "saveTable",
            params: [{
              name: "Table",
              description: '<p>the <a href="#/p5.Table">Table</a> object to save to a file</p>\n',
              type: "p5.Table"
            }, {
              name: "filename",
              description: "<p>the filename to which the Table should be saved</p>\n",
              type: "String"
            }, {
              name: "options",
              description: '<p>can be one of "tsv", "csv", or "html"</p>\n',
              type: "String",
              optional: !0
            }],
            class: "p5",
            module: "IO"
          },
          abs: {
            name: "abs",
            params: [{
              name: "n",
              description: "<p>number to compute</p>\n",
              type: "Number"
            }],
            class: "p5",
            module: "Math"
          },
          ceil: {
            name: "ceil",
            params: [{
              name: "n",
              description: "<p>number to round up</p>\n",
              type: "Number"
            }],
            class: "p5",
            module: "Math"
          },
          constrain: {
            name: "constrain",
            params: [{
              name: "n",
              description: "<p>number to constrain</p>\n",
              type: "Number"
            }, {
              name: "low",
              description: "<p>minimum limit</p>\n",
              type: "Number"
            }, {
              name: "high",
              description: "<p>maximum limit</p>\n",
              type: "Number"
            }],
            class: "p5",
            module: "Math"
          },
          dist: {
            name: "dist",
            class: "p5",
            module: "Math",
            overloads: [{
              params: [{
                name: "x1",
                description: "<p>x-coordinate of the first point</p>\n",
                type: "Number"
              }, {
                name: "y1",
                description: "<p>y-coordinate of the first point</p>\n",
                type: "Number"
              }, {
                name: "x2",
                description: "<p>x-coordinate of the second point</p>\n",
                type: "Number"
              }, {
                name: "y2",
                description: "<p>y-coordinate of the second point</p>\n",
                type: "Number"
              }]
            }, {
              params: [{
                name: "x1",
                description: "",
                type: "Number"
              }, {
                name: "y1",
                description: "",
                type: "Number"
              }, {
                name: "z1",
                description: "<p>z-coordinate of the first point</p>\n",
                type: "Number"
              }, {
                name: "x2",
                description: "",
                type: "Number"
              }, {
                name: "y2",
                description: "",
                type: "Number"
              }, {
                name: "z2",
                description: "<p>z-coordinate of the second point</p>\n",
                type: "Number"
              }]
            }]
          },
          exp: {
            name: "exp",
            params: [{
              name: "n",
              description: "<p>exponent to raise</p>\n",
              type: "Number"
            }],
            class: "p5",
            module: "Math"
          },
          floor: {
            name: "floor",
            params: [{
              name: "n",
              description: "<p>number to round down</p>\n",
              type: "Number"
            }],
            class: "p5",
            module: "Math"
          },
          lerp: {
            name: "lerp",
            params: [{
              name: "start",
              description: "<p>first value</p>\n",
              type: "Number"
            }, {
              name: "stop",
              description: "<p>second value</p>\n",
              type: "Number"
            }, {
              name: "amt",
              description: "<p>number</p>\n",
              type: "Number"
            }],
            class: "p5",
            module: "Math"
          },
          log: {
            name: "log",
            params: [{
              name: "n",
              description: "<p>number greater than 0</p>\n",
              type: "Number"
            }],
            class: "p5",
            module: "Math"
          },
          mag: {
            name: "mag",
            params: [{
              name: "a",
              description: "<p>first value</p>\n",
              type: "Number"
            }, {
              name: "b",
              description: "<p>second value</p>\n",
              type: "Number"
            }],
            class: "p5",
            module: "Math"
          },
          map: {
            name: "map",
            params: [{
              name: "value",
              description: "<p>the incoming value to be converted</p>\n",
              type: "Number"
            }, {
              name: "start1",
              description: "<p>lower bound of the value's current range</p>\n",
              type: "Number"
            }, {
              name: "stop1",
              description: "<p>upper bound of the value's current range</p>\n",
              type: "Number"
            }, {
              name: "start2",
              description: "<p>lower bound of the value's target range</p>\n",
              type: "Number"
            }, {
              name: "stop2",
              description: "<p>upper bound of the value's target range</p>\n",
              type: "Number"
            }, {
              name: "withinBounds",
              description: "<p>constrain the value to the newly mapped range</p>\n",
              type: "Boolean",
              optional: !0
            }],
            class: "p5",
            module: "Math"
          },
          max: {
            name: "max",
            class: "p5",
            module: "Math",
            overloads: [{
              params: [{
                name: "n0",
                description: "<p>Number to compare</p>\n",
                type: "Number"
              }, {
                name: "n1",
                description: "<p>Number to compare</p>\n",
                type: "Number"
              }]
            }, {
              params: [{
                name: "nums",
                description: "<p>Numbers to compare</p>\n",
                type: "Number[]"
              }]
            }]
          },
          min: {
            name: "min",
            class: "p5",
            module: "Math",
            overloads: [{
              params: [{
                name: "n0",
                description: "<p>Number to compare</p>\n",
                type: "Number"
              }, {
                name: "n1",
                description: "<p>Number to compare</p>\n",
                type: "Number"
              }]
            }, {
              params: [{
                name: "nums",
                description: "<p>Numbers to compare</p>\n",
                type: "Number[]"
              }]
            }]
          },
          norm: {
            name: "norm",
            params: [{
              name: "value",
              description: "<p>incoming value to be normalized</p>\n",
              type: "Number"
            }, {
              name: "start",
              description: "<p>lower bound of the value's current range</p>\n",
              type: "Number"
            }, {
              name: "stop",
              description: "<p>upper bound of the value's current range</p>\n",
              type: "Number"
            }],
            class: "p5",
            module: "Math"
          },
          pow: {
            name: "pow",
            params: [{
              name: "n",
              description: "<p>base of the exponential expression</p>\n",
              type: "Number"
            }, {
              name: "e",
              description: "<p>power by which to raise the base</p>\n",
              type: "Number"
            }],
            class: "p5",
            module: "Math"
          },
          round: {
            name: "round",
            params: [{
              name: "n",
              description: "<p>number to round</p>\n",
              type: "Number"
            }, {
              name: "decimals",
              description: "<p>number of decimal places to round to, default is 0</p>\n",
              type: "Number",
              optional: !0
            }],
            class: "p5",
            module: "Math"
          },
          sq: {
            name: "sq",
            params: [{
              name: "n",
              description: "<p>number to square</p>\n",
              type: "Number"
            }],
            class: "p5",
            module: "Math"
          },
          sqrt: {
            name: "sqrt",
            params: [{
              name: "n",
              description: "<p>non-negative number to square root</p>\n",
              type: "Number"
            }],
            class: "p5",
            module: "Math"
          },
          fract: {
            name: "fract",
            params: [{
              name: "num",
              description: "<p>Number whose fractional part needs to be found out</p>\n",
              type: "Number"
            }],
            class: "p5",
            module: "Math"
          },
          createVector: {
            name: "createVector",
            params: [{
              name: "x",
              description: "<p>x component of the vector</p>\n",
              type: "Number",
              optional: !0
            }, {
              name: "y",
              description: "<p>y component of the vector</p>\n",
              type: "Number",
              optional: !0
            }, {
              name: "z",
              description: "<p>z component of the vector</p>\n",
              type: "Number",
              optional: !0
            }],
            class: "p5",
            module: "Math"
          },
          noise: {
            name: "noise",
            params: [{
              name: "x",
              description: "<p>x-coordinate in noise space</p>\n",
              type: "Number"
            }, {
              name: "y",
              description: "<p>y-coordinate in noise space</p>\n",
              type: "Number",
              optional: !0
            }, {
              name: "z",
              description: "<p>z-coordinate in noise space</p>\n",
              type: "Number",
              optional: !0
            }],
            class: "p5",
            module: "Math"
          },
          noiseDetail: {
            name: "noiseDetail",
            params: [{
              name: "lod",
              description: "<p>number of octaves to be used by the noise</p>\n",
              type: "Number"
            }, {
              name: "falloff",
              description: "<p>falloff factor for each octave</p>\n",
              type: "Number"
            }],
            class: "p5",
            module: "Math"
          },
          noiseSeed: {
            name: "noiseSeed",
            params: [{
              name: "seed",
              description: "<p>the seed value</p>\n",
              type: "Number"
            }],
            class: "p5",
            module: "Math"
          },
          randomSeed: {
            name: "randomSeed",
            params: [{
              name: "seed",
              description: "<p>the seed value</p>\n",
              type: "Number"
            }],
            class: "p5",
            module: "Math"
          },
          random: {
            name: "random",
            class: "p5",
            module: "Math",
            overloads: [{
              params: [{
                name: "min",
                description: "<p>the lower bound (inclusive)</p>\n",
                type: "Number",
                optional: !0
              }, {
                name: "max",
                description: "<p>the upper bound (exclusive)</p>\n",
                type: "Number",
                optional: !0
              }]
            }, {
              params: [{
                name: "choices",
                description: "<p>the array to choose from</p>\n",
                type: "Array"
              }]
            }]
          },
          randomGaussian: {
            name: "randomGaussian",
            params: [{
              name: "mean",
              description: "<p>the mean</p>\n",
              type: "Number"
            }, {
              name: "sd",
              description: "<p>the standard deviation</p>\n",
              type: "Number"
            }],
            class: "p5",
            module: "Math"
          },
          acos: {
            name: "acos",
            params: [{
              name: "value",
              description: "<p>the value whose arc cosine is to be returned</p>\n",
              type: "Number"
            }],
            class: "p5",
            module: "Math"
          },
          asin: {
            name: "asin",
            params: [{
              name: "value",
              description: "<p>the value whose arc sine is to be returned</p>\n",
              type: "Number"
            }],
            class: "p5",
            module: "Math"
          },
          atan: {
            name: "atan",
            params: [{
              name: "value",
              description: "<p>the value whose arc tangent is to be returned</p>\n",
              type: "Number"
            }],
            class: "p5",
            module: "Math"
          },
          atan2: {
            name: "atan2",
            params: [{
              name: "y",
              description: "<p>y-coordinate of the point</p>\n",
              type: "Number"
            }, {
              name: "x",
              description: "<p>x-coordinate of the point</p>\n",
              type: "Number"
            }],
            class: "p5",
            module: "Math"
          },
          cos: {
            name: "cos",
            params: [{
              name: "angle",
              description: "<p>the angle</p>\n",
              type: "Number"
            }],
            class: "p5",
            module: "Math"
          },
          sin: {
            name: "sin",
            params: [{
              name: "angle",
              description: "<p>the angle</p>\n",
              type: "Number"
            }],
            class: "p5",
            module: "Math"
          },
          tan: {
            name: "tan",
            params: [{
              name: "angle",
              description: "<p>the angle</p>\n",
              type: "Number"
            }],
            class: "p5",
            module: "Math"
          },
          degrees: {
            name: "degrees",
            params: [{
              name: "radians",
              description: "<p>the radians value to convert to degrees</p>\n",
              type: "Number"
            }],
            class: "p5",
            module: "Math"
          },
          radians: {
            name: "radians",
            params: [{
              name: "degrees",
              description: "<p>the degree value to convert to radians</p>\n",
              type: "Number"
            }],
            class: "p5",
            module: "Math"
          },
          angleMode: {
            name: "angleMode",
            params: [{
              name: "mode",
              description: "<p>either RADIANS or DEGREES</p>\n",
              type: "Constant"
            }],
            class: "p5",
            module: "Math"
          },
          textAlign: {
            name: "textAlign",
            class: "p5",
            module: "Typography",
            overloads: [{
              params: [{
                name: "horizAlign",
                description: "<p>horizontal alignment, either LEFT,\n                           CENTER, or RIGHT</p>\n",
                type: "Constant"
              }, {
                name: "vertAlign",
                description: "<p>vertical alignment, either TOP,\n                           BOTTOM, CENTER, or BASELINE</p>\n",
                type: "Constant",
                optional: !0
              }],
              chainable: 1
            }, {
              params: []
            }]
          },
          textLeading: {
            name: "textLeading",
            class: "p5",
            module: "Typography",
            overloads: [{
              params: [{
                name: "leading",
                description: "<p>the size in pixels for spacing between lines</p>\n",
                type: "Number"
              }],
              chainable: 1
            }, {
              params: []
            }]
          },
          textSize: {
            name: "textSize",
            class: "p5",
            module: "Typography",
            overloads: [{
              params: [{
                name: "theSize",
                description: "<p>the size of the letters in units of pixels</p>\n",
                type: "Number"
              }],
              chainable: 1
            }, {
              params: []
            }]
          },
          textStyle: {
            name: "textStyle",
            class: "p5",
            module: "Typography",
            overloads: [{
              params: [{
                name: "theStyle",
                description: "<p>styling for text, either NORMAL,\n                           ITALIC, BOLD or BOLDITALIC</p>\n",
                type: "Constant"
              }],
              chainable: 1
            }, {
              params: []
            }]
          },
          textWidth: {
            name: "textWidth",
            params: [{
              name: "theText",
              description: "<p>the String of characters to measure</p>\n",
              type: "String"
            }],
            class: "p5",
            module: "Typography"
          },
          textAscent: {
            name: "textAscent",
            class: "p5",
            module: "Typography"
          },
          textDescent: {
            name: "textDescent",
            class: "p5",
            module: "Typography"
          },
          loadFont: {
            name: "loadFont",
            params: [{
              name: "path",
              description: "<p>name of the file or url to load</p>\n",
              type: "String"
            }, {
              name: "callback",
              description: '<p>function to be executed after\n                                   <a href="#/p5/loadFont">loadFont()</a> completes</p>\n',
              type: "Function",
              optional: !0
            }, {
              name: "onError",
              description: "<p>function to be executed if\n                                   an error occurs</p>\n",
              type: "Function",
              optional: !0
            }],
            class: "p5",
            module: "Typography"
          },
          text: {
            name: "text",
            params: [{
              name: "str",
              description: "<p>the alphanumeric\n                                            symbols to be displayed</p>\n",
              type: "String|Object|Array|Number|Boolean"
            }, {
              name: "x",
              description: "<p>x-coordinate of text</p>\n",
              type: "Number"
            }, {
              name: "y",
              description: "<p>y-coordinate of text</p>\n",
              type: "Number"
            }, {
              name: "x2",
              description: '<p>by default, the width of the text box,\n                    see <a href="#/p5/rectMode">rectMode()</a> for more info</p>\n',
              type: "Number",
              optional: !0
            }, {
              name: "y2",
              description: '<p>by default, the height of the text box,\n                    see <a href="#/p5/rectMode">rectMode()</a> for more info</p>\n',
              type: "Number",
              optional: !0
            }],
            class: "p5",
            module: "Typography"
          },
          textFont: {
            name: "textFont",
            class: "p5",
            module: "Typography",
            overloads: [{
              params: []
            }, {
              params: [{
                name: "font",
                description: '<p>a font loaded via <a href="#/p5/loadFont">loadFont()</a>,\nor a String representing a <a href="https://mzl.la/2dOw8WD">web safe font</a>\n(a font that is generally available across all systems)</p>\n',
                type: "Object|String"
              }, {
                name: "size",
                description: "<p>the font size to use</p>\n",
                type: "Number",
                optional: !0
              }],
              chainable: 1
            }]
          },
          append: {
            name: "append",
            params: [{
              name: "array",
              description: "<p>Array to append</p>\n",
              type: "Array"
            }, {
              name: "value",
              description: "<p>to be added to the Array</p>\n",
              type: "Any"
            }],
            class: "p5",
            module: "Data"
          },
          arrayCopy: {
            name: "arrayCopy",
            class: "p5",
            module: "Data",
            overloads: [{
              params: [{
                name: "src",
                description: "<p>the source Array</p>\n",
                type: "Array"
              }, {
                name: "srcPosition",
                description: "<p>starting position in the source Array</p>\n",
                type: "Integer"
              }, {
                name: "dst",
                description: "<p>the destination Array</p>\n",
                type: "Array"
              }, {
                name: "dstPosition",
                description: "<p>starting position in the destination Array</p>\n",
                type: "Integer"
              }, {
                name: "length",
                description: "<p>number of Array elements to be copied</p>\n",
                type: "Integer"
              }]
            }, {
              params: [{
                name: "src",
                description: "",
                type: "Array"
              }, {
                name: "dst",
                description: "",
                type: "Array"
              }, {
                name: "length",
                description: "",
                type: "Integer",
                optional: !0
              }]
            }]
          },
          concat: {
            name: "concat",
            params: [{
              name: "a",
              description: "<p>first Array to concatenate</p>\n",
              type: "Array"
            }, {
              name: "b",
              description: "<p>second Array to concatenate</p>\n",
              type: "Array"
            }],
            class: "p5",
            module: "Data"
          },
          reverse: {
            name: "reverse",
            params: [{
              name: "list",
              description: "<p>Array to reverse</p>\n",
              type: "Array"
            }],
            class: "p5",
            module: "Data"
          },
          shorten: {
            name: "shorten",
            params: [{
              name: "list",
              description: "<p>Array to shorten</p>\n",
              type: "Array"
            }],
            class: "p5",
            module: "Data"
          },
          shuffle: {
            name: "shuffle",
            params: [{
              name: "array",
              description: "<p>Array to shuffle</p>\n",
              type: "Array"
            }, {
              name: "bool",
              description: "<p>modify passed array</p>\n",
              type: "Boolean",
              optional: !0
            }],
            class: "p5",
            module: "Data"
          },
          sort: {
            name: "sort",
            params: [{
              name: "list",
              description: "<p>Array to sort</p>\n",
              type: "Array"
            }, {
              name: "count",
              description: "<p>number of elements to sort, starting from 0</p>\n",
              type: "Integer",
              optional: !0
            }],
            class: "p5",
            module: "Data"
          },
          splice: {
            name: "splice",
            params: [{
              name: "list",
              description: "<p>Array to splice into</p>\n",
              type: "Array"
            }, {
              name: "value",
              description: "<p>value to be spliced in</p>\n",
              type: "Any"
            }, {
              name: "position",
              description: "<p>in the array from which to insert data</p>\n",
              type: "Integer"
            }],
            class: "p5",
            module: "Data"
          },
          subset: {
            name: "subset",
            params: [{
              name: "list",
              description: "<p>Array to extract from</p>\n",
              type: "Array"
            }, {
              name: "start",
              description: "<p>position to begin</p>\n",
              type: "Integer"
            }, {
              name: "count",
              description: "<p>number of values to extract</p>\n",
              type: "Integer",
              optional: !0
            }],
            class: "p5",
            module: "Data"
          },
          float: {
            name: "float",
            params: [{
              name: "str",
              description: "<p>float string to parse</p>\n",
              type: "String"
            }],
            class: "p5",
            module: "Data"
          },
          int: {
            name: "int",
            class: "p5",
            module: "Data",
            overloads: [{
              params: [{
                name: "n",
                description: "<p>value to parse</p>\n",
                type: "String|Boolean|Number"
              }, {
                name: "radix",
                description: "<p>the radix to convert to (default: 10)</p>\n",
                type: "Integer",
                optional: !0
              }]
            }, {
              params: [{
                name: "ns",
                description: "<p>values to parse</p>\n",
                type: "Array"
              }]
            }]
          },
          str: {
            name: "str",
            params: [{
              name: "n",
              description: "<p>value to parse</p>\n",
              type: "String|Boolean|Number|Array"
            }],
            class: "p5",
            module: "Data"
          },
          byte: {
            name: "byte",
            class: "p5",
            module: "Data",
            overloads: [{
              params: [{
                name: "n",
                description: "<p>value to parse</p>\n",
                type: "String|Boolean|Number"
              }]
            }, {
              params: [{
                name: "ns",
                description: "<p>values to parse</p>\n",
                type: "Array"
              }]
            }]
          },
          char: {
            name: "char",
            class: "p5",
            module: "Data",
            overloads: [{
              params: [{
                name: "n",
                description: "<p>value to parse</p>\n",
                type: "String|Number"
              }]
            }, {
              params: [{
                name: "ns",
                description: "<p>values to parse</p>\n",
                type: "Array"
              }]
            }]
          },
          unchar: {
            name: "unchar",
            class: "p5",
            module: "Data",
            overloads: [{
              params: [{
                name: "n",
                description: "<p>value to parse</p>\n",
                type: "String"
              }]
            }, {
              params: [{
                name: "ns",
                description: "<p>values to parse</p>\n",
                type: "Array"
              }]
            }]
          },
          hex: {
            name: "hex",
            class: "p5",
            module: "Data",
            overloads: [{
              params: [{
                name: "n",
                description: "<p>value to parse</p>\n",
                type: "Number"
              }, {
                name: "digits",
                description: "",
                type: "Number",
                optional: !0
              }]
            }, {
              params: [{
                name: "ns",
                description: "<p>array of values to parse</p>\n",
                type: "Number[]"
              }, {
                name: "digits",
                description: "",
                type: "Number",
                optional: !0
              }]
            }]
          },
          unhex: {
            name: "unhex",
            class: "p5",
            module: "Data",
            overloads: [{
              params: [{
                name: "n",
                description: "<p>value to parse</p>\n",
                type: "String"
              }]
            }, {
              params: [{
                name: "ns",
                description: "<p>values to parse</p>\n",
                type: "Array"
              }]
            }]
          },
          join: {
            name: "join",
            params: [{
              name: "list",
              description: "<p>array of Strings to be joined</p>\n",
              type: "Array"
            }, {
              name: "separator",
              description: "<p>String to be placed between each item</p>\n",
              type: "String"
            }],
            class: "p5",
            module: "Data"
          },
          match: {
            name: "match",
            params: [{
              name: "str",
              description: "<p>the String to be searched</p>\n",
              type: "String"
            }, {
              name: "regexp",
              description: "<p>the regexp to be used for matching</p>\n",
              type: "String"
            }],
            class: "p5",
            module: "Data"
          },
          matchAll: {
            name: "matchAll",
            params: [{
              name: "str",
              description: "<p>the String to be searched</p>\n",
              type: "String"
            }, {
              name: "regexp",
              description: "<p>the regexp to be used for matching</p>\n",
              type: "String"
            }],
            class: "p5",
            module: "Data"
          },
          nf: {
            name: "nf",
            class: "p5",
            module: "Data",
            overloads: [{
              params: [{
                name: "num",
                description: "<p>the Number to format</p>\n",
                type: "Number|String"
              }, {
                name: "left",
                description: "<p>number of digits to the left of the\n                               decimal point</p>\n",
                type: "Integer|String",
                optional: !0
              }, {
                name: "right",
                description: "<p>number of digits to the right of the\n                               decimal point</p>\n",
                type: "Integer|String",
                optional: !0
              }]
            }, {
              params: [{
                name: "nums",
                description: "<p>the Numbers to format</p>\n",
                type: "Array"
              }, {
                name: "left",
                description: "",
                type: "Integer|String",
                optional: !0
              }, {
                name: "right",
                description: "",
                type: "Integer|String",
                optional: !0
              }]
            }]
          },
          nfc: {
            name: "nfc",
            class: "p5",
            module: "Data",
            overloads: [{
              params: [{
                name: "num",
                description: "<p>the Number to format</p>\n",
                type: "Number|String"
              }, {
                name: "right",
                description: "<p>number of digits to the right of the\n                                 decimal point</p>\n",
                type: "Integer|String",
                optional: !0
              }]
            }, {
              params: [{
                name: "nums",
                description: "<p>the Numbers to format</p>\n",
                type: "Array"
              }, {
                name: "right",
                description: "",
                type: "Integer|String",
                optional: !0
              }]
            }]
          },
          nfp: {
            name: "nfp",
            class: "p5",
            module: "Data",
            overloads: [{
              params: [{
                name: "num",
                description: "<p>the Number to format</p>\n",
                type: "Number"
              }, {
                name: "left",
                description: "<p>number of digits to the left of the decimal\n                               point</p>\n",
                type: "Integer",
                optional: !0
              }, {
                name: "right",
                description: "<p>number of digits to the right of the\n                               decimal point</p>\n",
                type: "Integer",
                optional: !0
              }]
            }, {
              params: [{
                name: "nums",
                description: "<p>the Numbers to format</p>\n",
                type: "Number[]"
              }, {
                name: "left",
                description: "",
                type: "Integer",
                optional: !0
              }, {
                name: "right",
                description: "",
                type: "Integer",
                optional: !0
              }]
            }]
          },
          nfs: {
            name: "nfs",
            class: "p5",
            module: "Data",
            overloads: [{
              params: [{
                name: "num",
                description: "<p>the Number to format</p>\n",
                type: "Number"
              }, {
                name: "left",
                description: "<p>number of digits to the left of the decimal\n                               point</p>\n",
                type: "Integer",
                optional: !0
              }, {
                name: "right",
                description: "<p>number of digits to the right of the\n                               decimal point</p>\n",
                type: "Integer",
                optional: !0
              }]
            }, {
              params: [{
                name: "nums",
                description: "<p>the Numbers to format</p>\n",
                type: "Array"
              }, {
                name: "left",
                description: "",
                type: "Integer",
                optional: !0
              }, {
                name: "right",
                description: "",
                type: "Integer",
                optional: !0
              }]
            }]
          },
          split: {
            name: "split",
            params: [{
              name: "value",
              description: "<p>the String to be split</p>\n",
              type: "String"
            }, {
              name: "delim",
              description: "<p>the String used to separate the data</p>\n",
              type: "String"
            }],
            class: "p5",
            module: "Data"
          },
          splitTokens: {
            name: "splitTokens",
            params: [{
              name: "value",
              description: "<p>the String to be split</p>\n",
              type: "String"
            }, {
              name: "delim",
              description: "<p>list of individual Strings that will be used as\n                         separators</p>\n",
              type: "String",
              optional: !0
            }],
            class: "p5",
            module: "Data"
          },
          trim: {
            name: "trim",
            class: "p5",
            module: "Data",
            overloads: [{
              params: [{
                name: "str",
                description: "<p>a String to be trimmed</p>\n",
                type: "String"
              }]
            }, {
              params: [{
                name: "strs",
                description: "<p>an Array of Strings to be trimmed</p>\n",
                type: "Array"
              }]
            }]
          },
          day: {
            name: "day",
            class: "p5",
            module: "IO"
          },
          hour: {
            name: "hour",
            class: "p5",
            module: "IO"
          },
          minute: {
            name: "minute",
            class: "p5",
            module: "IO"
          },
          millis: {
            name: "millis",
            class: "p5",
            module: "IO"
          },
          month: {
            name: "month",
            class: "p5",
            module: "IO"
          },
          second: {
            name: "second",
            class: "p5",
            module: "IO"
          },
          year: {
            name: "year",
            class: "p5",
            module: "IO"
          },
          plane: {
            name: "plane",
            params: [{
              name: "width",
              description: "<p>width of the plane</p>\n",
              type: "Number",
              optional: !0
            }, {
              name: "height",
              description: "<p>height of the plane</p>\n",
              type: "Number",
              optional: !0
            }, {
              name: "detailX",
              description: "<p>Optional number of triangle\n                            subdivisions in x-dimension</p>\n",
              type: "Integer",
              optional: !0
            }, {
              name: "detailY",
              description: "<p>Optional number of triangle\n                            subdivisions in y-dimension</p>\n",
              type: "Integer",
              optional: !0
            }],
            class: "p5",
            module: "Shape"
          },
          box: {
            name: "box",
            params: [{
              name: "width",
              description: "<p>width of the box</p>\n",
              type: "Number",
              optional: !0
            }, {
              name: "Height",
              description: "<p>height of the box</p>\n",
              type: "Number",
              optional: !0
            }, {
              name: "depth",
              description: "<p>depth of the box</p>\n",
              type: "Number",
              optional: !0
            }, {
              name: "detailX",
              description: "<p>Optional number of triangle\n                           subdivisions in x-dimension</p>\n",
              type: "Integer",
              optional: !0
            }, {
              name: "detailY",
              description: "<p>Optional number of triangle\n                           subdivisions in y-dimension</p>\n",
              type: "Integer",
              optional: !0
            }],
            class: "p5",
            module: "Shape"
          },
          sphere: {
            name: "sphere",
            params: [{
              name: "radius",
              description: "<p>radius of circle</p>\n",
              type: "Number",
              optional: !0
            }, {
              name: "detailX",
              description: "<p>optional number of subdivisions in x-dimension</p>\n",
              type: "Integer",
              optional: !0
            }, {
              name: "detailY",
              description: "<p>optional number of subdivisions in y-dimension</p>\n",
              type: "Integer",
              optional: !0
            }],
            class: "p5",
            module: "Shape"
          },
          cylinder: {
            name: "cylinder",
            params: [{
              name: "radius",
              description: "<p>radius of the surface</p>\n",
              type: "Number",
              optional: !0
            }, {
              name: "height",
              description: "<p>height of the cylinder</p>\n",
              type: "Number",
              optional: !0
            }, {
              name: "detailX",
              description: "<p>number of subdivisions in x-dimension;\n                              default is 24</p>\n",
              type: "Integer",
              optional: !0
            }, {
              name: "detailY",
              description: "<p>number of subdivisions in y-dimension;\n                              default is 1</p>\n",
              type: "Integer",
              optional: !0
            }, {
              name: "bottomCap",
              description: "<p>whether to draw the bottom of the cylinder</p>\n",
              type: "Boolean",
              optional: !0
            }, {
              name: "topCap",
              description: "<p>whether to draw the top of the cylinder</p>\n",
              type: "Boolean",
              optional: !0
            }],
            class: "p5",
            module: "Shape"
          },
          cone: {
            name: "cone",
            params: [{
              name: "radius",
              description: "<p>radius of the bottom surface</p>\n",
              type: "Number",
              optional: !0
            }, {
              name: "height",
              description: "<p>height of the cone</p>\n",
              type: "Number",
              optional: !0
            }, {
              name: "detailX",
              description: "<p>number of segments,\n                            the more segments the smoother geometry\n                            default is 24</p>\n",
              type: "Integer",
              optional: !0
            }, {
              name: "detailY",
              description: "<p>number of segments,\n                            the more segments the smoother geometry\n                            default is 1</p>\n",
              type: "Integer",
              optional: !0
            }, {
              name: "cap",
              description: "<p>whether to draw the base of the cone</p>\n",
              type: "Boolean",
              optional: !0
            }],
            class: "p5",
            module: "Shape"
          },
          ellipsoid: {
            name: "ellipsoid",
            params: [{
              name: "radiusx",
              description: "<p>x-radius of ellipsoid</p>\n",
              type: "Number",
              optional: !0
            }, {
              name: "radiusy",
              description: "<p>y-radius of ellipsoid</p>\n",
              type: "Number",
              optional: !0
            }, {
              name: "radiusz",
              description: "<p>z-radius of ellipsoid</p>\n",
              type: "Number",
              optional: !0
            }, {
              name: "detailX",
              description: "<p>number of segments,\n                                   the more segments the smoother geometry\n                                   default is 24. Avoid detail number above\n                                   150, it may crash the browser.</p>\n",
              type: "Integer",
              optional: !0
            }, {
              name: "detailY",
              description: "<p>number of segments,\n                                   the more segments the smoother geometry\n                                   default is 16. Avoid detail number above\n                                   150, it may crash the browser.</p>\n",
              type: "Integer",
              optional: !0
            }],
            class: "p5",
            module: "Shape"
          },
          torus: {
            name: "torus",
            params: [{
              name: "radius",
              description: "<p>radius of the whole ring</p>\n",
              type: "Number",
              optional: !0
            }, {
              name: "tubeRadius",
              description: "<p>radius of the tube</p>\n",
              type: "Number",
              optional: !0
            }, {
              name: "detailX",
              description: "<p>number of segments in x-dimension,\n                               the more segments the smoother geometry\n                               default is 24</p>\n",
              type: "Integer",
              optional: !0
            }, {
              name: "detailY",
              description: "<p>number of segments in y-dimension,\n                               the more segments the smoother geometry\n                               default is 16</p>\n",
              type: "Integer",
              optional: !0
            }],
            class: "p5",
            module: "Shape"
          },
          orbitControl: {
            name: "orbitControl",
            params: [{
              name: "sensitivityX",
              description: "<p>sensitivity to mouse movement along X axis</p>\n",
              type: "Number",
              optional: !0
            }, {
              name: "sensitivityY",
              description: "<p>sensitivity to mouse movement along Y axis</p>\n",
              type: "Number",
              optional: !0
            }, {
              name: "sensitivityZ",
              description: "<p>sensitivity to scroll movement along Z axis</p>\n",
              type: "Number",
              optional: !0
            }],
            class: "p5",
            module: "Lights, Camera"
          },
          debugMode: {
            name: "debugMode",
            class: "p5",
            module: "Lights, Camera",
            overloads: [{
              params: []
            }, {
              params: [{
                name: "mode",
                description: "<p>either GRID or AXES</p>\n",
                type: "Constant"
              }]
            }, {
              params: [{
                name: "mode",
                description: "",
                type: "Constant"
              }, {
                name: "gridSize",
                description: "<p>size of one side of the grid</p>\n",
                type: "Number",
                optional: !0
              }, {
                name: "gridDivisions",
                description: "<p>number of divisions in the grid</p>\n",
                type: "Number",
                optional: !0
              }, {
                name: "xOff",
                description: "<p>X axis offset from origin (0,0,0)</p>\n",
                type: "Number",
                optional: !0
              }, {
                name: "yOff",
                description: "<p>Y axis offset from origin (0,0,0)</p>\n",
                type: "Number",
                optional: !0
              }, {
                name: "zOff",
                description: "<p>Z axis offset from origin (0,0,0)</p>\n",
                type: "Number",
                optional: !0
              }]
            }, {
              params: [{
                name: "mode",
                description: "",
                type: "Constant"
              }, {
                name: "axesSize",
                description: "<p>size of axes icon</p>\n",
                type: "Number",
                optional: !0
              }, {
                name: "xOff",
                description: "",
                type: "Number",
                optional: !0
              }, {
                name: "yOff",
                description: "",
                type: "Number",
                optional: !0
              }, {
                name: "zOff",
                description: "",
                type: "Number",
                optional: !0
              }]
            }, {
              params: [{
                name: "gridSize",
                description: "",
                type: "Number",
                optional: !0
              }, {
                name: "gridDivisions",
                description: "",
                type: "Number",
                optional: !0
              }, {
                name: "gridXOff",
                description: "",
                type: "Number",
                optional: !0
              }, {
                name: "gridYOff",
                description: "",
                type: "Number",
                optional: !0
              }, {
                name: "gridZOff",
                description: "",
                type: "Number",
                optional: !0
              }, {
                name: "axesSize",
                description: "",
                type: "Number",
                optional: !0
              }, {
                name: "axesXOff",
                description: "",
                type: "Number",
                optional: !0
              }, {
                name: "axesYOff",
                description: "",
                type: "Number",
                optional: !0
              }, {
                name: "axesZOff",
                description: "",
                type: "Number",
                optional: !0
              }]
            }]
          },
          noDebugMode: {
            name: "noDebugMode",
            class: "p5",
            module: "Lights, Camera"
          },
          ambientLight: {
            name: "ambientLight",
            class: "p5",
            module: "Lights, Camera",
            overloads: [{
              params: [{
                name: "v1",
                description: "<p>red or hue value relative to\n                                the current color range</p>\n",
                type: "Number"
              }, {
                name: "v2",
                description: "<p>green or saturation value\n                                relative to the current color range</p>\n",
                type: "Number"
              }, {
                name: "v3",
                description: "<p>blue or brightness value\n                                relative to the current color range</p>\n",
                type: "Number"
              }, {
                name: "alpha",
                description: "<p>the alpha value</p>\n",
                type: "Number",
                optional: !0
              }],
              chainable: 1
            }, {
              params: [{
                name: "value",
                description: "<p>a color string</p>\n",
                type: "String"
              }],
              chainable: 1
            }, {
              params: [{
                name: "gray",
                description: "<p>a gray value</p>\n",
                type: "Number"
              }, {
                name: "alpha",
                description: "",
                type: "Number",
                optional: !0
              }],
              chainable: 1
            }, {
              params: [{
                name: "values",
                description: "<p>an array containing the red,green,blue &\n                                and alpha components of the color</p>\n",
                type: "Number[]"
              }],
              chainable: 1
            }, {
              params: [{
                name: "color",
                description: "<p>the ambient light color</p>\n",
                type: "p5.Color"
              }],
              chainable: 1
            }]
          },
          specularColor: {
            name: "specularColor",
            class: "p5",
            module: "Lights, Camera",
            overloads: [{
              params: [{
                name: "v1",
                description: "<p>red or hue value relative to\n                                the current color range</p>\n",
                type: "Number"
              }, {
                name: "v2",
                description: "<p>green or saturation value\n                                relative to the current color range</p>\n",
                type: "Number"
              }, {
                name: "v3",
                description: "<p>blue or brightness value\n                                relative to the current color range</p>\n",
                type: "Number"
              }],
              chainable: 1
            }, {
              params: [{
                name: "value",
                description: "<p>a color string</p>\n",
                type: "String"
              }],
              chainable: 1
            }, {
              params: [{
                name: "gray",
                description: "<p>a gray value</p>\n",
                type: "Number"
              }],
              chainable: 1
            }, {
              params: [{
                name: "values",
                description: "<p>an array containing the red,green,blue &\n                                and alpha components of the color</p>\n",
                type: "Number[]"
              }],
              chainable: 1
            }, {
              params: [{
                name: "color",
                description: "<p>the ambient light color</p>\n",
                type: "p5.Color"
              }],
              chainable: 1
            }]
          },
          directionalLight: {
            name: "directionalLight",
            class: "p5",
            module: "Lights, Camera",
            overloads: [{
              params: [{
                name: "v1",
                description: "<p>red or hue value (depending on the current\ncolor mode),</p>\n",
                type: "Number"
              }, {
                name: "v2",
                description: "<p>green or saturation value</p>\n",
                type: "Number"
              }, {
                name: "v3",
                description: "<p>blue or brightness value</p>\n",
                type: "Number"
              }, {
                name: "position",
                description: "<p>the direction of the light</p>\n",
                type: "p5.Vector"
              }],
              chainable: 1
            }, {
              params: [{
                name: "color",
                description: '<p>color Array, CSS color string,\n                                            or <a href="#/p5.Color">p5.Color</a> value</p>\n',
                type: "Number[]|String|p5.Color"
              }, {
                name: "x",
                description: "<p>x axis direction</p>\n",
                type: "Number"
              }, {
                name: "y",
                description: "<p>y axis direction</p>\n",
                type: "Number"
              }, {
                name: "z",
                description: "<p>z axis direction</p>\n",
                type: "Number"
              }],
              chainable: 1
            }, {
              params: [{
                name: "color",
                description: "",
                type: "Number[]|String|p5.Color"
              }, {
                name: "position",
                description: "",
                type: "p5.Vector"
              }],
              chainable: 1
            }, {
              params: [{
                name: "v1",
                description: "",
                type: "Number"
              }, {
                name: "v2",
                description: "",
                type: "Number"
              }, {
                name: "v3",
                description: "",
                type: "Number"
              }, {
                name: "x",
                description: "",
                type: "Number"
              }, {
                name: "y",
                description: "",
                type: "Number"
              }, {
                name: "z",
                description: "",
                type: "Number"
              }],
              chainable: 1
            }]
          },
          pointLight: {
            name: "pointLight",
            class: "p5",
            module: "Lights, Camera",
            overloads: [{
              params: [{
                name: "v1",
                description: "<p>red or hue value (depending on the current\ncolor mode),</p>\n",
                type: "Number"
              }, {
                name: "v2",
                description: "<p>green or saturation value</p>\n",
                type: "Number"
              }, {
                name: "v3",
                description: "<p>blue or brightness value</p>\n",
                type: "Number"
              }, {
                name: "x",
                description: "<p>x axis position</p>\n",
                type: "Number"
              }, {
                name: "y",
                description: "<p>y axis position</p>\n",
                type: "Number"
              }, {
                name: "z",
                description: "<p>z axis position</p>\n",
                type: "Number"
              }],
              chainable: 1
            }, {
              params: [{
                name: "v1",
                description: "",
                type: "Number"
              }, {
                name: "v2",
                description: "",
                type: "Number"
              }, {
                name: "v3",
                description: "",
                type: "Number"
              }, {
                name: "position",
                description: "<p>the position of the light</p>\n",
                type: "p5.Vector"
              }],
              chainable: 1
            }, {
              params: [{
                name: "color",
                description: '<p>color Array, CSS color string,\nor <a href="#/p5.Color">p5.Color</a> value</p>\n',
                type: "Number[]|String|p5.Color"
              }, {
                name: "x",
                description: "",
                type: "Number"
              }, {
                name: "y",
                description: "",
                type: "Number"
              }, {
                name: "z",
                description: "",
                type: "Number"
              }],
              chainable: 1
            }, {
              params: [{
                name: "color",
                description: "",
                type: "Number[]|String|p5.Color"
              }, {
                name: "position",
                description: "",
                type: "p5.Vector"
              }],
              chainable: 1
            }]
          },
          lights: {
            name: "lights",
            class: "p5",
            module: "Lights, Camera"
          },
          lightFalloff: {
            name: "lightFalloff",
            params: [{
              name: "constant",
              description: "<p>constant value for determining falloff</p>\n",
              type: "Number"
            }, {
              name: "linear",
              description: "<p>linear value for determining falloff</p>\n",
              type: "Number"
            }, {
              name: "quadratic",
              description: "<p>quadratic value for determining falloff</p>\n",
              type: "Number"
            }],
            class: "p5",
            module: "Lights, Camera"
          },
          spotLight: {
            name: "spotLight",
            class: "p5",
            module: "Lights, Camera",
            overloads: [{
              params: [{
                name: "v1",
                description: "<p>red or hue value (depending on the current\ncolor mode),</p>\n",
                type: "Number"
              }, {
                name: "v2",
                description: "<p>green or saturation value</p>\n",
                type: "Number"
              }, {
                name: "v3",
                description: "<p>blue or brightness value</p>\n",
                type: "Number"
              }, {
                name: "x",
                description: "<p>x axis position</p>\n",
                type: "Number"
              }, {
                name: "y",
                description: "<p>y axis position</p>\n",
                type: "Number"
              }, {
                name: "z",
                description: "<p>z axis position</p>\n",
                type: "Number"
              }, {
                name: "rx",
                description: "<p>x axis direction of light</p>\n",
                type: "Number"
              }, {
                name: "ry",
                description: "<p>y axis direction of light</p>\n",
                type: "Number"
              }, {
                name: "rz",
                description: "<p>z axis direction of light</p>\n",
                type: "Number"
              }, {
                name: "angle",
                description: "<p>optional parameter for angle. Defaults to PI/3</p>\n",
                type: "Number",
                optional: !0
              }, {
                name: "conc",
                description: "<p>optional parameter for concentration. Defaults to 100</p>\n",
                type: "Number",
                optional: !0
              }],
              chainable: 1
            }, {
              params: [{
                name: "color",
                description: '<p>color Array, CSS color string,\nor <a href="#/p5.Color">p5.Color</a> value</p>\n',
                type: "Number[]|String|p5.Color"
              }, {
                name: "position",
                description: "<p>the position of the light</p>\n",
                type: "p5.Vector"
              }, {
                name: "direction",
                description: "<p>the direction of the light</p>\n",
                type: "p5.Vector"
              }, {
                name: "angle",
                description: "",
                type: "Number",
                optional: !0
              }, {
                name: "conc",
                description: "",
                type: "Number",
                optional: !0
              }]
            }, {
              params: [{
                name: "v1",
                description: "",
                type: "Number"
              }, {
                name: "v2",
                description: "",
                type: "Number"
              }, {
                name: "v3",
                description: "",
                type: "Number"
              }, {
                name: "position",
                description: "",
                type: "p5.Vector"
              }, {
                name: "direction",
                description: "",
                type: "p5.Vector"
              }, {
                name: "angle",
                description: "",
                type: "Number",
                optional: !0
              }, {
                name: "conc",
                description: "",
                type: "Number",
                optional: !0
              }]
            }, {
              params: [{
                name: "color",
                description: "",
                type: "Number[]|String|p5.Color"
              }, {
                name: "x",
                description: "",
                type: "Number"
              }, {
                name: "y",
                description: "",
                type: "Number"
              }, {
                name: "z",
                description: "",
                type: "Number"
              }, {
                name: "direction",
                description: "",
                type: "p5.Vector"
              }, {
                name: "angle",
                description: "",
                type: "Number",
                optional: !0
              }, {
                name: "conc",
                description: "",
                type: "Number",
                optional: !0
              }]
            }, {
              params: [{
                name: "color",
                description: "",
                type: "Number[]|String|p5.Color"
              }, {
                name: "position",
                description: "",
                type: "p5.Vector"
              }, {
                name: "rx",
                description: "",
                type: "Number"
              }, {
                name: "ry",
                description: "",
                type: "Number"
              }, {
                name: "rz",
                description: "",
                type: "Number"
              }, {
                name: "angle",
                description: "",
                type: "Number",
                optional: !0
              }, {
                name: "conc",
                description: "",
                type: "Number",
                optional: !0
              }]
            }, {
              params: [{
                name: "v1",
                description: "",
                type: "Number"
              }, {
                name: "v2",
                description: "",
                type: "Number"
              }, {
                name: "v3",
                description: "",
                type: "Number"
              }, {
                name: "x",
                description: "",
                type: "Number"
              }, {
                name: "y",
                description: "",
                type: "Number"
              }, {
                name: "z",
                description: "",
                type: "Number"
              }, {
                name: "direction",
                description: "",
                type: "p5.Vector"
              }, {
                name: "angle",
                description: "",
                type: "Number",
                optional: !0
              }, {
                name: "conc",
                description: "",
                type: "Number",
                optional: !0
              }]
            }, {
              params: [{
                name: "v1",
                description: "",
                type: "Number"
              }, {
                name: "v2",
                description: "",
                type: "Number"
              }, {
                name: "v3",
                description: "",
                type: "Number"
              }, {
                name: "position",
                description: "",
                type: "p5.Vector"
              }, {
                name: "rx",
                description: "",
                type: "Number"
              }, {
                name: "ry",
                description: "",
                type: "Number"
              }, {
                name: "rz",
                description: "",
                type: "Number"
              }, {
                name: "angle",
                description: "",
                type: "Number",
                optional: !0
              }, {
                name: "conc",
                description: "",
                type: "Number",
                optional: !0
              }]
            }, {
              params: [{
                name: "color",
                description: "",
                type: "Number[]|String|p5.Color"
              }, {
                name: "x",
                description: "",
                type: "Number"
              }, {
                name: "y",
                description: "",
                type: "Number"
              }, {
                name: "z",
                description: "",
                type: "Number"
              }, {
                name: "rx",
                description: "",
                type: "Number"
              }, {
                name: "ry",
                description: "",
                type: "Number"
              }, {
                name: "rz",
                description: "",
                type: "Number"
              }, {
                name: "angle",
                description: "",
                type: "Number",
                optional: !0
              }, {
                name: "conc",
                description: "",
                type: "Number",
                optional: !0
              }]
            }]
          },
          noLights: {
            name: "noLights",
            class: "p5",
            module: "Lights, Camera"
          },
          loadModel: {
            name: "loadModel",
            class: "p5",
            module: "Shape",
            overloads: [{
              params: [{
                name: "path",
                description: "<p>Path of the model to be loaded</p>\n",
                type: "String"
              }, {
                name: "normalize",
                description: "<p>If true, scale the model to a\n                                     standardized size when loading</p>\n",
                type: "Boolean"
              }, {
                name: "successCallback",
                description: "<p>Function to be called\n                                    once the model is loaded. Will be passed\n                                    the 3D model object.</p>\n",
                type: "function(p5.Geometry)",
                optional: !0
              }, {
                name: "failureCallback",
                description: "<p>called with event error if\n                                        the model fails to load.</p>\n",
                type: "Function(Event)",
                optional: !0
              }, {
                name: "fileType",
                description: "<p>The file extension of the model\n                                     (<code>.stl</code>, <code>.obj</code>).</p>\n",
                type: "String",
                optional: !0
              }]
            }, {
              params: [{
                name: "path",
                description: "",
                type: "String"
              }, {
                name: "successCallback",
                description: "",
                type: "function(p5.Geometry)",
                optional: !0
              }, {
                name: "failureCallback",
                description: "",
                type: "Function(Event)",
                optional: !0
              }, {
                name: "fileType",
                description: "",
                type: "String",
                optional: !0
              }]
            }]
          },
          model: {
            name: "model",
            params: [{
              name: "model",
              description: "<p>Loaded 3d model to be rendered</p>\n",
              type: "p5.Geometry"
            }],
            class: "p5",
            module: "Shape"
          },
          loadShader: {
            name: "loadShader",
            params: [{
              name: "vertFilename",
              description: "<p>path to file containing vertex shader\nsource code</p>\n",
              type: "String"
            }, {
              name: "fragFilename",
              description: "<p>path to file containing fragment shader\nsource code</p>\n",
              type: "String"
            }, {
              name: "callback",
              description: "<p>callback to be executed after loadShader\ncompletes. On success, the Shader object is passed as the first argument.</p>\n",
              type: "Function",
              optional: !0
            }, {
              name: "errorCallback",
              description: "<p>callback to be executed when an error\noccurs inside loadShader. On error, the error is passed as the first\nargument.</p>\n",
              type: "Function",
              optional: !0
            }],
            class: "p5",
            module: "Lights, Camera"
          },
          createShader: {
            name: "createShader",
            params: [{
              name: "vertSrc",
              description: "<p>source code for the vertex shader</p>\n",
              type: "String"
            }, {
              name: "fragSrc",
              description: "<p>source code for the fragment shader</p>\n",
              type: "String"
            }],
            class: "p5",
            module: "Lights, Camera"
          },
          shader: {
            name: "shader",
            params: [{
              name: "s",
              description: '<p>the desired <a href="#/p5.Shader">p5.Shader</a> to use for rendering\nshapes.</p>\n',
              type: "p5.Shader",
              optional: !0
            }],
            class: "p5",
            module: "Lights, Camera"
          },
          resetShader: {
            name: "resetShader",
            class: "p5",
            module: "Lights, Camera"
          },
          normalMaterial: {
            name: "normalMaterial",
            class: "p5",
            module: "Lights, Camera"
          },
          texture: {
            name: "texture",
            params: [{
              name: "tex",
              description: "<p>2-dimensional graphics\n                   to render as texture</p>\n",
              type: "p5.Image|p5.MediaElement|p5.Graphics"
            }],
            class: "p5",
            module: "Lights, Camera"
          },
          textureMode: {
            name: "textureMode",
            params: [{
              name: "mode",
              description: "<p>either IMAGE or NORMAL</p>\n",
              type: "Constant"
            }],
            class: "p5",
            module: "Lights, Camera"
          },
          textureWrap: {
            name: "textureWrap",
            params: [{
              name: "wrapX",
              description: "<p>either CLAMP, REPEAT, or MIRROR</p>\n",
              type: "Constant"
            }, {
              name: "wrapY",
              description: "<p>either CLAMP, REPEAT, or MIRROR</p>\n",
              type: "Constant",
              optional: !0
            }],
            class: "p5",
            module: "Lights, Camera"
          },
          ambientMaterial: {
            name: "ambientMaterial",
            class: "p5",
            module: "Lights, Camera",
            overloads: [{
              params: [{
                name: "v1",
                description: "<p>gray value, red or hue value\n                        (depending on the current color mode),</p>\n",
                type: "Number"
              }, {
                name: "v2",
                description: "<p>green or saturation value</p>\n",
                type: "Number",
                optional: !0
              }, {
                name: "v3",
                description: "<p>blue or brightness value</p>\n",
                type: "Number",
                optional: !0
              }],
              chainable: 1
            }, {
              params: [{
                name: "color",
                description: "<p>color, color Array, or CSS color string</p>\n",
                type: "Number[]|String|p5.Color"
              }],
              chainable: 1
            }]
          },
          emissiveMaterial: {
            name: "emissiveMaterial",
            class: "p5",
            module: "Lights, Camera",
            overloads: [{
              params: [{
                name: "v1",
                description: "<p>gray value, red or hue value\n                        (depending on the current color mode),</p>\n",
                type: "Number"
              }, {
                name: "v2",
                description: "<p>green or saturation value</p>\n",
                type: "Number",
                optional: !0
              }, {
                name: "v3",
                description: "<p>blue or brightness value</p>\n",
                type: "Number",
                optional: !0
              }, {
                name: "a",
                description: "<p>opacity</p>\n",
                type: "Number",
                optional: !0
              }],
              chainable: 1
            }, {
              params: [{
                name: "color",
                description: "<p>color, color Array, or CSS color string</p>\n",
                type: "Number[]|String|p5.Color"
              }],
              chainable: 1
            }]
          },
          specularMaterial: {
            name: "specularMaterial",
            class: "p5",
            module: "Lights, Camera",
            overloads: [{
              params: [{
                name: "gray",
                description: "<p>number specifying value between white and black.</p>\n",
                type: "Number"
              }, {
                name: "alpha",
                description: "<p>alpha value relative to current color range\n                                (default is 0-255)</p>\n",
                type: "Number",
                optional: !0
              }],
              chainable: 1
            }, {
              params: [{
                name: "v1",
                description: "<p>red or hue value relative to\n                                the current color range</p>\n",
                type: "Number"
              }, {
                name: "v2",
                description: "<p>green or saturation value\n                                relative to the current color range</p>\n",
                type: "Number"
              }, {
                name: "v3",
                description: "<p>blue or brightness value\n                                relative to the current color range</p>\n",
                type: "Number"
              }, {
                name: "alpha",
                description: "",
                type: "Number",
                optional: !0
              }],
              chainable: 1
            }, {
              params: [{
                name: "color",
                description: "<p>color Array, or CSS color string</p>\n",
                type: "Number[]|String|p5.Color"
              }],
              chainable: 1
            }]
          },
          shininess: {
            name: "shininess",
            params: [{
              name: "shine",
              description: "<p>Degree of Shininess.\n                      Defaults to 1.</p>\n",
              type: "Number"
            }],
            class: "p5",
            module: "Lights, Camera"
          },
          camera: {
            name: "camera",
            params: [{
              name: "x",
              description: "<p>camera position value on x axis</p>\n",
              type: "Number",
              optional: !0
            }, {
              name: "y",
              description: "<p>camera position value on y axis</p>\n",
              type: "Number",
              optional: !0
            }, {
              name: "z",
              description: "<p>camera position value on z axis</p>\n",
              type: "Number",
              optional: !0
            }, {
              name: "centerX",
              description: "<p>x coordinate representing center of the sketch</p>\n",
              type: "Number",
              optional: !0
            }, {
              name: "centerY",
              description: "<p>y coordinate representing center of the sketch</p>\n",
              type: "Number",
              optional: !0
            }, {
              name: "centerZ",
              description: "<p>z coordinate representing center of the sketch</p>\n",
              type: "Number",
              optional: !0
            }, {
              name: "upX",
              description: "<p>x component of direction 'up' from camera</p>\n",
              type: "Number",
              optional: !0
            }, {
              name: "upY",
              description: "<p>y component of direction 'up' from camera</p>\n",
              type: "Number",
              optional: !0
            }, {
              name: "upZ",
              description: "<p>z component of direction 'up' from camera</p>\n",
              type: "Number",
              optional: !0
            }],
            class: "p5",
            module: "Lights, Camera"
          },
          perspective: {
            name: "perspective",
            params: [{
              name: "fovy",
              description: '<p>camera frustum vertical field of view,\n                          from bottom to top of view, in <a href="#/p5/angleMode">angleMode</a> units</p>\n',
              type: "Number",
              optional: !0
            }, {
              name: "aspect",
              description: "<p>camera frustum aspect ratio</p>\n",
              type: "Number",
              optional: !0
            }, {
              name: "near",
              description: "<p>frustum near plane length</p>\n",
              type: "Number",
              optional: !0
            }, {
              name: "far",
              description: "<p>frustum far plane length</p>\n",
              type: "Number",
              optional: !0
            }],
            class: "p5",
            module: "Lights, Camera"
          },
          ortho: {
            name: "ortho",
            params: [{
              name: "left",
              description: "<p>camera frustum left plane</p>\n",
              type: "Number",
              optional: !0
            }, {
              name: "right",
              description: "<p>camera frustum right plane</p>\n",
              type: "Number",
              optional: !0
            }, {
              name: "bottom",
              description: "<p>camera frustum bottom plane</p>\n",
              type: "Number",
              optional: !0
            }, {
              name: "top",
              description: "<p>camera frustum top plane</p>\n",
              type: "Number",
              optional: !0
            }, {
              name: "near",
              description: "<p>camera frustum near plane</p>\n",
              type: "Number",
              optional: !0
            }, {
              name: "far",
              description: "<p>camera frustum far plane</p>\n",
              type: "Number",
              optional: !0
            }],
            class: "p5",
            module: "Lights, Camera"
          },
          frustum: {
            name: "frustum",
            params: [{
              name: "left",
              description: "<p>camera frustum left plane</p>\n",
              type: "Number",
              optional: !0
            }, {
              name: "right",
              description: "<p>camera frustum right plane</p>\n",
              type: "Number",
              optional: !0
            }, {
              name: "bottom",
              description: "<p>camera frustum bottom plane</p>\n",
              type: "Number",
              optional: !0
            }, {
              name: "top",
              description: "<p>camera frustum top plane</p>\n",
              type: "Number",
              optional: !0
            }, {
              name: "near",
              description: "<p>camera frustum near plane</p>\n",
              type: "Number",
              optional: !0
            }, {
              name: "far",
              description: "<p>camera frustum far plane</p>\n",
              type: "Number",
              optional: !0
            }],
            class: "p5",
            module: "Lights, Camera"
          },
          createCamera: {
            name: "createCamera",
            class: "p5",
            module: "Lights, Camera"
          },
          setCamera: {
            name: "setCamera",
            params: [{
              name: "cam",
              description: "<p>p5.Camera object</p>\n",
              type: "p5.Camera"
            }],
            class: "p5",
            module: "Lights, Camera"
          },
          setAttributes: {
            name: "setAttributes",
            class: "p5",
            module: "Rendering",
            overloads: [{
              params: [{
                name: "key",
                description: "<p>Name of attribute</p>\n",
                type: "String"
              }, {
                name: "value",
                description: "<p>New value of named attribute</p>\n",
                type: "Boolean"
              }]
            }, {
              params: [{
                name: "obj",
                description: "<p>object with key-value pairs</p>\n",
                type: "Object"
              }]
            }]
          },
          sampleRate: {
            name: "sampleRate",
            class: "p5",
            module: "p5.sound"
          },
          freqToMidi: {
            name: "freqToMidi",
            params: [{
              name: "frequency",
              description: '<p>A freqeuncy, for example, the "A"\n                           above Middle C is 440Hz</p>\n',
              type: "Number"
            }],
            class: "p5",
            module: "p5.sound"
          },
          midiToFreq: {
            name: "midiToFreq",
            params: [{
              name: "midiNote",
              description: "<p>The number of a MIDI note</p>\n",
              type: "Number"
            }],
            class: "p5",
            module: "p5.sound"
          },
          soundFormats: {
            name: "soundFormats",
            params: [{
              name: "formats",
              description: "<p>i.e. 'mp3', 'wav', 'ogg'</p>\n",
              type: "String",
              optional: !0,
              multiple: !0
            }],
            class: "p5",
            module: "p5.sound"
          },
          getAudioContext: {
            name: "getAudioContext",
            class: "p5",
            module: "p5.sound"
          },
          userStartAudio: {
            params: [{
              name: "element(s)",
              description: "<p>This argument can be an Element,\n                              Selector String, NodeList, p5.Element,\n                              jQuery Element, or an Array of any of those.</p>\n",
              type: "Element|Array",
              optional: !0
            }, {
              name: "callback",
              description: "<p>Callback to invoke when the AudioContext\n                              has started</p>\n",
              type: "Function",
              optional: !0
            }],
            name: "userStartAudio",
            class: "p5",
            module: "p5.sound"
          },
          loadSound: {
            name: "loadSound",
            params: [{
              name: "path",
              description: "<p>Path to the sound file, or an array with\n                                  paths to soundfiles in multiple formats\n                                  i.e. ['sound.ogg', 'sound.mp3'].\n                                  Alternately, accepts an object: either\n                                  from the HTML5 File API, or a p5.File.</p>\n",
              type: "String|Array"
            }, {
              name: "successCallback",
              description: "<p>Name of a function to call once file loads</p>\n",
              type: "Function",
              optional: !0
            }, {
              name: "errorCallback",
              description: "<p>Name of a function to call if there is\n                                    an error loading the file.</p>\n",
              type: "Function",
              optional: !0
            }, {
              name: "whileLoading",
              description: "<p>Name of a function to call while file is loading.\n                               This function will receive the percentage loaded\n                               so far, from 0.0 to 1.0.</p>\n",
              type: "Function",
              optional: !0
            }],
            class: "p5",
            module: "p5.sound"
          },
          createConvolver: {
            name: "createConvolver",
            params: [{
              name: "path",
              description: "<p>path to a sound file</p>\n",
              type: "String"
            }, {
              name: "callback",
              description: "<p>function to call if loading is successful.\n                              The object will be passed in as the argument\n                              to the callback function.</p>\n",
              type: "Function",
              optional: !0
            }, {
              name: "errorCallback",
              description: "<p>function to call if loading is not successful.\n                              A custom error will be passed in as the argument\n                              to the callback function.</p>\n",
              type: "Function",
              optional: !0
            }],
            class: "p5",
            module: "p5.sound"
          },
          setBPM: {
            name: "setBPM",
            params: [{
              name: "BPM",
              description: "<p>Beats Per Minute</p>\n",
              type: "Number"
            }, {
              name: "rampTime",
              description: "<p>Seconds from now</p>\n",
              type: "Number"
            }],
            class: "p5",
            module: "p5.sound"
          },
          saveSound: {
            name: "saveSound",
            params: [{
              name: "soundFile",
              description: "<p>p5.SoundFile that you wish to save</p>\n",
              type: "p5.SoundFile"
            }, {
              name: "fileName",
              description: "<p>name of the resulting .wav file.</p>\n",
              type: "String"
            }],
            class: "p5",
            module: "p5.sound"
          }
        },
        "p5.Color": {
          toString: {
            name: "toString",
            params: [{
              name: "format",
              description: "<p>How the color string will be formatted.\nLeaving this empty formats the string as rgba(r, g, b, a).\n'#rgb' '#rgba' '#rrggbb' and '#rrggbbaa' format as hexadecimal color codes.\n'rgb' 'hsb' and 'hsl' return the color formatted in the specified color mode.\n'rgba' 'hsba' and 'hsla' are the same as above but with alpha channels.\n'rgb%' 'hsb%' 'hsl%' 'rgba%' 'hsba%' and 'hsla%' format as percentages.</p>\n",
              type: "String",
              optional: !0
            }],
            class: "p5.Color",
            module: "Color"
          },
          setRed: {
            name: "setRed",
            params: [{
              name: "red",
              description: "<p>the new red value</p>\n",
              type: "Number"
            }],
            class: "p5.Color",
            module: "Color"
          },
          setGreen: {
            name: "setGreen",
            params: [{
              name: "green",
              description: "<p>the new green value</p>\n",
              type: "Number"
            }],
            class: "p5.Color",
            module: "Color"
          },
          setBlue: {
            name: "setBlue",
            params: [{
              name: "blue",
              description: "<p>the new blue value</p>\n",
              type: "Number"
            }],
            class: "p5.Color",
            module: "Color"
          },
          setAlpha: {
            name: "setAlpha",
            params: [{
              name: "alpha",
              description: "<p>the new alpha value</p>\n",
              type: "Number"
            }],
            class: "p5.Color",
            module: "Color"
          }
        },
        "p5.Element": {
          elt: {
            name: "elt",
            class: "p5.Element",
            module: "DOM"
          },
          parent: {
            name: "parent",
            class: "p5.Element",
            module: "DOM",
            overloads: [{
              params: [{
                name: "parent",
                description: '<p>the ID, DOM node, or <a href="#/p5.Element">p5.Element</a>\n                         of desired parent element</p>\n',
                type: "String|p5.Element|Object"
              }],
              chainable: 1
            }, {
              params: []
            }]
          },
          id: {
            name: "id",
            class: "p5.Element",
            module: "DOM",
            overloads: [{
              params: [{
                name: "id",
                description: "<p>ID of the element</p>\n",
                type: "String"
              }],
              chainable: 1
            }, {
              params: []
            }]
          },
          class: {
            name: "class",
            class: "p5.Element",
            module: "DOM",
            overloads: [{
              params: [{
                name: "class",
                description: "<p>class to add</p>\n",
                type: "String"
              }],
              chainable: 1
            }, {
              params: []
            }]
          },
          mousePressed: {
            name: "mousePressed",
            params: [{
              name: "fxn",
              description: "<p>function to be fired when mouse is\n                               pressed over the element.\n                               if <code>false</code> is passed instead, the previously\n                               firing function will no longer fire.</p>\n",
              type: "Function|Boolean"
            }],
            class: "p5.Element",
            module: "DOM"
          },
          doubleClicked: {
            name: "doubleClicked",
            params: [{
              name: "fxn",
              description: "<p>function to be fired when mouse is\n                               double clicked over the element.\n                               if <code>false</code> is passed instead, the previously\n                               firing function will no longer fire.</p>\n",
              type: "Function|Boolean"
            }],
            class: "p5.Element",
            module: "DOM"
          },
          mouseWheel: {
            name: "mouseWheel",
            params: [{
              name: "fxn",
              description: "<p>function to be fired when mouse is\n                               scrolled over the element.\n                               if <code>false</code> is passed instead, the previously\n                               firing function will no longer fire.</p>\n",
              type: "Function|Boolean"
            }],
            class: "p5.Element",
            module: "DOM"
          },
          mouseReleased: {
            name: "mouseReleased",
            params: [{
              name: "fxn",
              description: "<p>function to be fired when mouse is\n                               released over the element.\n                               if <code>false</code> is passed instead, the previously\n                               firing function will no longer fire.</p>\n",
              type: "Function|Boolean"
            }],
            class: "p5.Element",
            module: "DOM"
          },
          mouseClicked: {
            name: "mouseClicked",
            params: [{
              name: "fxn",
              description: "<p>function to be fired when mouse is\n                               clicked over the element.\n                               if <code>false</code> is passed instead, the previously\n                               firing function will no longer fire.</p>\n",
              type: "Function|Boolean"
            }],
            class: "p5.Element",
            module: "DOM"
          },
          mouseMoved: {
            name: "mouseMoved",
            params: [{
              name: "fxn",
              description: "<p>function to be fired when a mouse moves\n                               over the element.\n                               if <code>false</code> is passed instead, the previously\n                               firing function will no longer fire.</p>\n",
              type: "Function|Boolean"
            }],
            class: "p5.Element",
            module: "DOM"
          },
          mouseOver: {
            name: "mouseOver",
            params: [{
              name: "fxn",
              description: "<p>function to be fired when a mouse moves\n                               onto the element.\n                               if <code>false</code> is passed instead, the previously\n                               firing function will no longer fire.</p>\n",
              type: "Function|Boolean"
            }],
            class: "p5.Element",
            module: "DOM"
          },
          mouseOut: {
            name: "mouseOut",
            params: [{
              name: "fxn",
              description: "<p>function to be fired when a mouse\n                               moves off of an element.\n                               if <code>false</code> is passed instead, the previously\n                               firing function will no longer fire.</p>\n",
              type: "Function|Boolean"
            }],
            class: "p5.Element",
            module: "DOM"
          },
          touchStarted: {
            name: "touchStarted",
            params: [{
              name: "fxn",
              description: "<p>function to be fired when a touch\n                               starts over the element.\n                               if <code>false</code> is passed instead, the previously\n                               firing function will no longer fire.</p>\n",
              type: "Function|Boolean"
            }],
            class: "p5.Element",
            module: "DOM"
          },
          touchMoved: {
            name: "touchMoved",
            params: [{
              name: "fxn",
              description: "<p>function to be fired when a touch moves over\n                               the element.\n                               if <code>false</code> is passed instead, the previously\n                               firing function will no longer fire.</p>\n",
              type: "Function|Boolean"
            }],
            class: "p5.Element",
            module: "DOM"
          },
          touchEnded: {
            name: "touchEnded",
            params: [{
              name: "fxn",
              description: "<p>function to be fired when a touch ends\n                               over the element.\n                               if <code>false</code> is passed instead, the previously\n                               firing function will no longer fire.</p>\n",
              type: "Function|Boolean"
            }],
            class: "p5.Element",
            module: "DOM"
          },
          dragOver: {
            name: "dragOver",
            params: [{
              name: "fxn",
              description: "<p>function to be fired when a file is\n                               dragged over the element.\n                               if <code>false</code> is passed instead, the previously\n                               firing function will no longer fire.</p>\n",
              type: "Function|Boolean"
            }],
            class: "p5.Element",
            module: "DOM"
          },
          dragLeave: {
            name: "dragLeave",
            params: [{
              name: "fxn",
              description: "<p>function to be fired when a file is\n                               dragged off the element.\n                               if <code>false</code> is passed instead, the previously\n                               firing function will no longer fire.</p>\n",
              type: "Function|Boolean"
            }],
            class: "p5.Element",
            module: "DOM"
          },
          addClass: {
            name: "addClass",
            params: [{
              name: "class",
              description: "<p>name of class to add</p>\n",
              type: "String"
            }],
            class: "p5.Element",
            module: "DOM"
          },
          removeClass: {
            name: "removeClass",
            params: [{
              name: "class",
              description: "<p>name of class to remove</p>\n",
              type: "String"
            }],
            class: "p5.Element",
            module: "DOM"
          },
          hasClass: {
            name: "hasClass",
            params: [{
              name: "c",
              description: "<p>class name of class to check</p>\n",
              type: "String"
            }],
            class: "p5.Element",
            module: "DOM"
          },
          toggleClass: {
            name: "toggleClass",
            params: [{
              name: "c",
              description: "<p>class name to toggle</p>\n",
              type: "String"
            }],
            class: "p5.Element",
            module: "DOM"
          },
          child: {
            name: "child",
            class: "p5.Element",
            module: "DOM",
            overloads: [{
              params: []
            }, {
              params: [{
                name: "child",
                description: '<p>the ID, DOM node, or <a href="#/p5.Element">p5.Element</a>\n                        to add to the current element</p>\n',
                type: "String|p5.Element",
                optional: !0
              }],
              chainable: 1
            }]
          },
          center: {
            name: "center",
            params: [{
              name: "align",
              description: "<p>passing 'vertical', 'horizontal' aligns element accordingly</p>\n",
              type: "String",
              optional: !0
            }],
            class: "p5.Element",
            module: "DOM"
          },
          html: {
            name: "html",
            class: "p5.Element",
            module: "DOM",
            overloads: [{
              params: []
            }, {
              params: [{
                name: "html",
                description: "<p>the HTML to be placed inside the element</p>\n",
                type: "String",
                optional: !0
              }, {
                name: "append",
                description: "<p>whether to append HTML to existing</p>\n",
                type: "Boolean",
                optional: !0
              }],
              chainable: 1
            }]
          },
          position: {
            name: "position",
            class: "p5.Element",
            module: "DOM",
            overloads: [{
              params: []
            }, {
              params: [{
                name: "x",
                description: "<p>x-position relative to upper left of window (optional)</p>\n",
                type: "Number",
                optional: !0
              }, {
                name: "y",
                description: "<p>y-position relative to upper left of window (optional)</p>\n",
                type: "Number",
                optional: !0
              }, {
                name: "positionType",
                description: "<p>it can be static, fixed, relative, sticky, initial or inherit (optional)</p>\n",
                type: "String"
              }],
              chainable: 1
            }]
          },
          style: {
            name: "style",
            class: "p5.Element",
            module: "DOM",
            overloads: [{
              params: [{
                name: "property",
                description: "<p>property to be set</p>\n",
                type: "String"
              }]
            }, {
              params: [{
                name: "property",
                description: "",
                type: "String"
              }, {
                name: "value",
                description: "<p>value to assign to property</p>\n",
                type: "String|p5.Color"
              }],
              chainable: 1
            }]
          },
          attribute: {
            name: "attribute",
            class: "p5.Element",
            module: "DOM",
            overloads: [{
              params: []
            }, {
              params: [{
                name: "attr",
                description: "<p>attribute to set</p>\n",
                type: "String"
              }, {
                name: "value",
                description: "<p>value to assign to attribute</p>\n",
                type: "String"
              }],
              chainable: 1
            }]
          },
          removeAttribute: {
            name: "removeAttribute",
            params: [{
              name: "attr",
              description: "<p>attribute to remove</p>\n",
              type: "String"
            }],
            class: "p5.Element",
            module: "DOM"
          },
          value: {
            name: "value",
            class: "p5.Element",
            module: "DOM",
            overloads: [{
              params: []
            }, {
              params: [{
                name: "value",
                description: "",
                type: "String|Number"
              }],
              chainable: 1
            }]
          },
          show: {
            name: "show",
            class: "p5.Element",
            module: "DOM"
          },
          hide: {
            name: "hide",
            class: "p5.Element",
            module: "DOM"
          },
          size: {
            name: "size",
            class: "p5.Element",
            module: "DOM",
            overloads: [{
              params: []
            }, {
              params: [{
                name: "w",
                description: "<p>width of the element, either AUTO, or a number</p>\n",
                type: "Number|Constant"
              }, {
                name: "h",
                description: "<p>height of the element, either AUTO, or a number</p>\n",
                type: "Number|Constant",
                optional: !0
              }],
              chainable: 1
            }]
          },
          remove: {
            name: "remove",
            class: "p5.Element",
            module: "DOM"
          },
          drop: {
            name: "drop",
            params: [{
              name: "callback",
              description: "<p>callback to receive loaded file, called for each file dropped.</p>\n",
              type: "Function"
            }, {
              name: "fxn",
              description: "<p>callback triggered once when files are dropped with the drop event.</p>\n",
              type: "Function",
              optional: !0
            }],
            class: "p5.Element",
            module: "DOM"
          }
        },
        "p5.Graphics": {
          reset: {
            name: "reset",
            class: "p5.Graphics",
            module: "Rendering"
          },
          remove: {
            name: "remove",
            class: "p5.Graphics",
            module: "Rendering"
          }
        },
        JSON: {
          stringify: {
            name: "stringify",
            params: [{
              name: "object",
              description: "<p>:Javascript object that you would like to convert to JSON</p>\n",
              type: "Object"
            }],
            class: "JSON",
            module: "Foundation"
          }
        },
        console: {
          log: {
            name: "log",
            params: [{
              name: "message",
              description: "<p>:Message that you would like to print to the console</p>\n",
              type: "String|Expression|Object"
            }],
            class: "console",
            module: "Foundation"
          }
        },
        "p5.TypedDict": {
          size: {
            name: "size",
            class: "p5.TypedDict",
            module: "Data"
          },
          hasKey: {
            name: "hasKey",
            params: [{
              name: "key",
              description: "<p>that you want to look up</p>\n",
              type: "Number|String"
            }],
            class: "p5.TypedDict",
            module: "Data"
          },
          get: {
            name: "get",
            params: [{
              name: "the",
              description: "<p>key you want to access</p>\n",
              type: "Number|String"
            }],
            class: "p5.TypedDict",
            module: "Data"
          },
          set: {
            name: "set",
            params: [{
              name: "key",
              description: "",
              type: "Number|String"
            }, {
              name: "value",
              description: "",
              type: "Number|String"
            }],
            class: "p5.TypedDict",
            module: "Data"
          },
          create: {
            name: "create",
            class: "p5.TypedDict",
            module: "Data",
            overloads: [{
              params: [{
                name: "key",
                description: "",
                type: "Number|String"
              }, {
                name: "value",
                description: "",
                type: "Number|String"
              }]
            }, {
              params: [{
                name: "obj",
                description: "<p>key/value pair</p>\n",
                type: "Object"
              }]
            }]
          },
          clear: {
            name: "clear",
            class: "p5.TypedDict",
            module: "Data"
          },
          remove: {
            name: "remove",
            params: [{
              name: "key",
              description: "<p>for the pair to remove</p>\n",
              type: "Number|String"
            }],
            class: "p5.TypedDict",
            module: "Data"
          },
          print: {
            name: "print",
            class: "p5.TypedDict",
            module: "Data"
          },
          saveTable: {
            name: "saveTable",
            class: "p5.TypedDict",
            module: "Data"
          },
          saveJSON: {
            name: "saveJSON",
            class: "p5.TypedDict",
            module: "Data"
          }
        },
        "p5.NumberDict": {
          add: {
            name: "add",
            params: [{
              name: "Key",
              description: "<p>for the value you wish to add to</p>\n",
              type: "Number"
            }, {
              name: "Number",
              description: "<p>to add to the value</p>\n",
              type: "Number"
            }],
            class: "p5.NumberDict",
            module: "Data"
          },
          sub: {
            name: "sub",
            params: [{
              name: "Key",
              description: "<p>for the value you wish to subtract from</p>\n",
              type: "Number"
            }, {
              name: "Number",
              description: "<p>to subtract from the value</p>\n",
              type: "Number"
            }],
            class: "p5.NumberDict",
            module: "Data"
          },
          mult: {
            name: "mult",
            params: [{
              name: "Key",
              description: "<p>for value you wish to multiply</p>\n",
              type: "Number"
            }, {
              name: "Amount",
              description: "<p>to multiply the value by</p>\n",
              type: "Number"
            }],
            class: "p5.NumberDict",
            module: "Data"
          },
          div: {
            name: "div",
            params: [{
              name: "Key",
              description: "<p>for value you wish to divide</p>\n",
              type: "Number"
            }, {
              name: "Amount",
              description: "<p>to divide the value by</p>\n",
              type: "Number"
            }],
            class: "p5.NumberDict",
            module: "Data"
          },
          minValue: {
            name: "minValue",
            class: "p5.NumberDict",
            module: "Data"
          },
          maxValue: {
            name: "maxValue",
            class: "p5.NumberDict",
            module: "Data"
          },
          minKey: {
            name: "minKey",
            class: "p5.NumberDict",
            module: "Data"
          },
          maxKey: {
            name: "maxKey",
            class: "p5.NumberDict",
            module: "Data"
          }
        },
        "p5.MediaElement": {
          src: {
            name: "src",
            class: "p5.MediaElement",
            module: "DOM"
          },
          play: {
            name: "play",
            class: "p5.MediaElement",
            module: "DOM"
          },
          stop: {
            name: "stop",
            class: "p5.MediaElement",
            module: "DOM"
          },
          pause: {
            name: "pause",
            class: "p5.MediaElement",
            module: "DOM"
          },
          loop: {
            name: "loop",
            class: "p5.MediaElement",
            module: "DOM"
          },
          noLoop: {
            name: "noLoop",
            class: "p5.MediaElement",
            module: "DOM"
          },
          autoplay: {
            name: "autoplay",
            params: [{
              name: "shouldAutoplay",
              description: "<p>whether the element should autoplay</p>\n",
              type: "Boolean"
            }],
            class: "p5.MediaElement",
            module: "DOM"
          },
          volume: {
            name: "volume",
            class: "p5.MediaElement",
            module: "DOM",
            overloads: [{
              params: []
            }, {
              params: [{
                name: "val",
                description: "<p>volume between 0.0 and 1.0</p>\n",
                type: "Number"
              }],
              chainable: 1
            }]
          },
          speed: {
            name: "speed",
            class: "p5.MediaElement",
            module: "DOM",
            overloads: [{
              params: []
            }, {
              params: [{
                name: "speed",
                description: "<p>speed multiplier for element playback</p>\n",
                type: "Number"
              }],
              chainable: 1
            }]
          },
          time: {
            name: "time",
            class: "p5.MediaElement",
            module: "DOM",
            overloads: [{
              params: []
            }, {
              params: [{
                name: "time",
                description: "<p>time to jump to (in seconds)</p>\n",
                type: "Number"
              }],
              chainable: 1
            }]
          },
          duration: {
            name: "duration",
            class: "p5.MediaElement",
            module: "DOM"
          },
          onended: {
            name: "onended",
            params: [{
              name: "callback",
              description: "<p>function to call when the\n                            soundfile has ended. The\n                            media element will be passed\n                            in as the argument to the\n                            callback.</p>\n",
              type: "Function"
            }],
            class: "p5.MediaElement",
            module: "DOM"
          },
          connect: {
            name: "connect",
            params: [{
              name: "audioNode",
              description: "<p>AudioNode from the Web Audio API,\nor an object from the p5.sound library</p>\n",
              type: "AudioNode|Object"
            }],
            class: "p5.MediaElement",
            module: "DOM"
          },
          disconnect: {
            name: "disconnect",
            class: "p5.MediaElement",
            module: "DOM"
          },
          showControls: {
            name: "showControls",
            class: "p5.MediaElement",
            module: "DOM"
          },
          hideControls: {
            name: "hideControls",
            class: "p5.MediaElement",
            module: "DOM"
          },
          addCue: {
            name: "addCue",
            params: [{
              name: "time",
              description: "<p>Time in seconds, relative to this media\n                            element's playback. For example, to trigger\n                            an event every time playback reaches two\n                            seconds, pass in the number 2. This will be\n                            passed as the first parameter to\n                            the callback function.</p>\n",
              type: "Number"
            }, {
              name: "callback",
              description: "<p>Name of a function that will be\n                            called at the given time. The callback will\n                            receive time and (optionally) param as its\n                            two parameters.</p>\n",
              type: "Function"
            }, {
              name: "value",
              description: "<p>An object to be passed as the\n                            second parameter to the\n                            callback function.</p>\n",
              type: "Object",
              optional: !0
            }],
            class: "p5.MediaElement",
            module: "DOM"
          },
          removeCue: {
            name: "removeCue",
            params: [{
              name: "id",
              description: "<p>ID of the cue, as returned by addCue</p>\n",
              type: "Number"
            }],
            class: "p5.MediaElement",
            module: "DOM"
          },
          clearCues: {
            name: "clearCues",
            params: [{
              name: "id",
              description: "<p>ID of the cue, as returned by addCue</p>\n",
              type: "Number"
            }],
            class: "p5.MediaElement",
            module: "DOM"
          }
        },
        "p5.File": {
          file: {
            name: "file",
            class: "p5.File",
            module: "DOM"
          },
          type: {
            name: "type",
            class: "p5.File",
            module: "DOM"
          },
          subtype: {
            name: "subtype",
            class: "p5.File",
            module: "DOM"
          },
          name: {
            name: "name",
            class: "p5.File",
            module: "DOM"
          },
          size: {
            name: "size",
            class: "p5.File",
            module: "DOM"
          },
          data: {
            name: "data",
            class: "p5.File",
            module: "DOM"
          }
        },
        "p5.Image": {
          width: {
            name: "width",
            class: "p5.Image",
            module: "Image"
          },
          height: {
            name: "height",
            class: "p5.Image",
            module: "Image"
          },
          pixels: {
            name: "pixels",
            class: "p5.Image",
            module: "Image"
          },
          loadPixels: {
            name: "loadPixels",
            class: "p5.Image",
            module: "Image"
          },
          updatePixels: {
            name: "updatePixels",
            class: "p5.Image",
            module: "Image",
            overloads: [{
              params: [{
                name: "x",
                description: "<p>x-offset of the target update area for the\n                             underlying canvas</p>\n",
                type: "Integer"
              }, {
                name: "y",
                description: "<p>y-offset of the target update area for the\n                             underlying canvas</p>\n",
                type: "Integer"
              }, {
                name: "w",
                description: "<p>height of the target update area for the\n                             underlying canvas</p>\n",
                type: "Integer"
              }, {
                name: "h",
                description: "<p>height of the target update area for the\n                             underlying canvas</p>\n",
                type: "Integer"
              }]
            }, {
              params: []
            }]
          },
          get: {
            name: "get",
            class: "p5.Image",
            module: "Image",
            overloads: [{
              params: [{
                name: "x",
                description: "<p>x-coordinate of the pixel</p>\n",
                type: "Number"
              }, {
                name: "y",
                description: "<p>y-coordinate of the pixel</p>\n",
                type: "Number"
              }, {
                name: "w",
                description: "<p>width</p>\n",
                type: "Number"
              }, {
                name: "h",
                description: "<p>height</p>\n",
                type: "Number"
              }]
            }, {
              params: []
            }, {
              params: [{
                name: "x",
                description: "",
                type: "Number"
              }, {
                name: "y",
                description: "",
                type: "Number"
              }]
            }]
          },
          set: {
            name: "set",
            params: [{
              name: "x",
              description: "<p>x-coordinate of the pixel</p>\n",
              type: "Number"
            }, {
              name: "y",
              description: "<p>y-coordinate of the pixel</p>\n",
              type: "Number"
            }, {
              name: "a",
              description: '<p>grayscale value | pixel array |\n                               a <a href="#/p5.Color">p5.Color</a> | image to copy</p>\n',
              type: "Number|Number[]|Object"
            }],
            class: "p5.Image",
            module: "Image"
          },
          resize: {
            name: "resize",
            params: [{
              name: "width",
              description: "<p>the resized image width</p>\n",
              type: "Number"
            }, {
              name: "height",
              description: "<p>the resized image height</p>\n",
              type: "Number"
            }],
            class: "p5.Image",
            module: "Image"
          },
          copy: {
            name: "copy",
            class: "p5.Image",
            module: "Image",
            overloads: [{
              params: [{
                name: "srcImage",
                description: "<p>source image</p>\n",
                type: "p5.Image|p5.Element"
              }, {
                name: "sx",
                description: "<p>X coordinate of the source's upper left corner</p>\n",
                type: "Integer"
              }, {
                name: "sy",
                description: "<p>Y coordinate of the source's upper left corner</p>\n",
                type: "Integer"
              }, {
                name: "sw",
                description: "<p>source image width</p>\n",
                type: "Integer"
              }, {
                name: "sh",
                description: "<p>source image height</p>\n",
                type: "Integer"
              }, {
                name: "dx",
                description: "<p>X coordinate of the destination's upper left corner</p>\n",
                type: "Integer"
              }, {
                name: "dy",
                description: "<p>Y coordinate of the destination's upper left corner</p>\n",
                type: "Integer"
              }, {
                name: "dw",
                description: "<p>destination image width</p>\n",
                type: "Integer"
              }, {
                name: "dh",
                description: "<p>destination image height</p>\n",
                type: "Integer"
              }]
            }, {
              params: [{
                name: "sx",
                description: "",
                type: "Integer"
              }, {
                name: "sy",
                description: "",
                type: "Integer"
              }, {
                name: "sw",
                description: "",
                type: "Integer"
              }, {
                name: "sh",
                description: "",
                type: "Integer"
              }, {
                name: "dx",
                description: "",
                type: "Integer"
              }, {
                name: "dy",
                description: "",
                type: "Integer"
              }, {
                name: "dw",
                description: "",
                type: "Integer"
              }, {
                name: "dh",
                description: "",
                type: "Integer"
              }]
            }]
          },
          mask: {
            name: "mask",
            params: [{
              name: "srcImage",
              description: "<p>source image</p>\n",
              type: "p5.Image"
            }],
            class: "p5.Image",
            module: "Image"
          },
          filter: {
            name: "filter",
            params: [{
              name: "filterType",
              description: "<p>either THRESHOLD, GRAY, OPAQUE, INVERT,\n                               POSTERIZE, BLUR, ERODE, DILATE or BLUR.\n                               See Filters.js for docs on\n                               each available filter</p>\n",
              type: "Constant"
            }, {
              name: "filterParam",
              description: "<p>an optional parameter unique\n                               to each filter, see above</p>\n",
              type: "Number",
              optional: !0
            }],
            class: "p5.Image",
            module: "Image"
          },
          blend: {
            name: "blend",
            class: "p5.Image",
            module: "Image",
            overloads: [{
              params: [{
                name: "srcImage",
                description: "<p>source image</p>\n",
                type: "p5.Image"
              }, {
                name: "sx",
                description: "<p>X coordinate of the source's upper left corner</p>\n",
                type: "Integer"
              }, {
                name: "sy",
                description: "<p>Y coordinate of the source's upper left corner</p>\n",
                type: "Integer"
              }, {
                name: "sw",
                description: "<p>source image width</p>\n",
                type: "Integer"
              }, {
                name: "sh",
                description: "<p>source image height</p>\n",
                type: "Integer"
              }, {
                name: "dx",
                description: "<p>X coordinate of the destination's upper left corner</p>\n",
                type: "Integer"
              }, {
                name: "dy",
                description: "<p>Y coordinate of the destination's upper left corner</p>\n",
                type: "Integer"
              }, {
                name: "dw",
                description: "<p>destination image width</p>\n",
                type: "Integer"
              }, {
                name: "dh",
                description: "<p>destination image height</p>\n",
                type: "Integer"
              }, {
                name: "blendMode",
                description: '<p>the blend mode. either\n    BLEND, DARKEST, LIGHTEST, DIFFERENCE,\n    MULTIPLY, EXCLUSION, SCREEN, REPLACE, OVERLAY, HARD_LIGHT,\n    SOFT_LIGHT, DODGE, BURN, ADD or NORMAL.</p>\n<p>Available blend modes are: normal | multiply | screen | overlay |\n           darken | lighten | color-dodge | color-burn | hard-light |\n           soft-light | difference | exclusion | hue | saturation |\n           color | luminosity</p>\n<p><a href="http://blogs.adobe.com/webplatform/2013/01/28/blending-features-in-canvas/">http://blogs.adobe.com/webplatform/2013/01/28/blending-features-in-canvas/</a></p>\n',
                type: "Constant"
              }]
            }, {
              params: [{
                name: "sx",
                description: "",
                type: "Integer"
              }, {
                name: "sy",
                description: "",
                type: "Integer"
              }, {
                name: "sw",
                description: "",
                type: "Integer"
              }, {
                name: "sh",
                description: "",
                type: "Integer"
              }, {
                name: "dx",
                description: "",
                type: "Integer"
              }, {
                name: "dy",
                description: "",
                type: "Integer"
              }, {
                name: "dw",
                description: "",
                type: "Integer"
              }, {
                name: "dh",
                description: "",
                type: "Integer"
              }, {
                name: "blendMode",
                description: "",
                type: "Constant"
              }]
            }]
          },
          save: {
            name: "save",
            params: [{
              name: "filename",
              description: "<p>give your file a name</p>\n",
              type: "String"
            }, {
              name: "extension",
              description: "<p>'png' or 'jpg'</p>\n",
              type: "String"
            }],
            class: "p5.Image",
            module: "Image"
          },
          reset: {
            name: "reset",
            class: "p5.Image",
            module: "Image"
          },
          getCurrentFrame: {
            name: "getCurrentFrame",
            class: "p5.Image",
            module: "Image"
          },
          setFrame: {
            name: "setFrame",
            params: [{
              name: "index",
              description: "<p>the index for the frame that should be displayed</p>\n",
              type: "Number"
            }],
            class: "p5.Image",
            module: "Image"
          },
          numFrames: {
            name: "numFrames",
            class: "p5.Image",
            module: "Image"
          },
          play: {
            name: "play",
            class: "p5.Image",
            module: "Image"
          },
          pause: {
            name: "pause",
            class: "p5.Image",
            module: "Image"
          },
          delay: {
            name: "delay",
            params: [{
              name: "d",
              description: "<p>the amount in milliseconds to delay between switching frames</p>\n",
              type: "Number"
            }, {
              name: "index",
              description: "<p>the index of the frame that should have the new delay value {optional}</p>\n",
              type: "Number",
              optional: !0
            }],
            class: "p5.Image",
            module: "Image"
          }
        },
        "p5.PrintWriter": {
          write: {
            name: "write",
            params: [{
              name: "data",
              description: "<p>all data to be written by the PrintWriter</p>\n",
              type: "Array"
            }],
            class: "p5.PrintWriter",
            module: "IO"
          },
          print: {
            name: "print",
            params: [{
              name: "data",
              description: "<p>all data to be printed by the PrintWriter</p>\n",
              type: "Array"
            }],
            class: "p5.PrintWriter",
            module: "IO"
          },
          clear: {
            name: "clear",
            class: "p5.PrintWriter",
            module: "IO"
          },
          close: {
            name: "close",
            class: "p5.PrintWriter",
            module: "IO"
          }
        },
        "p5.Table": {
          columns: {
            name: "columns",
            class: "p5.Table",
            module: "IO"
          },
          rows: {
            name: "rows",
            class: "p5.Table",
            module: "IO"
          },
          addRow: {
            name: "addRow",
            params: [{
              name: "row",
              description: "<p>row to be added to the table</p>\n",
              type: "p5.TableRow",
              optional: !0
            }],
            class: "p5.Table",
            module: "IO"
          },
          removeRow: {
            name: "removeRow",
            params: [{
              name: "id",
              description: "<p>ID number of the row to remove</p>\n",
              type: "Integer"
            }],
            class: "p5.Table",
            module: "IO"
          },
          getRow: {
            name: "getRow",
            params: [{
              name: "rowID",
              description: "<p>ID number of the row to get</p>\n",
              type: "Integer"
            }],
            class: "p5.Table",
            module: "IO"
          },
          getRows: {
            name: "getRows",
            class: "p5.Table",
            module: "IO"
          },
          findRow: {
            name: "findRow",
            params: [{
              name: "value",
              description: "<p>The value to match</p>\n",
              type: "String"
            }, {
              name: "column",
              description: "<p>ID number or title of the\n                               column to search</p>\n",
              type: "Integer|String"
            }],
            class: "p5.Table",
            module: "IO"
          },
          findRows: {
            name: "findRows",
            params: [{
              name: "value",
              description: "<p>The value to match</p>\n",
              type: "String"
            }, {
              name: "column",
              description: "<p>ID number or title of the\n                               column to search</p>\n",
              type: "Integer|String"
            }],
            class: "p5.Table",
            module: "IO"
          },
          matchRow: {
            name: "matchRow",
            params: [{
              name: "regexp",
              description: "<p>The regular expression to match</p>\n",
              type: "String|RegExp"
            }, {
              name: "column",
              description: "<p>The column ID (number) or\n                                 title (string)</p>\n",
              type: "String|Integer"
            }],
            class: "p5.Table",
            module: "IO"
          },
          matchRows: {
            name: "matchRows",
            params: [{
              name: "regexp",
              description: "<p>The regular expression to match</p>\n",
              type: "String"
            }, {
              name: "column",
              description: "<p>The column ID (number) or\n                                 title (string)</p>\n",
              type: "String|Integer",
              optional: !0
            }],
            class: "p5.Table",
            module: "IO"
          },
          getColumn: {
            name: "getColumn",
            params: [{
              name: "column",
              description: "<p>String or Number of the column to return</p>\n",
              type: "String|Number"
            }],
            class: "p5.Table",
            module: "IO"
          },
          clearRows: {
            name: "clearRows",
            class: "p5.Table",
            module: "IO"
          },
          addColumn: {
            name: "addColumn",
            params: [{
              name: "title",
              description: "<p>title of the given column</p>\n",
              type: "String",
              optional: !0
            }],
            class: "p5.Table",
            module: "IO"
          },
          getColumnCount: {
            name: "getColumnCount",
            class: "p5.Table",
            module: "IO"
          },
          getRowCount: {
            name: "getRowCount",
            class: "p5.Table",
            module: "IO"
          },
          removeTokens: {
            name: "removeTokens",
            params: [{
              name: "chars",
              description: "<p>String listing characters to be removed</p>\n",
              type: "String"
            }, {
              name: "column",
              description: "<p>Column ID (number)\n                                 or name (string)</p>\n",
              type: "String|Integer",
              optional: !0
            }],
            class: "p5.Table",
            module: "IO"
          },
          trim: {
            name: "trim",
            params: [{
              name: "column",
              description: "<p>Column ID (number)\n                                 or name (string)</p>\n",
              type: "String|Integer",
              optional: !0
            }],
            class: "p5.Table",
            module: "IO"
          },
          removeColumn: {
            name: "removeColumn",
            params: [{
              name: "column",
              description: "<p>columnName (string) or ID (number)</p>\n",
              type: "String|Integer"
            }],
            class: "p5.Table",
            module: "IO"
          },
          set: {
            name: "set",
            params: [{
              name: "row",
              description: "<p>row ID</p>\n",
              type: "Integer"
            }, {
              name: "column",
              description: "<p>column ID (Number)\n                              or title (String)</p>\n",
              type: "String|Integer"
            }, {
              name: "value",
              description: "<p>value to assign</p>\n",
              type: "String|Number"
            }],
            class: "p5.Table",
            module: "IO"
          },
          setNum: {
            name: "setNum",
            params: [{
              name: "row",
              description: "<p>row ID</p>\n",
              type: "Integer"
            }, {
              name: "column",
              description: "<p>column ID (Number)\n                              or title (String)</p>\n",
              type: "String|Integer"
            }, {
              name: "value",
              description: "<p>value to assign</p>\n",
              type: "Number"
            }],
            class: "p5.Table",
            module: "IO"
          },
          setString: {
            name: "setString",
            params: [{
              name: "row",
              description: "<p>row ID</p>\n",
              type: "Integer"
            }, {
              name: "column",
              description: "<p>column ID (Number)\n                              or title (String)</p>\n",
              type: "String|Integer"
            }, {
              name: "value",
              description: "<p>value to assign</p>\n",
              type: "String"
            }],
            class: "p5.Table",
            module: "IO"
          },
          get: {
            name: "get",
            params: [{
              name: "row",
              description: "<p>row ID</p>\n",
              type: "Integer"
            }, {
              name: "column",
              description: "<p>columnName (string) or\n                                  ID (number)</p>\n",
              type: "String|Integer"
            }],
            class: "p5.Table",
            module: "IO"
          },
          getNum: {
            name: "getNum",
            params: [{
              name: "row",
              description: "<p>row ID</p>\n",
              type: "Integer"
            }, {
              name: "column",
              description: "<p>columnName (string) or\n                                  ID (number)</p>\n",
              type: "String|Integer"
            }],
            class: "p5.Table",
            module: "IO"
          },
          getString: {
            name: "getString",
            params: [{
              name: "row",
              description: "<p>row ID</p>\n",
              type: "Integer"
            }, {
              name: "column",
              description: "<p>columnName (string) or\n                                  ID (number)</p>\n",
              type: "String|Integer"
            }],
            class: "p5.Table",
            module: "IO"
          },
          getObject: {
            name: "getObject",
            params: [{
              name: "headerColumn",
              description: "<p>Name of the column which should be used to\n                             title each row object (optional)</p>\n",
              type: "String",
              optional: !0
            }],
            class: "p5.Table",
            module: "IO"
          },
          getArray: {
            name: "getArray",
            class: "p5.Table",
            module: "IO"
          }
        },
        "p5.TableRow": {
          set: {
            name: "set",
            params: [{
              name: "column",
              description: "<p>Column ID (Number)\n                              or Title (String)</p>\n",
              type: "String|Integer"
            }, {
              name: "value",
              description: "<p>The value to be stored</p>\n",
              type: "String|Number"
            }],
            class: "p5.TableRow",
            module: "IO"
          },
          setNum: {
            name: "setNum",
            params: [{
              name: "column",
              description: "<p>Column ID (Number)\n                              or Title (String)</p>\n",
              type: "String|Integer"
            }, {
              name: "value",
              description: "<p>The value to be stored\n                              as a Float</p>\n",
              type: "Number|String"
            }],
            class: "p5.TableRow",
            module: "IO"
          },
          setString: {
            name: "setString",
            params: [{
              name: "column",
              description: "<p>Column ID (Number)\n                              or Title (String)</p>\n",
              type: "String|Integer"
            }, {
              name: "value",
              description: "<p>The value to be stored\n                              as a String</p>\n",
              type: "String|Number|Boolean|Object"
            }],
            class: "p5.TableRow",
            module: "IO"
          },
          get: {
            name: "get",
            params: [{
              name: "column",
              description: "<p>columnName (string) or\n                                 ID (number)</p>\n",
              type: "String|Integer"
            }],
            class: "p5.TableRow",
            module: "IO"
          },
          getNum: {
            name: "getNum",
            params: [{
              name: "column",
              description: "<p>columnName (string) or\n                                 ID (number)</p>\n",
              type: "String|Integer"
            }],
            class: "p5.TableRow",
            module: "IO"
          },
          getString: {
            name: "getString",
            params: [{
              name: "column",
              description: "<p>columnName (string) or\n                                 ID (number)</p>\n",
              type: "String|Integer"
            }],
            class: "p5.TableRow",
            module: "IO"
          }
        },
        "p5.XML": {
          getParent: {
            name: "getParent",
            class: "p5.XML",
            module: "IO"
          },
          getName: {
            name: "getName",
            class: "p5.XML",
            module: "IO"
          },
          setName: {
            name: "setName",
            params: [{
              name: "the",
              description: "<p>new name of the node</p>\n",
              type: "String"
            }],
            class: "p5.XML",
            module: "IO"
          },
          hasChildren: {
            name: "hasChildren",
            class: "p5.XML",
            module: "IO"
          },
          listChildren: {
            name: "listChildren",
            class: "p5.XML",
            module: "IO"
          },
          getChildren: {
            name: "getChildren",
            params: [{
              name: "name",
              description: "<p>element name</p>\n",
              type: "String",
              optional: !0
            }],
            class: "p5.XML",
            module: "IO"
          },
          getChild: {
            name: "getChild",
            params: [{
              name: "name",
              description: "<p>element name or index</p>\n",
              type: "String|Integer"
            }],
            class: "p5.XML",
            module: "IO"
          },
          addChild: {
            name: "addChild",
            params: [{
              name: "node",
              description: '<p>a <a href="#/p5.XML">p5.XML</a> Object which will be the child to be added</p>\n',
              type: "p5.XML"
            }],
            class: "p5.XML",
            module: "IO"
          },
          removeChild: {
            name: "removeChild",
            params: [{
              name: "name",
              description: "<p>element name or index</p>\n",
              type: "String|Integer"
            }],
            class: "p5.XML",
            module: "IO"
          },
          getAttributeCount: {
            name: "getAttributeCount",
            class: "p5.XML",
            module: "IO"
          },
          listAttributes: {
            name: "listAttributes",
            class: "p5.XML",
            module: "IO"
          },
          hasAttribute: {
            name: "hasAttribute",
            params: [{
              name: "the",
              description: "<p>attribute to be checked</p>\n",
              type: "String"
            }],
            class: "p5.XML",
            module: "IO"
          },
          getNum: {
            name: "getNum",
            params: [{
              name: "name",
              description: "<p>the non-null full name of the attribute</p>\n",
              type: "String"
            }, {
              name: "defaultValue",
              description: "<p>the default value of the attribute</p>\n",
              type: "Number",
              optional: !0
            }],
            class: "p5.XML",
            module: "IO"
          },
          getString: {
            name: "getString",
            params: [{
              name: "name",
              description: "<p>the non-null full name of the attribute</p>\n",
              type: "String"
            }, {
              name: "defaultValue",
              description: "<p>the default value of the attribute</p>\n",
              type: "Number",
              optional: !0
            }],
            class: "p5.XML",
            module: "IO"
          },
          setAttribute: {
            name: "setAttribute",
            params: [{
              name: "name",
              description: "<p>the full name of the attribute</p>\n",
              type: "String"
            }, {
              name: "value",
              description: "<p>the value of the attribute</p>\n",
              type: "Number|String|Boolean"
            }],
            class: "p5.XML",
            module: "IO"
          },
          getContent: {
            name: "getContent",
            params: [{
              name: "defaultValue",
              description: "<p>value returned if no content is found</p>\n",
              type: "String",
              optional: !0
            }],
            class: "p5.XML",
            module: "IO"
          },
          setContent: {
            name: "setContent",
            params: [{
              name: "text",
              description: "<p>the new content</p>\n",
              type: "String"
            }],
            class: "p5.XML",
            module: "IO"
          },
          serialize: {
            name: "serialize",
            class: "p5.XML",
            module: "IO"
          }
        },
        "p5.Vector": {
          x: {
            name: "x",
            class: "p5.Vector",
            module: "Math"
          },
          y: {
            name: "y",
            class: "p5.Vector",
            module: "Math"
          },
          z: {
            name: "z",
            class: "p5.Vector",
            module: "Math"
          },
          toString: {
            name: "toString",
            class: "p5.Vector",
            module: "Math"
          },
          set: {
            name: "set",
            class: "p5.Vector",
            module: "Math",
            overloads: [{
              params: [{
                name: "x",
                description: "<p>the x component of the vector</p>\n",
                type: "Number",
                optional: !0
              }, {
                name: "y",
                description: "<p>the y component of the vector</p>\n",
                type: "Number",
                optional: !0
              }, {
                name: "z",
                description: "<p>the z component of the vector</p>\n",
                type: "Number",
                optional: !0
              }],
              chainable: 1
            }, {
              params: [{
                name: "value",
                description: "<p>the vector to set</p>\n",
                type: "p5.Vector|Number[]"
              }],
              chainable: 1
            }]
          },
          copy: {
            name: "copy",
            class: "p5.Vector",
            module: "Math"
          },
          add: {
            name: "add",
            class: "p5.Vector",
            module: "Math",
            overloads: [{
              params: [{
                name: "x",
                description: "<p>the x component of the vector to be added</p>\n",
                type: "Number"
              }, {
                name: "y",
                description: "<p>the y component of the vector to be added</p>\n",
                type: "Number",
                optional: !0
              }, {
                name: "z",
                description: "<p>the z component of the vector to be added</p>\n",
                type: "Number",
                optional: !0
              }],
              chainable: 1
            }, {
              params: [{
                name: "value",
                description: "<p>the vector to add</p>\n",
                type: "p5.Vector|Number[]"
              }],
              chainable: 1
            }, {
              params: [{
                name: "v1",
                description: '<p>a <a href="#/p5.Vector">p5.Vector</a> to add</p>\n',
                type: "p5.Vector"
              }, {
                name: "v2",
                description: '<p>a <a href="#/p5.Vector">p5.Vector</a> to add</p>\n',
                type: "p5.Vector"
              }, {
                name: "target",
                description: "<p>the vector to receive the result (Optional)</p>\n",
                type: "p5.Vector",
                optional: !0
              }],
              static: 1
            }]
          },
          rem: {
            name: "rem",
            class: "p5.Vector",
            module: "Math",
            overloads: [{
              params: [{
                name: "x",
                description: "<p>the x component of divisor vector</p>\n",
                type: "Number"
              }, {
                name: "y",
                description: "<p>the y component of divisor vector</p>\n",
                type: "Number"
              }, {
                name: "z",
                description: "<p>the z component of divisor vector</p>\n",
                type: "Number"
              }],
              chainable: 1
            }, {
              params: [{
                name: "value",
                description: "<p>divisor vector</p>\n",
                type: "p5.Vector | Number[]"
              }],
              chainable: 1
            }, {
              params: [{
                name: "v1",
                description: '<p>dividend <a href="#/p5.Vector">p5.Vector</a></p>\n',
                type: "p5.Vector"
              }, {
                name: "v2",
                description: '<p>divisor <a href="#/p5.Vector">p5.Vector</a></p>\n',
                type: "p5.Vector"
              }],
              static: 1
            }, {
              params: [{
                name: "v1",
                description: "",
                type: "p5.Vector"
              }, {
                name: "v2",
                description: "",
                type: "p5.Vector"
              }],
              static: 1
            }]
          },
          sub: {
            name: "sub",
            class: "p5.Vector",
            module: "Math",
            overloads: [{
              params: [{
                name: "x",
                description: "<p>the x component of the vector to subtract</p>\n",
                type: "Number"
              }, {
                name: "y",
                description: "<p>the y component of the vector to subtract</p>\n",
                type: "Number",
                optional: !0
              }, {
                name: "z",
                description: "<p>the z component of the vector to subtract</p>\n",
                type: "Number",
                optional: !0
              }],
              chainable: 1
            }, {
              params: [{
                name: "value",
                description: "<p>the vector to subtract</p>\n",
                type: "p5.Vector|Number[]"
              }],
              chainable: 1
            }, {
              params: [{
                name: "v1",
                description: '<p>a <a href="#/p5.Vector">p5.Vector</a> to subtract from</p>\n',
                type: "p5.Vector"
              }, {
                name: "v2",
                description: '<p>a <a href="#/p5.Vector">p5.Vector</a> to subtract</p>\n',
                type: "p5.Vector"
              }, {
                name: "target",
                description: "<p>the vector to receive the result (Optional)</p>\n",
                type: "p5.Vector",
                optional: !0
              }],
              static: 1
            }]
          },
          mult: {
            name: "mult",
            class: "p5.Vector",
            module: "Math",
            overloads: [{
              params: [{
                name: "n",
                description: "<p>The number to multiply with the vector</p>\n",
                type: "Number"
              }],
              chainable: 1
            }, {
              params: [{
                name: "x",
                description: "<p>The number to multiply with the x component of the vector</p>\n",
                type: "Number"
              }, {
                name: "y",
                description: "<p>The number to multiply with the y component of the vector</p>\n",
                type: "Number"
              }, {
                name: "z",
                description: "<p>The number to multiply with the z component of the vector</p>\n",
                type: "Number",
                optional: !0
              }],
              chainable: 1
            }, {
              params: [{
                name: "arr",
                description: "<p>The array to multiply with the components of the vector</p>\n",
                type: "Number[]"
              }],
              chainable: 1
            }, {
              params: [{
                name: "v",
                description: "<p>The vector to multiply with the components of the original vector</p>\n",
                type: "p5.Vector"
              }],
              chainable: 1
            }, {
              params: [{
                name: "x",
                description: "",
                type: "Number"
              }, {
                name: "y",
                description: "",
                type: "Number"
              }, {
                name: "z",
                description: "",
                type: "Number",
                optional: !0
              }],
              static: 1
            }, {
              params: [{
                name: "v",
                description: "",
                type: "p5.Vector"
              }, {
                name: "n",
                description: "",
                type: "Number"
              }, {
                name: "target",
                description: "<p>the vector to receive the result (Optional)</p>\n",
                type: "p5.Vector",
                optional: !0
              }],
              static: 1
            }, {
              params: [{
                name: "v0",
                description: "",
                type: "p5.Vector"
              }, {
                name: "v1",
                description: "",
                type: "p5.Vector"
              }, {
                name: "target",
                description: "",
                type: "p5.Vector",
                optional: !0
              }],
              static: 1
            }, {
              params: [{
                name: "v0",
                description: "",
                type: "p5.Vector"
              }, {
                name: "arr",
                description: "",
                type: "Number[]"
              }, {
                name: "target",
                description: "",
                type: "p5.Vector",
                optional: !0
              }],
              static: 1
            }]
          },
          div: {
            name: "div",
            class: "p5.Vector",
            module: "Math",
            overloads: [{
              params: [{
                name: "n",
                description: "<p>The number to divide the vector by</p>\n",
                type: "Number"
              }],
              chainable: 1
            }, {
              params: [{
                name: "x",
                description: "<p>The number to divide with the x component of the vector</p>\n",
                type: "Number"
              }, {
                name: "y",
                description: "<p>The number to divide with the y component of the vector</p>\n",
                type: "Number"
              }, {
                name: "z",
                description: "<p>The number to divide with the z component of the vector</p>\n",
                type: "Number",
                optional: !0
              }],
              chainable: 1
            }, {
              params: [{
                name: "arr",
                description: "<p>The array to divide the components of the vector by</p>\n",
                type: "Number[]"
              }],
              chainable: 1
            }, {
              params: [{
                name: "v",
                description: "<p>The vector to divide the components of the original vector by</p>\n",
                type: "p5.Vector"
              }],
              chainable: 1
            }, {
              params: [{
                name: "x",
                description: "",
                type: "Number"
              }, {
                name: "y",
                description: "",
                type: "Number"
              }, {
                name: "z",
                description: "",
                type: "Number",
                optional: !0
              }],
              static: 1
            }, {
              params: [{
                name: "v",
                description: "",
                type: "p5.Vector"
              }, {
                name: "n",
                description: "",
                type: "Number"
              }, {
                name: "target",
                description: "<p>the vector to receive the result (Optional)</p>\n",
                type: "p5.Vector",
                optional: !0
              }],
              static: 1
            }, {
              params: [{
                name: "v0",
                description: "",
                type: "p5.Vector"
              }, {
                name: "v1",
                description: "",
                type: "p5.Vector"
              }, {
                name: "target",
                description: "",
                type: "p5.Vector",
                optional: !0
              }],
              static: 1
            }, {
              params: [{
                name: "v0",
                description: "",
                type: "p5.Vector"
              }, {
                name: "arr",
                description: "",
                type: "Number[]"
              }, {
                name: "target",
                description: "",
                type: "p5.Vector",
                optional: !0
              }],
              static: 1
            }]
          },
          mag: {
            name: "mag",
            class: "p5.Vector",
            module: "Math",
            overloads: [{
              params: []
            }, {
              params: [{
                name: "vecT",
                description: "<p>the vector to return the magnitude of</p>\n",
                type: "p5.Vector"
              }],
              static: 1
            }]
          },
          magSq: {
            name: "magSq",
            class: "p5.Vector",
            module: "Math"
          },
          dot: {
            name: "dot",
            class: "p5.Vector",
            module: "Math",
            overloads: [{
              params: [{
                name: "x",
                description: "<p>x component of the vector</p>\n",
                type: "Number"
              }, {
                name: "y",
                description: "<p>y component of the vector</p>\n",
                type: "Number",
                optional: !0
              }, {
                name: "z",
                description: "<p>z component of the vector</p>\n",
                type: "Number",
                optional: !0
              }]
            }, {
              params: [{
                name: "value",
                description: '<p>value component of the vector or a <a href="#/p5.Vector">p5.Vector</a></p>\n',
                type: "p5.Vector"
              }]
            }, {
              params: [{
                name: "v1",
                description: '<p>the first <a href="#/p5.Vector">p5.Vector</a></p>\n',
                type: "p5.Vector"
              }, {
                name: "v2",
                description: '<p>the second <a href="#/p5.Vector">p5.Vector</a></p>\n',
                type: "p5.Vector"
              }],
              static: 1
            }]
          },
          cross: {
            name: "cross",
            class: "p5.Vector",
            module: "Math",
            overloads: [{
              params: [{
                name: "v",
                description: '<p><a href="#/p5.Vector">p5.Vector</a> to be crossed</p>\n',
                type: "p5.Vector"
              }]
            }, {
              params: [{
                name: "v1",
                description: '<p>the first <a href="#/p5.Vector">p5.Vector</a></p>\n',
                type: "p5.Vector"
              }, {
                name: "v2",
                description: '<p>the second <a href="#/p5.Vector">p5.Vector</a></p>\n',
                type: "p5.Vector"
              }],
              static: 1
            }]
          },
          dist: {
            name: "dist",
            class: "p5.Vector",
            module: "Math",
            overloads: [{
              params: [{
                name: "v",
                description: '<p>the x, y, and z coordinates of a <a href="#/p5.Vector">p5.Vector</a></p>\n',
                type: "p5.Vector"
              }]
            }, {
              params: [{
                name: "v1",
                description: '<p>the first <a href="#/p5.Vector">p5.Vector</a></p>\n',
                type: "p5.Vector"
              }, {
                name: "v2",
                description: '<p>the second <a href="#/p5.Vector">p5.Vector</a></p>\n',
                type: "p5.Vector"
              }],
              static: 1
            }]
          },
          normalize: {
            name: "normalize",
            class: "p5.Vector",
            module: "Math"
          },
          limit: {
            name: "limit",
            params: [{
              name: "max",
              description: "<p>the maximum magnitude for the vector</p>\n",
              type: "Number"
            }],
            class: "p5.Vector",
            module: "Math"
          },
          setMag: {
            name: "setMag",
            params: [{
              name: "len",
              description: "<p>the new length for this vector</p>\n",
              type: "Number"
            }],
            class: "p5.Vector",
            module: "Math"
          },
          heading: {
            name: "heading",
            class: "p5.Vector",
            module: "Math"
          },
          rotate: {
            name: "rotate",
            params: [{
              name: "angle",
              description: "<p>the angle of rotation</p>\n",
              type: "Number"
            }],
            class: "p5.Vector",
            module: "Math"
          },
          angleBetween: {
            name: "angleBetween",
            params: [{
              name: "value",
              description: '<p>the x, y, and z components of a <a href="#/p5.Vector">p5.Vector</a></p>\n',
              type: "p5.Vector"
            }],
            class: "p5.Vector",
            module: "Math"
          },
          lerp: {
            name: "lerp",
            class: "p5.Vector",
            module: "Math",
            overloads: [{
              params: [{
                name: "x",
                description: "<p>the x component</p>\n",
                type: "Number"
              }, {
                name: "y",
                description: "<p>the y component</p>\n",
                type: "Number"
              }, {
                name: "z",
                description: "<p>the z component</p>\n",
                type: "Number"
              }, {
                name: "amt",
                description: "<p>the amount of interpolation; some value between 0.0\n                        (old vector) and 1.0 (new vector). 0.9 is very near\n                        the new vector. 0.5 is halfway in between.</p>\n",
                type: "Number"
              }],
              chainable: 1
            }, {
              params: [{
                name: "v",
                description: '<p>the <a href="#/p5.Vector">p5.Vector</a> to lerp to</p>\n',
                type: "p5.Vector"
              }, {
                name: "amt",
                description: "",
                type: "Number"
              }],
              chainable: 1
            }, {
              params: [{
                name: "v1",
                description: "",
                type: "p5.Vector"
              }, {
                name: "v2",
                description: "",
                type: "p5.Vector"
              }, {
                name: "amt",
                description: "",
                type: "Number"
              }, {
                name: "target",
                description: "<p>the vector to receive the result (Optional)</p>\n",
                type: "p5.Vector",
                optional: !0
              }],
              static: 1
            }]
          },
          reflect: {
            name: "reflect",
            params: [{
              name: "surfaceNormal",
              description: '<p>the <a href="#/p5.Vector">p5.Vector</a> to reflect about, will be normalized by this method</p>\n',
              type: "p5.Vector"
            }],
            class: "p5.Vector",
            module: "Math"
          },
          array: {
            name: "array",
            class: "p5.Vector",
            module: "Math"
          },
          equals: {
            name: "equals",
            class: "p5.Vector",
            module: "Math",
            overloads: [{
              params: [{
                name: "x",
                description: "<p>the x component of the vector</p>\n",
                type: "Number",
                optional: !0
              }, {
                name: "y",
                description: "<p>the y component of the vector</p>\n",
                type: "Number",
                optional: !0
              }, {
                name: "z",
                description: "<p>the z component of the vector</p>\n",
                type: "Number",
                optional: !0
              }]
            }, {
              params: [{
                name: "value",
                description: "<p>the vector to compare</p>\n",
                type: "p5.Vector|Array"
              }]
            }]
          },
          fromAngle: {
            name: "fromAngle",
            params: [{
              name: "angle",
              description: '<p>the desired angle, in radians (unaffected by <a href="#/p5/angleMode">angleMode</a>)</p>\n',
              type: "Number"
            }, {
              name: "length",
              description: "<p>the length of the new vector (defaults to 1)</p>\n",
              type: "Number",
              optional: !0
            }],
            class: "p5.Vector",
            module: "Math"
          },
          fromAngles: {
            name: "fromAngles",
            params: [{
              name: "theta",
              description: "<p>the polar angle, in radians (zero is up)</p>\n",
              type: "Number"
            }, {
              name: "phi",
              description: "<p>the azimuthal angle, in radians\n                              (zero is out of the screen)</p>\n",
              type: "Number"
            }, {
              name: "length",
              description: "<p>the length of the new vector (defaults to 1)</p>\n",
              type: "Number",
              optional: !0
            }],
            class: "p5.Vector",
            module: "Math"
          },
          random2D: {
            name: "random2D",
            class: "p5.Vector",
            module: "Math"
          },
          random3D: {
            name: "random3D",
            class: "p5.Vector",
            module: "Math"
          }
        },
        "p5.Font": {
          font: {
            name: "font",
            class: "p5.Font",
            module: "Typography"
          },
          textBounds: {
            name: "textBounds",
            params: [{
              name: "line",
              description: "<p>a line of text</p>\n",
              type: "String"
            }, {
              name: "x",
              description: "<p>x-position</p>\n",
              type: "Number"
            }, {
              name: "y",
              description: "<p>y-position</p>\n",
              type: "Number"
            }, {
              name: "fontSize",
              description: "<p>font size to use (optional) Default is 12.</p>\n",
              type: "Number",
              optional: !0
            }, {
              name: "options",
              description: "<p>opentype options (optional)\n                           opentype fonts contains alignment and baseline options.\n                           Default is 'LEFT' and 'alphabetic'</p>\n",
              type: "Object",
              optional: !0
            }],
            class: "p5.Font",
            module: "Typography"
          },
          textToPoints: {
            name: "textToPoints",
            params: [{
              name: "txt",
              description: "<p>a line of text</p>\n",
              type: "String"
            }, {
              name: "x",
              description: "<p>x-position</p>\n",
              type: "Number"
            }, {
              name: "y",
              description: "<p>y-position</p>\n",
              type: "Number"
            }, {
              name: "fontSize",
              description: "<p>font size to use (optional)</p>\n",
              type: "Number"
            }, {
              name: "options",
              description: "<p>an (optional) object that can contain:</p>\n<p><br>sampleFactor - the ratio of path-length to number of samples\n(default=.1); higher values yield more points and are therefore\nmore precise</p>\n<p><br>simplifyThreshold - if set to a non-zero value, collinear points will be\nbe removed from the polygon; the value represents the threshold angle to use\nwhen determining whether two edges are collinear</p>\n",
              type: "Object",
              optional: !0
            }],
            class: "p5.Font",
            module: "Typography"
          }
        },
        "p5.Camera": {
          perspective: {
            name: "perspective",
            class: "p5.Camera",
            module: "Lights, Camera"
          },
          ortho: {
            name: "ortho",
            class: "p5.Camera",
            module: "Lights, Camera"
          },
          frustum: {
            name: "frustum",
            class: "p5.Camera",
            module: "Lights, Camera"
          },
          pan: {
            name: "pan",
            params: [{
              name: "angle",
              description: '<p>amount to rotate camera in current\n<a href="#/p5/angleMode">angleMode</a> units.\nGreater than 0 values rotate counterclockwise (to the left).</p>\n',
              type: "Number"
            }],
            class: "p5.Camera",
            module: "Lights, Camera"
          },
          tilt: {
            name: "tilt",
            params: [{
              name: "angle",
              description: '<p>amount to rotate camera in current\n<a href="#/p5/angleMode">angleMode</a> units.\nGreater than 0 values rotate counterclockwise (to the left).</p>\n',
              type: "Number"
            }],
            class: "p5.Camera",
            module: "Lights, Camera"
          },
          lookAt: {
            name: "lookAt",
            params: [{
              name: "x",
              description: "<p>x position of a point in world space</p>\n",
              type: "Number"
            }, {
              name: "y",
              description: "<p>y position of a point in world space</p>\n",
              type: "Number"
            }, {
              name: "z",
              description: "<p>z position of a point in world space</p>\n",
              type: "Number"
            }],
            class: "p5.Camera",
            module: "Lights, Camera"
          },
          camera: {
            name: "camera",
            class: "p5.Camera",
            module: "Lights, Camera"
          },
          move: {
            name: "move",
            params: [{
              name: "x",
              description: "<p>amount to move along camera's left-right axis</p>\n",
              type: "Number"
            }, {
              name: "y",
              description: "<p>amount to move along camera's up-down axis</p>\n",
              type: "Number"
            }, {
              name: "z",
              description: "<p>amount to move along camera's forward-backward axis</p>\n",
              type: "Number"
            }],
            class: "p5.Camera",
            module: "Lights, Camera"
          },
          setPosition: {
            name: "setPosition",
            params: [{
              name: "x",
              description: "<p>x position of a point in world space</p>\n",
              type: "Number"
            }, {
              name: "y",
              description: "<p>y position of a point in world space</p>\n",
              type: "Number"
            }, {
              name: "z",
              description: "<p>z position of a point in world space</p>\n",
              type: "Number"
            }],
            class: "p5.Camera",
            module: "Lights, Camera"
          }
        },
        "p5.Geometry": {
          computeFaces: {
            name: "computeFaces",
            class: "p5.Geometry",
            module: "Lights, Camera"
          },
          computeNormals: {
            name: "computeNormals",
            class: "p5.Geometry",
            module: "Lights, Camera"
          },
          averageNormals: {
            name: "averageNormals",
            class: "p5.Geometry",
            module: "Lights, Camera"
          },
          averagePoleNormals: {
            name: "averagePoleNormals",
            class: "p5.Geometry",
            module: "Lights, Camera"
          },
          normalize: {
            name: "normalize",
            class: "p5.Geometry",
            module: "Lights, Camera"
          }
        },
        "p5.Shader": {
          setUniform: {
            name: "setUniform",
            params: [{
              name: "uniformName",
              description: "<p>the name of the uniform in the\nshader program</p>\n",
              type: "String"
            }, {
              name: "data",
              description: "<p>the data to be associated\nwith that uniform; type varies (could be a single numerical value, array,\nmatrix, or texture / sampler reference)</p>\n",
              type: "Object|Number|Boolean|Number[]"
            }],
            class: "p5.Shader",
            module: "Lights, Camera"
          }
        },
        "p5.sound": {
          getMasterVolume: {
            name: "getMasterVolume",
            class: "p5.sound",
            module: "p5.sound"
          },
          masterVolume: {
            name: "masterVolume",
            params: [{
              name: "volume",
              description: "<p>Volume (amplitude) between 0.0\n                                   and 1.0 or modulating signal/oscillator</p>\n",
              type: "Number|Object"
            }, {
              name: "rampTime",
              description: "<p>Fade for t seconds</p>\n",
              type: "Number",
              optional: !0
            }, {
              name: "timeFromNow",
              description: "<p>Schedule this event to happen at\n                               t seconds in the future</p>\n",
              type: "Number",
              optional: !0
            }],
            class: "p5.sound",
            module: "p5.sound"
          },
          soundOut: {
            name: "soundOut",
            class: "p5.sound",
            module: "p5.sound"
          }
        },
        "p5.Effect": {
          amp: {
            name: "amp",
            params: [{
              name: "vol",
              description: "<p>amplitude between 0 and 1.0</p>\n",
              type: "Number",
              optional: !0
            }, {
              name: "rampTime",
              description: "<p>create a fade that lasts until rampTime</p>\n",
              type: "Number",
              optional: !0
            }, {
              name: "tFromNow",
              description: "<p>schedule this event to happen in tFromNow seconds</p>\n",
              type: "Number",
              optional: !0
            }],
            class: "p5.Effect",
            module: "p5.sound"
          },
          chain: {
            name: "chain",
            params: [{
              name: "arguments",
              description: "<p>Chain together multiple sound objects</p>\n",
              type: "Object",
              optional: !0
            }],
            class: "p5.Effect",
            module: "p5.sound"
          },
          drywet: {
            name: "drywet",
            params: [{
              name: "fade",
              description: "<p>The desired drywet value (0 - 1.0)</p>\n",
              type: "Number",
              optional: !0
            }],
            class: "p5.Effect",
            module: "p5.sound"
          },
          connect: {
            name: "connect",
            params: [{
              name: "unit",
              description: "",
              type: "Object"
            }],
            class: "p5.Effect",
            module: "p5.sound"
          },
          disconnect: {
            name: "disconnect",
            class: "p5.Effect",
            module: "p5.sound"
          }
        },
        "p5.Filter": {
          biquadFilter: {
            name: "biquadFilter",
            class: "p5.Filter",
            module: "p5.sound"
          },
          process: {
            name: "process",
            params: [{
              name: "Signal",
              description: "<p>An object that outputs audio</p>\n",
              type: "Object"
            }, {
              name: "freq",
              description: "<p>Frequency in Hz, from 10 to 22050</p>\n",
              type: "Number",
              optional: !0
            }, {
              name: "res",
              description: "<p>Resonance/Width of the filter frequency\n                      from 0.001 to 1000</p>\n",
              type: "Number",
              optional: !0
            }],
            class: "p5.Filter",
            module: "p5.sound"
          },
          set: {
            name: "set",
            params: [{
              name: "freq",
              description: "<p>Frequency in Hz, from 10 to 22050</p>\n",
              type: "Number",
              optional: !0
            }, {
              name: "res",
              description: "<p>Resonance (Q) from 0.001 to 1000</p>\n",
              type: "Number",
              optional: !0
            }, {
              name: "timeFromNow",
              description: "<p>schedule this event to happen\n                              seconds from now</p>\n",
              type: "Number",
              optional: !0
            }],
            class: "p5.Filter",
            module: "p5.sound"
          },
          freq: {
            name: "freq",
            params: [{
              name: "freq",
              description: "<p>Filter Frequency</p>\n",
              type: "Number"
            }, {
              name: "timeFromNow",
              description: "<p>schedule this event to happen\n                              seconds from now</p>\n",
              type: "Number",
              optional: !0
            }],
            class: "p5.Filter",
            module: "p5.sound"
          },
          res: {
            name: "res",
            params: [{
              name: "res",
              description: "<p>Resonance/Width of filter freq\n                     from 0.001 to 1000</p>\n",
              type: "Number"
            }, {
              name: "timeFromNow",
              description: "<p>schedule this event to happen\n                              seconds from now</p>\n",
              type: "Number",
              optional: !0
            }],
            class: "p5.Filter",
            module: "p5.sound"
          },
          gain: {
            name: "gain",
            params: [{
              name: "gain",
              description: "",
              type: "Number"
            }],
            class: "p5.Filter",
            module: "p5.sound"
          },
          toggle: {
            name: "toggle",
            class: "p5.Filter",
            module: "p5.sound"
          },
          setType: {
            name: "setType",
            params: [{
              name: "t",
              description: "",
              type: "String"
            }],
            class: "p5.Filter",
            module: "p5.sound"
          }
        },
        "p5.Oscillator": {
          start: {
            name: "start",
            params: [{
              name: "time",
              description: "<p>startTime in seconds from now.</p>\n",
              type: "Number",
              optional: !0
            }, {
              name: "frequency",
              description: "<p>frequency in Hz.</p>\n",
              type: "Number",
              optional: !0
            }],
            class: "p5.Oscillator",
            module: "p5.sound"
          },
          stop: {
            name: "stop",
            params: [{
              name: "secondsFromNow",
              description: "<p>Time, in seconds from now.</p>\n",
              type: "Number"
            }],
            class: "p5.Oscillator",
            module: "p5.sound"
          },
          amp: {
            name: "amp",
            params: [{
              name: "vol",
              description: "<p>between 0 and 1.0\n                            or a modulating signal/oscillator</p>\n",
              type: "Number|Object"
            }, {
              name: "rampTime",
              description: "<p>create a fade that lasts rampTime</p>\n",
              type: "Number",
              optional: !0
            }, {
              name: "timeFromNow",
              description: "<p>schedule this event to happen\n                              seconds from now</p>\n",
              type: "Number",
              optional: !0
            }],
            class: "p5.Oscillator",
            module: "p5.sound"
          },
          freq: {
            name: "freq",
            params: [{
              name: "Frequency",
              description: "<p>Frequency in Hz\n                                      or modulating signal/oscillator</p>\n",
              type: "Number|Object"
            }, {
              name: "rampTime",
              description: "<p>Ramp time (in seconds)</p>\n",
              type: "Number",
              optional: !0
            }, {
              name: "timeFromNow",
              description: "<p>Schedule this event to happen\n                                 at x seconds from now</p>\n",
              type: "Number",
              optional: !0
            }],
            class: "p5.Oscillator",
            module: "p5.sound"
          },
          setType: {
            name: "setType",
            params: [{
              name: "type",
              description: "<p>'sine', 'triangle', 'sawtooth' or 'square'.</p>\n",
              type: "String"
            }],
            class: "p5.Oscillator",
            module: "p5.sound"
          },
          connect: {
            name: "connect",
            params: [{
              name: "unit",
              description: "<p>A p5.sound or Web Audio object</p>\n",
              type: "Object"
            }],
            class: "p5.Oscillator",
            module: "p5.sound"
          },
          disconnect: {
            name: "disconnect",
            class: "p5.Oscillator",
            module: "p5.sound"
          },
          pan: {
            name: "pan",
            params: [{
              name: "panning",
              description: "<p>Number between -1 and 1</p>\n",
              type: "Number"
            }, {
              name: "timeFromNow",
              description: "<p>schedule this event to happen\n                              seconds from now</p>\n",
              type: "Number"
            }],
            class: "p5.Oscillator",
            module: "p5.sound"
          },
          phase: {
            name: "phase",
            params: [{
              name: "phase",
              description: "<p>float between 0.0 and 1.0</p>\n",
              type: "Number"
            }],
            class: "p5.Oscillator",
            module: "p5.sound"
          },
          add: {
            name: "add",
            params: [{
              name: "number",
              description: "<p>Constant number to add</p>\n",
              type: "Number"
            }],
            class: "p5.Oscillator",
            module: "p5.sound"
          },
          mult: {
            name: "mult",
            params: [{
              name: "number",
              description: "<p>Constant number to multiply</p>\n",
              type: "Number"
            }],
            class: "p5.Oscillator",
            module: "p5.sound"
          },
          scale: {
            name: "scale",
            params: [{
              name: "inMin",
              description: "<p>input range minumum</p>\n",
              type: "Number"
            }, {
              name: "inMax",
              description: "<p>input range maximum</p>\n",
              type: "Number"
            }, {
              name: "outMin",
              description: "<p>input range minumum</p>\n",
              type: "Number"
            }, {
              name: "outMax",
              description: "<p>input range maximum</p>\n",
              type: "Number"
            }],
            class: "p5.Oscillator",
            module: "p5.sound"
          }
        },
        "p5.MonoSynth": {
          play: {
            name: "play",
            params: [{
              name: "note",
              description: '<p>the note you want to play, specified as a\n                               frequency in Hertz (Number) or as a midi\n                               value in Note/Octave format ("C4", "Eb3"...etc")\n                               See <a href = "https://github.com/Tonejs/Tone.js/wiki/Instruments">\n                               Tone</a>. Defaults to 440 hz.</p>\n',
              type: "String | Number"
            }, {
              name: "velocity",
              description: "<p>velocity of the note to play (ranging from 0 to 1)</p>\n",
              type: "Number",
              optional: !0
            }, {
              name: "secondsFromNow",
              description: "<p>time from now (in seconds) at which to play</p>\n",
              type: "Number",
              optional: !0
            }, {
              name: "sustainTime",
              description: "<p>time to sustain before releasing the envelope. Defaults to 0.15 seconds.</p>\n",
              type: "Number",
              optional: !0
            }],
            class: "p5.MonoSynth",
            module: "p5.sound"
          },
          triggerAttack: {
            params: [{
              name: "note",
              description: '<p>the note you want to play, specified as a\n                               frequency in Hertz (Number) or as a midi\n                               value in Note/Octave format ("C4", "Eb3"...etc")\n                               See <a href = "https://github.com/Tonejs/Tone.js/wiki/Instruments">\n                               Tone</a>. Defaults to 440 hz</p>\n',
              type: "String | Number"
            }, {
              name: "velocity",
              description: "<p>velocity of the note to play (ranging from 0 to 1)</p>\n",
              type: "Number",
              optional: !0
            }, {
              name: "secondsFromNow",
              description: "<p>time from now (in seconds) at which to play</p>\n",
              type: "Number",
              optional: !0
            }],
            name: "triggerAttack",
            class: "p5.MonoSynth",
            module: "p5.sound"
          },
          triggerRelease: {
            params: [{
              name: "secondsFromNow",
              description: "<p>time to trigger the release</p>\n",
              type: "Number"
            }],
            name: "triggerRelease",
            class: "p5.MonoSynth",
            module: "p5.sound"
          },
          setADSR: {
            name: "setADSR",
            params: [{
              name: "attackTime",
              description: "<p>Time (in seconds before envelope\n                              reaches Attack Level</p>\n",
              type: "Number"
            }, {
              name: "decayTime",
              description: "<p>Time (in seconds) before envelope\n                              reaches Decay/Sustain Level</p>\n",
              type: "Number",
              optional: !0
            }, {
              name: "susRatio",
              description: "<p>Ratio between attackLevel and releaseLevel, on a scale from 0 to 1,\n                              where 1.0 = attackLevel, 0.0 = releaseLevel.\n                              The susRatio determines the decayLevel and the level at which the\n                              sustain portion of the envelope will sustain.\n                              For example, if attackLevel is 0.4, releaseLevel is 0,\n                              and susAmt is 0.5, the decayLevel would be 0.2. If attackLevel is\n                              increased to 1.0 (using <code>setRange</code>),\n                              then decayLevel would increase proportionally, to become 0.5.</p>\n",
              type: "Number",
              optional: !0
            }, {
              name: "releaseTime",
              description: "<p>Time in seconds from now (defaults to 0)</p>\n",
              type: "Number",
              optional: !0
            }],
            class: "p5.MonoSynth",
            module: "p5.sound"
          },
          attack: {
            name: "attack",
            class: "p5.MonoSynth",
            module: "p5.sound"
          },
          decay: {
            name: "decay",
            class: "p5.MonoSynth",
            module: "p5.sound"
          },
          sustain: {
            name: "sustain",
            class: "p5.MonoSynth",
            module: "p5.sound"
          },
          release: {
            name: "release",
            class: "p5.MonoSynth",
            module: "p5.sound"
          },
          amp: {
            name: "amp",
            params: [{
              name: "vol",
              description: "<p>desired volume</p>\n",
              type: "Number"
            }, {
              name: "rampTime",
              description: "<p>Time to reach new volume</p>\n",
              type: "Number",
              optional: !0
            }],
            class: "p5.MonoSynth",
            module: "p5.sound"
          },
          connect: {
            name: "connect",
            params: [{
              name: "unit",
              description: "<p>A p5.sound or Web Audio object</p>\n",
              type: "Object"
            }],
            class: "p5.MonoSynth",
            module: "p5.sound"
          },
          disconnect: {
            name: "disconnect",
            class: "p5.MonoSynth",
            module: "p5.sound"
          },
          dispose: {
            name: "dispose",
            class: "p5.MonoSynth",
            module: "p5.sound"
          }
        },
        "p5.AudioVoice": {
          connect: {
            name: "connect",
            params: [{
              name: "unit",
              description: "",
              type: "Object"
            }],
            class: "p5.AudioVoice",
            module: "p5.sound"
          },
          disconnect: {
            name: "disconnect",
            class: "p5.AudioVoice",
            module: "p5.sound"
          }
        },
        "p5.PolySynth": {
          notes: {
            name: "notes",
            class: "p5.PolySynth",
            module: "p5.sound"
          },
          polyvalue: {
            name: "polyvalue",
            class: "p5.PolySynth",
            module: "p5.sound"
          },
          AudioVoice: {
            name: "AudioVoice",
            class: "p5.PolySynth",
            module: "p5.sound"
          },
          play: {
            name: "play",
            params: [{
              name: "note",
              description: "<p>midi note to play (ranging from 0 to 127 - 60 being a middle C)</p>\n",
              type: "Number",
              optional: !0
            }, {
              name: "velocity",
              description: "<p>velocity of the note to play (ranging from 0 to 1)</p>\n",
              type: "Number",
              optional: !0
            }, {
              name: "secondsFromNow",
              description: "<p>time from now (in seconds) at which to play</p>\n",
              type: "Number",
              optional: !0
            }, {
              name: "sustainTime",
              description: "<p>time to sustain before releasing the envelope</p>\n",
              type: "Number",
              optional: !0
            }],
            class: "p5.PolySynth",
            module: "p5.sound"
          },
          noteADSR: {
            name: "noteADSR",
            params: [{
              name: "note",
              description: "<p>Midi note on which ADSR should be set.</p>\n",
              type: "Number",
              optional: !0
            }, {
              name: "attackTime",
              description: "<p>Time (in seconds before envelope\n                              reaches Attack Level</p>\n",
              type: "Number",
              optional: !0
            }, {
              name: "decayTime",
              description: "<p>Time (in seconds) before envelope\n                              reaches Decay/Sustain Level</p>\n",
              type: "Number",
              optional: !0
            }, {
              name: "susRatio",
              description: "<p>Ratio between attackLevel and releaseLevel, on a scale from 0 to 1,\n                              where 1.0 = attackLevel, 0.0 = releaseLevel.\n                              The susRatio determines the decayLevel and the level at which the\n                              sustain portion of the envelope will sustain.\n                              For example, if attackLevel is 0.4, releaseLevel is 0,\n                              and susAmt is 0.5, the decayLevel would be 0.2. If attackLevel is\n                              increased to 1.0 (using <code>setRange</code>),\n                              then decayLevel would increase proportionally, to become 0.5.</p>\n",
              type: "Number",
              optional: !0
            }, {
              name: "releaseTime",
              description: "<p>Time in seconds from now (defaults to 0)</p>\n",
              type: "Number",
              optional: !0
            }],
            class: "p5.PolySynth",
            module: "p5.sound"
          },
          setADSR: {
            name: "setADSR",
            params: [{
              name: "attackTime",
              description: "<p>Time (in seconds before envelope\n                               reaches Attack Level</p>\n",
              type: "Number",
              optional: !0
            }, {
              name: "decayTime",
              description: "<p>Time (in seconds) before envelope\n                               reaches Decay/Sustain Level</p>\n",
              type: "Number",
              optional: !0
            }, {
              name: "susRatio",
              description: "<p>Ratio between attackLevel and releaseLevel, on a scale from 0 to 1,\n                               where 1.0 = attackLevel, 0.0 = releaseLevel.\n                               The susRatio determines the decayLevel and the level at which the\n                               sustain portion of the envelope will sustain.\n                               For example, if attackLevel is 0.4, releaseLevel is 0,\n                               and susAmt is 0.5, the decayLevel would be 0.2. If attackLevel is\n                               increased to 1.0 (using <code>setRange</code>),\n                               then decayLevel would increase proportionally, to become 0.5.</p>\n",
              type: "Number",
              optional: !0
            }, {
              name: "releaseTime",
              description: "<p>Time in seconds from now (defaults to 0)</p>\n",
              type: "Number",
              optional: !0
            }],
            class: "p5.PolySynth",
            module: "p5.sound"
          },
          noteAttack: {
            name: "noteAttack",
            params: [{
              name: "note",
              description: "<p>midi note on which attack should be triggered.</p>\n",
              type: "Number",
              optional: !0
            }, {
              name: "velocity",
              description: "<p>velocity of the note to play (ranging from 0 to 1)/</p>\n",
              type: "Number",
              optional: !0
            }, {
              name: "secondsFromNow",
              description: "<p>time from now (in seconds)</p>\n",
              type: "Number",
              optional: !0
            }],
            class: "p5.PolySynth",
            module: "p5.sound"
          },
          noteRelease: {
            name: "noteRelease",
            params: [{
              name: "note",
              description: "<p>midi note on which attack should be triggered.\n                                  If no value is provided, all notes will be released.</p>\n",
              type: "Number",
              optional: !0
            }, {
              name: "secondsFromNow",
              description: "<p>time to trigger the release</p>\n",
              type: "Number",
              optional: !0
            }],
            class: "p5.PolySynth",
            module: "p5.sound"
          },
          connect: {
            name: "connect",
            params: [{
              name: "unit",
              description: "<p>A p5.sound or Web Audio object</p>\n",
              type: "Object"
            }],
            class: "p5.PolySynth",
            module: "p5.sound"
          },
          disconnect: {
            name: "disconnect",
            class: "p5.PolySynth",
            module: "p5.sound"
          },
          dispose: {
            name: "dispose",
            class: "p5.PolySynth",
            module: "p5.sound"
          }
        },
        "p5.SoundFile": {
          isLoaded: {
            name: "isLoaded",
            class: "p5.SoundFile",
            module: "p5.sound"
          },
          play: {
            name: "play",
            params: [{
              name: "startTime",
              description: "<p>(optional) schedule playback to start (in seconds from now).</p>\n",
              type: "Number",
              optional: !0
            }, {
              name: "rate",
              description: "<p>(optional) playback rate</p>\n",
              type: "Number",
              optional: !0
            }, {
              name: "amp",
              description: "<p>(optional) amplitude (volume)\n                                    of playback</p>\n",
              type: "Number",
              optional: !0
            }, {
              name: "cueStart",
              description: "<p>(optional) cue start time in seconds</p>\n",
              type: "Number",
              optional: !0
            }, {
              name: "duration",
              description: "<p>(optional) duration of playback in seconds</p>\n",
              type: "Number",
              optional: !0
            }],
            class: "p5.SoundFile",
            module: "p5.sound"
          },
          playMode: {
            name: "playMode",
            params: [{
              name: "str",
              description: "<p>'restart' or 'sustain' or 'untilDone'</p>\n",
              type: "String"
            }],
            class: "p5.SoundFile",
            module: "p5.sound"
          },
          pause: {
            name: "pause",
            params: [{
              name: "startTime",
              description: "<p>(optional) schedule event to occur\n                             seconds from now</p>\n",
              type: "Number",
              optional: !0
            }],
            class: "p5.SoundFile",
            module: "p5.sound"
          },
          loop: {
            name: "loop",
            params: [{
              name: "startTime",
              description: "<p>(optional) schedule event to occur\n                            seconds from now</p>\n",
              type: "Number",
              optional: !0
            }, {
              name: "rate",
              description: "<p>(optional) playback rate</p>\n",
              type: "Number",
              optional: !0
            }, {
              name: "amp",
              description: "<p>(optional) playback volume</p>\n",
              type: "Number",
              optional: !0
            }, {
              name: "cueLoopStart",
              description: "<p>(optional) startTime in seconds</p>\n",
              type: "Number",
              optional: !0
            }, {
              name: "duration",
              description: "<p>(optional) loop duration in seconds</p>\n",
              type: "Number",
              optional: !0
            }],
            class: "p5.SoundFile",
            module: "p5.sound"
          },
          setLoop: {
            name: "setLoop",
            params: [{
              name: "Boolean",
              description: "<p>set looping to true or false</p>\n",
              type: "Boolean"
            }],
            class: "p5.SoundFile",
            module: "p5.sound"
          },
          isLooping: {
            name: "isLooping",
            class: "p5.SoundFile",
            module: "p5.sound"
          },
          isPlaying: {
            name: "isPlaying",
            class: "p5.SoundFile",
            module: "p5.sound"
          },
          isPaused: {
            name: "isPaused",
            class: "p5.SoundFile",
            module: "p5.sound"
          },
          stop: {
            name: "stop",
            params: [{
              name: "startTime",
              description: "<p>(optional) schedule event to occur\n                            in seconds from now</p>\n",
              type: "Number",
              optional: !0
            }],
            class: "p5.SoundFile",
            module: "p5.sound"
          },
          setVolume: {
            name: "setVolume",
            params: [{
              name: "volume",
              description: "<p>Volume (amplitude) between 0.0\n                                   and 1.0 or modulating signal/oscillator</p>\n",
              type: "Number|Object"
            }, {
              name: "rampTime",
              description: "<p>Fade for t seconds</p>\n",
              type: "Number",
              optional: !0
            }, {
              name: "timeFromNow",
              description: "<p>Schedule this event to happen at\n                               t seconds in the future</p>\n",
              type: "Number",
              optional: !0
            }],
            class: "p5.SoundFile",
            module: "p5.sound"
          },
          pan: {
            name: "pan",
            params: [{
              name: "panValue",
              description: "<p>Set the stereo panner</p>\n",
              type: "Number",
              optional: !0
            }, {
              name: "timeFromNow",
              description: "<p>schedule this event to happen\n                                seconds from now</p>\n",
              type: "Number",
              optional: !0
            }],
            class: "p5.SoundFile",
            module: "p5.sound"
          },
          getPan: {
            name: "getPan",
            class: "p5.SoundFile",
            module: "p5.sound"
          },
          rate: {
            name: "rate",
            params: [{
              name: "playbackRate",
              description: "<p>Set the playback rate. 1.0 is normal,\n                                   .5 is half-speed, 2.0 is twice as fast.\n                                   Values less than zero play backwards.</p>\n",
              type: "Number",
              optional: !0
            }],
            class: "p5.SoundFile",
            module: "p5.sound"
          },
          duration: {
            name: "duration",
            class: "p5.SoundFile",
            module: "p5.sound"
          },
          currentTime: {
            name: "currentTime",
            class: "p5.SoundFile",
            module: "p5.sound"
          },
          jump: {
            name: "jump",
            params: [{
              name: "cueTime",
              description: "<p>cueTime of the soundFile in seconds.</p>\n",
              type: "Number"
            }, {
              name: "duration",
              description: "<p>duration in seconds.</p>\n",
              type: "Number"
            }],
            class: "p5.SoundFile",
            module: "p5.sound"
          },
          channels: {
            name: "channels",
            class: "p5.SoundFile",
            module: "p5.sound"
          },
          sampleRate: {
            name: "sampleRate",
            class: "p5.SoundFile",
            module: "p5.sound"
          },
          frames: {
            name: "frames",
            class: "p5.SoundFile",
            module: "p5.sound"
          },
          getPeaks: {
            name: "getPeaks",
            params: [{
              name: "length",
              description: "<p>length is the size of the returned array.\n                         Larger length results in more precision.\n                         Defaults to 5*width of the browser window.</p>\n",
              type: "Number",
              optional: !0
            }],
            class: "p5.SoundFile",
            module: "p5.sound"
          },
          reverseBuffer: {
            name: "reverseBuffer",
            class: "p5.SoundFile",
            module: "p5.sound"
          },
          onended: {
            name: "onended",
            params: [{
              name: "callback",
              description: "<p>function to call when the\n                            soundfile has ended.</p>\n",
              type: "Function"
            }],
            class: "p5.SoundFile",
            module: "p5.sound"
          },
          connect: {
            name: "connect",
            params: [{
              name: "object",
              description: "<p>Audio object that accepts an input</p>\n",
              type: "Object",
              optional: !0
            }],
            class: "p5.SoundFile",
            module: "p5.sound"
          },
          disconnect: {
            name: "disconnect",
            class: "p5.SoundFile",
            module: "p5.sound"
          },
          setPath: {
            name: "setPath",
            params: [{
              name: "path",
              description: "<p>path to audio file</p>\n",
              type: "String"
            }, {
              name: "callback",
              description: "<p>Callback</p>\n",
              type: "Function"
            }],
            class: "p5.SoundFile",
            module: "p5.sound"
          },
          setBuffer: {
            name: "setBuffer",
            params: [{
              name: "buf",
              description: "<p>Array of Float32 Array(s). 2 Float32 Arrays\n                   will create a stereo source. 1 will create\n                   a mono source.</p>\n",
              type: "Array"
            }],
            class: "p5.SoundFile",
            module: "p5.sound"
          },
          processPeaks: {
            name: "processPeaks",
            params: [{
              name: "callback",
              description: "<p>a function to call once this data is returned</p>\n",
              type: "Function"
            }, {
              name: "initThreshold",
              description: "<p>initial threshold defaults to 0.9</p>\n",
              type: "Number",
              optional: !0
            }, {
              name: "minThreshold",
              description: "<p>minimum threshold defaults to 0.22</p>\n",
              type: "Number",
              optional: !0
            }, {
              name: "minPeaks",
              description: "<p>minimum number of peaks defaults to 200</p>\n",
              type: "Number",
              optional: !0
            }],
            class: "p5.SoundFile",
            module: "p5.sound"
          },
          addCue: {
            name: "addCue",
            params: [{
              name: "time",
              description: "<p>Time in seconds, relative to this media\n                           element's playback. For example, to trigger\n                           an event every time playback reaches two\n                           seconds, pass in the number 2. This will be\n                           passed as the first parameter to\n                           the callback function.</p>\n",
              type: "Number"
            }, {
              name: "callback",
              description: "<p>Name of a function that will be\n                           called at the given time. The callback will\n                           receive time and (optionally) param as its\n                           two parameters.</p>\n",
              type: "Function"
            }, {
              name: "value",
              description: "<p>An object to be passed as the\n                           second parameter to the\n                           callback function.</p>\n",
              type: "Object",
              optional: !0
            }],
            class: "p5.SoundFile",
            module: "p5.sound"
          },
          removeCue: {
            name: "removeCue",
            params: [{
              name: "id",
              description: "<p>ID of the cue, as returned by addCue</p>\n",
              type: "Number"
            }],
            class: "p5.SoundFile",
            module: "p5.sound"
          },
          clearCues: {
            name: "clearCues",
            class: "p5.SoundFile",
            module: "p5.sound"
          },
          save: {
            name: "save",
            params: [{
              name: "fileName",
              description: "<p>name of the resulting .wav file.</p>\n",
              type: "String",
              optional: !0
            }],
            class: "p5.SoundFile",
            module: "p5.sound"
          },
          getBlob: {
            name: "getBlob",
            class: "p5.SoundFile",
            module: "p5.sound"
          }
        },
        "p5.Amplitude": {
          setInput: {
            name: "setInput",
            params: [{
              name: "snd",
              description: "<p>set the sound source\n                                     (optional, defaults to\n                                     master output)</p>\n",
              type: "SoundObject|undefined",
              optional: !0
            }, {
              name: "smoothing",
              description: "<p>a range between 0.0 and 1.0\n                                      to smooth amplitude readings</p>\n",
              type: "Number|undefined",
              optional: !0
            }],
            class: "p5.Amplitude",
            module: "p5.sound"
          },
          getLevel: {
            name: "getLevel",
            params: [{
              name: "channel",
              description: "<p>Optionally return only channel 0 (left) or 1 (right)</p>\n",
              type: "Number",
              optional: !0
            }],
            class: "p5.Amplitude",
            module: "p5.sound"
          },
          toggleNormalize: {
            name: "toggleNormalize",
            params: [{
              name: "boolean",
              description: "<p>set normalize to true (1) or false (0)</p>\n",
              type: "Boolean",
              optional: !0
            }],
            class: "p5.Amplitude",
            module: "p5.sound"
          },
          smooth: {
            name: "smooth",
            params: [{
              name: "set",
              description: "<p>smoothing from 0.0 <= 1</p>\n",
              type: "Number"
            }],
            class: "p5.Amplitude",
            module: "p5.sound"
          }
        },
        "p5.FFT": {
          setInput: {
            name: "setInput",
            params: [{
              name: "source",
              description: "<p>p5.sound object (or web audio API source node)</p>\n",
              type: "Object",
              optional: !0
            }],
            class: "p5.FFT",
            module: "p5.sound"
          },
          waveform: {
            name: "waveform",
            params: [{
              name: "bins",
              description: "<p>Must be a power of two between\n                          16 and 1024. Defaults to 1024.</p>\n",
              type: "Number",
              optional: !0
            }, {
              name: "precision",
              description: "<p>If any value is provided, will return results\n                            in a Float32 Array which is more precise\n                            than a regular array.</p>\n",
              type: "String",
              optional: !0
            }],
            class: "p5.FFT",
            module: "p5.sound"
          },
          analyze: {
            name: "analyze",
            params: [{
              name: "bins",
              description: "<p>Must be a power of two between\n                           16 and 1024. Defaults to 1024.</p>\n",
              type: "Number",
              optional: !0
            }, {
              name: "scale",
              description: '<p>If "dB," returns decibel\n                           float measurements between\n                           -140 and 0 (max).\n                           Otherwise returns integers from 0-255.</p>\n',
              type: "Number",
              optional: !0
            }],
            class: "p5.FFT",
            module: "p5.sound"
          },
          getEnergy: {
            name: "getEnergy",
            params: [{
              name: "frequency1",
              description: '<p>Will return a value representing\n                              energy at this frequency. Alternately,\n                              the strings "bass", "lowMid" "mid",\n                              "highMid", and "treble" will return\n                              predefined frequency ranges.</p>\n',
              type: "Number|String"
            }, {
              name: "frequency2",
              description: "<p>If a second frequency is given,\n                              will return average amount of\n                              energy that exists between the\n                              two frequencies.</p>\n",
              type: "Number",
              optional: !0
            }],
            class: "p5.FFT",
            module: "p5.sound"
          },
          getCentroid: {
            name: "getCentroid",
            class: "p5.FFT",
            module: "p5.sound"
          },
          smooth: {
            name: "smooth",
            params: [{
              name: "smoothing",
              description: "<p>0.0 < smoothing < 1.0.\n                             Defaults to 0.8.</p>\n",
              type: "Number"
            }],
            class: "p5.FFT",
            module: "p5.sound"
          },
          linAverages: {
            name: "linAverages",
            params: [{
              name: "N",
              description: "<p>Number of returned frequency groups</p>\n",
              type: "Number"
            }],
            class: "p5.FFT",
            module: "p5.sound"
          },
          logAverages: {
            name: "logAverages",
            params: [{
              name: "octaveBands",
              description: "<p>Array of Octave Bands objects for grouping</p>\n",
              type: "Array"
            }],
            class: "p5.FFT",
            module: "p5.sound"
          },
          getOctaveBands: {
            name: "getOctaveBands",
            params: [{
              name: "N",
              description: "<p>Specifies the 1/N type of generated octave bands</p>\n",
              type: "Number"
            }, {
              name: "fCtr0",
              description: "<p>Minimum central frequency for the lowest band</p>\n",
              type: "Number"
            }],
            class: "p5.FFT",
            module: "p5.sound"
          }
        },
        "p5.Signal": {
          fade: {
            name: "fade",
            params: [{
              name: "value",
              description: "<p>Value to set this signal</p>\n",
              type: "Number"
            }, {
              name: "secondsFromNow",
              description: "<p>Length of fade, in seconds from now</p>\n",
              type: "Number",
              optional: !0
            }],
            class: "p5.Signal",
            module: "p5.sound"
          },
          setInput: {
            name: "setInput",
            params: [{
              name: "input",
              description: "",
              type: "Object"
            }],
            class: "p5.Signal",
            module: "p5.sound"
          },
          add: {
            name: "add",
            params: [{
              name: "number",
              description: "",
              type: "Number"
            }],
            class: "p5.Signal",
            module: "p5.sound"
          },
          mult: {
            name: "mult",
            params: [{
              name: "number",
              description: "<p>to multiply</p>\n",
              type: "Number"
            }],
            class: "p5.Signal",
            module: "p5.sound"
          },
          scale: {
            name: "scale",
            params: [{
              name: "number",
              description: "<p>to multiply</p>\n",
              type: "Number"
            }, {
              name: "inMin",
              description: "<p>input range minumum</p>\n",
              type: "Number"
            }, {
              name: "inMax",
              description: "<p>input range maximum</p>\n",
              type: "Number"
            }, {
              name: "outMin",
              description: "<p>input range minumum</p>\n",
              type: "Number"
            }, {
              name: "outMax",
              description: "<p>input range maximum</p>\n",
              type: "Number"
            }],
            class: "p5.Signal",
            module: "p5.sound"
          }
        },
        "p5.Envelope": {
          attackTime: {
            name: "attackTime",
            class: "p5.Envelope",
            module: "p5.sound"
          },
          attackLevel: {
            name: "attackLevel",
            class: "p5.Envelope",
            module: "p5.sound"
          },
          decayTime: {
            name: "decayTime",
            class: "p5.Envelope",
            module: "p5.sound"
          },
          decayLevel: {
            name: "decayLevel",
            class: "p5.Envelope",
            module: "p5.sound"
          },
          releaseTime: {
            name: "releaseTime",
            class: "p5.Envelope",
            module: "p5.sound"
          },
          releaseLevel: {
            name: "releaseLevel",
            class: "p5.Envelope",
            module: "p5.sound"
          },
          set: {
            name: "set",
            params: [{
              name: "attackTime",
              description: "<p>Time (in seconds) before level\n                               reaches attackLevel</p>\n",
              type: "Number"
            }, {
              name: "attackLevel",
              description: "<p>Typically an amplitude between\n                               0.0 and 1.0</p>\n",
              type: "Number"
            }, {
              name: "decayTime",
              description: "<p>Time</p>\n",
              type: "Number"
            }, {
              name: "decayLevel",
              description: "<p>Amplitude (In a standard ADSR envelope,\n                               decayLevel = sustainLevel)</p>\n",
              type: "Number"
            }, {
              name: "releaseTime",
              description: "<p>Release Time (in seconds)</p>\n",
              type: "Number"
            }, {
              name: "releaseLevel",
              description: "<p>Amplitude</p>\n",
              type: "Number"
            }],
            class: "p5.Envelope",
            module: "p5.sound"
          },
          setADSR: {
            name: "setADSR",
            params: [{
              name: "attackTime",
              description: "<p>Time (in seconds before envelope\n                              reaches Attack Level</p>\n",
              type: "Number"
            }, {
              name: "decayTime",
              description: "<p>Time (in seconds) before envelope\n                              reaches Decay/Sustain Level</p>\n",
              type: "Number",
              optional: !0
            }, {
              name: "susRatio",
              description: "<p>Ratio between attackLevel and releaseLevel, on a scale from 0 to 1,\n                              where 1.0 = attackLevel, 0.0 = releaseLevel.\n                              The susRatio determines the decayLevel and the level at which the\n                              sustain portion of the envelope will sustain.\n                              For example, if attackLevel is 0.4, releaseLevel is 0,\n                              and susAmt is 0.5, the decayLevel would be 0.2. If attackLevel is\n                              increased to 1.0 (using <code>setRange</code>),\n                              then decayLevel would increase proportionally, to become 0.5.</p>\n",
              type: "Number",
              optional: !0
            }, {
              name: "releaseTime",
              description: "<p>Time in seconds from now (defaults to 0)</p>\n",
              type: "Number",
              optional: !0
            }],
            class: "p5.Envelope",
            module: "p5.sound"
          },
          setRange: {
            name: "setRange",
            params: [{
              name: "aLevel",
              description: "<p>attack level (defaults to 1)</p>\n",
              type: "Number"
            }, {
              name: "rLevel",
              description: "<p>release level (defaults to 0)</p>\n",
              type: "Number"
            }],
            class: "p5.Envelope",
            module: "p5.sound"
          },
          setInput: {
            name: "setInput",
            params: [{
              name: "inputs",
              description: "<p>A p5.sound object or\n                              Web Audio Param.</p>\n",
              type: "Object",
              optional: !0,
              multiple: !0
            }],
            class: "p5.Envelope",
            module: "p5.sound"
          },
          setExp: {
            name: "setExp",
            params: [{
              name: "isExp",
              description: "<p>true is exponential, false is linear</p>\n",
              type: "Boolean"
            }],
            class: "p5.Envelope",
            module: "p5.sound"
          },
          play: {
            name: "play",
            params: [{
              name: "unit",
              description: "<p>A p5.sound object or\n                              Web Audio Param.</p>\n",
              type: "Object"
            }, {
              name: "startTime",
              description: "<p>time from now (in seconds) at which to play</p>\n",
              type: "Number",
              optional: !0
            }, {
              name: "sustainTime",
              description: "<p>time to sustain before releasing the envelope</p>\n",
              type: "Number",
              optional: !0
            }],
            class: "p5.Envelope",
            module: "p5.sound"
          },
          triggerAttack: {
            name: "triggerAttack",
            params: [{
              name: "unit",
              description: "<p>p5.sound Object or Web Audio Param</p>\n",
              type: "Object"
            }, {
              name: "secondsFromNow",
              description: "<p>time from now (in seconds)</p>\n",
              type: "Number"
            }],
            class: "p5.Envelope",
            module: "p5.sound"
          },
          triggerRelease: {
            name: "triggerRelease",
            params: [{
              name: "unit",
              description: "<p>p5.sound Object or Web Audio Param</p>\n",
              type: "Object"
            }, {
              name: "secondsFromNow",
              description: "<p>time to trigger the release</p>\n",
              type: "Number"
            }],
            class: "p5.Envelope",
            module: "p5.sound"
          },
          ramp: {
            name: "ramp",
            params: [{
              name: "unit",
              description: "<p>p5.sound Object or Web Audio Param</p>\n",
              type: "Object"
            }, {
              name: "secondsFromNow",
              description: "<p>When to trigger the ramp</p>\n",
              type: "Number"
            }, {
              name: "v",
              description: "<p>Target value</p>\n",
              type: "Number"
            }, {
              name: "v2",
              description: "<p>Second target value (optional)</p>\n",
              type: "Number",
              optional: !0
            }],
            class: "p5.Envelope",
            module: "p5.sound"
          },
          add: {
            name: "add",
            params: [{
              name: "number",
              description: "<p>Constant number to add</p>\n",
              type: "Number"
            }],
            class: "p5.Envelope",
            module: "p5.sound"
          },
          mult: {
            name: "mult",
            params: [{
              name: "number",
              description: "<p>Constant number to multiply</p>\n",
              type: "Number"
            }],
            class: "p5.Envelope",
            module: "p5.sound"
          },
          scale: {
            name: "scale",
            params: [{
              name: "inMin",
              description: "<p>input range minumum</p>\n",
              type: "Number"
            }, {
              name: "inMax",
              description: "<p>input range maximum</p>\n",
              type: "Number"
            }, {
              name: "outMin",
              description: "<p>input range minumum</p>\n",
              type: "Number"
            }, {
              name: "outMax",
              description: "<p>input range maximum</p>\n",
              type: "Number"
            }],
            class: "p5.Envelope",
            module: "p5.sound"
          }
        },
        "p5.Pulse": {
          width: {
            name: "width",
            params: [{
              name: "width",
              description: "<p>Width between the pulses (0 to 1.0,\n                       defaults to 0)</p>\n",
              type: "Number",
              optional: !0
            }],
            class: "p5.Pulse",
            module: "p5.sound"
          }
        },
        "p5.Noise": {
          setType: {
            name: "setType",
            params: [{
              name: "type",
              description: "<p>'white', 'pink' or 'brown'</p>\n",
              type: "String",
              optional: !0
            }],
            class: "p5.Noise",
            module: "p5.sound"
          }
        },
        "p5.AudioIn": {
          input: {
            name: "input",
            class: "p5.AudioIn",
            module: "p5.sound"
          },
          output: {
            name: "output",
            class: "p5.AudioIn",
            module: "p5.sound"
          },
          stream: {
            name: "stream",
            class: "p5.AudioIn",
            module: "p5.sound"
          },
          mediaStream: {
            name: "mediaStream",
            class: "p5.AudioIn",
            module: "p5.sound"
          },
          currentSource: {
            name: "currentSource",
            class: "p5.AudioIn",
            module: "p5.sound"
          },
          enabled: {
            name: "enabled",
            class: "p5.AudioIn",
            module: "p5.sound"
          },
          amplitude: {
            name: "amplitude",
            class: "p5.AudioIn",
            module: "p5.sound"
          },
          start: {
            name: "start",
            params: [{
              name: "successCallback",
              description: "<p>Name of a function to call on\n                                  success.</p>\n",
              type: "Function",
              optional: !0
            }, {
              name: "errorCallback",
              description: "<p>Name of a function to call if\n                                  there was an error. For example,\n                                  some browsers do not support\n                                  getUserMedia.</p>\n",
              type: "Function",
              optional: !0
            }],
            class: "p5.AudioIn",
            module: "p5.sound"
          },
          stop: {
            name: "stop",
            class: "p5.AudioIn",
            module: "p5.sound"
          },
          connect: {
            name: "connect",
            params: [{
              name: "unit",
              description: "<p>An object that accepts audio input,\n                        such as an FFT</p>\n",
              type: "Object",
              optional: !0
            }],
            class: "p5.AudioIn",
            module: "p5.sound"
          },
          disconnect: {
            name: "disconnect",
            class: "p5.AudioIn",
            module: "p5.sound"
          },
          getLevel: {
            name: "getLevel",
            params: [{
              name: "smoothing",
              description: "<p>Smoothing is 0.0 by default.\n                             Smooths values based on previous values.</p>\n",
              type: "Number",
              optional: !0
            }],
            class: "p5.AudioIn",
            module: "p5.sound"
          },
          amp: {
            name: "amp",
            params: [{
              name: "vol",
              description: "<p>between 0 and 1.0</p>\n",
              type: "Number"
            }, {
              name: "time",
              description: "<p>ramp time (optional)</p>\n",
              type: "Number",
              optional: !0
            }],
            class: "p5.AudioIn",
            module: "p5.sound"
          },
          getSources: {
            name: "getSources",
            params: [{
              name: "successCallback",
              description: "<p>This callback function handles the sources when they\n                                     have been enumerated. The callback function\n                                     receives the deviceList array as its only argument</p>\n",
              type: "Function",
              optional: !0
            }, {
              name: "errorCallback",
              description: "<p>This optional callback receives the error\n                                   message as its argument.</p>\n",
              type: "Function",
              optional: !0
            }],
            class: "p5.AudioIn",
            module: "p5.sound"
          },
          setSource: {
            name: "setSource",
            params: [{
              name: "num",
              description: "<p>position of input source in the array</p>\n",
              type: "Number"
            }],
            class: "p5.AudioIn",
            module: "p5.sound"
          }
        },
        "p5.EQ": {
          bands: {
            name: "bands",
            class: "p5.EQ",
            module: "p5.sound"
          },
          process: {
            name: "process",
            params: [{
              name: "src",
              description: "<p>Audio source</p>\n",
              type: "Object"
            }],
            class: "p5.EQ",
            module: "p5.sound"
          }
        },
        "p5.Panner3D": {
          panner: {
            name: "panner",
            class: "p5.Panner3D",
            module: "p5.sound"
          },
          process: {
            name: "process",
            params: [{
              name: "src",
              description: "<p>Input source</p>\n",
              type: "Object"
            }],
            class: "p5.Panner3D",
            module: "p5.sound"
          },
          set: {
            name: "set",
            params: [{
              name: "xVal",
              description: "",
              type: "Number"
            }, {
              name: "yVal",
              description: "",
              type: "Number"
            }, {
              name: "zVal",
              description: "",
              type: "Number"
            }, {
              name: "time",
              description: "",
              type: "Number"
            }],
            class: "p5.Panner3D",
            module: "p5.sound"
          },
          positionX: {
            name: "positionX",
            class: "p5.Panner3D",
            module: "p5.sound"
          },
          positionY: {
            name: "positionY",
            class: "p5.Panner3D",
            module: "p5.sound"
          },
          positionZ: {
            name: "positionZ",
            class: "p5.Panner3D",
            module: "p5.sound"
          },
          orient: {
            name: "orient",
            params: [{
              name: "xVal",
              description: "",
              type: "Number"
            }, {
              name: "yVal",
              description: "",
              type: "Number"
            }, {
              name: "zVal",
              description: "",
              type: "Number"
            }, {
              name: "time",
              description: "",
              type: "Number"
            }],
            class: "p5.Panner3D",
            module: "p5.sound"
          },
          orientX: {
            name: "orientX",
            class: "p5.Panner3D",
            module: "p5.sound"
          },
          orientY: {
            name: "orientY",
            class: "p5.Panner3D",
            module: "p5.sound"
          },
          orientZ: {
            name: "orientZ",
            class: "p5.Panner3D",
            module: "p5.sound"
          },
          setFalloff: {
            name: "setFalloff",
            params: [{
              name: "maxDistance",
              description: "",
              type: "Number",
              optional: !0
            }, {
              name: "rolloffFactor",
              description: "",
              type: "Number",
              optional: !0
            }],
            class: "p5.Panner3D",
            module: "p5.sound"
          },
          maxDist: {
            name: "maxDist",
            params: [{
              name: "maxDistance",
              description: "",
              type: "Number"
            }],
            class: "p5.Panner3D",
            module: "p5.sound"
          },
          rollof: {
            name: "rollof",
            params: [{
              name: "rolloffFactor",
              description: "",
              type: "Number"
            }],
            class: "p5.Panner3D",
            module: "p5.sound"
          }
        },
        "p5.Delay": {
          leftDelay: {
            name: "leftDelay",
            class: "p5.Delay",
            module: "p5.sound"
          },
          rightDelay: {
            name: "rightDelay",
            class: "p5.Delay",
            module: "p5.sound"
          },
          process: {
            name: "process",
            params: [{
              name: "Signal",
              description: "<p>An object that outputs audio</p>\n",
              type: "Object"
            }, {
              name: "delayTime",
              description: "<p>Time (in seconds) of the delay/echo.\n                             Some browsers limit delayTime to\n                             1 second.</p>\n",
              type: "Number",
              optional: !0
            }, {
              name: "feedback",
              description: "<p>sends the delay back through itself\n                             in a loop that decreases in volume\n                             each time.</p>\n",
              type: "Number",
              optional: !0
            }, {
              name: "lowPass",
              description: "<p>Cutoff frequency. Only frequencies\n                             below the lowPass will be part of the\n                             delay.</p>\n",
              type: "Number",
              optional: !0
            }],
            class: "p5.Delay",
            module: "p5.sound"
          },
          delayTime: {
            name: "delayTime",
            params: [{
              name: "delayTime",
              description: "<p>Time (in seconds) of the delay</p>\n",
              type: "Number"
            }],
            class: "p5.Delay",
            module: "p5.sound"
          },
          feedback: {
            name: "feedback",
            params: [{
              name: "feedback",
              description: "<p>0.0 to 1.0, or an object such as an\n                                Oscillator that can be used to\n                                modulate this param</p>\n",
              type: "Number|Object"
            }],
            class: "p5.Delay",
            module: "p5.sound"
          },
          filter: {
            name: "filter",
            params: [{
              name: "cutoffFreq",
              description: "<p>A lowpass filter will cut off any\n                            frequencies higher than the filter frequency.</p>\n",
              type: "Number|Object"
            }, {
              name: "res",
              description: "<p>Resonance of the filter frequency\n                            cutoff, or an object (i.e. a p5.Oscillator)\n                            that can be used to modulate this parameter.\n                            High numbers (i.e. 15) will produce a resonance,\n                            low numbers (i.e. .2) will produce a slope.</p>\n",
              type: "Number|Object"
            }],
            class: "p5.Delay",
            module: "p5.sound"
          },
          setType: {
            name: "setType",
            params: [{
              name: "type",
              description: "<p>'pingPong' (1) or 'default' (0)</p>\n",
              type: "String|Number"
            }],
            class: "p5.Delay",
            module: "p5.sound"
          },
          amp: {
            name: "amp",
            params: [{
              name: "volume",
              description: "<p>amplitude between 0 and 1.0</p>\n",
              type: "Number"
            }, {
              name: "rampTime",
              description: "<p>create a fade that lasts rampTime</p>\n",
              type: "Number",
              optional: !0
            }, {
              name: "timeFromNow",
              description: "<p>schedule this event to happen\n                              seconds from now</p>\n",
              type: "Number",
              optional: !0
            }],
            class: "p5.Delay",
            module: "p5.sound"
          },
          connect: {
            name: "connect",
            params: [{
              name: "unit",
              description: "",
              type: "Object"
            }],
            class: "p5.Delay",
            module: "p5.sound"
          },
          disconnect: {
            name: "disconnect",
            class: "p5.Delay",
            module: "p5.sound"
          }
        },
        "p5.Reverb": {
          process: {
            name: "process",
            params: [{
              name: "src",
              description: "<p>p5.sound / Web Audio object with a sound\n                         output.</p>\n",
              type: "Object"
            }, {
              name: "seconds",
              description: "<p>Duration of the reverb, in seconds.\n                         Min: 0, Max: 10. Defaults to 3.</p>\n",
              type: "Number",
              optional: !0
            }, {
              name: "decayRate",
              description: "<p>Percentage of decay with each echo.\n                          Min: 0, Max: 100. Defaults to 2.</p>\n",
              type: "Number",
              optional: !0
            }, {
              name: "reverse",
              description: "<p>Play the reverb backwards or forwards.</p>\n",
              type: "Boolean",
              optional: !0
            }],
            class: "p5.Reverb",
            module: "p5.sound"
          },
          set: {
            name: "set",
            params: [{
              name: "seconds",
              description: "<p>Duration of the reverb, in seconds.\n                         Min: 0, Max: 10. Defaults to 3.</p>\n",
              type: "Number",
              optional: !0
            }, {
              name: "decayRate",
              description: "<p>Percentage of decay with each echo.\n                          Min: 0, Max: 100. Defaults to 2.</p>\n",
              type: "Number",
              optional: !0
            }, {
              name: "reverse",
              description: "<p>Play the reverb backwards or forwards.</p>\n",
              type: "Boolean",
              optional: !0
            }],
            class: "p5.Reverb",
            module: "p5.sound"
          },
          amp: {
            name: "amp",
            params: [{
              name: "volume",
              description: "<p>amplitude between 0 and 1.0</p>\n",
              type: "Number"
            }, {
              name: "rampTime",
              description: "<p>create a fade that lasts rampTime</p>\n",
              type: "Number",
              optional: !0
            }, {
              name: "timeFromNow",
              description: "<p>schedule this event to happen\n                              seconds from now</p>\n",
              type: "Number",
              optional: !0
            }],
            class: "p5.Reverb",
            module: "p5.sound"
          },
          connect: {
            name: "connect",
            params: [{
              name: "unit",
              description: "",
              type: "Object"
            }],
            class: "p5.Reverb",
            module: "p5.sound"
          },
          disconnect: {
            name: "disconnect",
            class: "p5.Reverb",
            module: "p5.sound"
          }
        },
        "p5.Convolver": {
          convolverNode: {
            name: "convolverNode",
            class: "p5.Convolver",
            module: "p5.sound"
          },
          process: {
            name: "process",
            params: [{
              name: "src",
              description: "<p>p5.sound / Web Audio object with a sound\n                         output.</p>\n",
              type: "Object"
            }],
            class: "p5.Convolver",
            module: "p5.sound"
          },
          impulses: {
            name: "impulses",
            class: "p5.Convolver",
            module: "p5.sound"
          },
          addImpulse: {
            name: "addImpulse",
            params: [{
              name: "path",
              description: "<p>path to a sound file</p>\n",
              type: "String"
            }, {
              name: "callback",
              description: "<p>function (optional)</p>\n",
              type: "Function"
            }, {
              name: "errorCallback",
              description: "<p>function (optional)</p>\n",
              type: "Function"
            }],
            class: "p5.Convolver",
            module: "p5.sound"
          },
          resetImpulse: {
            name: "resetImpulse",
            params: [{
              name: "path",
              description: "<p>path to a sound file</p>\n",
              type: "String"
            }, {
              name: "callback",
              description: "<p>function (optional)</p>\n",
              type: "Function"
            }, {
              name: "errorCallback",
              description: "<p>function (optional)</p>\n",
              type: "Function"
            }],
            class: "p5.Convolver",
            module: "p5.sound"
          },
          toggleImpulse: {
            name: "toggleImpulse",
            params: [{
              name: "id",
              description: "<p>Identify the impulse by its original filename\n                          (String), or by its position in the\n                          <code>.impulses</code> Array (Number).</p>\n",
              type: "String|Number"
            }],
            class: "p5.Convolver",
            module: "p5.sound"
          }
        },
        "p5.Phrase": {
          sequence: {
            name: "sequence",
            class: "p5.Phrase",
            module: "p5.sound"
          }
        },
        "p5.Part": {
          setBPM: {
            name: "setBPM",
            params: [{
              name: "BPM",
              description: "<p>Beats Per Minute</p>\n",
              type: "Number"
            }, {
              name: "rampTime",
              description: "<p>Seconds from now</p>\n",
              type: "Number",
              optional: !0
            }],
            class: "p5.Part",
            module: "p5.sound"
          },
          getBPM: {
            name: "getBPM",
            class: "p5.Part",
            module: "p5.sound"
          },
          start: {
            name: "start",
            params: [{
              name: "time",
              description: "<p>seconds from now</p>\n",
              type: "Number",
              optional: !0
            }],
            class: "p5.Part",
            module: "p5.sound"
          },
          loop: {
            name: "loop",
            params: [{
              name: "time",
              description: "<p>seconds from now</p>\n",
              type: "Number",
              optional: !0
            }],
            class: "p5.Part",
            module: "p5.sound"
          },
          noLoop: {
            name: "noLoop",
            class: "p5.Part",
            module: "p5.sound"
          },
          stop: {
            name: "stop",
            params: [{
              name: "time",
              description: "<p>seconds from now</p>\n",
              type: "Number",
              optional: !0
            }],
            class: "p5.Part",
            module: "p5.sound"
          },
          pause: {
            name: "pause",
            params: [{
              name: "time",
              description: "<p>seconds from now</p>\n",
              type: "Number"
            }],
            class: "p5.Part",
            module: "p5.sound"
          },
          addPhrase: {
            name: "addPhrase",
            params: [{
              name: "phrase",
              description: "<p>reference to a p5.Phrase</p>\n",
              type: "p5.Phrase"
            }],
            class: "p5.Part",
            module: "p5.sound"
          },
          removePhrase: {
            name: "removePhrase",
            params: [{
              name: "phraseName",
              description: "",
              type: "String"
            }],
            class: "p5.Part",
            module: "p5.sound"
          },
          getPhrase: {
            name: "getPhrase",
            params: [{
              name: "phraseName",
              description: "",
              type: "String"
            }],
            class: "p5.Part",
            module: "p5.sound"
          },
          replaceSequence: {
            name: "replaceSequence",
            params: [{
              name: "phraseName",
              description: "",
              type: "String"
            }, {
              name: "sequence",
              description: "<p>Array of values to pass into the callback\n                          at each step of the phrase.</p>\n",
              type: "Array"
            }],
            class: "p5.Part",
            module: "p5.sound"
          },
          onStep: {
            name: "onStep",
            params: [{
              name: "callback",
              description: "<p>The name of the callback\n                            you want to fire\n                            on every beat/tatum.</p>\n",
              type: "Function"
            }],
            class: "p5.Part",
            module: "p5.sound"
          }
        },
        "p5.Score": {
          start: {
            name: "start",
            class: "p5.Score",
            module: "p5.sound"
          },
          stop: {
            name: "stop",
            class: "p5.Score",
            module: "p5.sound"
          },
          pause: {
            name: "pause",
            class: "p5.Score",
            module: "p5.sound"
          },
          loop: {
            name: "loop",
            class: "p5.Score",
            module: "p5.sound"
          },
          noLoop: {
            name: "noLoop",
            class: "p5.Score",
            module: "p5.sound"
          },
          setBPM: {
            name: "setBPM",
            params: [{
              name: "BPM",
              description: "<p>Beats Per Minute</p>\n",
              type: "Number"
            }, {
              name: "rampTime",
              description: "<p>Seconds from now</p>\n",
              type: "Number"
            }],
            class: "p5.Score",
            module: "p5.sound"
          }
        },
        "p5.SoundLoop": {
          musicalTimeMode: {
            name: "musicalTimeMode",
            class: "p5.SoundLoop",
            module: "p5.sound"
          },
          maxIterations: {
            name: "maxIterations",
            class: "p5.SoundLoop",
            module: "p5.sound"
          },
          start: {
            name: "start",
            params: [{
              name: "timeFromNow",
              description: "<p>schedule a starting time</p>\n",
              type: "Number",
              optional: !0
            }],
            class: "p5.SoundLoop",
            module: "p5.sound"
          },
          stop: {
            name: "stop",
            params: [{
              name: "timeFromNow",
              description: "<p>schedule a stopping time</p>\n",
              type: "Number",
              optional: !0
            }],
            class: "p5.SoundLoop",
            module: "p5.sound"
          },
          pause: {
            name: "pause",
            params: [{
              name: "timeFromNow",
              description: "<p>schedule a pausing time</p>\n",
              type: "Number",
              optional: !0
            }],
            class: "p5.SoundLoop",
            module: "p5.sound"
          },
          syncedStart: {
            name: "syncedStart",
            params: [{
              name: "otherLoop",
              description: "<p>a p5.SoundLoop to sync with</p>\n",
              type: "Object"
            }, {
              name: "timeFromNow",
              description: "<p>Start the loops in sync after timeFromNow seconds</p>\n",
              type: "Number",
              optional: !0
            }],
            class: "p5.SoundLoop",
            module: "p5.sound"
          },
          bpm: {
            name: "bpm",
            class: "p5.SoundLoop",
            module: "p5.sound"
          },
          timeSignature: {
            name: "timeSignature",
            class: "p5.SoundLoop",
            module: "p5.sound"
          },
          interval: {
            name: "interval",
            class: "p5.SoundLoop",
            module: "p5.sound"
          },
          iterations: {
            name: "iterations",
            class: "p5.SoundLoop",
            module: "p5.sound"
          }
        },
        "p5.Compressor": {
          compressor: {
            name: "compressor",
            class: "p5.Compressor",
            module: "p5.sound"
          },
          process: {
            name: "process",
            params: [{
              name: "src",
              description: "<p>Sound source to be connected</p>\n",
              type: "Object"
            }, {
              name: "attack",
              description: "<p>The amount of time (in seconds) to reduce the gain by 10dB,\n                           default = .003, range 0 - 1</p>\n",
              type: "Number",
              optional: !0
            }, {
              name: "knee",
              description: '<p>A decibel value representing the range above the\n                           threshold where the curve smoothly transitions to the "ratio" portion.\n                           default = 30, range 0 - 40</p>\n',
              type: "Number",
              optional: !0
            }, {
              name: "ratio",
              description: "<p>The amount of dB change in input for a 1 dB change in output\n                           default = 12, range 1 - 20</p>\n",
              type: "Number",
              optional: !0
            }, {
              name: "threshold",
              description: "<p>The decibel value above which the compression will start taking effect\n                           default = -24, range -100 - 0</p>\n",
              type: "Number",
              optional: !0
            }, {
              name: "release",
              description: "<p>The amount of time (in seconds) to increase the gain by 10dB\n                           default = .25, range 0 - 1</p>\n",
              type: "Number",
              optional: !0
            }],
            class: "p5.Compressor",
            module: "p5.sound"
          },
          set: {
            name: "set",
            params: [{
              name: "attack",
              description: "<p>The amount of time (in seconds) to reduce the gain by 10dB,\n                           default = .003, range 0 - 1</p>\n",
              type: "Number"
            }, {
              name: "knee",
              description: '<p>A decibel value representing the range above the\n                           threshold where the curve smoothly transitions to the "ratio" portion.\n                           default = 30, range 0 - 40</p>\n',
              type: "Number"
            }, {
              name: "ratio",
              description: "<p>The amount of dB change in input for a 1 dB change in output\n                           default = 12, range 1 - 20</p>\n",
              type: "Number"
            }, {
              name: "threshold",
              description: "<p>The decibel value above which the compression will start taking effect\n                           default = -24, range -100 - 0</p>\n",
              type: "Number"
            }, {
              name: "release",
              description: "<p>The amount of time (in seconds) to increase the gain by 10dB\n                           default = .25, range 0 - 1</p>\n",
              type: "Number"
            }],
            class: "p5.Compressor",
            module: "p5.sound"
          },
          attack: {
            name: "attack",
            params: [{
              name: "attack",
              description: "<p>Attack is the amount of time (in seconds) to reduce the gain by 10dB,\n                         default = .003, range 0 - 1</p>\n",
              type: "Number",
              optional: !0
            }, {
              name: "time",
              description: "<p>Assign time value to schedule the change in value</p>\n",
              type: "Number",
              optional: !0
            }],
            class: "p5.Compressor",
            module: "p5.sound"
          },
          knee: {
            name: "knee",
            params: [{
              name: "knee",
              description: '<p>A decibel value representing the range above the\n                       threshold where the curve smoothly transitions to the "ratio" portion.\n                       default = 30, range 0 - 40</p>\n',
              type: "Number",
              optional: !0
            }, {
              name: "time",
              description: "<p>Assign time value to schedule the change in value</p>\n",
              type: "Number",
              optional: !0
            }],
            class: "p5.Compressor",
            module: "p5.sound"
          },
          ratio: {
            name: "ratio",
            params: [{
              name: "ratio",
              description: "<p>The amount of dB change in input for a 1 dB change in output\n                           default = 12, range 1 - 20</p>\n",
              type: "Number",
              optional: !0
            }, {
              name: "time",
              description: "<p>Assign time value to schedule the change in value</p>\n",
              type: "Number",
              optional: !0
            }],
            class: "p5.Compressor",
            module: "p5.sound"
          },
          threshold: {
            name: "threshold",
            params: [{
              name: "threshold",
              description: "<p>The decibel value above which the compression will start taking effect\n                           default = -24, range -100 - 0</p>\n",
              type: "Number"
            }, {
              name: "time",
              description: "<p>Assign time value to schedule the change in value</p>\n",
              type: "Number",
              optional: !0
            }],
            class: "p5.Compressor",
            module: "p5.sound"
          },
          release: {
            name: "release",
            params: [{
              name: "release",
              description: "<p>The amount of time (in seconds) to increase the gain by 10dB\n                           default = .25, range 0 - 1</p>\n",
              type: "Number"
            }, {
              name: "time",
              description: "<p>Assign time value to schedule the change in value</p>\n",
              type: "Number",
              optional: !0
            }],
            class: "p5.Compressor",
            module: "p5.sound"
          },
          reduction: {
            name: "reduction",
            class: "p5.Compressor",
            module: "p5.sound"
          }
        },
        "p5.SoundRecorder": {
          setInput: {
            name: "setInput",
            params: [{
              name: "unit",
              description: "<p>p5.sound object or a web audio unit\n                       that outputs sound</p>\n",
              type: "Object",
              optional: !0
            }],
            class: "p5.SoundRecorder",
            module: "p5.sound"
          },
          record: {
            name: "record",
            params: [{
              name: "soundFile",
              description: "<p>p5.SoundFile</p>\n",
              type: "p5.SoundFile"
            }, {
              name: "duration",
              description: "<p>Time (in seconds)</p>\n",
              type: "Number",
              optional: !0
            }, {
              name: "callback",
              description: "<p>The name of a function that will be\n                              called once the recording completes</p>\n",
              type: "Function",
              optional: !0
            }],
            class: "p5.SoundRecorder",
            module: "p5.sound"
          },
          stop: {
            name: "stop",
            class: "p5.SoundRecorder",
            module: "p5.sound"
          }
        },
        "p5.PeakDetect": {
          isDetected: {
            name: "isDetected",
            class: "p5.PeakDetect",
            module: "p5.sound"
          },
          update: {
            name: "update",
            params: [{
              name: "fftObject",
              description: "<p>A p5.FFT object</p>\n",
              type: "p5.FFT"
            }],
            class: "p5.PeakDetect",
            module: "p5.sound"
          },
          onPeak: {
            name: "onPeak",
            params: [{
              name: "callback",
              description: "<p>Name of a function that will\n                            be called when a peak is\n                            detected.</p>\n",
              type: "Function"
            }, {
              name: "val",
              description: "<p>Optional value to pass\n                            into the function when\n                            a peak is detected.</p>\n",
              type: "Object",
              optional: !0
            }],
            class: "p5.PeakDetect",
            module: "p5.sound"
          }
        },
        "p5.Gain": {
          setInput: {
            name: "setInput",
            params: [{
              name: "src",
              description: "<p>p5.sound / Web Audio object with a sound\n                         output.</p>\n",
              type: "Object"
            }],
            class: "p5.Gain",
            module: "p5.sound"
          },
          connect: {
            name: "connect",
            params: [{
              name: "unit",
              description: "",
              type: "Object"
            }],
            class: "p5.Gain",
            module: "p5.sound"
          },
          disconnect: {
            name: "disconnect",
            class: "p5.Gain",
            module: "p5.sound"
          },
          amp: {
            name: "amp",
            params: [{
              name: "volume",
              description: "<p>amplitude between 0 and 1.0</p>\n",
              type: "Number"
            }, {
              name: "rampTime",
              description: "<p>create a fade that lasts rampTime</p>\n",
              type: "Number",
              optional: !0
            }, {
              name: "timeFromNow",
              description: "<p>schedule this event to happen\n                              seconds from now</p>\n",
              type: "Number",
              optional: !0
            }],
            class: "p5.Gain",
            module: "p5.sound"
          }
        },
        "p5.Distortion": {
          WaveShaperNode: {
            name: "WaveShaperNode",
            class: "p5.Distortion",
            module: "p5.sound"
          },
          process: {
            name: "process",
            params: [{
              name: "amount",
              description: "<p>Unbounded distortion amount.\n                               Normal values range from 0-1.</p>\n",
              type: "Number",
              optional: !0,
              optdefault: "0.25"
            }, {
              name: "oversample",
              description: "<p>'none', '2x', or '4x'.</p>\n",
              type: "String",
              optional: !0,
              optdefault: "'none'"
            }],
            class: "p5.Distortion",
            module: "p5.sound"
          },
          set: {
            name: "set",
            params: [{
              name: "amount",
              description: "<p>Unbounded distortion amount.\n                               Normal values range from 0-1.</p>\n",
              type: "Number",
              optional: !0,
              optdefault: "0.25"
            }, {
              name: "oversample",
              description: "<p>'none', '2x', or '4x'.</p>\n",
              type: "String",
              optional: !0,
              optdefault: "'none'"
            }],
            class: "p5.Distortion",
            module: "p5.sound"
          },
          getAmount: {
            name: "getAmount",
            class: "p5.Distortion",
            module: "p5.sound"
          },
          getOversample: {
            name: "getOversample",
            class: "p5.Distortion",
            module: "p5.sound"
          }
        }
      };
    }, {}],
    2: [function (e, t, r) {
      "use strict";

      r.byteLength = function (e) {
        var t = c(e),
            r = t[0],
            n = t[1];
        return 3 * (r + n) / 4 - n;
      }, r.toByteArray = function (e) {
        var t,
            r,
            n = c(e),
            a = n[0],
            o = n[1],
            i = new u(function (e, t) {
          return 3 * (e + t) / 4 - t;
        }(a, o)),
            s = 0,
            l = 0 < o ? a - 4 : a;

        for (r = 0; r < l; r += 4) t = p[e.charCodeAt(r)] << 18 | p[e.charCodeAt(r + 1)] << 12 | p[e.charCodeAt(r + 2)] << 6 | p[e.charCodeAt(r + 3)], i[s++] = t >> 16 & 255, i[s++] = t >> 8 & 255, i[s++] = 255 & t;

        2 === o && (t = p[e.charCodeAt(r)] << 2 | p[e.charCodeAt(r + 1)] >> 4, i[s++] = 255 & t);
        1 === o && (t = p[e.charCodeAt(r)] << 10 | p[e.charCodeAt(r + 1)] << 4 | p[e.charCodeAt(r + 2)] >> 2, i[s++] = t >> 8 & 255, i[s++] = 255 & t);
        return i;
      }, r.fromByteArray = function (e) {
        for (var t, r = e.length, n = r % 3, a = [], o = 0, i = r - n; o < i; o += 16383) a.push(l(e, o, i < o + 16383 ? i : o + 16383));

        1 == n ? (t = e[r - 1], a.push(s[t >> 2] + s[t << 4 & 63] + "==")) : 2 == n && (t = (e[r - 2] << 8) + e[r - 1], a.push(s[t >> 10] + s[t >> 4 & 63] + s[t << 2 & 63] + "="));
        return a.join("");
      };

      for (var s = [], p = [], u = "undefined" != typeof Uint8Array ? Uint8Array : Array, n = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", a = 0, o = n.length; a < o; ++a) s[a] = n[a], p[n.charCodeAt(a)] = a;

      function c(e) {
        var t = e.length;
        if (0 < t % 4) throw new Error("Invalid string. Length must be a multiple of 4");
        var r = e.indexOf("=");
        return -1 === r && (r = t), [r, r === t ? 0 : 4 - r % 4];
      }

      function l(e, t, r) {
        for (var n, a, o = [], i = t; i < r; i += 3) n = (e[i] << 16 & 16711680) + (e[i + 1] << 8 & 65280) + (255 & e[i + 2]), o.push(s[(a = n) >> 18 & 63] + s[a >> 12 & 63] + s[a >> 6 & 63] + s[63 & a]);

        return o.join("");
      }

      p["-".charCodeAt(0)] = 62, p["_".charCodeAt(0)] = 63;
    }, {}],
    3: [function (e, t, r) {}, {}],
    4: [function (e, t, r) {
      arguments[4][3][0].apply(r, arguments);
    }, {
      dup: 3
    }],
    5: [function (F, e, U) {
      (function (c) {
        "use strict";

        var n = F("base64-js"),
            o = F("ieee754"),
            e = "function" == typeof Symbol && "function" == typeof Symbol.for ? Symbol.for("nodejs.util.inspect.custom") : null;
        U.Buffer = c, U.SlowBuffer = function (e) {
          +e != e && (e = 0);
          return c.alloc(+e);
        }, U.INSPECT_MAX_BYTES = 50;
        var r = 2147483647;

        function i(e) {
          if (r < e) throw new RangeError('The value "' + e + '" is invalid for option "size"');
          var t = new Uint8Array(e);
          return Object.setPrototypeOf(t, c.prototype), t;
        }

        function c(e, t, r) {
          if ("number" != typeof e) return a(e, t, r);
          if ("string" == typeof t) throw new TypeError('The "string" argument must be of type string. Received type number');
          return l(e);
        }

        function a(e, t, r) {
          if ("string" == typeof e) return function (e, t) {
            "string" == typeof t && "" !== t || (t = "utf8");
            if (!c.isEncoding(t)) throw new TypeError("Unknown encoding: " + t);
            var r = 0 | d(e, t),
                n = i(r),
                a = n.write(e, t);
            a !== r && (n = n.slice(0, a));
            return n;
          }(e, t);
          if (ArrayBuffer.isView(e)) return p(e);
          if (null == e) throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof e);
          if (D(e, ArrayBuffer) || e && D(e.buffer, ArrayBuffer)) return function (e, t, r) {
            if (t < 0 || e.byteLength < t) throw new RangeError('"offset" is outside of buffer bounds');
            if (e.byteLength < t + (r || 0)) throw new RangeError('"length" is outside of buffer bounds');
            var n;
            n = void 0 === t && void 0 === r ? new Uint8Array(e) : void 0 === r ? new Uint8Array(e, t) : new Uint8Array(e, t, r);
            return Object.setPrototypeOf(n, c.prototype), n;
          }(e, t, r);
          if ("number" == typeof e) throw new TypeError('The "value" argument must not be of type number. Received type number');
          var n = e.valueOf && e.valueOf();
          if (null != n && n !== e) return c.from(n, t, r);

          var a = function (e) {
            if (c.isBuffer(e)) {
              var t = 0 | u(e.length),
                  r = i(t);
              return 0 === r.length || e.copy(r, 0, 0, t), r;
            }

            if (void 0 !== e.length) return "number" != typeof e.length || A(e.length) ? i(0) : p(e);
            if ("Buffer" === e.type && Array.isArray(e.data)) return p(e.data);
          }(e);

          if (a) return a;
          if ("undefined" != typeof Symbol && null != Symbol.toPrimitive && "function" == typeof e[Symbol.toPrimitive]) return c.from(e[Symbol.toPrimitive]("string"), t, r);
          throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof e);
        }

        function s(e) {
          if ("number" != typeof e) throw new TypeError('"size" argument must be of type number');
          if (e < 0) throw new RangeError('The value "' + e + '" is invalid for option "size"');
        }

        function l(e) {
          return s(e), i(e < 0 ? 0 : 0 | u(e));
        }

        function p(e) {
          for (var t = e.length < 0 ? 0 : 0 | u(e.length), r = i(t), n = 0; n < t; n += 1) r[n] = 255 & e[n];

          return r;
        }

        function u(e) {
          if (r <= e) throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x" + r.toString(16) + " bytes");
          return 0 | e;
        }

        function d(e, t) {
          if (c.isBuffer(e)) return e.length;
          if (ArrayBuffer.isView(e) || D(e, ArrayBuffer)) return e.byteLength;
          if ("string" != typeof e) throw new TypeError('The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type ' + typeof e);
          var r = e.length,
              n = 2 < arguments.length && !0 === arguments[2];
          if (!n && 0 === r) return 0;

          for (var a = !1;;) switch (t) {
            case "ascii":
            case "latin1":
            case "binary":
              return r;

            case "utf8":
            case "utf-8":
              return I(e).length;

            case "ucs2":
            case "ucs-2":
            case "utf16le":
            case "utf-16le":
              return 2 * r;

            case "hex":
              return r >>> 1;

            case "base64":
              return P(e).length;

            default:
              if (a) return n ? -1 : I(e).length;
              t = ("" + t).toLowerCase(), a = !0;
          }
        }

        function h(e, t, r) {
          var n = e[t];
          e[t] = e[r], e[r] = n;
        }

        function m(e, t, r, n, a) {
          if (0 === e.length) return -1;

          if ("string" == typeof r ? (n = r, r = 0) : 2147483647 < r ? r = 2147483647 : r < -2147483648 && (r = -2147483648), A(r = +r) && (r = a ? 0 : e.length - 1), r < 0 && (r = e.length + r), r >= e.length) {
            if (a) return -1;
            r = e.length - 1;
          } else if (r < 0) {
            if (!a) return -1;
            r = 0;
          }

          if ("string" == typeof t && (t = c.from(t, n)), c.isBuffer(t)) return 0 === t.length ? -1 : f(e, t, r, n, a);
          if ("number" == typeof t) return t &= 255, "function" == typeof Uint8Array.prototype.indexOf ? a ? Uint8Array.prototype.indexOf.call(e, t, r) : Uint8Array.prototype.lastIndexOf.call(e, t, r) : f(e, [t], r, n, a);
          throw new TypeError("val must be string, number or Buffer");
        }

        function f(e, t, r, n, a) {
          var o,
              i = 1,
              s = e.length,
              l = t.length;

          if (void 0 !== n && ("ucs2" === (n = String(n).toLowerCase()) || "ucs-2" === n || "utf16le" === n || "utf-16le" === n)) {
            if (e.length < 2 || t.length < 2) return -1;
            s /= i = 2, l /= 2, r /= 2;
          }

          function p(e, t) {
            return 1 === i ? e[t] : e.readUInt16BE(t * i);
          }

          if (a) {
            var u = -1;

            for (o = r; o < s; o++) if (p(e, o) === p(t, -1 === u ? 0 : o - u)) {
              if (-1 === u && (u = o), o - u + 1 === l) return u * i;
            } else -1 !== u && (o -= o - u), u = -1;
          } else for (s < r + l && (r = s - l), o = r; 0 <= o; o--) {
            for (var c = !0, d = 0; d < l; d++) if (p(e, o + d) !== p(t, d)) {
              c = !1;
              break;
            }

            if (c) return o;
          }

          return -1;
        }

        function y(e, t, r, n) {
          r = Number(r) || 0;
          var a = e.length - r;
          n ? a < (n = Number(n)) && (n = a) : n = a;
          var o = t.length;
          o / 2 < n && (n = o / 2);

          for (var i = 0; i < n; ++i) {
            var s = parseInt(t.substr(2 * i, 2), 16);
            if (A(s)) return i;
            e[r + i] = s;
          }

          return i;
        }

        function g(e, t, r, n) {
          return R(function (e) {
            for (var t = [], r = 0; r < e.length; ++r) t.push(255 & e.charCodeAt(r));

            return t;
          }(t), e, r, n);
        }

        function v(e, t, r, n) {
          return R(function (e, t) {
            for (var r, n, a, o = [], i = 0; i < e.length && !((t -= 2) < 0); ++i) r = e.charCodeAt(i), n = r >> 8, a = r % 256, o.push(a), o.push(n);

            return o;
          }(t, e.length - r), e, r, n);
        }

        function b(e, t, r) {
          return 0 === t && r === e.length ? n.fromByteArray(e) : n.fromByteArray(e.slice(t, r));
        }

        function _(e, t, r) {
          r = Math.min(e.length, r);

          for (var n = [], a = t; a < r;) {
            var o,
                i,
                s,
                l,
                p = e[a],
                u = null,
                c = 239 < p ? 4 : 223 < p ? 3 : 191 < p ? 2 : 1;
            if (a + c <= r) switch (c) {
              case 1:
                p < 128 && (u = p);
                break;

              case 2:
                128 == (192 & (o = e[a + 1])) && 127 < (l = (31 & p) << 6 | 63 & o) && (u = l);
                break;

              case 3:
                o = e[a + 1], i = e[a + 2], 128 == (192 & o) && 128 == (192 & i) && 2047 < (l = (15 & p) << 12 | (63 & o) << 6 | 63 & i) && (l < 55296 || 57343 < l) && (u = l);
                break;

              case 4:
                o = e[a + 1], i = e[a + 2], s = e[a + 3], 128 == (192 & o) && 128 == (192 & i) && 128 == (192 & s) && 65535 < (l = (15 & p) << 18 | (63 & o) << 12 | (63 & i) << 6 | 63 & s) && l < 1114112 && (u = l);
            }
            null === u ? (u = 65533, c = 1) : 65535 < u && (u -= 65536, n.push(u >>> 10 & 1023 | 55296), u = 56320 | 1023 & u), n.push(u), a += c;
          }

          return function (e) {
            var t = e.length;
            if (t <= x) return String.fromCharCode.apply(String, e);
            var r = "",
                n = 0;

            for (; n < t;) r += String.fromCharCode.apply(String, e.slice(n, n += x));

            return r;
          }(n);
        }

        U.kMaxLength = r, (c.TYPED_ARRAY_SUPPORT = function () {
          try {
            var e = new Uint8Array(1),
                t = {
              foo: function () {
                return 42;
              }
            };
            return Object.setPrototypeOf(t, Uint8Array.prototype), Object.setPrototypeOf(e, t), 42 === e.foo();
          } catch (e) {
            return !1;
          }
        }()) || "undefined" == typeof console || "function" != typeof console.error || console.error("This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support."), Object.defineProperty(c.prototype, "parent", {
          enumerable: !0,
          get: function () {
            if (c.isBuffer(this)) return this.buffer;
          }
        }), Object.defineProperty(c.prototype, "offset", {
          enumerable: !0,
          get: function () {
            if (c.isBuffer(this)) return this.byteOffset;
          }
        }), "undefined" != typeof Symbol && null != Symbol.species && c[Symbol.species] === c && Object.defineProperty(c, Symbol.species, {
          value: null,
          configurable: !0,
          enumerable: !1,
          writable: !1
        }), c.poolSize = 8192, c.from = function (e, t, r) {
          return a(e, t, r);
        }, Object.setPrototypeOf(c.prototype, Uint8Array.prototype), Object.setPrototypeOf(c, Uint8Array), c.alloc = function (e, t, r) {
          return a = t, o = r, s(n = e), n <= 0 ? i(n) : void 0 !== a ? "string" == typeof o ? i(n).fill(a, o) : i(n).fill(a) : i(n);
          var n, a, o;
        }, c.allocUnsafe = function (e) {
          return l(e);
        }, c.allocUnsafeSlow = function (e) {
          return l(e);
        }, c.isBuffer = function (e) {
          return null != e && !0 === e._isBuffer && e !== c.prototype;
        }, c.compare = function (e, t) {
          if (D(e, Uint8Array) && (e = c.from(e, e.offset, e.byteLength)), D(t, Uint8Array) && (t = c.from(t, t.offset, t.byteLength)), !c.isBuffer(e) || !c.isBuffer(t)) throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');
          if (e === t) return 0;

          for (var r = e.length, n = t.length, a = 0, o = Math.min(r, n); a < o; ++a) if (e[a] !== t[a]) {
            r = e[a], n = t[a];
            break;
          }

          return r < n ? -1 : n < r ? 1 : 0;
        }, c.isEncoding = function (e) {
          switch (String(e).toLowerCase()) {
            case "hex":
            case "utf8":
            case "utf-8":
            case "ascii":
            case "latin1":
            case "binary":
            case "base64":
            case "ucs2":
            case "ucs-2":
            case "utf16le":
            case "utf-16le":
              return !0;

            default:
              return !1;
          }
        }, c.concat = function (e, t) {
          if (!Array.isArray(e)) throw new TypeError('"list" argument must be an Array of Buffers');
          if (0 === e.length) return c.alloc(0);
          var r;
          if (void 0 === t) for (r = t = 0; r < e.length; ++r) t += e[r].length;
          var n = c.allocUnsafe(t),
              a = 0;

          for (r = 0; r < e.length; ++r) {
            var o = e[r];
            if (D(o, Uint8Array) && (o = c.from(o)), !c.isBuffer(o)) throw new TypeError('"list" argument must be an Array of Buffers');
            o.copy(n, a), a += o.length;
          }

          return n;
        }, c.byteLength = d, c.prototype._isBuffer = !0, c.prototype.swap16 = function () {
          var e = this.length;
          if (e % 2 != 0) throw new RangeError("Buffer size must be a multiple of 16-bits");

          for (var t = 0; t < e; t += 2) h(this, t, t + 1);

          return this;
        }, c.prototype.swap32 = function () {
          var e = this.length;
          if (e % 4 != 0) throw new RangeError("Buffer size must be a multiple of 32-bits");

          for (var t = 0; t < e; t += 4) h(this, t, t + 3), h(this, t + 1, t + 2);

          return this;
        }, c.prototype.swap64 = function () {
          var e = this.length;
          if (e % 8 != 0) throw new RangeError("Buffer size must be a multiple of 64-bits");

          for (var t = 0; t < e; t += 8) h(this, t, t + 7), h(this, t + 1, t + 6), h(this, t + 2, t + 5), h(this, t + 3, t + 4);

          return this;
        }, c.prototype.toLocaleString = c.prototype.toString = function () {
          var e = this.length;
          return 0 === e ? "" : 0 === arguments.length ? _(this, 0, e) : function (e, t, r) {
            var n = !1;
            if ((void 0 === t || t < 0) && (t = 0), t > this.length) return "";
            if ((void 0 === r || r > this.length) && (r = this.length), r <= 0) return "";
            if ((r >>>= 0) <= (t >>>= 0)) return "";

            for (e = e || "utf8";;) switch (e) {
              case "hex":
                return M(this, t, r);

              case "utf8":
              case "utf-8":
                return _(this, t, r);

              case "ascii":
                return S(this, t, r);

              case "latin1":
              case "binary":
                return w(this, t, r);

              case "base64":
                return b(this, t, r);

              case "ucs2":
              case "ucs-2":
              case "utf16le":
              case "utf-16le":
                return E(this, t, r);

              default:
                if (n) throw new TypeError("Unknown encoding: " + e);
                e = (e + "").toLowerCase(), n = !0;
            }
          }.apply(this, arguments);
        }, c.prototype.equals = function (e) {
          if (!c.isBuffer(e)) throw new TypeError("Argument must be a Buffer");
          return this === e || 0 === c.compare(this, e);
        }, c.prototype.inspect = function () {
          var e = "",
              t = U.INSPECT_MAX_BYTES;
          return e = this.toString("hex", 0, t).replace(/(.{2})/g, "$1 ").trim(), this.length > t && (e += " ... "), "<Buffer " + e + ">";
        }, e && (c.prototype[e] = c.prototype.inspect), c.prototype.compare = function (e, t, r, n, a) {
          if (D(e, Uint8Array) && (e = c.from(e, e.offset, e.byteLength)), !c.isBuffer(e)) throw new TypeError('The "target" argument must be one of type Buffer or Uint8Array. Received type ' + typeof e);
          if (void 0 === t && (t = 0), void 0 === r && (r = e ? e.length : 0), void 0 === n && (n = 0), void 0 === a && (a = this.length), t < 0 || r > e.length || n < 0 || a > this.length) throw new RangeError("out of range index");
          if (a <= n && r <= t) return 0;
          if (a <= n) return -1;
          if (r <= t) return 1;
          if (this === e) return 0;

          for (var o = (a >>>= 0) - (n >>>= 0), i = (r >>>= 0) - (t >>>= 0), s = Math.min(o, i), l = this.slice(n, a), p = e.slice(t, r), u = 0; u < s; ++u) if (l[u] !== p[u]) {
            o = l[u], i = p[u];
            break;
          }

          return o < i ? -1 : i < o ? 1 : 0;
        }, c.prototype.includes = function (e, t, r) {
          return -1 !== this.indexOf(e, t, r);
        }, c.prototype.indexOf = function (e, t, r) {
          return m(this, e, t, r, !0);
        }, c.prototype.lastIndexOf = function (e, t, r) {
          return m(this, e, t, r, !1);
        }, c.prototype.write = function (e, t, r, n) {
          if (void 0 === t) n = "utf8", r = this.length, t = 0;else if (void 0 === r && "string" == typeof t) n = t, r = this.length, t = 0;else {
            if (!isFinite(t)) throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");
            t >>>= 0, isFinite(r) ? (r >>>= 0, void 0 === n && (n = "utf8")) : (n = r, r = void 0);
          }
          var a = this.length - t;
          if ((void 0 === r || a < r) && (r = a), 0 < e.length && (r < 0 || t < 0) || t > this.length) throw new RangeError("Attempt to write outside buffer bounds");
          n = n || "utf8";

          for (var o, i, s, l, p, u, c = !1;;) switch (n) {
            case "hex":
              return y(this, e, t, r);

            case "utf8":
            case "utf-8":
              return p = t, u = r, R(I(e, (l = this).length - p), l, p, u);

            case "ascii":
              return g(this, e, t, r);

            case "latin1":
            case "binary":
              return g(this, e, t, r);

            case "base64":
              return o = this, i = t, s = r, R(P(e), o, i, s);

            case "ucs2":
            case "ucs-2":
            case "utf16le":
            case "utf-16le":
              return v(this, e, t, r);

            default:
              if (c) throw new TypeError("Unknown encoding: " + n);
              n = ("" + n).toLowerCase(), c = !0;
          }
        }, c.prototype.toJSON = function () {
          return {
            type: "Buffer",
            data: Array.prototype.slice.call(this._arr || this, 0)
          };
        };
        var x = 4096;

        function S(e, t, r) {
          var n = "";
          r = Math.min(e.length, r);

          for (var a = t; a < r; ++a) n += String.fromCharCode(127 & e[a]);

          return n;
        }

        function w(e, t, r) {
          var n = "";
          r = Math.min(e.length, r);

          for (var a = t; a < r; ++a) n += String.fromCharCode(e[a]);

          return n;
        }

        function M(e, t, r) {
          var n = e.length;
          (!t || t < 0) && (t = 0), (!r || r < 0 || n < r) && (r = n);

          for (var a = "", o = t; o < r; ++o) a += k[e[o]];

          return a;
        }

        function E(e, t, r) {
          for (var n = e.slice(t, r), a = "", o = 0; o < n.length; o += 2) a += String.fromCharCode(n[o] + 256 * n[o + 1]);

          return a;
        }

        function T(e, t, r) {
          if (e % 1 != 0 || e < 0) throw new RangeError("offset is not uint");
          if (r < e + t) throw new RangeError("Trying to access beyond buffer length");
        }

        function C(e, t, r, n, a, o) {
          if (!c.isBuffer(e)) throw new TypeError('"buffer" argument must be a Buffer instance');
          if (a < t || t < o) throw new RangeError('"value" argument is out of bounds');
          if (r + n > e.length) throw new RangeError("Index out of range");
        }

        function N(e, t, r, n) {
          if (r + n > e.length) throw new RangeError("Index out of range");
          if (r < 0) throw new RangeError("Index out of range");
        }

        function O(e, t, r, n, a) {
          return t = +t, r >>>= 0, a || N(e, 0, r, 4), o.write(e, t, r, n, 23, 4), r + 4;
        }

        function L(e, t, r, n, a) {
          return t = +t, r >>>= 0, a || N(e, 0, r, 8), o.write(e, t, r, n, 52, 8), r + 8;
        }

        c.prototype.slice = function (e, t) {
          var r = this.length;
          (e = ~~e) < 0 ? (e += r) < 0 && (e = 0) : r < e && (e = r), (t = void 0 === t ? r : ~~t) < 0 ? (t += r) < 0 && (t = 0) : r < t && (t = r), t < e && (t = e);
          var n = this.subarray(e, t);
          return Object.setPrototypeOf(n, c.prototype), n;
        }, c.prototype.readUIntLE = function (e, t, r) {
          e >>>= 0, t >>>= 0, r || T(e, t, this.length);

          for (var n = this[e], a = 1, o = 0; ++o < t && (a *= 256);) n += this[e + o] * a;

          return n;
        }, c.prototype.readUIntBE = function (e, t, r) {
          e >>>= 0, t >>>= 0, r || T(e, t, this.length);

          for (var n = this[e + --t], a = 1; 0 < t && (a *= 256);) n += this[e + --t] * a;

          return n;
        }, c.prototype.readUInt8 = function (e, t) {
          return e >>>= 0, t || T(e, 1, this.length), this[e];
        }, c.prototype.readUInt16LE = function (e, t) {
          return e >>>= 0, t || T(e, 2, this.length), this[e] | this[e + 1] << 8;
        }, c.prototype.readUInt16BE = function (e, t) {
          return e >>>= 0, t || T(e, 2, this.length), this[e] << 8 | this[e + 1];
        }, c.prototype.readUInt32LE = function (e, t) {
          return e >>>= 0, t || T(e, 4, this.length), (this[e] | this[e + 1] << 8 | this[e + 2] << 16) + 16777216 * this[e + 3];
        }, c.prototype.readUInt32BE = function (e, t) {
          return e >>>= 0, t || T(e, 4, this.length), 16777216 * this[e] + (this[e + 1] << 16 | this[e + 2] << 8 | this[e + 3]);
        }, c.prototype.readIntLE = function (e, t, r) {
          e >>>= 0, t >>>= 0, r || T(e, t, this.length);

          for (var n = this[e], a = 1, o = 0; ++o < t && (a *= 256);) n += this[e + o] * a;

          return (a *= 128) <= n && (n -= Math.pow(2, 8 * t)), n;
        }, c.prototype.readIntBE = function (e, t, r) {
          e >>>= 0, t >>>= 0, r || T(e, t, this.length);

          for (var n = t, a = 1, o = this[e + --n]; 0 < n && (a *= 256);) o += this[e + --n] * a;

          return (a *= 128) <= o && (o -= Math.pow(2, 8 * t)), o;
        }, c.prototype.readInt8 = function (e, t) {
          return e >>>= 0, t || T(e, 1, this.length), 128 & this[e] ? -1 * (255 - this[e] + 1) : this[e];
        }, c.prototype.readInt16LE = function (e, t) {
          e >>>= 0, t || T(e, 2, this.length);
          var r = this[e] | this[e + 1] << 8;
          return 32768 & r ? 4294901760 | r : r;
        }, c.prototype.readInt16BE = function (e, t) {
          e >>>= 0, t || T(e, 2, this.length);
          var r = this[e + 1] | this[e] << 8;
          return 32768 & r ? 4294901760 | r : r;
        }, c.prototype.readInt32LE = function (e, t) {
          return e >>>= 0, t || T(e, 4, this.length), this[e] | this[e + 1] << 8 | this[e + 2] << 16 | this[e + 3] << 24;
        }, c.prototype.readInt32BE = function (e, t) {
          return e >>>= 0, t || T(e, 4, this.length), this[e] << 24 | this[e + 1] << 16 | this[e + 2] << 8 | this[e + 3];
        }, c.prototype.readFloatLE = function (e, t) {
          return e >>>= 0, t || T(e, 4, this.length), o.read(this, e, !0, 23, 4);
        }, c.prototype.readFloatBE = function (e, t) {
          return e >>>= 0, t || T(e, 4, this.length), o.read(this, e, !1, 23, 4);
        }, c.prototype.readDoubleLE = function (e, t) {
          return e >>>= 0, t || T(e, 8, this.length), o.read(this, e, !0, 52, 8);
        }, c.prototype.readDoubleBE = function (e, t) {
          return e >>>= 0, t || T(e, 8, this.length), o.read(this, e, !1, 52, 8);
        }, c.prototype.writeUIntLE = function (e, t, r, n) {
          e = +e, t >>>= 0, r >>>= 0, n || C(this, e, t, r, Math.pow(2, 8 * r) - 1, 0);
          var a = 1,
              o = 0;

          for (this[t] = 255 & e; ++o < r && (a *= 256);) this[t + o] = e / a & 255;

          return t + r;
        }, c.prototype.writeUIntBE = function (e, t, r, n) {
          e = +e, t >>>= 0, r >>>= 0, n || C(this, e, t, r, Math.pow(2, 8 * r) - 1, 0);
          var a = r - 1,
              o = 1;

          for (this[t + a] = 255 & e; 0 <= --a && (o *= 256);) this[t + a] = e / o & 255;

          return t + r;
        }, c.prototype.writeUInt8 = function (e, t, r) {
          return e = +e, t >>>= 0, r || C(this, e, t, 1, 255, 0), this[t] = 255 & e, t + 1;
        }, c.prototype.writeUInt16LE = function (e, t, r) {
          return e = +e, t >>>= 0, r || C(this, e, t, 2, 65535, 0), this[t] = 255 & e, this[t + 1] = e >>> 8, t + 2;
        }, c.prototype.writeUInt16BE = function (e, t, r) {
          return e = +e, t >>>= 0, r || C(this, e, t, 2, 65535, 0), this[t] = e >>> 8, this[t + 1] = 255 & e, t + 2;
        }, c.prototype.writeUInt32LE = function (e, t, r) {
          return e = +e, t >>>= 0, r || C(this, e, t, 4, 4294967295, 0), this[t + 3] = e >>> 24, this[t + 2] = e >>> 16, this[t + 1] = e >>> 8, this[t] = 255 & e, t + 4;
        }, c.prototype.writeUInt32BE = function (e, t, r) {
          return e = +e, t >>>= 0, r || C(this, e, t, 4, 4294967295, 0), this[t] = e >>> 24, this[t + 1] = e >>> 16, this[t + 2] = e >>> 8, this[t + 3] = 255 & e, t + 4;
        }, c.prototype.writeIntLE = function (e, t, r, n) {
          if (e = +e, t >>>= 0, !n) {
            var a = Math.pow(2, 8 * r - 1);
            C(this, e, t, r, a - 1, -a);
          }

          var o = 0,
              i = 1,
              s = 0;

          for (this[t] = 255 & e; ++o < r && (i *= 256);) e < 0 && 0 === s && 0 !== this[t + o - 1] && (s = 1), this[t + o] = (e / i >> 0) - s & 255;

          return t + r;
        }, c.prototype.writeIntBE = function (e, t, r, n) {
          if (e = +e, t >>>= 0, !n) {
            var a = Math.pow(2, 8 * r - 1);
            C(this, e, t, r, a - 1, -a);
          }

          var o = r - 1,
              i = 1,
              s = 0;

          for (this[t + o] = 255 & e; 0 <= --o && (i *= 256);) e < 0 && 0 === s && 0 !== this[t + o + 1] && (s = 1), this[t + o] = (e / i >> 0) - s & 255;

          return t + r;
        }, c.prototype.writeInt8 = function (e, t, r) {
          return e = +e, t >>>= 0, r || C(this, e, t, 1, 127, -128), e < 0 && (e = 255 + e + 1), this[t] = 255 & e, t + 1;
        }, c.prototype.writeInt16LE = function (e, t, r) {
          return e = +e, t >>>= 0, r || C(this, e, t, 2, 32767, -32768), this[t] = 255 & e, this[t + 1] = e >>> 8, t + 2;
        }, c.prototype.writeInt16BE = function (e, t, r) {
          return e = +e, t >>>= 0, r || C(this, e, t, 2, 32767, -32768), this[t] = e >>> 8, this[t + 1] = 255 & e, t + 2;
        }, c.prototype.writeInt32LE = function (e, t, r) {
          return e = +e, t >>>= 0, r || C(this, e, t, 4, 2147483647, -2147483648), this[t] = 255 & e, this[t + 1] = e >>> 8, this[t + 2] = e >>> 16, this[t + 3] = e >>> 24, t + 4;
        }, c.prototype.writeInt32BE = function (e, t, r) {
          return e = +e, t >>>= 0, r || C(this, e, t, 4, 2147483647, -2147483648), e < 0 && (e = 4294967295 + e + 1), this[t] = e >>> 24, this[t + 1] = e >>> 16, this[t + 2] = e >>> 8, this[t + 3] = 255 & e, t + 4;
        }, c.prototype.writeFloatLE = function (e, t, r) {
          return O(this, e, t, !0, r);
        }, c.prototype.writeFloatBE = function (e, t, r) {
          return O(this, e, t, !1, r);
        }, c.prototype.writeDoubleLE = function (e, t, r) {
          return L(this, e, t, !0, r);
        }, c.prototype.writeDoubleBE = function (e, t, r) {
          return L(this, e, t, !1, r);
        }, c.prototype.copy = function (e, t, r, n) {
          if (!c.isBuffer(e)) throw new TypeError("argument should be a Buffer");
          if (r = r || 0, n || 0 === n || (n = this.length), t >= e.length && (t = e.length), t = t || 0, 0 < n && n < r && (n = r), n === r) return 0;
          if (0 === e.length || 0 === this.length) return 0;
          if (t < 0) throw new RangeError("targetStart out of bounds");
          if (r < 0 || r >= this.length) throw new RangeError("Index out of range");
          if (n < 0) throw new RangeError("sourceEnd out of bounds");
          n > this.length && (n = this.length), e.length - t < n - r && (n = e.length - t + r);
          var a = n - r;
          if (this === e && "function" == typeof Uint8Array.prototype.copyWithin) this.copyWithin(t, r, n);else if (this === e && r < t && t < n) for (var o = a - 1; 0 <= o; --o) e[o + t] = this[o + r];else Uint8Array.prototype.set.call(e, this.subarray(r, n), t);
          return a;
        }, c.prototype.fill = function (e, t, r, n) {
          if ("string" == typeof e) {
            if ("string" == typeof t ? (n = t, t = 0, r = this.length) : "string" == typeof r && (n = r, r = this.length), void 0 !== n && "string" != typeof n) throw new TypeError("encoding must be a string");
            if ("string" == typeof n && !c.isEncoding(n)) throw new TypeError("Unknown encoding: " + n);

            if (1 === e.length) {
              var a = e.charCodeAt(0);
              ("utf8" === n && a < 128 || "latin1" === n) && (e = a);
            }
          } else "number" == typeof e ? e &= 255 : "boolean" == typeof e && (e = Number(e));

          if (t < 0 || this.length < t || this.length < r) throw new RangeError("Out of range index");
          if (r <= t) return this;
          var o;
          if (t >>>= 0, r = void 0 === r ? this.length : r >>> 0, "number" == typeof (e = e || 0)) for (o = t; o < r; ++o) this[o] = e;else {
            var i = c.isBuffer(e) ? e : c.from(e, n),
                s = i.length;
            if (0 === s) throw new TypeError('The value "' + e + '" is invalid for argument "value"');

            for (o = 0; o < r - t; ++o) this[o + t] = i[o % s];
          }
          return this;
        };
        var t = /[^+/0-9A-Za-z-_]/g;

        function I(e, t) {
          var r;
          t = t || 1 / 0;

          for (var n = e.length, a = null, o = [], i = 0; i < n; ++i) {
            if (55295 < (r = e.charCodeAt(i)) && r < 57344) {
              if (!a) {
                if (56319 < r) {
                  -1 < (t -= 3) && o.push(239, 191, 189);
                  continue;
                }

                if (i + 1 === n) {
                  -1 < (t -= 3) && o.push(239, 191, 189);
                  continue;
                }

                a = r;
                continue;
              }

              if (r < 56320) {
                -1 < (t -= 3) && o.push(239, 191, 189), a = r;
                continue;
              }

              r = 65536 + (a - 55296 << 10 | r - 56320);
            } else a && -1 < (t -= 3) && o.push(239, 191, 189);

            if (a = null, r < 128) {
              if (--t < 0) break;
              o.push(r);
            } else if (r < 2048) {
              if ((t -= 2) < 0) break;
              o.push(r >> 6 | 192, 63 & r | 128);
            } else if (r < 65536) {
              if ((t -= 3) < 0) break;
              o.push(r >> 12 | 224, r >> 6 & 63 | 128, 63 & r | 128);
            } else {
              if (!(r < 1114112)) throw new Error("Invalid code point");
              if ((t -= 4) < 0) break;
              o.push(r >> 18 | 240, r >> 12 & 63 | 128, r >> 6 & 63 | 128, 63 & r | 128);
            }
          }

          return o;
        }

        function P(e) {
          return n.toByteArray(function (e) {
            if ((e = (e = e.split("=")[0]).trim().replace(t, "")).length < 2) return "";

            for (; e.length % 4 != 0;) e += "=";

            return e;
          }(e));
        }

        function R(e, t, r, n) {
          for (var a = 0; a < n && !(a + r >= t.length || a >= e.length); ++a) t[a + r] = e[a];

          return a;
        }

        function D(e, t) {
          return e instanceof t || null != e && null != e.constructor && null != e.constructor.name && e.constructor.name === t.name;
        }

        function A(e) {
          return e != e;
        }

        var k = function () {
          for (var e = "0123456789abcdef", t = new Array(256), r = 0; r < 16; ++r) for (var n = 16 * r, a = 0; a < 16; ++a) t[n + a] = e[r] + e[a];

          return t;
        }();
      }).call(this, F("buffer").Buffer);
    }, {
      "base64-js": 2,
      buffer: 5,
      ieee754: 10
    }],
    6: [function (e, t, r) {
      "use strict";

      t.exports = e("./").polyfill();
    }, {
      "./": 7
    }],
    7: [function (z, r, n) {
      (function (j, V) {
        var e, t;
        e = this, t = function () {
          "use strict";

          function l(e) {
            return "function" == typeof e;
          }

          var r = Array.isArray ? Array.isArray : function (e) {
            return "[object Array]" === Object.prototype.toString.call(e);
          },
              n = 0,
              t = void 0,
              a = void 0,
              i = function (e, t) {
            d[n] = e, d[n + 1] = t, 2 === (n += 2) && (a ? a(h) : v());
          };

          var e = "undefined" != typeof window ? window : void 0,
              o = e || {},
              s = o.MutationObserver || o.WebKitMutationObserver,
              p = "undefined" == typeof self && void 0 !== j && "[object process]" === {}.toString.call(j),
              u = "undefined" != typeof Uint8ClampedArray && "undefined" != typeof importScripts && "undefined" != typeof MessageChannel;

          function c() {
            var e = setTimeout;
            return function () {
              return e(h, 1);
            };
          }

          var d = new Array(1e3);

          function h() {
            for (var e = 0; e < n; e += 2) {
              (0, d[e])(d[e + 1]), d[e] = void 0, d[e + 1] = void 0;
            }

            n = 0;
          }

          var m,
              f,
              y,
              g,
              v = void 0;

          function b(e, t) {
            var r = this,
                n = new this.constructor(S);
            void 0 === n[x] && k(n);
            var a = r._state;

            if (a) {
              var o = arguments[a - 1];
              i(function () {
                return D(a, n, o, r._result);
              });
            } else P(r, n, e, t);

            return n;
          }

          function _(e) {
            if (e && "object" == typeof e && e.constructor === this) return e;
            var t = new this(S);
            return N(t, e), t;
          }

          v = p ? function () {
            return j.nextTick(h);
          } : s ? (f = 0, y = new s(h), g = document.createTextNode(""), y.observe(g, {
            characterData: !0
          }), function () {
            g.data = f = ++f % 2;
          }) : u ? ((m = new MessageChannel()).port1.onmessage = h, function () {
            return m.port2.postMessage(0);
          }) : void 0 === e && "function" == typeof z ? function () {
            try {
              var e = Function("return this")().require("vertx");

              return void 0 !== (t = e.runOnLoop || e.runOnContext) ? function () {
                t(h);
              } : c();
            } catch (e) {
              return c();
            }
          }() : c();
          var x = Math.random().toString(36).substring(2);

          function S() {}

          var w = void 0,
              M = 1,
              E = 2;

          function T(e, n, a) {
            i(function (t) {
              var r = !1,
                  e = function (e, t, r, n) {
                try {
                  e.call(t, r, n);
                } catch (e) {
                  return e;
                }
              }(a, n, function (e) {
                r || (r = !0, n !== e ? N(t, e) : L(t, e));
              }, function (e) {
                r || (r = !0, I(t, e));
              }, t._label);

              !r && e && (r = !0, I(t, e));
            }, e);
          }

          function C(e, t, r) {
            var n, a;
            t.constructor === e.constructor && r === b && t.constructor.resolve === _ ? (n = e, (a = t)._state === M ? L(n, a._result) : a._state === E ? I(n, a._result) : P(a, void 0, function (e) {
              return N(n, e);
            }, function (e) {
              return I(n, e);
            })) : void 0 === r ? L(e, t) : l(r) ? T(e, t, r) : L(e, t);
          }

          function N(t, e) {
            if (t === e) I(t, new TypeError("You cannot resolve a promise with itself"));else if (a = typeof (n = e), null === n || "object" != a && "function" != a) L(t, e);else {
              var r = void 0;

              try {
                r = e.then;
              } catch (e) {
                return void I(t, e);
              }

              C(t, e, r);
            }
            var n, a;
          }

          function O(e) {
            e._onerror && e._onerror(e._result), R(e);
          }

          function L(e, t) {
            e._state === w && (e._result = t, e._state = M, 0 !== e._subscribers.length && i(R, e));
          }

          function I(e, t) {
            e._state === w && (e._state = E, e._result = t, i(O, e));
          }

          function P(e, t, r, n) {
            var a = e._subscribers,
                o = a.length;
            e._onerror = null, a[o] = t, a[o + M] = r, a[o + E] = n, 0 === o && e._state && i(R, e);
          }

          function R(e) {
            var t = e._subscribers,
                r = e._state;

            if (0 !== t.length) {
              for (var n = void 0, a = void 0, o = e._result, i = 0; i < t.length; i += 3) n = t[i], a = t[i + r], n ? D(r, n, a, o) : a(o);

              e._subscribers.length = 0;
            }
          }

          function D(e, t, r, n) {
            var a = l(r),
                o = void 0,
                i = void 0,
                s = !0;

            if (a) {
              try {
                o = r(n);
              } catch (e) {
                s = !1, i = e;
              }

              if (t === o) return void I(t, new TypeError("A promises callback cannot return that same promise."));
            } else o = n;

            t._state !== w || (a && s ? N(t, o) : !1 === s ? I(t, i) : e === M ? L(t, o) : e === E && I(t, o));
          }

          var A = 0;

          function k(e) {
            e[x] = A++, e._state = void 0, e._result = void 0, e._subscribers = [];
          }

          var F = (U.prototype._enumerate = function (e) {
            for (var t = 0; this._state === w && t < e.length; t++) this._eachEntry(e[t], t);
          }, U.prototype._eachEntry = function (t, e) {
            var r = this._instanceConstructor,
                n = r.resolve;

            if (n === _) {
              var a = void 0,
                  o = void 0,
                  i = !1;

              try {
                a = t.then;
              } catch (e) {
                i = !0, o = e;
              }

              if (a === b && t._state !== w) this._settledAt(t._state, e, t._result);else if ("function" != typeof a) this._remaining--, this._result[e] = t;else if (r === B) {
                var s = new r(S);
                i ? I(s, o) : C(s, t, a), this._willSettleAt(s, e);
              } else this._willSettleAt(new r(function (e) {
                return e(t);
              }), e);
            } else this._willSettleAt(n(t), e);
          }, U.prototype._settledAt = function (e, t, r) {
            var n = this.promise;
            n._state === w && (this._remaining--, e === E ? I(n, r) : this._result[t] = r), 0 === this._remaining && L(n, this._result);
          }, U.prototype._willSettleAt = function (e, t) {
            var r = this;
            P(e, void 0, function (e) {
              return r._settledAt(M, t, e);
            }, function (e) {
              return r._settledAt(E, t, e);
            });
          }, U);

          function U(e, t) {
            this._instanceConstructor = e, this.promise = new e(S), this.promise[x] || k(this.promise), r(t) ? (this.length = t.length, this._remaining = t.length, this._result = new Array(this.length), 0 === this.length ? L(this.promise, this._result) : (this.length = this.length || 0, this._enumerate(t), 0 === this._remaining && L(this.promise, this._result))) : I(this.promise, new Error("Array Methods must be provided an Array"));
          }

          var B = (G.prototype.catch = function (e) {
            return this.then(null, e);
          }, G.prototype.finally = function (t) {
            var r = this.constructor;
            return l(t) ? this.then(function (e) {
              return r.resolve(t()).then(function () {
                return e;
              });
            }, function (e) {
              return r.resolve(t()).then(function () {
                throw e;
              });
            }) : this.then(t, t);
          }, G);

          function G(e) {
            this[x] = A++, this._result = this._state = void 0, this._subscribers = [], S !== e && ("function" != typeof e && function () {
              throw new TypeError("You must pass a resolver function as the first argument to the promise constructor");
            }(), this instanceof G ? function (t, e) {
              try {
                e(function (e) {
                  N(t, e);
                }, function (e) {
                  I(t, e);
                });
              } catch (e) {
                I(t, e);
              }
            }(this, e) : function () {
              throw new TypeError("Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.");
            }());
          }

          return B.prototype.then = b, B.all = function (e) {
            return new F(this, e).promise;
          }, B.race = function (a) {
            var o = this;
            return r(a) ? new o(function (e, t) {
              for (var r = a.length, n = 0; n < r; n++) o.resolve(a[n]).then(e, t);
            }) : new o(function (e, t) {
              return t(new TypeError("You must pass an array to race."));
            });
          }, B.resolve = _, B.reject = function (e) {
            var t = new this(S);
            return I(t, e), t;
          }, B._setScheduler = function (e) {
            a = e;
          }, B._setAsap = function (e) {
            i = e;
          }, B._asap = i, B.polyfill = function () {
            var e = void 0;
            if (void 0 !== V) e = V;else if ("undefined" != typeof self) e = self;else try {
              e = Function("return this")();
            } catch (e) {
              throw new Error("polyfill failed because global object is unavailable in this environment");
            }
            var t = e.Promise;

            if (t) {
              var r = null;

              try {
                r = Object.prototype.toString.call(t.resolve());
              } catch (e) {}

              if ("[object Promise]" === r && !t.cast) return;
            }

            e.Promise = B;
          }, B.Promise = B;
        }, "object" == typeof n && void 0 !== r ? r.exports = t() : e.ES6Promise = t();
      }).call(this, z("_process"), "undefined" != typeof global ? global : "undefined" != typeof self ? self : "undefined" != typeof window ? window : {});
    }, {
      _process: 15
    }],
    8: [function (e, n, a) {
      !function (e, t) {
        if (0, void 0 !== a && void 0 !== n) t(a, n);else {
          var r = {
            exports: {}
          };
          t(r.exports, r), e.fetchJsonp = r.exports;
        }
      }(this, function (e, t) {
        "use strict";

        var r = 5e3,
            n = "callback";

        function c(t) {
          try {
            delete window[t];
          } catch (e) {
            window[t] = void 0;
          }
        }

        function d(e) {
          var t = document.getElementById(e);
          t && document.getElementsByTagName("head")[0].removeChild(t);
        }

        t.exports = function (o) {
          var i = arguments.length <= 1 || void 0 === arguments[1] ? {} : arguments[1],
              s = o,
              l = i.timeout || r,
              p = i.jsonpCallback || n,
              u = void 0;
          return new Promise(function (t, e) {
            var r = i.jsonpCallbackFunction || "jsonp_" + Date.now() + "_" + Math.ceil(1e5 * Math.random()),
                n = p + "_" + r;
            window[r] = function (e) {
              t({
                ok: !0,
                json: function () {
                  return Promise.resolve(e);
                }
              }), u && clearTimeout(u), d(n), c(r);
            }, s += -1 === s.indexOf("?") ? "?" : "&";
            var a = document.createElement("script");
            a.setAttribute("src", "" + s + p + "=" + r), i.charset && a.setAttribute("charset", i.charset), a.id = n, document.getElementsByTagName("head")[0].appendChild(a), u = setTimeout(function () {
              e(new Error("JSONP request to " + o + " timed out")), c(r), d(n), window[r] = function () {
                c(r);
              };
            }, l), a.onerror = function () {
              e(new Error("JSONP request to " + o + " failed")), c(r), d(n), u && clearTimeout(u);
            };
          });
        };
      });
    }, {}],
    9: [function (e, t, r) {
      var n = n || function (s) {
        "use strict";

        if (!(void 0 === s || "undefined" != typeof navigator && /MSIE [1-9]\./.test(navigator.userAgent))) {
          var e = s.document,
              l = function () {
            return s.URL || s.webkitURL || s;
          },
              p = e.createElementNS("http://www.w3.org/1999/xhtml", "a"),
              u = ("download" in p),
              c = /constructor/i.test(s.HTMLElement) || s.safari,
              d = /CriOS\/[\d]+/.test(navigator.userAgent),
              h = function (e) {
            (s.setImmediate || s.setTimeout)(function () {
              throw e;
            }, 0);
          },
              m = function (e) {
            setTimeout(function () {
              "string" == typeof e ? l().revokeObjectURL(e) : e.remove();
            }, 4e4);
          },
              f = function (e) {
            return /^\s*(?:text\/\S*|application\/xml|\S*\/\S*\+xml)\s*;.*charset\s*=\s*utf-8/i.test(e.type) ? new Blob([String.fromCharCode(65279), e], {
              type: e.type
            }) : e;
          },
              n = function (e, r, t) {
            t || (e = f(e));

            function n() {
              !function (e, t, r) {
                for (var n = (t = [].concat(t)).length; n--;) {
                  var a = e["on" + t[n]];
                  if ("function" == typeof a) try {
                    a.call(e, r || e);
                  } catch (e) {
                    h(e);
                  }
                }
              }(o, "writestart progress write writeend".split(" "));
            }

            var a,
                o = this,
                i = "application/octet-stream" === e.type;
            if (o.readyState = o.INIT, u) return a = l().createObjectURL(e), void setTimeout(function () {
              var e, t;
              p.href = a, p.download = r, e = p, t = new MouseEvent("click"), e.dispatchEvent(t), n(), m(a), o.readyState = o.DONE;
            });
            !function () {
              if ((d || i && c) && s.FileReader) {
                var t = new FileReader();
                return t.onloadend = function () {
                  var e = d ? t.result : t.result.replace(/^data:[^;]*;/, "data:attachment/file;");
                  s.open(e, "_blank") || (s.location.href = e), e = void 0, o.readyState = o.DONE, n();
                }, t.readAsDataURL(e), o.readyState = o.INIT;
              }

              (a = a || l().createObjectURL(e), i) ? s.location.href = a : s.open(a, "_blank") || (s.location.href = a);
              o.readyState = o.DONE, n(), m(a);
            }();
          },
              t = n.prototype;

          return "undefined" != typeof navigator && navigator.msSaveOrOpenBlob ? function (e, t, r) {
            return t = t || e.name || "download", r || (e = f(e)), navigator.msSaveOrOpenBlob(e, t);
          } : (t.abort = function () {}, t.readyState = t.INIT = 0, t.WRITING = 1, t.DONE = 2, t.error = t.onwritestart = t.onprogress = t.onwrite = t.onabort = t.onerror = t.onwriteend = null, function (e, t, r) {
            return new n(e, t || e.name || "download", r);
          });
        }
      }("undefined" != typeof self && self || "undefined" != typeof window && window || this.content);

      void 0 !== t && t.exports && (t.exports.saveAs = n);
    }, {}],
    10: [function (e, t, r) {
      r.read = function (e, t, r, n, a) {
        var o,
            i,
            s = 8 * a - n - 1,
            l = (1 << s) - 1,
            p = l >> 1,
            u = -7,
            c = r ? a - 1 : 0,
            d = r ? -1 : 1,
            h = e[t + c];

        for (c += d, o = h & (1 << -u) - 1, h >>= -u, u += s; 0 < u; o = 256 * o + e[t + c], c += d, u -= 8);

        for (i = o & (1 << -u) - 1, o >>= -u, u += n; 0 < u; i = 256 * i + e[t + c], c += d, u -= 8);

        if (0 === o) o = 1 - p;else {
          if (o === l) return i ? NaN : 1 / 0 * (h ? -1 : 1);
          i += Math.pow(2, n), o -= p;
        }
        return (h ? -1 : 1) * i * Math.pow(2, o - n);
      }, r.write = function (e, t, r, n, a, o) {
        var i,
            s,
            l,
            p = 8 * o - a - 1,
            u = (1 << p) - 1,
            c = u >> 1,
            d = 23 === a ? Math.pow(2, -24) - Math.pow(2, -77) : 0,
            h = n ? 0 : o - 1,
            m = n ? 1 : -1,
            f = t < 0 || 0 === t && 1 / t < 0 ? 1 : 0;

        for (t = Math.abs(t), isNaN(t) || t === 1 / 0 ? (s = isNaN(t) ? 1 : 0, i = u) : (i = Math.floor(Math.log(t) / Math.LN2), t * (l = Math.pow(2, -i)) < 1 && (i--, l *= 2), 2 <= (t += 1 <= i + c ? d / l : d * Math.pow(2, 1 - c)) * l && (i++, l /= 2), u <= i + c ? (s = 0, i = u) : 1 <= i + c ? (s = (t * l - 1) * Math.pow(2, a), i += c) : (s = t * Math.pow(2, c - 1) * Math.pow(2, a), i = 0)); 8 <= a; e[r + h] = 255 & s, h += m, s /= 256, a -= 8);

        for (i = i << a | s, p += a; 0 < p; e[r + h] = 255 & i, h += m, i /= 256, p -= 8);

        e[r + h - m] |= 128 * f;
      };
    }, {}],
    11: [function (e, t, r) {
      "use strict";

      var n;

      function y(e, t) {
        return e.b === t.b && e.a === t.a;
      }

      function g(e, t) {
        return e.b < t.b || e.b === t.b && e.a <= t.a;
      }

      function v(e, t, r) {
        var n = t.b - e.b,
            a = r.b - t.b;
        return 0 < n + a ? n < a ? t.a - e.a + n / (n + a) * (e.a - r.a) : t.a - r.a + a / (n + a) * (r.a - e.a) : 0;
      }

      function b(e, t, r) {
        var n = t.b - e.b,
            a = r.b - t.b;
        return 0 < n + a ? (t.a - r.a) * n + (t.a - e.a) * a : 0;
      }

      function _(e, t) {
        return e.a < t.a || e.a === t.a && e.b <= t.b;
      }

      function x(e, t, r) {
        var n = t.a - e.a,
            a = r.a - t.a;
        return 0 < n + a ? n < a ? t.b - e.b + n / (n + a) * (e.b - r.b) : t.b - r.b + a / (n + a) * (r.b - e.b) : 0;
      }

      function S(e, t, r) {
        var n = t.a - e.a,
            a = r.a - t.a;
        return 0 < n + a ? (t.b - r.b) * n + (t.b - e.b) * a : 0;
      }

      function w(e, t, r, n) {
        return (e = e < 0 ? 0 : e) <= (r = r < 0 ? 0 : r) ? 0 === r ? (t + n) / 2 : t + e / (e + r) * (n - t) : n + r / (e + r) * (t - n);
      }

      function i(e) {
        var t = o(e.b);
        return a(t, e.c), a(t.b, e.c), s(t, e.a), t;
      }

      function M(e, t) {
        var r = !1,
            n = !1;
        e !== t && (t.a !== e.a && (n = !0, f(t.a, e.a)), t.d !== e.d && (r = !0, l(t.d, e.d)), h(t, e), n || (a(t, e.a), e.a.c = e), r || (s(t, e.d), e.d.a = e));
      }

      function c(e) {
        var t = e.b,
            r = !1;
        e.d !== e.b.d && (r = !0, l(e.d, e.b.d)), e.c === e ? f(e.a, null) : (e.b.d.a = J(e), e.a.c = e.c, h(e, J(e)), r || s(e, e.d)), t.c === t ? (f(t.a, null), l(t.d, null)) : (e.d.a = J(t), t.a.c = t.c, h(t, J(t))), m(e);
      }

      function E(e) {
        var t = o(e),
            r = t.b;
        return h(t, e.e), t.a = e.b.a, a(r, t.a), t.d = r.d = e.d, t = t.b, h(e.b, J(e.b)), h(e.b, t), e.b.a = t.a, t.b.a.c = t.b, t.b.d = e.b.d, t.f = e.f, t.b.f = e.b.f, t;
      }

      function d(e, t) {
        var r = !1,
            n = o(e),
            a = n.b;
        return t.d !== e.d && (r = !0, l(t.d, e.d)), h(n, e.e), h(a, t), n.a = e.b.a, a.a = t.a, n.d = a.d = e.d, e.d.a = a, r || s(n, e.d), n;
      }

      function o(e) {
        var t = new K(),
            r = new K(),
            n = e.b.h;
        return (((r.h = n).b.h = t).h = e).b.h = r, t.b = r, ((t.c = t).e = r).b = t, (r.c = r).e = t;
      }

      function h(e, t) {
        var r = e.c,
            n = t.c;
        r.b.e = t, (n.b.e = e).c = n, t.c = r;
      }

      function a(e, t) {
        var r = t.f,
            n = new ee(t, r);

        for (r.e = n, r = (t.f = n).c = e; r.a = n, (r = r.c) !== e;);
      }

      function s(e, t) {
        var r = t.d,
            n = new Q(t, r);

        for (r.b = n, (t.d = n).a = e, n.c = t.c, r = e; r.d = n, (r = r.e) !== e;);
      }

      function m(e) {
        var t = e.h;
        e = e.b.h, (t.b.h = e).b.h = t;
      }

      function f(e, t) {
        for (var r = e.c, n = r; n.a = t, (n = n.c) !== r;);

        r = e.f, ((n = e.e).f = r).e = n;
      }

      function l(e, t) {
        for (var r = e.a, n = r; n.d = t, (n = n.e) !== r;);

        r = e.d, ((n = e.b).d = r).b = n;
      }

      function T(e) {
        var t = 0;
        return Math.abs(e[1]) > Math.abs(e[0]) && (t = 1), Math.abs(e[2]) > Math.abs(e[t]) && (t = 2), t;
      }

      var C = 4e150;

      function N(e, t) {
        e.f += t.f, e.b.f += t.b.f;
      }

      function p(e, t, r) {
        return e = e.a, t = t.a, r = r.a, t.b.a === e ? r.b.a === e ? g(t.a, r.a) ? b(r.b.a, t.a, r.a) <= 0 : 0 <= b(t.b.a, r.a, t.a) : b(r.b.a, e, r.a) <= 0 : r.b.a === e ? 0 <= b(t.b.a, e, t.a) : (t = v(t.b.a, e, t.a), (e = v(r.b.a, e, r.a)) <= t);
      }

      function O(e) {
        e.a.i = null;
        var t = e.e;
        t.a.c = t.c, t.c.a = t.a, e.e = null;
      }

      function u(e, t) {
        c(e.a), e.c = !1, (e.a = t).i = e;
      }

      function L(e) {
        for (var t = e.a.a; (e = de(e)).a.a === t;);

        return e.c && (u(e, t = d(ce(e).a.b, e.a.e)), e = de(e)), e;
      }

      function I(e, t, r) {
        var n = new ue();
        return n.a = r, n.e = W(e.f, t.e, n), r.i = n;
      }

      function P(e, t) {
        switch (e.s) {
          case 100130:
            return 0 != (1 & t);

          case 100131:
            return 0 !== t;

          case 100132:
            return 0 < t;

          case 100133:
            return t < 0;

          case 100134:
            return 2 <= t || t <= -2;
        }

        return !1;
      }

      function R(e) {
        var t = e.a,
            r = t.d;
        r.c = e.d, r.a = t, O(e);
      }

      function D(e, t, r) {
        for (t = (e = t).a; e !== r;) {
          e.c = !1;
          var n = ce(e),
              a = n.a;

          if (a.a !== t.a) {
            if (!n.c) {
              R(e);
              break;
            }

            u(n, a = d(t.c.b, a.b));
          }

          t.c !== a && (M(J(a), a), M(t, a)), R(e), t = n.a, e = n;
        }

        return t;
      }

      function A(e, t, r, n, a, o) {
        for (var i = !0; I(e, t, r.b), (r = r.c) !== n;);

        for (null === a && (a = ce(t).a.b.c); (r = (n = ce(t)).a.b).a === a.a;) r.c !== a && (M(J(r), r), M(J(a), r)), n.f = t.f - r.f, n.d = P(e, n.f), t.b = !0, !i && B(e, t) && (N(r, a), O(t), c(a)), i = !1, t = n, a = r;

        t.b = !0, o && j(e, t);
      }

      function k(e, t, r, n, a) {
        var o = [t.g[0], t.g[1], t.g[2]];
        t.d = null, t.d = e.o && e.o(o, r, n, e.c) || null, null === t.d && (a ? e.n || (Z(e, 100156), e.n = !0) : t.d = r[0]);
      }

      function F(e, t, r) {
        var n = [null, null, null, null];
        n[0] = t.a.d, n[1] = r.a.d, k(e, t.a, n, [.5, .5, 0, 0], !1), M(t, r);
      }

      function U(e, t, r, n, a) {
        var o = Math.abs(t.b - e.b) + Math.abs(t.a - e.a),
            i = Math.abs(r.b - e.b) + Math.abs(r.a - e.a),
            s = a + 1;
        n[a] = .5 * i / (o + i), n[s] = .5 * o / (o + i), e.g[0] += n[a] * t.g[0] + n[s] * r.g[0], e.g[1] += n[a] * t.g[1] + n[s] * r.g[1], e.g[2] += n[a] * t.g[2] + n[s] * r.g[2];
      }

      function B(e, t) {
        var r = ce(t),
            n = t.a,
            a = r.a;

        if (g(n.a, a.a)) {
          if (0 < b(a.b.a, n.a, a.a)) return !1;

          if (y(n.a, a.a)) {
            if (n.a !== a.a) {
              r = e.e;
              var o = n.a.h;

              if (0 <= o) {
                var i = (r = r.b).d,
                    s = r.e,
                    l = r.c,
                    p = l[o];
                i[p] = i[r.a], (l[i[p]] = p) <= --r.a && (p <= 1 ? le(r, p) : g(s[i[p >> 1]], s[i[p]]) ? le(r, p) : pe(r, p)), s[o] = null, l[o] = r.b, r.b = o;
              } else for (r.c[-(o + 1)] = null; 0 < r.a && null === r.c[r.d[r.a - 1]];) --r.a;

              F(e, J(a), n);
            }
          } else E(a.b), M(n, J(a)), t.b = r.b = !0;
        } else {
          if (b(n.b.a, a.a, n.a) < 0) return !1;
          de(t).b = t.b = !0, E(n.b), M(J(a), n);
        }

        return !0;
      }

      function G(e, t) {
        var r = ce(t),
            n = t.a,
            a = r.a,
            o = n.a,
            i = a.a,
            s = n.b.a,
            l = a.b.a,
            p = new ee();
        if (b(s, e.a, o), b(l, e.a, i), o === i || Math.min(o.a, s.a) > Math.max(i.a, l.a)) return !1;

        if (g(o, i)) {
          if (0 < b(l, o, i)) return !1;
        } else if (b(s, i, o) < 0) return !1;

        var u,
            c,
            d = s,
            h = o,
            m = l,
            f = i;
        if (g(d, h) || (u = d, d = h, h = u), g(m, f) || (u = m, m = f, f = u), g(d, m) || (u = d, d = m, m = u, u = h, h = f, f = u), g(m, h) ? g(h, f) ? ((u = v(d, m, h)) + (c = v(m, h, f)) < 0 && (u = -u, c = -c), p.b = w(u, m.b, c, h.b)) : ((u = b(d, m, h)) + (c = -b(d, f, h)) < 0 && (u = -u, c = -c), p.b = w(u, m.b, c, f.b)) : p.b = (m.b + h.b) / 2, _(d, h) || (u = d, d = h, h = u), _(m, f) || (u = m, m = f, f = u), _(d, m) || (u = d, d = m, m = u, u = h, h = f, f = u), _(m, h) ? _(h, f) ? ((u = x(d, m, h)) + (c = x(m, h, f)) < 0 && (u = -u, c = -c), p.a = w(u, m.a, c, h.a)) : ((u = S(d, m, h)) + (c = -S(d, f, h)) < 0 && (u = -u, c = -c), p.a = w(u, m.a, c, f.a)) : p.a = (m.a + h.a) / 2, g(p, e.a) && (p.b = e.a.b, p.a = e.a.a), d = g(o, i) ? o : i, g(d, p) && (p.b = d.b, p.a = d.a), y(p, o) || y(p, i)) return B(e, t), !1;

        if (!y(s, e.a) && 0 <= b(s, e.a, p) || !y(l, e.a) && b(l, e.a, p) <= 0) {
          if (l === e.a) return E(n.b), M(a.b, n), n = ce(t = L(t)).a, D(e, ce(t), r), A(e, t, J(n), n, n, !0), !0;
          if (s !== e.a) return 0 <= b(s, e.a, p) && (de(t).b = t.b = !0, E(n.b), n.a.b = e.a.b, n.a.a = e.a.a), b(l, e.a, p) <= 0 && (t.b = r.b = !0, E(a.b), a.a.b = e.a.b, a.a.a = e.a.a), !1;

          for (E(a.b), M(n.e, J(a)), i = (o = r = t).a.b.a; (o = de(o)).a.b.a === i;);

          return o = ce(t = o).a.b.c, r.a = J(a), A(e, t, (a = D(e, r, null)).c, n.b.c, o, !0), !0;
        }

        return E(n.b), E(a.b), M(J(a), n), n.a.b = p.b, n.a.a = p.a, n.a.h = re(e.e, n.a), n = n.a, a = [0, 0, 0, 0], p = [o.d, s.d, i.d, l.d], n.g[0] = n.g[1] = n.g[2] = 0, U(n, o, s, a, 0), U(n, i, l, a, 2), k(e, n, p, a, !0), de(t).b = t.b = r.b = !0, !1;
      }

      function j(e, t) {
        for (var r = ce(t);;) {
          for (; r.b;) r = ce(t = r);

          if (!t.b && (null === (t = de(r = t)) || !t.b)) break;
          t.b = !1;
          var n,
              a = t.a,
              o = r.a;
          if (n = a.b.a !== o.b.a) e: {
            var i = ce(n = t),
                s = n.a,
                l = i.a,
                p = void 0;

            if (g(s.b.a, l.b.a)) {
              if (b(s.b.a, l.b.a, s.a) < 0) {
                n = !1;
                break e;
              }

              de(n).b = n.b = !0, p = E(s), M(l.b, p), p.d.c = n.d;
            } else {
              if (0 < b(l.b.a, s.b.a, l.a)) {
                n = !1;
                break e;
              }

              n.b = i.b = !0, p = E(l), M(s.e, l.b), p.b.d.c = n.d;
            }

            n = !0;
          }
          if (n && (r.c ? (O(r), c(o), o = (r = ce(t)).a) : t.c && (O(t), c(a), a = (t = de(r)).a)), a.a !== o.a) if (a.b.a === o.b.a || t.c || r.c || a.b.a !== e.a && o.b.a !== e.a) B(e, t);else if (G(e, t)) break;
          a.a === o.a && a.b.a === o.b.a && (N(o, a), O(t), c(a), t = de(r));
        }
      }

      function V(e, t) {
        for (var r = (e.a = t).c; null === r.i;) if ((r = r.c) === t.c) {
          r = e;
          var n = t;
          (i = new ue()).a = n.c.b;

          for (var a = (l = r.f).a; null !== (a = a.a).b && !l.c(l.b, i, a.b););

          var o = ce(l = a.b),
              i = l.a;
          a = o.a;
          if (0 === b(i.b.a, n, i.a)) y((i = l.a).a, n) || y(i.b.a, n) || (E(i.b), l.c && (c(i.c), l.c = !1), M(n.c, i), V(r, n));else {
            var s = g(a.b.a, i.b.a) ? l : o;
            o = void 0;
            l.d || s.c ? (o = s === l ? d(n.c.b, i.e) : d(a.b.c.b, n.c).b, s.c ? u(s, o) : ((l = I(i = r, l, o)).f = de(l).f + l.a.f, l.d = P(i, l.f)), V(r, n)) : A(r, l, n.c, n.c, null, !0);
          }
          return;
        }

        if (l = (i = ce(r = L(r.i))).a, (i = D(e, i, null)).c === l) {
          i = (l = i).c, a = ce(r), o = r.a, s = a.a;
          var l,
              p = !1;
          o.b.a !== s.b.a && G(e, r), y(o.a, e.a) && (M(J(i), o), i = ce(r = L(r)).a, D(e, ce(r), a), p = !0), y(s.a, e.a) && (M(l, J(s)), l = D(e, a, null), p = !0), p ? A(e, r, l.c, i, i, !0) : (n = g(s.a, o.a) ? J(s) : o, A(e, r, n = d(l.c.b, n), n.c, n.c, !1), n.b.i.c = !0, j(e, r));
        } else A(e, r, i.c, l, l, !0);
      }

      function z(e, t) {
        var r = new ue(),
            n = i(e.b);
        n.a.b = C, n.a.a = t, n.b.a.b = -C, n.b.a.a = t, e.a = n.b.a, r.a = n, r.f = 0, r.d = !1, r.c = !1, r.h = !0, r.b = !1, n = W(n = e.f, n.a, r), r.e = n;
      }

      function H(e) {
        this.a = new X(), this.b = e, this.c = p;
      }

      function W(e, t, r) {
        for (; null !== (t = t.c).b && !e.c(e.b, t.b, r););

        return e = new X(r, t.a, t), t.a.c = e, t.a = e;
      }

      function X(e, t, r) {
        this.b = e || null, this.a = t || this, this.c = r || this;
      }

      function q() {
        this.d = 0, this.p = this.b = this.q = null, this.j = [0, 0, 0], this.s = 100130, this.n = !1, this.o = this.a = this.e = this.f = null, this.m = !1, this.c = this.r = this.i = this.k = this.l = this.h = null;
      }

      function Y(e, t) {
        if (e.d !== t) for (; e.d !== t;) if (e.d < t) switch (e.d) {
          case 0:
            Z(e, 100151), e.u(null);
            break;

          case 1:
            Z(e, 100152), e.t();
        } else switch (e.d) {
          case 2:
            Z(e, 100154), e.v();
            break;

          case 1:
            Z(e, 100153), e.w();
        }
      }

      function Z(e, t) {
        e.p && e.p(t, e.c);
      }

      function Q(e, t) {
        this.b = e || this, this.d = t || this, this.a = null, this.c = !1;
      }

      function K() {
        (this.h = this).i = this.d = this.a = this.e = this.c = this.b = null, this.f = 0;
      }

      function J(e) {
        return e.b.e;
      }

      function $() {
        this.c = new ee(), this.a = new Q(), this.b = new K(), this.d = new K(), this.b.b = this.d, this.d.b = this.b;
      }

      function ee(e, t) {
        this.e = e || this, this.f = t || this, this.d = this.c = null, this.g = [0, 0, 0], this.h = this.a = this.b = 0;
      }

      function te() {
        this.c = [], this.d = null, this.a = 0, this.e = !1, this.b = new ae();
      }

      function re(e, t) {
        if (e.e) {
          var r,
              n = e.b,
              a = ++n.a;
          return 2 * a > n.f && (n.f *= 2, n.c = oe(n.c, n.f + 1)), 0 === n.b ? r = a : (r = n.b, n.b = n.c[n.b]), n.e[r] = t, n.c[r] = a, n.d[a] = r, n.h && pe(n, a), r;
        }

        return n = e.a++, e.c[n] = t, -(n + 1);
      }

      function ne(e) {
        if (0 === e.a) return se(e.b);
        var t = e.c[e.d[e.a - 1]];
        if (0 !== e.b.a && g(ie(e.b), t)) return se(e.b);

        for (; --e.a, 0 < e.a && null === e.c[e.d[e.a - 1]];);

        return t;
      }

      function ae() {
        this.d = oe([0], 33), this.e = [null, null], this.c = [0, 0], this.a = 0, this.f = 32, this.b = 0, this.h = !1, this.d[1] = 1;
      }

      function oe(e, t) {
        for (var r = Array(t), n = 0; n < e.length; n++) r[n] = e[n];

        for (; n < t; n++) r[n] = 0;

        return r;
      }

      function ie(e) {
        return e.e[e.d[1]];
      }

      function se(e) {
        var t = e.d,
            r = e.e,
            n = e.c,
            a = t[1],
            o = r[a];
        return 0 < e.a && (t[1] = t[e.a], n[t[1]] = 1, r[a] = null, n[a] = e.b, e.b = a, 0 < --e.a && le(e, 1)), o;
      }

      function le(e, t) {
        for (var r = e.d, n = e.e, a = e.c, o = t, i = r[o];;) {
          var s = o << 1;
          s < e.a && g(n[r[s + 1]], n[r[s]]) && (s += 1);
          var l = r[s];

          if (s > e.a || g(n[i], n[l])) {
            a[r[o] = i] = o;
            break;
          }

          a[r[o] = l] = o, o = s;
        }
      }

      function pe(e, t) {
        for (var r = e.d, n = e.e, a = e.c, o = t, i = r[o];;) {
          var s = o >> 1,
              l = r[s];

          if (0 == s || g(n[l], n[i])) {
            a[r[o] = i] = o;
            break;
          }

          a[r[o] = l] = o, o = s;
        }
      }

      function ue() {
        this.e = this.a = null, this.f = 0, this.c = this.b = this.h = this.d = !1;
      }

      function ce(e) {
        return e.e.c.b;
      }

      function de(e) {
        return e.e.a.b;
      }

      (n = q.prototype).x = function () {
        Y(this, 0);
      }, n.B = function (e, t) {
        switch (e) {
          case 100142:
            return;

          case 100140:
            switch (t) {
              case 100130:
              case 100131:
              case 100132:
              case 100133:
              case 100134:
                return void (this.s = t);
            }

            break;

          case 100141:
            return void (this.m = !!t);

          default:
            return void Z(this, 100900);
        }

        Z(this, 100901);
      }, n.y = function (e) {
        switch (e) {
          case 100142:
            return 0;

          case 100140:
            return this.s;

          case 100141:
            return this.m;

          default:
            Z(this, 100900);
        }

        return !1;
      }, n.A = function (e, t, r) {
        this.j[0] = e, this.j[1] = t, this.j[2] = r;
      }, n.z = function (e, t) {
        var r = t || null;

        switch (e) {
          case 100100:
          case 100106:
            this.h = r;
            break;

          case 100104:
          case 100110:
            this.l = r;
            break;

          case 100101:
          case 100107:
            this.k = r;
            break;

          case 100102:
          case 100108:
            this.i = r;
            break;

          case 100103:
          case 100109:
            this.p = r;
            break;

          case 100105:
          case 100111:
            this.o = r;
            break;

          case 100112:
            this.r = r;
            break;

          default:
            Z(this, 100900);
        }
      }, n.C = function (e, t) {
        var r = !1,
            n = [0, 0, 0];
        Y(this, 2);

        for (var a = 0; a < 3; ++a) {
          var o = e[a];
          o < -1e150 && (o = -1e150, r = !0), 1e150 < o && (o = 1e150, r = !0), n[a] = o;
        }

        r && Z(this, 100155), null === (r = this.q) ? M(r = i(this.b), r.b) : (E(r), r = r.e), r.a.d = t, r.a.g[0] = n[0], r.a.g[1] = n[1], r.a.g[2] = n[2], r.f = 1, r.b.f = -1, this.q = r;
      }, n.u = function (e) {
        Y(this, 0), this.d = 1, this.b = new $(), this.c = e;
      }, n.t = function () {
        Y(this, 1), this.d = 2, this.q = null;
      }, n.v = function () {
        Y(this, 2), this.d = 1;
      }, n.w = function () {
        Y(this, 1), this.d = 0;
        var e,
            t,
            r = !1,
            n = [l = this.j[0], a = this.j[1], i = this.j[2]];

        if (0 === l && 0 === a && 0 === i) {
          for (var a = [-2e150, -2e150, -2e150], o = [2e150, 2e150, 2e150], i = [], s = [], l = (r = this.b.c).e; l !== r; l = l.e) for (var p = 0; p < 3; ++p) {
            var u = l.g[p];
            u < o[p] && (o[p] = u, s[p] = l), u > a[p] && (a[p] = u, i[p] = l);
          }

          if (l = 0, a[1] - o[1] > a[0] - o[0] && (l = 1), a[2] - o[2] > a[l] - o[l] && (l = 2), o[l] >= a[l]) n[0] = 0, n[1] = 0, n[2] = 1;else {
            for (a = 0, o = s[l], i = i[l], s = [0, 0, 0], o = [o.g[0] - i.g[0], o.g[1] - i.g[1], o.g[2] - i.g[2]], p = [0, 0, 0], l = r.e; l !== r; l = l.e) p[0] = l.g[0] - i.g[0], p[1] = l.g[1] - i.g[1], p[2] = l.g[2] - i.g[2], s[0] = o[1] * p[2] - o[2] * p[1], s[1] = o[2] * p[0] - o[0] * p[2], s[2] = o[0] * p[1] - o[1] * p[0], a < (u = s[0] * s[0] + s[1] * s[1] + s[2] * s[2]) && (a = u, n[0] = s[0], n[1] = s[1], n[2] = s[2]);

            a <= 0 && (n[0] = n[1] = n[2] = 0, n[T(o)] = 1);
          }
          r = !0;
        }

        for (s = T(n), l = this.b.c, a = (s + 1) % 3, i = (s + 2) % 3, s = 0 < n[s] ? 1 : -1, n = l.e; n !== l; n = n.e) n.b = n.g[a], n.a = s * n.g[i];

        if (r) {
          for (n = 0, l = (r = this.b.a).b; l !== r; l = l.b) if (!((a = l.a).f <= 0)) for (; n += (a.a.b - a.b.a.b) * (a.a.a + a.b.a.a), (a = a.e) !== l.a;);

          if (n < 0) for (r = (n = this.b.c).e; r !== n; r = r.e) r.a = -r.a;
        }

        for (this.n = !1, l = (n = this.b.b).h; l !== n; l = r) r = l.h, a = l.e, y(l.a, l.b.a) && l.e.e !== l && (F(this, a, l), c(l), a = (l = a).e), a.e === l && (a !== l && (a !== r && a !== r.b || (r = r.h), c(a)), l !== r && l !== r.b || (r = r.h), c(l));

        for (this.e = n = new te(), l = (r = this.b.c).e; l !== r; l = l.e) l.h = re(n, l);

        for (!function (e) {
          e.d = [];

          for (var t = 0; t < e.a; t++) e.d[t] = t;

          e.d.sort(function (r) {
            return function (e, t) {
              return g(r[e], r[t]) ? 1 : -1;
            };
          }(e.c)), e.e = !0, function (e) {
            for (var t = e.a; 1 <= t; --t) le(e, t);

            e.h = !0;
          }(e.b);
        }(n), this.f = new H(this), z(this, -C), z(this, C); null !== (n = ne(this.e));) {
          for (;;) {
            e: if (l = this.e, 0 === l.a) r = ie(l.b);else if (r = l.c[l.d[l.a - 1]], 0 !== l.b.a && (l = ie(l.b), g(l, r))) {
              r = l;
              break e;
            }

            if (null === r || !y(r, n)) break;
            r = ne(this.e), F(this, n.c, r.c);
          }

          V(this, n);
        }

        for (this.a = this.f.a.a.b.a.a, n = 0; null !== (r = this.f.a.a.b);) r.h || ++n, O(r);

        for (this.f = null, (n = this.e).b = null, n.d = null, this.e = n.c = null, l = (n = this.b).a.b; l !== n.a; l = r) r = l.b, (l = l.a).e.e === l && (N(l.c, l), c(l));

        if (!this.n) {
          if (n = this.b, this.m) for (l = n.b.h; l !== n.b; l = r) r = l.h, l.b.d.c !== l.d.c ? l.f = l.d.c ? 1 : -1 : c(l);else for (l = n.a.b; l !== n.a; l = r) if (r = l.b, l.c) {
            for (l = l.a; g(l.b.a, l.a); l = l.c.b);

            for (; g(l.a, l.b.a); l = l.e);

            for (a = l.c.b, i = void 0; l.e !== a;) if (g(l.b.a, a.a)) {
              for (; a.e !== l && (g((t = a.e).b.a, t.a) || b(a.a, a.b.a, a.e.b.a) <= 0);) a = (i = d(a.e, a)).b;

              a = a.c.b;
            } else {
              for (; a.e !== l && (g((e = l.c.b).a, e.b.a) || 0 <= b(l.b.a, l.a, l.c.b.a));) l = (i = d(l, l.c.b)).b;

              l = l.e;
            }

            for (; a.e.e !== l;) a = (i = d(a.e, a)).b;
          }
          if (this.h || this.i || this.k || this.l) if (this.m) {
            for (r = (n = this.b).a.b; r !== n.a; r = r.b) if (r.c) {
              for (this.h && this.h(2, this.c), l = r.a; this.k && this.k(l.a.d, this.c), (l = l.e) !== r.a;);

              this.i && this.i(this.c);
            }
          } else {
            for (n = this.b, r = !!this.l, l = !1, a = -1, i = n.a.d; i !== n.a; i = i.d) if (i.c) for (l || (this.h && this.h(4, this.c), l = !0), s = i.a; r && a !== (o = s.b.d.c ? 0 : 1) && (a = o, this.l && this.l(!!a, this.c)), this.k && this.k(s.a.d, this.c), (s = s.e) !== i.a;);

            l && this.i && this.i(this.c);
          }

          if (this.r) {
            for (l = (n = this.b).a.b; l !== n.a; l = r) if (r = l.b, !l.c) {
              for (i = (a = l.a).e, s = void 0; i = (s = i).e, (s.d = null) === s.b.d && (s.c === s ? f(s.a, null) : (s.a.c = s.c, h(s, J(s))), (o = s.b).c === o ? f(o.a, null) : (o.a.c = o.c, h(o, J(o))), m(s)), s !== a;);

              a = l.d, ((l = l.b).d = a).b = l;
            }

            return this.r(this.b), void (this.c = this.b = null);
          }
        }

        this.b = this.c = null;
      }, this.libtess = {
        GluTesselator: q,
        windingRule: {
          GLU_TESS_WINDING_ODD: 100130,
          GLU_TESS_WINDING_NONZERO: 100131,
          GLU_TESS_WINDING_POSITIVE: 100132,
          GLU_TESS_WINDING_NEGATIVE: 100133,
          GLU_TESS_WINDING_ABS_GEQ_TWO: 100134
        },
        primitiveType: {
          GL_LINE_LOOP: 2,
          GL_TRIANGLES: 4,
          GL_TRIANGLE_STRIP: 5,
          GL_TRIANGLE_FAN: 6
        },
        errorType: {
          GLU_TESS_MISSING_BEGIN_POLYGON: 100151,
          GLU_TESS_MISSING_END_POLYGON: 100153,
          GLU_TESS_MISSING_BEGIN_CONTOUR: 100152,
          GLU_TESS_MISSING_END_CONTOUR: 100154,
          GLU_TESS_COORD_TOO_LARGE: 100155,
          GLU_TESS_NEED_COMBINE_CALLBACK: 100156
        },
        gluEnum: {
          GLU_TESS_MESH: 100112,
          GLU_TESS_TOLERANCE: 100142,
          GLU_TESS_WINDING_RULE: 100140,
          GLU_TESS_BOUNDARY_ONLY: 100141,
          GLU_INVALID_ENUM: 100900,
          GLU_INVALID_VALUE: 100901,
          GLU_TESS_BEGIN: 100100,
          GLU_TESS_VERTEX: 100101,
          GLU_TESS_END: 100102,
          GLU_TESS_ERROR: 100103,
          GLU_TESS_EDGE_FLAG: 100104,
          GLU_TESS_COMBINE: 100105,
          GLU_TESS_BEGIN_DATA: 100106,
          GLU_TESS_VERTEX_DATA: 100107,
          GLU_TESS_END_DATA: 100108,
          GLU_TESS_ERROR_DATA: 100109,
          GLU_TESS_EDGE_FLAG_DATA: 100110,
          GLU_TESS_COMBINE_DATA: 100111
        }
      }, q.prototype.gluDeleteTess = q.prototype.x, q.prototype.gluTessProperty = q.prototype.B, q.prototype.gluGetTessProperty = q.prototype.y, q.prototype.gluTessNormal = q.prototype.A, q.prototype.gluTessCallback = q.prototype.z, q.prototype.gluTessVertex = q.prototype.C, q.prototype.gluTessBeginPolygon = q.prototype.u, q.prototype.gluTessBeginContour = q.prototype.t, q.prototype.gluTessEndContour = q.prototype.v, q.prototype.gluTessEndPolygon = q.prototype.w, void 0 !== t && (t.exports = this.libtess);
    }, {}],
    12: [function (e, t, r) {
      "use strict";

      function N(e, t, r, n) {
        for (var a = e[t++], o = 1 << a, i = 1 + o, s = 1 + i, l = a + 1, p = (1 << l) - 1, u = 0, c = 0, d = 0, h = e[t++], m = new Int32Array(4096), f = null;;) {
          for (; u < 16 && 0 !== h;) c |= e[t++] << u, u += 8, 1 === h ? h = e[t++] : --h;

          if (u < l) break;
          var y = c & p;

          if (c >>= l, u -= l, y != o) {
            if (y == i) break;

            for (var g = y < s ? y : f, v = 0, b = g; o < b;) b = m[b] >> 8, ++v;

            var _ = b;
            if (n < d + v + (g !== y ? 1 : 0)) return void console.log("Warning, gif stream longer than expected.");
            r[d++] = _;
            var x = d += v;

            for (g !== y && (r[d++] = _), b = g; v--;) b = m[b], r[--x] = 255 & b, b >>= 8;

            null !== f && s < 4096 && (m[s++] = f << 8 | _, p + 1 <= s && l < 12 && (++l, p = p << 1 | 1)), f = y;
          } else s = 1 + i, p = (1 << (l = a + 1)) - 1, f = null;
        }

        return d !== n && console.log("Warning, gif stream shorter than expected."), r;
      }

      try {
        r.GifWriter = function (g, e, t, r) {
          var v = 0,
              n = void 0 === (r = void 0 === r ? {} : r).loop ? null : r.loop,
              b = void 0 === r.palette ? null : r.palette;
          if (e <= 0 || t <= 0 || 65535 < e || 65535 < t) throw new Error("Width/Height invalid.");

          function _(e) {
            var t = e.length;
            if (t < 2 || 256 < t || t & t - 1) throw new Error("Invalid code/color length, must be power of 2 and 2 .. 256.");
            return t;
          }

          g[v++] = 71, g[v++] = 73, g[v++] = 70, g[v++] = 56, g[v++] = 57, g[v++] = 97;
          var a = 0,
              o = 0;

          if (null !== b) {
            for (var i = _(b); i >>= 1;) ++a;

            if (i = 1 << a, --a, void 0 !== r.background) {
              if (i <= (o = r.background)) throw new Error("Background index out of range.");
              if (0 === o) throw new Error("Background index explicitly passed as 0.");
            }
          }

          if (g[v++] = 255 & e, g[v++] = e >> 8 & 255, g[v++] = 255 & t, g[v++] = t >> 8 & 255, g[v++] = (null !== b ? 128 : 0) | a, g[v++] = o, g[v++] = 0, null !== b) for (var s = 0, l = b.length; s < l; ++s) {
            var p = b[s];
            g[v++] = p >> 16 & 255, g[v++] = p >> 8 & 255, g[v++] = 255 & p;
          }

          if (null !== n) {
            if (n < 0 || 65535 < n) throw new Error("Loop count invalid.");
            g[v++] = 33, g[v++] = 255, g[v++] = 11, g[v++] = 78, g[v++] = 69, g[v++] = 84, g[v++] = 83, g[v++] = 67, g[v++] = 65, g[v++] = 80, g[v++] = 69, g[v++] = 50, g[v++] = 46, g[v++] = 48, g[v++] = 3, g[v++] = 1, g[v++] = 255 & n, g[v++] = n >> 8 & 255, g[v++] = 0;
          }

          var x = !1;
          this.addFrame = function (e, t, r, n, a, o) {
            if (!0 === x && (--v, x = !1), o = void 0 === o ? {} : o, e < 0 || t < 0 || 65535 < e || 65535 < t) throw new Error("x/y invalid.");
            if (r <= 0 || n <= 0 || 65535 < r || 65535 < n) throw new Error("Width/Height invalid.");
            if (a.length < r * n) throw new Error("Not enough pixels for the frame size.");
            var i = !0,
                s = o.palette;
            if (null == s && (i = !1, s = b), null == s) throw new Error("Must supply either a local or global palette.");

            for (var l = _(s), p = 0; l >>= 1;) ++p;

            l = 1 << p;
            var u = void 0 === o.delay ? 0 : o.delay,
                c = void 0 === o.disposal ? 0 : o.disposal;
            if (c < 0 || 3 < c) throw new Error("Disposal out of range.");
            var d = !1,
                h = 0;
            if (void 0 !== o.transparent && null !== o.transparent && (d = !0, (h = o.transparent) < 0 || l <= h)) throw new Error("Transparent color index.");
            if (0 === c && !d && 0 === u || (g[v++] = 33, g[v++] = 249, g[v++] = 4, g[v++] = c << 2 | (!0 === d ? 1 : 0), g[v++] = 255 & u, g[v++] = u >> 8 & 255, g[v++] = h, g[v++] = 0), g[v++] = 44, g[v++] = 255 & e, g[v++] = e >> 8 & 255, g[v++] = 255 & t, g[v++] = t >> 8 & 255, g[v++] = 255 & r, g[v++] = r >> 8 & 255, g[v++] = 255 & n, g[v++] = n >> 8 & 255, g[v++] = !0 === i ? 128 | p - 1 : 0, !0 === i) for (var m = 0, f = s.length; m < f; ++m) {
              var y = s[m];
              g[v++] = y >> 16 & 255, g[v++] = y >> 8 & 255, g[v++] = 255 & y;
            }
            return v = function (t, r, e, n) {
              t[r++] = e;
              var a = r++,
                  o = 1 << e,
                  i = o - 1,
                  s = 1 + o,
                  l = 1 + s,
                  p = e + 1,
                  u = 0,
                  c = 0;

              function d(e) {
                for (; e <= u;) t[r++] = 255 & c, c >>= 8, u -= 8, r === a + 256 && (t[a] = 255, a = r++);
              }

              function h(e) {
                c |= e << u, u += p, d(8);
              }

              var m = n[0] & i,
                  f = {};
              h(o);

              for (var y = 1, g = n.length; y < g; ++y) {
                var v = n[y] & i,
                    b = m << 8 | v,
                    _ = f[b];

                if (void 0 === _) {
                  for (c |= m << u, u += p; 8 <= u;) t[r++] = 255 & c, c >>= 8, u -= 8, r === a + 256 && (t[a] = 255, a = r++);

                  4096 === l ? (h(o), l = 1 + s, p = e + 1, f = {}) : (1 << p <= l && ++p, f[b] = l++), m = v;
                } else m = _;
              }

              h(m), h(s), d(1), a + 1 === r ? t[a] = 0 : (t[a] = r - a - 1, t[r++] = 0);
              return r;
            }(g, v, p < 2 ? 2 : p, a);
          }, this.end = function () {
            return !1 === x && (g[v++] = 59, x = !0), v;
          }, this.getOutputBuffer = function () {
            return g;
          }, this.setOutputBuffer = function (e) {
            g = e;
          }, this.getOutputBufferPosition = function () {
            return v;
          }, this.setOutputBufferPosition = function (e) {
            v = e;
          };
        }, r.GifReader = function (x) {
          var e = 0;
          if (71 !== x[e++] || 73 !== x[e++] || 70 !== x[e++] || 56 !== x[e++] || 56 != (x[e++] + 1 & 253) || 97 !== x[e++]) throw new Error("Invalid GIF 87a/89a header.");
          var S = x[e++] | x[e++] << 8,
              t = x[e++] | x[e++] << 8,
              r = x[e++],
              n = r >> 7,
              a = 1 << 1 + (7 & r);
          x[e++], x[e++];
          var o = null,
              i = null;
          n && (o = e, e += 3 * (i = a));
          var s = !0,
              l = [],
              p = 0,
              u = null,
              c = 0,
              d = null;

          for (this.width = S, this.height = t; s && e < x.length;) switch (x[e++]) {
            case 33:
              switch (x[e++]) {
                case 255:
                  if (11 !== x[e] || 78 == x[e + 1] && 69 == x[e + 2] && 84 == x[e + 3] && 83 == x[e + 4] && 67 == x[e + 5] && 65 == x[e + 6] && 80 == x[e + 7] && 69 == x[e + 8] && 50 == x[e + 9] && 46 == x[e + 10] && 48 == x[e + 11] && 3 == x[e + 12] && 1 == x[e + 13] && 0 == x[e + 16]) e += 14, d = x[e++] | x[e++] << 8, e++;else for (e += 12;;) {
                    if (!(0 <= (C = x[e++]))) throw Error("Invalid block size");
                    if (0 === C) break;
                    e += C;
                  }
                  break;

                case 249:
                  if (4 !== x[e++] || 0 !== x[e + 4]) throw new Error("Invalid graphics extension block.");
                  var h = x[e++];
                  p = x[e++] | x[e++] << 8, u = x[e++], 0 == (1 & h) && (u = null), c = h >> 2 & 7, e++;
                  break;

                case 254:
                  for (;;) {
                    if (!(0 <= (C = x[e++]))) throw Error("Invalid block size");
                    if (0 === C) break;
                    e += C;
                  }

                  break;

                default:
                  throw new Error("Unknown graphic control label: 0x" + x[e - 1].toString(16));
              }

              break;

            case 44:
              var m = x[e++] | x[e++] << 8,
                  f = x[e++] | x[e++] << 8,
                  y = x[e++] | x[e++] << 8,
                  g = x[e++] | x[e++] << 8,
                  v = x[e++],
                  b = v >> 6 & 1,
                  _ = 1 << 1 + (7 & v),
                  w = o,
                  M = i,
                  E = !1;

              if (v >> 7) {
                E = !0;
                w = e, e += 3 * (M = _);
              }

              var T = e;

              for (e++;;) {
                var C;
                if (!(0 <= (C = x[e++]))) throw Error("Invalid block size");
                if (0 === C) break;
                e += C;
              }

              l.push({
                x: m,
                y: f,
                width: y,
                height: g,
                has_local_palette: E,
                palette_offset: w,
                palette_size: M,
                data_offset: T,
                data_length: e - T,
                transparent_index: u,
                interlaced: !!b,
                delay: p,
                disposal: c
              });
              break;

            case 59:
              s = !1;
              break;

            default:
              throw new Error("Unknown gif block: 0x" + x[e - 1].toString(16));
          }

          this.numFrames = function () {
            return l.length;
          }, this.loopCount = function () {
            return d;
          }, this.frameInfo = function (e) {
            if (e < 0 || e >= l.length) throw new Error("Frame index out of range.");
            return l[e];
          }, this.decodeAndBlitFrameBGRA = function (e, t) {
            var r = this.frameInfo(e),
                n = r.width * r.height,
                a = new Uint8Array(n);
            N(x, r.data_offset, a, n);
            var o = r.palette_offset,
                i = r.transparent_index;
            null === i && (i = 256);
            var s = r.width,
                l = S - s,
                p = s,
                u = 4 * (r.y * S + r.x),
                c = 4 * ((r.y + r.height) * S + r.x),
                d = u,
                h = 4 * l;
            !0 === r.interlaced && (h += 4 * S * 7);

            for (var m = 8, f = 0, y = a.length; f < y; ++f) {
              var g = a[f];
              if (0 === p && (p = s, c <= (d += h) && (h = 4 * l + 4 * S * (m - 1), d = u + (s + l) * (m << 1), m >>= 1)), g === i) d += 4;else {
                var v = x[o + 3 * g],
                    b = x[o + 3 * g + 1],
                    _ = x[o + 3 * g + 2];
                t[d++] = _, t[d++] = b, t[d++] = v, t[d++] = 255;
              }
              --p;
            }
          }, this.decodeAndBlitFrameRGBA = function (e, t) {
            var r = this.frameInfo(e),
                n = r.width * r.height,
                a = new Uint8Array(n);
            N(x, r.data_offset, a, n);
            var o = r.palette_offset,
                i = r.transparent_index;
            null === i && (i = 256);
            var s = r.width,
                l = S - s,
                p = s,
                u = 4 * (r.y * S + r.x),
                c = 4 * ((r.y + r.height) * S + r.x),
                d = u,
                h = 4 * l;
            !0 === r.interlaced && (h += 4 * S * 7);

            for (var m = 8, f = 0, y = a.length; f < y; ++f) {
              var g = a[f];
              if (0 === p && (p = s, c <= (d += h) && (h = 4 * l + 4 * S * (m - 1), d = u + (s + l) * (m << 1), m >>= 1)), g === i) d += 4;else {
                var v = x[o + 3 * g],
                    b = x[o + 3 * g + 1],
                    _ = x[o + 3 * g + 2];
                t[d++] = v, t[d++] = b, t[d++] = _, t[d++] = 255;
              }
              --p;
            }
          };
        };
      } catch (e) {}
    }, {}],
    13: [function (jr, t, r) {
      (function (Gr) {
        var e;
        e = this, function (E) {
          "use strict";

          function e(e) {
            if (null == this) throw TypeError();
            var t = String(this),
                r = t.length,
                n = e ? Number(e) : 0;

            if (n != n && (n = 0), !(n < 0 || r <= n)) {
              var a,
                  o = t.charCodeAt(n);
              return 55296 <= o && o <= 56319 && n + 1 < r && 56320 <= (a = t.charCodeAt(n + 1)) && a <= 57343 ? 1024 * (o - 55296) + a - 56320 + 65536 : o;
            }
          }

          var t;
          String.prototype.codePointAt || ((t = function () {
            try {
              var e = {},
                  t = Object.defineProperty,
                  r = t(e, e, e) && t;
            } catch (e) {}

            return r;
          }()) ? t(String.prototype, "codePointAt", {
            value: e,
            configurable: !0,
            writable: !0
          }) : String.prototype.codePointAt = e);
          var l = 0,
              o = -3;

          function r() {
            this.table = new Uint16Array(16), this.trans = new Uint16Array(288);
          }

          function i(e, t) {
            this.source = e, this.sourceIndex = 0, this.tag = 0, this.bitcount = 0, this.dest = t, this.destLen = 0, this.ltree = new r(), this.dtree = new r();
          }

          var s = new r(),
              p = new r(),
              u = new Uint8Array(30),
              c = new Uint16Array(30),
              d = new Uint8Array(30),
              h = new Uint16Array(30),
              m = new Uint8Array([16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]),
              f = new r(),
              y = new Uint8Array(320);

          function n(e, t, r, n) {
            var a, o;

            for (a = 0; a < r; ++a) e[a] = 0;

            for (a = 0; a < 30 - r; ++a) e[a + r] = a / r | 0;

            for (o = n, a = 0; a < 30; ++a) t[a] = o, o += 1 << e[a];
          }

          var g = new Uint16Array(16);

          function v(e, t, r, n) {
            var a, o;

            for (a = 0; a < 16; ++a) e.table[a] = 0;

            for (a = 0; a < n; ++a) e.table[t[r + a]]++;

            for (a = o = e.table[0] = 0; a < 16; ++a) g[a] = o, o += e.table[a];

            for (a = 0; a < n; ++a) t[r + a] && (e.trans[g[t[r + a]]++] = a);
          }

          function b(e) {
            e.bitcount-- || (e.tag = e.source[e.sourceIndex++], e.bitcount = 7);
            var t = 1 & e.tag;
            return e.tag >>>= 1, t;
          }

          function _(e, t, r) {
            if (!t) return r;

            for (; e.bitcount < 24;) e.tag |= e.source[e.sourceIndex++] << e.bitcount, e.bitcount += 8;

            var n = e.tag & 65535 >>> 16 - t;
            return e.tag >>>= t, e.bitcount -= t, n + r;
          }

          function x(e, t) {
            for (; e.bitcount < 24;) e.tag |= e.source[e.sourceIndex++] << e.bitcount, e.bitcount += 8;

            for (var r = 0, n = 0, a = 0, o = e.tag; n = 2 * n + (1 & o), o >>>= 1, ++a, r += t.table[a], 0 <= (n -= t.table[a]););

            return e.tag = o, e.bitcount -= a, t.trans[r + n];
          }

          function S(e, t, r) {
            var n, a, o, i, s, l;

            for (n = _(e, 5, 257), a = _(e, 5, 1), o = _(e, 4, 4), i = 0; i < 19; ++i) y[i] = 0;

            for (i = 0; i < o; ++i) {
              var p = _(e, 3, 0);

              y[m[i]] = p;
            }

            for (v(f, y, 0, 19), s = 0; s < n + a;) {
              var u = x(e, f);

              switch (u) {
                case 16:
                  var c = y[s - 1];

                  for (l = _(e, 2, 3); l; --l) y[s++] = c;

                  break;

                case 17:
                  for (l = _(e, 3, 3); l; --l) y[s++] = 0;

                  break;

                case 18:
                  for (l = _(e, 7, 11); l; --l) y[s++] = 0;

                  break;

                default:
                  y[s++] = u;
              }
            }

            v(t, y, 0, n), v(r, y, n, a);
          }

          function w(e, t, r) {
            for (;;) {
              var n,
                  a,
                  o,
                  i,
                  s = x(e, t);
              if (256 === s) return l;
              if (s < 256) e.dest[e.destLen++] = s;else for (n = _(e, u[s -= 257], c[s]), a = x(e, r), i = o = e.destLen - _(e, d[a], h[a]); i < o + n; ++i) e.dest[e.destLen++] = e.dest[i];
            }
          }

          function M(e) {
            for (var t, r; 8 < e.bitcount;) e.sourceIndex--, e.bitcount -= 8;

            if ((t = 256 * (t = e.source[e.sourceIndex + 1]) + e.source[e.sourceIndex]) !== (65535 & ~(256 * e.source[e.sourceIndex + 3] + e.source[e.sourceIndex + 2]))) return o;

            for (e.sourceIndex += 4, r = t; r; --r) e.dest[e.destLen++] = e.source[e.sourceIndex++];

            return e.bitcount = 0, l;
          }

          !function (e, t) {
            var r;

            for (r = 0; r < 7; ++r) e.table[r] = 0;

            for (e.table[7] = 24, e.table[8] = 152, e.table[9] = 112, r = 0; r < 24; ++r) e.trans[r] = 256 + r;

            for (r = 0; r < 144; ++r) e.trans[24 + r] = r;

            for (r = 0; r < 8; ++r) e.trans[168 + r] = 280 + r;

            for (r = 0; r < 112; ++r) e.trans[176 + r] = 144 + r;

            for (r = 0; r < 5; ++r) t.table[r] = 0;

            for (t.table[5] = 32, r = 0; r < 32; ++r) t.trans[r] = r;
          }(s, p), n(u, c, 4, 3), n(d, h, 2, 1), u[28] = 0, c[28] = 258;

          var a = function (e, t) {
            var r,
                n,
                a = new i(e, t);

            do {
              switch (r = b(a), _(a, 2, 0)) {
                case 0:
                  n = M(a);
                  break;

                case 1:
                  n = w(a, s, p);
                  break;

                case 2:
                  S(a, a.ltree, a.dtree), n = w(a, a.ltree, a.dtree);
                  break;

                default:
                  n = o;
              }

              if (n !== l) throw new Error("Data error");
            } while (!r);

            return a.destLen < a.dest.length ? "function" == typeof a.dest.slice ? a.dest.slice(0, a.destLen) : a.dest.subarray(0, a.destLen) : a.dest;
          };

          function T(e, t, r, n, a) {
            return Math.pow(1 - a, 3) * e + 3 * Math.pow(1 - a, 2) * a * t + 3 * (1 - a) * Math.pow(a, 2) * r + Math.pow(a, 3) * n;
          }

          function C() {
            this.x1 = Number.NaN, this.y1 = Number.NaN, this.x2 = Number.NaN, this.y2 = Number.NaN;
          }

          function A() {
            this.commands = [], this.fill = "black", this.stroke = null, this.strokeWidth = 1;
          }

          function N(e) {
            throw new Error(e);
          }

          function O(e, t) {
            e || N(t);
          }

          C.prototype.isEmpty = function () {
            return isNaN(this.x1) || isNaN(this.y1) || isNaN(this.x2) || isNaN(this.y2);
          }, C.prototype.addPoint = function (e, t) {
            "number" == typeof e && ((isNaN(this.x1) || isNaN(this.x2)) && (this.x1 = e, this.x2 = e), e < this.x1 && (this.x1 = e), e > this.x2 && (this.x2 = e)), "number" == typeof t && ((isNaN(this.y1) || isNaN(this.y2)) && (this.y1 = t, this.y2 = t), t < this.y1 && (this.y1 = t), t > this.y2 && (this.y2 = t));
          }, C.prototype.addX = function (e) {
            this.addPoint(e, null);
          }, C.prototype.addY = function (e) {
            this.addPoint(null, e);
          }, C.prototype.addBezier = function (e, t, r, n, a, o, i, s) {
            var l = this,
                p = [e, t],
                u = [r, n],
                c = [a, o],
                d = [i, s];
            this.addPoint(e, t), this.addPoint(i, s);

            for (var h = 0; h <= 1; h++) {
              var m = 6 * p[h] - 12 * u[h] + 6 * c[h],
                  f = -3 * p[h] + 9 * u[h] - 9 * c[h] + 3 * d[h],
                  y = 3 * u[h] - 3 * p[h];

              if (0 != f) {
                var g = Math.pow(m, 2) - 4 * y * f;

                if (!(g < 0)) {
                  var v = (-m + Math.sqrt(g)) / (2 * f);
                  0 < v && v < 1 && (0 === h && l.addX(T(p[h], u[h], c[h], d[h], v)), 1 === h && l.addY(T(p[h], u[h], c[h], d[h], v)));
                  var b = (-m - Math.sqrt(g)) / (2 * f);
                  0 < b && b < 1 && (0 === h && l.addX(T(p[h], u[h], c[h], d[h], b)), 1 === h && l.addY(T(p[h], u[h], c[h], d[h], b)));
                }
              } else {
                if (0 == m) continue;

                var _ = -y / m;

                0 < _ && _ < 1 && (0 === h && l.addX(T(p[h], u[h], c[h], d[h], _)), 1 === h && l.addY(T(p[h], u[h], c[h], d[h], _)));
              }
            }
          }, C.prototype.addQuad = function (e, t, r, n, a, o) {
            var i = e + 2 / 3 * (r - e),
                s = t + 2 / 3 * (n - t),
                l = i + 1 / 3 * (a - e),
                p = s + 1 / 3 * (o - t);
            this.addBezier(e, t, i, s, l, p, a, o);
          }, A.prototype.moveTo = function (e, t) {
            this.commands.push({
              type: "M",
              x: e,
              y: t
            });
          }, A.prototype.lineTo = function (e, t) {
            this.commands.push({
              type: "L",
              x: e,
              y: t
            });
          }, A.prototype.curveTo = A.prototype.bezierCurveTo = function (e, t, r, n, a, o) {
            this.commands.push({
              type: "C",
              x1: e,
              y1: t,
              x2: r,
              y2: n,
              x: a,
              y: o
            });
          }, A.prototype.quadTo = A.prototype.quadraticCurveTo = function (e, t, r, n) {
            this.commands.push({
              type: "Q",
              x1: e,
              y1: t,
              x: r,
              y: n
            });
          }, A.prototype.close = A.prototype.closePath = function () {
            this.commands.push({
              type: "Z"
            });
          }, A.prototype.extend = function (e) {
            if (e.commands) e = e.commands;else if (e instanceof C) {
              var t = e;
              return this.moveTo(t.x1, t.y1), this.lineTo(t.x2, t.y1), this.lineTo(t.x2, t.y2), this.lineTo(t.x1, t.y2), void this.close();
            }
            Array.prototype.push.apply(this.commands, e);
          }, A.prototype.getBoundingBox = function () {
            for (var e = new C(), t = 0, r = 0, n = 0, a = 0, o = 0; o < this.commands.length; o++) {
              var i = this.commands[o];

              switch (i.type) {
                case "M":
                  e.addPoint(i.x, i.y), t = n = i.x, r = a = i.y;
                  break;

                case "L":
                  e.addPoint(i.x, i.y), n = i.x, a = i.y;
                  break;

                case "Q":
                  e.addQuad(n, a, i.x1, i.y1, i.x, i.y), n = i.x, a = i.y;
                  break;

                case "C":
                  e.addBezier(n, a, i.x1, i.y1, i.x2, i.y2, i.x, i.y), n = i.x, a = i.y;
                  break;

                case "Z":
                  n = t, a = r;
                  break;

                default:
                  throw new Error("Unexpected path command " + i.type);
              }
            }

            return e.isEmpty() && e.addPoint(0, 0), e;
          }, A.prototype.draw = function (e) {
            e.beginPath();

            for (var t = 0; t < this.commands.length; t += 1) {
              var r = this.commands[t];
              "M" === r.type ? e.moveTo(r.x, r.y) : "L" === r.type ? e.lineTo(r.x, r.y) : "C" === r.type ? e.bezierCurveTo(r.x1, r.y1, r.x2, r.y2, r.x, r.y) : "Q" === r.type ? e.quadraticCurveTo(r.x1, r.y1, r.x, r.y) : "Z" === r.type && e.closePath();
            }

            this.fill && (e.fillStyle = this.fill, e.fill()), this.stroke && (e.strokeStyle = this.stroke, e.lineWidth = this.strokeWidth, e.stroke());
          }, A.prototype.toPathData = function (o) {
            function e() {
              for (var e, t = arguments, r = "", n = 0; n < arguments.length; n += 1) {
                var a = t[n];
                0 <= a && 0 < n && (r += " "), r += (e = a, Math.round(e) === e ? "" + Math.round(e) : e.toFixed(o));
              }

              return r;
            }

            o = void 0 !== o ? o : 2;

            for (var t = "", r = 0; r < this.commands.length; r += 1) {
              var n = this.commands[r];
              "M" === n.type ? t += "M" + e(n.x, n.y) : "L" === n.type ? t += "L" + e(n.x, n.y) : "C" === n.type ? t += "C" + e(n.x1, n.y1, n.x2, n.y2, n.x, n.y) : "Q" === n.type ? t += "Q" + e(n.x1, n.y1, n.x, n.y) : "Z" === n.type && (t += "Z");
            }

            return t;
          }, A.prototype.toSVG = function (e) {
            var t = '<path d="';
            return t += this.toPathData(e), t += '"', this.fill && "black" !== this.fill && (null === this.fill ? t += ' fill="none"' : t += ' fill="' + this.fill + '"'), this.stroke && (t += ' stroke="' + this.stroke + '" stroke-width="' + this.strokeWidth + '"'), t += "/>";
          }, A.prototype.toDOMElement = function (e) {
            var t = this.toPathData(e),
                r = document.createElementNS("http://www.w3.org/2000/svg", "path");
            return r.setAttribute("d", t), r;
          };
          var L = {
            fail: N,
            argument: O,
            assert: O
          },
              I = 2147483648,
              P = {},
              R = {},
              D = {};

          function k(e) {
            return function () {
              return e;
            };
          }

          R.BYTE = function (e) {
            return L.argument(0 <= e && e <= 255, "Byte value should be between 0 and 255."), [e];
          }, D.BYTE = k(1), R.CHAR = function (e) {
            return [e.charCodeAt(0)];
          }, D.CHAR = k(1), R.CHARARRAY = function (e) {
            for (var t = [], r = 0; r < e.length; r += 1) t[r] = e.charCodeAt(r);

            return t;
          }, D.CHARARRAY = function (e) {
            return e.length;
          }, R.USHORT = function (e) {
            return [e >> 8 & 255, 255 & e];
          }, D.USHORT = k(2), R.SHORT = function (e) {
            return 32768 <= e && (e = -(65536 - e)), [e >> 8 & 255, 255 & e];
          }, D.SHORT = k(2), R.UINT24 = function (e) {
            return [e >> 16 & 255, e >> 8 & 255, 255 & e];
          }, D.UINT24 = k(3), R.ULONG = function (e) {
            return [e >> 24 & 255, e >> 16 & 255, e >> 8 & 255, 255 & e];
          }, D.ULONG = k(4), R.LONG = function (e) {
            return I <= e && (e = -(2 * I - e)), [e >> 24 & 255, e >> 16 & 255, e >> 8 & 255, 255 & e];
          }, D.LONG = k(4), R.FIXED = R.ULONG, D.FIXED = D.ULONG, R.FWORD = R.SHORT, D.FWORD = D.SHORT, R.UFWORD = R.USHORT, D.UFWORD = D.USHORT, R.LONGDATETIME = function (e) {
            return [0, 0, 0, 0, e >> 24 & 255, e >> 16 & 255, e >> 8 & 255, 255 & e];
          }, D.LONGDATETIME = k(8), R.TAG = function (e) {
            return L.argument(4 === e.length, "Tag should be exactly 4 ASCII characters."), [e.charCodeAt(0), e.charCodeAt(1), e.charCodeAt(2), e.charCodeAt(3)];
          }, D.TAG = k(4), R.Card8 = R.BYTE, D.Card8 = D.BYTE, R.Card16 = R.USHORT, D.Card16 = D.USHORT, R.OffSize = R.BYTE, D.OffSize = D.BYTE, R.SID = R.USHORT, D.SID = D.USHORT, R.NUMBER = function (e) {
            return -107 <= e && e <= 107 ? [e + 139] : 108 <= e && e <= 1131 ? [247 + ((e -= 108) >> 8), 255 & e] : -1131 <= e && e <= -108 ? [251 + ((e = -e - 108) >> 8), 255 & e] : -32768 <= e && e <= 32767 ? R.NUMBER16(e) : R.NUMBER32(e);
          }, D.NUMBER = function (e) {
            return R.NUMBER(e).length;
          }, R.NUMBER16 = function (e) {
            return [28, e >> 8 & 255, 255 & e];
          }, D.NUMBER16 = k(3), R.NUMBER32 = function (e) {
            return [29, e >> 24 & 255, e >> 16 & 255, e >> 8 & 255, 255 & e];
          }, D.NUMBER32 = k(5), R.REAL = function (e) {
            var t = e.toString(),
                r = /\.(\d*?)(?:9{5,20}|0{5,20})\d{0,2}(?:e(.+)|$)/.exec(t);

            if (r) {
              var n = parseFloat("1e" + ((r[2] ? +r[2] : 0) + r[1].length));
              t = (Math.round(e * n) / n).toString();
            }

            for (var a = "", o = 0, i = t.length; o < i; o += 1) {
              var s = t[o];
              a += "e" === s ? "-" === t[++o] ? "c" : "b" : "." === s ? "a" : "-" === s ? "e" : s;
            }

            for (var l = [30], p = 0, u = (a += 1 & a.length ? "f" : "ff").length; p < u; p += 2) l.push(parseInt(a.substr(p, 2), 16));

            return l;
          }, D.REAL = function (e) {
            return R.REAL(e).length;
          }, R.NAME = R.CHARARRAY, D.NAME = D.CHARARRAY, R.STRING = R.CHARARRAY, D.STRING = D.CHARARRAY, P.UTF8 = function (e, t, r) {
            for (var n = [], a = r, o = 0; o < a; o++, t += 1) n[o] = e.getUint8(t);

            return String.fromCharCode.apply(null, n);
          }, P.UTF16 = function (e, t, r) {
            for (var n = [], a = r / 2, o = 0; o < a; o++, t += 2) n[o] = e.getUint16(t);

            return String.fromCharCode.apply(null, n);
          }, R.UTF16 = function (e) {
            for (var t = [], r = 0; r < e.length; r += 1) {
              var n = e.charCodeAt(r);
              t[t.length] = n >> 8 & 255, t[t.length] = 255 & n;
            }

            return t;
          }, D.UTF16 = function (e) {
            return 2 * e.length;
          };
          var F = {
            "x-mac-croatian": "ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®Š™´¨≠ŽØ∞±≤≥∆µ∂∑∏š∫ªºΩžø¿¡¬√ƒ≈Ć«Č… ÀÃÕŒœĐ—“”‘’÷◊©⁄€‹›Æ»–·‚„‰ÂćÁčÈÍÎÏÌÓÔđÒÚÛÙıˆ˜¯πË˚¸Êæˇ",
            "x-mac-cyrillic": "АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ†°Ґ£§•¶І®©™Ђђ≠Ѓѓ∞±≤≥іµґЈЄєЇїЉљЊњјЅ¬√ƒ≈∆«»… ЋћЌќѕ–—“”‘’÷„ЎўЏџ№Ёёяабвгдежзийклмнопрстуфхцчшщъыьэю",
            "x-mac-gaelic": "ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ÆØḂ±≤≥ḃĊċḊḋḞḟĠġṀæøṁṖṗɼƒſṠ«»… ÀÃÕŒœ–—“”‘’ṡẛÿŸṪ€‹›Ŷŷṫ·Ỳỳ⁊ÂÊÁËÈÍÎÏÌÓÔ♣ÒÚÛÙıÝýŴŵẄẅẀẁẂẃ",
            "x-mac-greek": "Ä¹²É³ÖÜ΅àâä΄¨çéèêë£™îï•½‰ôö¦€ùûü†ΓΔΘΛΞΠß®©ΣΪ§≠°·Α±≤≥¥ΒΕΖΗΙΚΜΦΫΨΩάΝ¬ΟΡ≈Τ«»… ΥΧΆΈœ–―“”‘’÷ΉΊΌΎέήίόΏύαβψδεφγηιξκλμνοπώρστθωςχυζϊϋΐΰ­",
            "x-mac-icelandic": "ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûüÝ°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸ⁄€ÐðÞþý·‚„‰ÂÊÁËÈÍÎÏÌÓÔÒÚÛÙıˆ˜¯˘˙˚¸˝˛ˇ",
            "x-mac-inuit": "ᐃᐄᐅᐆᐊᐋᐱᐲᐳᐴᐸᐹᑉᑎᑏᑐᑑᑕᑖᑦᑭᑮᑯᑰᑲᑳᒃᒋᒌᒍᒎᒐᒑ°ᒡᒥᒦ•¶ᒧ®©™ᒨᒪᒫᒻᓂᓃᓄᓅᓇᓈᓐᓯᓰᓱᓲᓴᓵᔅᓕᓖᓗᓘᓚᓛᓪᔨᔩᔪᔫᔭ… ᔮᔾᕕᕖᕗ–—“”‘’ᕘᕙᕚᕝᕆᕇᕈᕉᕋᕌᕐᕿᖀᖁᖂᖃᖄᖅᖏᖐᖑᖒᖓᖔᖕᙱᙲᙳᙴᙵᙶᖖᖠᖡᖢᖣᖤᖥᖦᕼŁł",
            "x-mac-ce": "ÄĀāÉĄÖÜáąČäčĆćéŹźĎíďĒēĖóėôöõúĚěü†°Ę£§•¶ß®©™ę¨≠ģĮįĪ≤≥īĶ∂∑łĻļĽľĹĺŅņŃ¬√ńŇ∆«»… ňŐÕőŌ–—“”‘’÷◊ōŔŕŘ‹›řŖŗŠ‚„šŚśÁŤťÍŽžŪÓÔūŮÚůŰűŲųÝýķŻŁżĢˇ",
            macintosh: "ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸ⁄€‹›ﬁﬂ‡·‚„‰ÂÊÁËÈÍÎÏÌÓÔÒÚÛÙıˆ˜¯˘˙˚¸˝˛ˇ",
            "x-mac-romanian": "ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ĂȘ∞±≤≥¥µ∂∑∏π∫ªºΩăș¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸ⁄€‹›Țț‡·‚„‰ÂÊÁËÈÍÎÏÌÓÔÒÚÛÙıˆ˜¯˘˙˚¸˝˛ˇ",
            "x-mac-turkish": "ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸĞğİıŞş‡·‚„‰ÂÊÁËÈÍÎÏÌÓÔÒÚÛÙˆ˜¯˘˙˚¸˝˛ˇ"
          };

          P.MACSTRING = function (e, t, r, n) {
            var a = F[n];

            if (void 0 !== a) {
              for (var o = "", i = 0; i < r; i++) {
                var s = e.getUint8(t + i);
                o += s <= 127 ? String.fromCharCode(s) : a[127 & s];
              }

              return o;
            }
          };

          var U,
              B = "function" == typeof WeakMap && new WeakMap();

          function G(e) {
            return -128 <= e && e <= 127;
          }

          function j(e, t, r) {
            for (var n = 0, a = e.length; t < a && n < 64 && 0 === e[t];) ++t, ++n;

            return r.push(128 | n - 1), t;
          }

          function V(e, t, r) {
            for (var n = 0, a = e.length, o = t; o < a && n < 64;) {
              var i = e[o];
              if (!G(i)) break;
              if (0 === i && o + 1 < a && 0 === e[o + 1]) break;
              ++o, ++n;
            }

            r.push(n - 1);

            for (var s = t; s < o; ++s) r.push(e[s] + 256 & 255);

            return o;
          }

          function z(e, t, r) {
            for (var n = 0, a = e.length, o = t; o < a && n < 64;) {
              var i = e[o];
              if (0 === i) break;
              if (G(i) && o + 1 < a && G(e[o + 1])) break;
              ++o, ++n;
            }

            r.push(64 | n - 1);

            for (var s = t; s < o; ++s) {
              var l = e[s];
              r.push(l + 65536 >> 8 & 255, l + 256 & 255);
            }

            return o;
          }

          R.MACSTRING = function (e, t) {
            var r = function (e) {
              if (!U) for (var t in U = {}, F) U[t] = new String(t);
              var r = U[e];

              if (void 0 !== r) {
                if (B) {
                  var n = B.get(r);
                  if (void 0 !== n) return n;
                }

                var a = F[e];

                if (void 0 !== a) {
                  for (var o = {}, i = 0; i < a.length; i++) o[a.charCodeAt(i)] = i + 128;

                  return B && B.set(r, o), o;
                }
              }
            }(t);

            if (void 0 !== r) {
              for (var n = [], a = 0; a < e.length; a++) {
                var o = e.charCodeAt(a);
                if (128 <= o && void 0 === (o = r[o])) return;
                n[a] = o;
              }

              return n;
            }
          }, D.MACSTRING = function (e, t) {
            var r = R.MACSTRING(e, t);
            return void 0 !== r ? r.length : 0;
          }, R.VARDELTAS = function (e) {
            for (var t = 0, r = []; t < e.length;) {
              var n = e[t];
              t = 0 === n ? j(e, t, r) : -128 <= n && n <= 127 ? V(e, t, r) : z(e, t, r);
            }

            return r;
          }, R.INDEX = function (e) {
            for (var t = 1, r = [t], n = [], a = 0; a < e.length; a += 1) {
              var o = R.OBJECT(e[a]);
              Array.prototype.push.apply(n, o), t += o.length, r.push(t);
            }

            if (0 === n.length) return [0, 0];

            for (var i = [], s = 1 + Math.floor(Math.log(t) / Math.log(2)) / 8 | 0, l = [void 0, R.BYTE, R.USHORT, R.UINT24, R.ULONG][s], p = 0; p < r.length; p += 1) {
              var u = l(r[p]);
              Array.prototype.push.apply(i, u);
            }

            return Array.prototype.concat(R.Card16(e.length), R.OffSize(s), i, n);
          }, D.INDEX = function (e) {
            return R.INDEX(e).length;
          }, R.DICT = function (e) {
            for (var t = [], r = Object.keys(e), n = r.length, a = 0; a < n; a += 1) {
              var o = parseInt(r[a], 0),
                  i = e[o];
              t = (t = t.concat(R.OPERAND(i.value, i.type))).concat(R.OPERATOR(o));
            }

            return t;
          }, D.DICT = function (e) {
            return R.DICT(e).length;
          }, R.OPERATOR = function (e) {
            return e < 1200 ? [e] : [12, e - 1200];
          }, R.OPERAND = function (e, t) {
            var r = [];
            if (Array.isArray(t)) for (var n = 0; n < t.length; n += 1) L.argument(e.length === t.length, "Not enough arguments given for type" + t), r = r.concat(R.OPERAND(e[n], t[n]));else if ("SID" === t) r = r.concat(R.NUMBER(e));else if ("offset" === t) r = r.concat(R.NUMBER32(e));else if ("number" === t) r = r.concat(R.NUMBER(e));else {
              if ("real" !== t) throw new Error("Unknown operand type " + t);
              r = r.concat(R.REAL(e));
            }
            return r;
          }, R.OP = R.BYTE, D.OP = D.BYTE;
          var H = "function" == typeof WeakMap && new WeakMap();

          function W(e, t, r) {
            for (var n = 0; n < t.length; n += 1) {
              var a = t[n];
              this[a.name] = a.value;
            }

            if (this.tableName = e, this.fields = t, r) for (var o = Object.keys(r), i = 0; i < o.length; i += 1) {
              var s = o[i],
                  l = r[s];
              void 0 !== this[s] && (this[s] = l);
            }
          }

          function X(e, t, r) {
            void 0 === r && (r = t.length);
            var n = new Array(t.length + 1);
            n[0] = {
              name: e + "Count",
              type: "USHORT",
              value: r
            };

            for (var a = 0; a < t.length; a++) n[a + 1] = {
              name: e + a,
              type: "USHORT",
              value: t[a]
            };

            return n;
          }

          function q(e, t, r) {
            var n = t.length,
                a = new Array(n + 1);
            a[0] = {
              name: e + "Count",
              type: "USHORT",
              value: n
            };

            for (var o = 0; o < n; o++) a[o + 1] = {
              name: e + o,
              type: "TABLE",
              value: r(t[o], o)
            };

            return a;
          }

          function Y(e, t, r) {
            var n = t.length,
                a = [];
            a[0] = {
              name: e + "Count",
              type: "USHORT",
              value: n
            };

            for (var o = 0; o < n; o++) a = a.concat(r(t[o], o));

            return a;
          }

          function Z(e) {
            1 === e.format ? W.call(this, "coverageTable", [{
              name: "coverageFormat",
              type: "USHORT",
              value: 1
            }].concat(X("glyph", e.glyphs))) : L.assert(!1, "Can't create coverage table format 2 yet.");
          }

          function Q(e) {
            W.call(this, "scriptListTable", Y("scriptRecord", e, function (e, t) {
              var r = e.script,
                  n = r.defaultLangSys;
              return L.assert(!!n, "Unable to write GSUB: script " + e.tag + " has no default language system."), [{
                name: "scriptTag" + t,
                type: "TAG",
                value: e.tag
              }, {
                name: "script" + t,
                type: "TABLE",
                value: new W("scriptTable", [{
                  name: "defaultLangSys",
                  type: "TABLE",
                  value: new W("defaultLangSys", [{
                    name: "lookupOrder",
                    type: "USHORT",
                    value: 0
                  }, {
                    name: "reqFeatureIndex",
                    type: "USHORT",
                    value: n.reqFeatureIndex
                  }].concat(X("featureIndex", n.featureIndexes)))
                }].concat(Y("langSys", r.langSysRecords, function (e, t) {
                  var r = e.langSys;
                  return [{
                    name: "langSysTag" + t,
                    type: "TAG",
                    value: e.tag
                  }, {
                    name: "langSys" + t,
                    type: "TABLE",
                    value: new W("langSys", [{
                      name: "lookupOrder",
                      type: "USHORT",
                      value: 0
                    }, {
                      name: "reqFeatureIndex",
                      type: "USHORT",
                      value: r.reqFeatureIndex
                    }].concat(X("featureIndex", r.featureIndexes)))
                  }];
                })))
              }];
            }));
          }

          function K(e) {
            W.call(this, "featureListTable", Y("featureRecord", e, function (e, t) {
              var r = e.feature;
              return [{
                name: "featureTag" + t,
                type: "TAG",
                value: e.tag
              }, {
                name: "feature" + t,
                type: "TABLE",
                value: new W("featureTable", [{
                  name: "featureParams",
                  type: "USHORT",
                  value: r.featureParams
                }].concat(X("lookupListIndex", r.lookupListIndexes)))
              }];
            }));
          }

          function J(e, r) {
            W.call(this, "lookupListTable", q("lookup", e, function (e) {
              var t = r[e.lookupType];
              return L.assert(!!t, "Unable to write GSUB lookup type " + e.lookupType + " tables."), new W("lookupTable", [{
                name: "lookupType",
                type: "USHORT",
                value: e.lookupType
              }, {
                name: "lookupFlag",
                type: "USHORT",
                value: e.lookupFlag
              }].concat(q("subtable", e.subtables, t)));
            }));
          }

          R.CHARSTRING = function (e) {
            if (H) {
              var t = H.get(e);
              if (void 0 !== t) return t;
            }

            for (var r = [], n = e.length, a = 0; a < n; a += 1) {
              var o = e[a];
              r = r.concat(R[o.type](o.value));
            }

            return H && H.set(e, r), r;
          }, D.CHARSTRING = function (e) {
            return R.CHARSTRING(e).length;
          }, R.OBJECT = function (e) {
            var t = R[e.type];
            return L.argument(void 0 !== t, "No encoding function for type " + e.type), t(e.value);
          }, D.OBJECT = function (e) {
            var t = D[e.type];
            return L.argument(void 0 !== t, "No sizeOf function for type " + e.type), t(e.value);
          }, R.TABLE = function (e) {
            for (var t = [], r = e.fields.length, n = [], a = [], o = 0; o < r; o += 1) {
              var i = e.fields[o],
                  s = R[i.type];
              L.argument(void 0 !== s, "No encoding function for field type " + i.type + " (" + i.name + ")");
              var l = e[i.name];
              void 0 === l && (l = i.value);
              var p = s(l);
              "TABLE" === i.type ? (a.push(t.length), t = t.concat([0, 0]), n.push(p)) : t = t.concat(p);
            }

            for (var u = 0; u < n.length; u += 1) {
              var c = a[u],
                  d = t.length;
              L.argument(d < 65536, "Table " + e.tableName + " too big."), t[c] = d >> 8, t[c + 1] = 255 & d, t = t.concat(n[u]);
            }

            return t;
          }, D.TABLE = function (e) {
            for (var t = 0, r = e.fields.length, n = 0; n < r; n += 1) {
              var a = e.fields[n],
                  o = D[a.type];
              L.argument(void 0 !== o, "No sizeOf function for field type " + a.type + " (" + a.name + ")");
              var i = e[a.name];
              void 0 === i && (i = a.value), t += o(i), "TABLE" === a.type && (t += 2);
            }

            return t;
          }, R.RECORD = R.TABLE, D.RECORD = D.TABLE, R.LITERAL = function (e) {
            return e;
          }, D.LITERAL = function (e) {
            return e.length;
          }, W.prototype.encode = function () {
            return R.TABLE(this);
          }, W.prototype.sizeOf = function () {
            return D.TABLE(this);
          };
          var $ = {
            Table: W,
            Record: W,
            Coverage: (Z.prototype = Object.create(W.prototype)).constructor = Z,
            ScriptList: (Q.prototype = Object.create(W.prototype)).constructor = Q,
            FeatureList: (K.prototype = Object.create(W.prototype)).constructor = K,
            LookupList: (J.prototype = Object.create(W.prototype)).constructor = J,
            ushortList: X,
            tableList: q,
            recordList: Y
          };

          function ee(e, t) {
            return e.getUint8(t);
          }

          function te(e, t) {
            return e.getUint16(t, !1);
          }

          function re(e, t) {
            return e.getUint32(t, !1);
          }

          function ne(e, t) {
            return e.getInt16(t, !1) + e.getUint16(t + 2, !1) / 65535;
          }

          var ae = {
            byte: 1,
            uShort: 2,
            short: 2,
            uLong: 4,
            fixed: 4,
            longDateTime: 8,
            tag: 4
          };

          function oe(e, t) {
            this.data = e, this.offset = t, this.relativeOffset = 0;
          }

          oe.prototype.parseByte = function () {
            var e = this.data.getUint8(this.offset + this.relativeOffset);
            return this.relativeOffset += 1, e;
          }, oe.prototype.parseChar = function () {
            var e = this.data.getInt8(this.offset + this.relativeOffset);
            return this.relativeOffset += 1, e;
          }, oe.prototype.parseCard8 = oe.prototype.parseByte, oe.prototype.parseCard16 = oe.prototype.parseUShort = function () {
            var e = this.data.getUint16(this.offset + this.relativeOffset);
            return this.relativeOffset += 2, e;
          }, oe.prototype.parseSID = oe.prototype.parseUShort, oe.prototype.parseOffset16 = oe.prototype.parseUShort, oe.prototype.parseShort = function () {
            var e = this.data.getInt16(this.offset + this.relativeOffset);
            return this.relativeOffset += 2, e;
          }, oe.prototype.parseF2Dot14 = function () {
            var e = this.data.getInt16(this.offset + this.relativeOffset) / 16384;
            return this.relativeOffset += 2, e;
          }, oe.prototype.parseOffset32 = oe.prototype.parseULong = function () {
            var e = re(this.data, this.offset + this.relativeOffset);
            return this.relativeOffset += 4, e;
          }, oe.prototype.parseFixed = function () {
            var e = ne(this.data, this.offset + this.relativeOffset);
            return this.relativeOffset += 4, e;
          }, oe.prototype.parseString = function (e) {
            var t = this.data,
                r = this.offset + this.relativeOffset,
                n = "";
            this.relativeOffset += e;

            for (var a = 0; a < e; a++) n += String.fromCharCode(t.getUint8(r + a));

            return n;
          }, oe.prototype.parseTag = function () {
            return this.parseString(4);
          }, oe.prototype.parseLongDateTime = function () {
            var e = re(this.data, this.offset + this.relativeOffset + 4);
            return e -= 2082844800, this.relativeOffset += 8, e;
          }, oe.prototype.parseVersion = function (e) {
            var t = te(this.data, this.offset + this.relativeOffset),
                r = te(this.data, this.offset + this.relativeOffset + 2);
            return this.relativeOffset += 4, void 0 === e && (e = 4096), t + r / e / 10;
          }, oe.prototype.skip = function (e, t) {
            void 0 === t && (t = 1), this.relativeOffset += ae[e] * t;
          }, oe.prototype.parseULongList = function (e) {
            void 0 === e && (e = this.parseULong());

            for (var t = new Array(e), r = this.data, n = this.offset + this.relativeOffset, a = 0; a < e; a++) t[a] = r.getUint32(n), n += 4;

            return this.relativeOffset += 4 * e, t;
          }, oe.prototype.parseOffset16List = oe.prototype.parseUShortList = function (e) {
            void 0 === e && (e = this.parseUShort());

            for (var t = new Array(e), r = this.data, n = this.offset + this.relativeOffset, a = 0; a < e; a++) t[a] = r.getUint16(n), n += 2;

            return this.relativeOffset += 2 * e, t;
          }, oe.prototype.parseShortList = function (e) {
            for (var t = new Array(e), r = this.data, n = this.offset + this.relativeOffset, a = 0; a < e; a++) t[a] = r.getInt16(n), n += 2;

            return this.relativeOffset += 2 * e, t;
          }, oe.prototype.parseByteList = function (e) {
            for (var t = new Array(e), r = this.data, n = this.offset + this.relativeOffset, a = 0; a < e; a++) t[a] = r.getUint8(n++);

            return this.relativeOffset += e, t;
          }, oe.prototype.parseList = function (e, t) {
            t || (t = e, e = this.parseUShort());

            for (var r = new Array(e), n = 0; n < e; n++) r[n] = t.call(this);

            return r;
          }, oe.prototype.parseList32 = function (e, t) {
            t || (t = e, e = this.parseULong());

            for (var r = new Array(e), n = 0; n < e; n++) r[n] = t.call(this);

            return r;
          }, oe.prototype.parseRecordList = function (e, t) {
            t || (t = e, e = this.parseUShort());

            for (var r = new Array(e), n = Object.keys(t), a = 0; a < e; a++) {
              for (var o = {}, i = 0; i < n.length; i++) {
                var s = n[i],
                    l = t[s];
                o[s] = l.call(this);
              }

              r[a] = o;
            }

            return r;
          }, oe.prototype.parseRecordList32 = function (e, t) {
            t || (t = e, e = this.parseULong());

            for (var r = new Array(e), n = Object.keys(t), a = 0; a < e; a++) {
              for (var o = {}, i = 0; i < n.length; i++) {
                var s = n[i],
                    l = t[s];
                o[s] = l.call(this);
              }

              r[a] = o;
            }

            return r;
          }, oe.prototype.parseStruct = function (e) {
            if ("function" == typeof e) return e.call(this);

            for (var t = Object.keys(e), r = {}, n = 0; n < t.length; n++) {
              var a = t[n],
                  o = e[a];
              r[a] = o.call(this);
            }

            return r;
          }, oe.prototype.parseValueRecord = function (e) {
            if (void 0 === e && (e = this.parseUShort()), 0 !== e) {
              var t = {};
              return 1 & e && (t.xPlacement = this.parseShort()), 2 & e && (t.yPlacement = this.parseShort()), 4 & e && (t.xAdvance = this.parseShort()), 8 & e && (t.yAdvance = this.parseShort()), 16 & e && (t.xPlaDevice = void 0, this.parseShort()), 32 & e && (t.yPlaDevice = void 0, this.parseShort()), 64 & e && (t.xAdvDevice = void 0, this.parseShort()), 128 & e && (t.yAdvDevice = void 0, this.parseShort()), t;
            }
          }, oe.prototype.parseValueRecordList = function () {
            for (var e = this.parseUShort(), t = this.parseUShort(), r = new Array(t), n = 0; n < t; n++) r[n] = this.parseValueRecord(e);

            return r;
          }, oe.prototype.parsePointer = function (e) {
            var t = this.parseOffset16();
            if (0 < t) return new oe(this.data, this.offset + t).parseStruct(e);
          }, oe.prototype.parsePointer32 = function (e) {
            var t = this.parseOffset32();
            if (0 < t) return new oe(this.data, this.offset + t).parseStruct(e);
          }, oe.prototype.parseListOfLists = function (e) {
            for (var t = this, r = this.parseOffset16List(), n = r.length, a = this.relativeOffset, o = new Array(n), i = 0; i < n; i++) {
              var s = r[i];
              if (0 !== s) {
                if (t.relativeOffset = s, e) {
                  for (var l = t.parseOffset16List(), p = new Array(l.length), u = 0; u < l.length; u++) t.relativeOffset = s + l[u], p[u] = e.call(t);

                  o[i] = p;
                } else o[i] = t.parseUShortList();
              } else o[i] = void 0;
            }

            return this.relativeOffset = a, o;
          }, oe.prototype.parseCoverage = function () {
            var e = this.offset + this.relativeOffset,
                t = this.parseUShort(),
                r = this.parseUShort();
            if (1 === t) return {
              format: 1,
              glyphs: this.parseUShortList(r)
            };
            if (2 !== t) throw new Error("0x" + e.toString(16) + ": Coverage format must be 1 or 2.");

            for (var n = new Array(r), a = 0; a < r; a++) n[a] = {
              start: this.parseUShort(),
              end: this.parseUShort(),
              index: this.parseUShort()
            };

            return {
              format: 2,
              ranges: n
            };
          }, oe.prototype.parseClassDef = function () {
            var e = this.offset + this.relativeOffset,
                t = this.parseUShort();
            if (1 === t) return {
              format: 1,
              startGlyph: this.parseUShort(),
              classes: this.parseUShortList()
            };
            if (2 === t) return {
              format: 2,
              ranges: this.parseRecordList({
                start: oe.uShort,
                end: oe.uShort,
                classId: oe.uShort
              })
            };
            throw new Error("0x" + e.toString(16) + ": ClassDef format must be 1 or 2.");
          }, oe.list = function (e, t) {
            return function () {
              return this.parseList(e, t);
            };
          }, oe.list32 = function (e, t) {
            return function () {
              return this.parseList32(e, t);
            };
          }, oe.recordList = function (e, t) {
            return function () {
              return this.parseRecordList(e, t);
            };
          }, oe.recordList32 = function (e, t) {
            return function () {
              return this.parseRecordList32(e, t);
            };
          }, oe.pointer = function (e) {
            return function () {
              return this.parsePointer(e);
            };
          }, oe.pointer32 = function (e) {
            return function () {
              return this.parsePointer32(e);
            };
          }, oe.tag = oe.prototype.parseTag, oe.byte = oe.prototype.parseByte, oe.uShort = oe.offset16 = oe.prototype.parseUShort, oe.uShortList = oe.prototype.parseUShortList, oe.uLong = oe.offset32 = oe.prototype.parseULong, oe.uLongList = oe.prototype.parseULongList, oe.struct = oe.prototype.parseStruct, oe.coverage = oe.prototype.parseCoverage, oe.classDef = oe.prototype.parseClassDef;
          var ie = {
            reserved: oe.uShort,
            reqFeatureIndex: oe.uShort,
            featureIndexes: oe.uShortList
          };
          oe.prototype.parseScriptList = function () {
            return this.parsePointer(oe.recordList({
              tag: oe.tag,
              script: oe.pointer({
                defaultLangSys: oe.pointer(ie),
                langSysRecords: oe.recordList({
                  tag: oe.tag,
                  langSys: oe.pointer(ie)
                })
              })
            })) || [];
          }, oe.prototype.parseFeatureList = function () {
            return this.parsePointer(oe.recordList({
              tag: oe.tag,
              feature: oe.pointer({
                featureParams: oe.offset16,
                lookupListIndexes: oe.uShortList
              })
            })) || [];
          }, oe.prototype.parseLookupList = function (n) {
            return this.parsePointer(oe.list(oe.pointer(function () {
              var e = this.parseUShort();
              L.argument(1 <= e && e <= 9, "GPOS/GSUB lookup type " + e + " unknown.");
              var t = this.parseUShort(),
                  r = 16 & t;
              return {
                lookupType: e,
                lookupFlag: t,
                subtables: this.parseList(oe.pointer(n[e])),
                markFilteringSet: r ? this.parseUShort() : void 0
              };
            }))) || [];
          }, oe.prototype.parseFeatureVariationsList = function () {
            return this.parsePointer32(function () {
              var e = this.parseUShort(),
                  t = this.parseUShort();
              return L.argument(1 === e && t < 1, "GPOS/GSUB feature variations table unknown."), this.parseRecordList32({
                conditionSetOffset: oe.offset32,
                featureTableSubstitutionOffset: oe.offset32
              });
            }) || [];
          };
          var se = {
            getByte: ee,
            getCard8: ee,
            getUShort: te,
            getCard16: te,
            getShort: function (e, t) {
              return e.getInt16(t, !1);
            },
            getULong: re,
            getFixed: ne,
            getTag: function (e, t) {
              for (var r = "", n = t; n < t + 4; n += 1) r += String.fromCharCode(e.getInt8(n));

              return r;
            },
            getOffset: function (e, t, r) {
              for (var n = 0, a = 0; a < r; a += 1) n <<= 8, n += e.getUint8(t + a);

              return n;
            },
            getBytes: function (e, t, r) {
              for (var n = [], a = t; a < r; a += 1) n.push(e.getUint8(a));

              return n;
            },
            bytesToString: function (e) {
              for (var t = "", r = 0; r < e.length; r += 1) t += String.fromCharCode(e[r]);

              return t;
            },
            Parser: oe
          };
          var le = {
            parse: function (e, t) {
              var r = {};
              r.version = se.getUShort(e, t), L.argument(0 === r.version, "cmap table version should be 0."), r.numTables = se.getUShort(e, t + 2);

              for (var n = -1, a = r.numTables - 1; 0 <= a; --a) {
                var o = se.getUShort(e, t + 4 + 8 * a),
                    i = se.getUShort(e, t + 4 + 8 * a + 2);

                if (3 === o && (0 === i || 1 === i || 10 === i) || 0 === o && (0 === i || 1 === i || 2 === i || 3 === i || 4 === i)) {
                  n = se.getULong(e, t + 4 + 8 * a + 4);
                  break;
                }
              }

              if (-1 === n) throw new Error("No valid cmap sub-tables found.");
              var s = new se.Parser(e, t + n);
              if (r.format = s.parseUShort(), 12 === r.format) !function (e, t) {
                var r;
                t.parseUShort(), e.length = t.parseULong(), e.language = t.parseULong(), e.groupCount = r = t.parseULong(), e.glyphIndexMap = {};

                for (var n = 0; n < r; n += 1) for (var a = t.parseULong(), o = t.parseULong(), i = t.parseULong(), s = a; s <= o; s += 1) e.glyphIndexMap[s] = i, i++;
              }(r, s);else {
                if (4 !== r.format) throw new Error("Only format 4 and 12 cmap tables are supported (found format " + r.format + ").");
                !function (e, t, r, n, a) {
                  var o;
                  e.length = t.parseUShort(), e.language = t.parseUShort(), e.segCount = o = t.parseUShort() >> 1, t.skip("uShort", 3), e.glyphIndexMap = {};

                  for (var i = new se.Parser(r, n + a + 14), s = new se.Parser(r, n + a + 16 + 2 * o), l = new se.Parser(r, n + a + 16 + 4 * o), p = new se.Parser(r, n + a + 16 + 6 * o), u = n + a + 16 + 8 * o, c = 0; c < o - 1; c += 1) for (var d = void 0, h = i.parseUShort(), m = s.parseUShort(), f = l.parseShort(), y = p.parseUShort(), g = m; g <= h; g += 1) 0 !== y ? (u = p.offset + p.relativeOffset - 2, u += y, u += 2 * (g - m), 0 !== (d = se.getUShort(r, u)) && (d = d + f & 65535)) : d = g + f & 65535, e.glyphIndexMap[g] = d;
                }(r, s, e, t, n);
              }
              return r;
            },
            make: function (e) {
              var t,
                  r = !0;

              for (t = e.length - 1; 0 < t; --t) {
                if (65535 < e.get(t).unicode) {
                  console.log("Adding CMAP format 12 (needed!)"), r = !1;
                  break;
                }
              }

              var n = [{
                name: "version",
                type: "USHORT",
                value: 0
              }, {
                name: "numTables",
                type: "USHORT",
                value: r ? 1 : 2
              }, {
                name: "platformID",
                type: "USHORT",
                value: 3
              }, {
                name: "encodingID",
                type: "USHORT",
                value: 1
              }, {
                name: "offset",
                type: "ULONG",
                value: r ? 12 : 20
              }];
              r || (n = n.concat([{
                name: "cmap12PlatformID",
                type: "USHORT",
                value: 3
              }, {
                name: "cmap12EncodingID",
                type: "USHORT",
                value: 10
              }, {
                name: "cmap12Offset",
                type: "ULONG",
                value: 0
              }])), n = n.concat([{
                name: "format",
                type: "USHORT",
                value: 4
              }, {
                name: "cmap4Length",
                type: "USHORT",
                value: 0
              }, {
                name: "language",
                type: "USHORT",
                value: 0
              }, {
                name: "segCountX2",
                type: "USHORT",
                value: 0
              }, {
                name: "searchRange",
                type: "USHORT",
                value: 0
              }, {
                name: "entrySelector",
                type: "USHORT",
                value: 0
              }, {
                name: "rangeShift",
                type: "USHORT",
                value: 0
              }]);
              var a,
                  o,
                  i,
                  s = new $.Table("cmap", n);

              for (s.segments = [], t = 0; t < e.length; t += 1) {
                for (var l = e.get(t), p = 0; p < l.unicodes.length; p += 1) a = s, o = l.unicodes[p], i = t, a.segments.push({
                  end: o,
                  start: o,
                  delta: -(o - i),
                  offset: 0,
                  glyphIndex: i
                });

                s.segments = s.segments.sort(function (e, t) {
                  return e.start - t.start;
                });
              }

              s.segments.push({
                end: 65535,
                start: 65535,
                delta: 1,
                offset: 0
              });
              var u = s.segments.length,
                  c = 0,
                  d = [],
                  h = [],
                  m = [],
                  f = [],
                  y = [],
                  g = [];

              for (t = 0; t < u; t += 1) {
                var v = s.segments[t];
                v.end <= 65535 && v.start <= 65535 ? (d = d.concat({
                  name: "end_" + t,
                  type: "USHORT",
                  value: v.end
                }), h = h.concat({
                  name: "start_" + t,
                  type: "USHORT",
                  value: v.start
                }), m = m.concat({
                  name: "idDelta_" + t,
                  type: "SHORT",
                  value: v.delta
                }), f = f.concat({
                  name: "idRangeOffset_" + t,
                  type: "USHORT",
                  value: v.offset
                }), void 0 !== v.glyphId && (y = y.concat({
                  name: "glyph_" + t,
                  type: "USHORT",
                  value: v.glyphId
                }))) : c += 1, r || void 0 === v.glyphIndex || (g = (g = (g = g.concat({
                  name: "cmap12Start_" + t,
                  type: "ULONG",
                  value: v.start
                })).concat({
                  name: "cmap12End_" + t,
                  type: "ULONG",
                  value: v.end
                })).concat({
                  name: "cmap12Glyph_" + t,
                  type: "ULONG",
                  value: v.glyphIndex
                }));
              }

              if (s.segCountX2 = 2 * (u - c), s.searchRange = 2 * Math.pow(2, Math.floor(Math.log(u - c) / Math.log(2))), s.entrySelector = Math.log(s.searchRange / 2) / Math.log(2), s.rangeShift = s.segCountX2 - s.searchRange, s.fields = s.fields.concat(d), s.fields.push({
                name: "reservedPad",
                type: "USHORT",
                value: 0
              }), s.fields = s.fields.concat(h), s.fields = s.fields.concat(m), s.fields = s.fields.concat(f), s.fields = s.fields.concat(y), s.cmap4Length = 14 + 2 * d.length + 2 + 2 * h.length + 2 * m.length + 2 * f.length + 2 * y.length, !r) {
                var b = 16 + 4 * g.length;
                s.cmap12Offset = 20 + s.cmap4Length, s.fields = s.fields.concat([{
                  name: "cmap12Format",
                  type: "USHORT",
                  value: 12
                }, {
                  name: "cmap12Reserved",
                  type: "USHORT",
                  value: 0
                }, {
                  name: "cmap12Length",
                  type: "ULONG",
                  value: b
                }, {
                  name: "cmap12Language",
                  type: "ULONG",
                  value: 0
                }, {
                  name: "cmap12nGroups",
                  type: "ULONG",
                  value: g.length / 3
                }]), s.fields = s.fields.concat(g);
              }

              return s;
            }
          },
              pe = [".notdef", "space", "exclam", "quotedbl", "numbersign", "dollar", "percent", "ampersand", "quoteright", "parenleft", "parenright", "asterisk", "plus", "comma", "hyphen", "period", "slash", "zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine", "colon", "semicolon", "less", "equal", "greater", "question", "at", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "bracketleft", "backslash", "bracketright", "asciicircum", "underscore", "quoteleft", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "braceleft", "bar", "braceright", "asciitilde", "exclamdown", "cent", "sterling", "fraction", "yen", "florin", "section", "currency", "quotesingle", "quotedblleft", "guillemotleft", "guilsinglleft", "guilsinglright", "fi", "fl", "endash", "dagger", "daggerdbl", "periodcentered", "paragraph", "bullet", "quotesinglbase", "quotedblbase", "quotedblright", "guillemotright", "ellipsis", "perthousand", "questiondown", "grave", "acute", "circumflex", "tilde", "macron", "breve", "dotaccent", "dieresis", "ring", "cedilla", "hungarumlaut", "ogonek", "caron", "emdash", "AE", "ordfeminine", "Lslash", "Oslash", "OE", "ordmasculine", "ae", "dotlessi", "lslash", "oslash", "oe", "germandbls", "onesuperior", "logicalnot", "mu", "trademark", "Eth", "onehalf", "plusminus", "Thorn", "onequarter", "divide", "brokenbar", "degree", "thorn", "threequarters", "twosuperior", "registered", "minus", "eth", "multiply", "threesuperior", "copyright", "Aacute", "Acircumflex", "Adieresis", "Agrave", "Aring", "Atilde", "Ccedilla", "Eacute", "Ecircumflex", "Edieresis", "Egrave", "Iacute", "Icircumflex", "Idieresis", "Igrave", "Ntilde", "Oacute", "Ocircumflex", "Odieresis", "Ograve", "Otilde", "Scaron", "Uacute", "Ucircumflex", "Udieresis", "Ugrave", "Yacute", "Ydieresis", "Zcaron", "aacute", "acircumflex", "adieresis", "agrave", "aring", "atilde", "ccedilla", "eacute", "ecircumflex", "edieresis", "egrave", "iacute", "icircumflex", "idieresis", "igrave", "ntilde", "oacute", "ocircumflex", "odieresis", "ograve", "otilde", "scaron", "uacute", "ucircumflex", "udieresis", "ugrave", "yacute", "ydieresis", "zcaron", "exclamsmall", "Hungarumlautsmall", "dollaroldstyle", "dollarsuperior", "ampersandsmall", "Acutesmall", "parenleftsuperior", "parenrightsuperior", "266 ff", "onedotenleader", "zerooldstyle", "oneoldstyle", "twooldstyle", "threeoldstyle", "fouroldstyle", "fiveoldstyle", "sixoldstyle", "sevenoldstyle", "eightoldstyle", "nineoldstyle", "commasuperior", "threequartersemdash", "periodsuperior", "questionsmall", "asuperior", "bsuperior", "centsuperior", "dsuperior", "esuperior", "isuperior", "lsuperior", "msuperior", "nsuperior", "osuperior", "rsuperior", "ssuperior", "tsuperior", "ff", "ffi", "ffl", "parenleftinferior", "parenrightinferior", "Circumflexsmall", "hyphensuperior", "Gravesmall", "Asmall", "Bsmall", "Csmall", "Dsmall", "Esmall", "Fsmall", "Gsmall", "Hsmall", "Ismall", "Jsmall", "Ksmall", "Lsmall", "Msmall", "Nsmall", "Osmall", "Psmall", "Qsmall", "Rsmall", "Ssmall", "Tsmall", "Usmall", "Vsmall", "Wsmall", "Xsmall", "Ysmall", "Zsmall", "colonmonetary", "onefitted", "rupiah", "Tildesmall", "exclamdownsmall", "centoldstyle", "Lslashsmall", "Scaronsmall", "Zcaronsmall", "Dieresissmall", "Brevesmall", "Caronsmall", "Dotaccentsmall", "Macronsmall", "figuredash", "hypheninferior", "Ogoneksmall", "Ringsmall", "Cedillasmall", "questiondownsmall", "oneeighth", "threeeighths", "fiveeighths", "seveneighths", "onethird", "twothirds", "zerosuperior", "foursuperior", "fivesuperior", "sixsuperior", "sevensuperior", "eightsuperior", "ninesuperior", "zeroinferior", "oneinferior", "twoinferior", "threeinferior", "fourinferior", "fiveinferior", "sixinferior", "seveninferior", "eightinferior", "nineinferior", "centinferior", "dollarinferior", "periodinferior", "commainferior", "Agravesmall", "Aacutesmall", "Acircumflexsmall", "Atildesmall", "Adieresissmall", "Aringsmall", "AEsmall", "Ccedillasmall", "Egravesmall", "Eacutesmall", "Ecircumflexsmall", "Edieresissmall", "Igravesmall", "Iacutesmall", "Icircumflexsmall", "Idieresissmall", "Ethsmall", "Ntildesmall", "Ogravesmall", "Oacutesmall", "Ocircumflexsmall", "Otildesmall", "Odieresissmall", "OEsmall", "Oslashsmall", "Ugravesmall", "Uacutesmall", "Ucircumflexsmall", "Udieresissmall", "Yacutesmall", "Thornsmall", "Ydieresissmall", "001.000", "001.001", "001.002", "001.003", "Black", "Bold", "Book", "Light", "Medium", "Regular", "Roman", "Semibold"],
              ue = ["", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "space", "exclam", "quotedbl", "numbersign", "dollar", "percent", "ampersand", "quoteright", "parenleft", "parenright", "asterisk", "plus", "comma", "hyphen", "period", "slash", "zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine", "colon", "semicolon", "less", "equal", "greater", "question", "at", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "bracketleft", "backslash", "bracketright", "asciicircum", "underscore", "quoteleft", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "braceleft", "bar", "braceright", "asciitilde", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "exclamdown", "cent", "sterling", "fraction", "yen", "florin", "section", "currency", "quotesingle", "quotedblleft", "guillemotleft", "guilsinglleft", "guilsinglright", "fi", "fl", "", "endash", "dagger", "daggerdbl", "periodcentered", "", "paragraph", "bullet", "quotesinglbase", "quotedblbase", "quotedblright", "guillemotright", "ellipsis", "perthousand", "", "questiondown", "", "grave", "acute", "circumflex", "tilde", "macron", "breve", "dotaccent", "dieresis", "", "ring", "cedilla", "", "hungarumlaut", "ogonek", "caron", "emdash", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "AE", "", "ordfeminine", "", "", "", "", "Lslash", "Oslash", "OE", "ordmasculine", "", "", "", "", "", "ae", "", "", "", "dotlessi", "", "", "lslash", "oslash", "oe", "germandbls"],
              ce = ["", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "space", "exclamsmall", "Hungarumlautsmall", "", "dollaroldstyle", "dollarsuperior", "ampersandsmall", "Acutesmall", "parenleftsuperior", "parenrightsuperior", "twodotenleader", "onedotenleader", "comma", "hyphen", "period", "fraction", "zerooldstyle", "oneoldstyle", "twooldstyle", "threeoldstyle", "fouroldstyle", "fiveoldstyle", "sixoldstyle", "sevenoldstyle", "eightoldstyle", "nineoldstyle", "colon", "semicolon", "commasuperior", "threequartersemdash", "periodsuperior", "questionsmall", "", "asuperior", "bsuperior", "centsuperior", "dsuperior", "esuperior", "", "", "isuperior", "", "", "lsuperior", "msuperior", "nsuperior", "osuperior", "", "", "rsuperior", "ssuperior", "tsuperior", "", "ff", "fi", "fl", "ffi", "ffl", "parenleftinferior", "", "parenrightinferior", "Circumflexsmall", "hyphensuperior", "Gravesmall", "Asmall", "Bsmall", "Csmall", "Dsmall", "Esmall", "Fsmall", "Gsmall", "Hsmall", "Ismall", "Jsmall", "Ksmall", "Lsmall", "Msmall", "Nsmall", "Osmall", "Psmall", "Qsmall", "Rsmall", "Ssmall", "Tsmall", "Usmall", "Vsmall", "Wsmall", "Xsmall", "Ysmall", "Zsmall", "colonmonetary", "onefitted", "rupiah", "Tildesmall", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "exclamdownsmall", "centoldstyle", "Lslashsmall", "", "", "Scaronsmall", "Zcaronsmall", "Dieresissmall", "Brevesmall", "Caronsmall", "", "Dotaccentsmall", "", "", "Macronsmall", "", "", "figuredash", "hypheninferior", "", "", "Ogoneksmall", "Ringsmall", "Cedillasmall", "", "", "", "onequarter", "onehalf", "threequarters", "questiondownsmall", "oneeighth", "threeeighths", "fiveeighths", "seveneighths", "onethird", "twothirds", "", "", "zerosuperior", "onesuperior", "twosuperior", "threesuperior", "foursuperior", "fivesuperior", "sixsuperior", "sevensuperior", "eightsuperior", "ninesuperior", "zeroinferior", "oneinferior", "twoinferior", "threeinferior", "fourinferior", "fiveinferior", "sixinferior", "seveninferior", "eightinferior", "nineinferior", "centinferior", "dollarinferior", "periodinferior", "commainferior", "Agravesmall", "Aacutesmall", "Acircumflexsmall", "Atildesmall", "Adieresissmall", "Aringsmall", "AEsmall", "Ccedillasmall", "Egravesmall", "Eacutesmall", "Ecircumflexsmall", "Edieresissmall", "Igravesmall", "Iacutesmall", "Icircumflexsmall", "Idieresissmall", "Ethsmall", "Ntildesmall", "Ogravesmall", "Oacutesmall", "Ocircumflexsmall", "Otildesmall", "Odieresissmall", "OEsmall", "Oslashsmall", "Ugravesmall", "Uacutesmall", "Ucircumflexsmall", "Udieresissmall", "Yacutesmall", "Thornsmall", "Ydieresissmall"],
              de = [".notdef", ".null", "nonmarkingreturn", "space", "exclam", "quotedbl", "numbersign", "dollar", "percent", "ampersand", "quotesingle", "parenleft", "parenright", "asterisk", "plus", "comma", "hyphen", "period", "slash", "zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine", "colon", "semicolon", "less", "equal", "greater", "question", "at", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "bracketleft", "backslash", "bracketright", "asciicircum", "underscore", "grave", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "braceleft", "bar", "braceright", "asciitilde", "Adieresis", "Aring", "Ccedilla", "Eacute", "Ntilde", "Odieresis", "Udieresis", "aacute", "agrave", "acircumflex", "adieresis", "atilde", "aring", "ccedilla", "eacute", "egrave", "ecircumflex", "edieresis", "iacute", "igrave", "icircumflex", "idieresis", "ntilde", "oacute", "ograve", "ocircumflex", "odieresis", "otilde", "uacute", "ugrave", "ucircumflex", "udieresis", "dagger", "degree", "cent", "sterling", "section", "bullet", "paragraph", "germandbls", "registered", "copyright", "trademark", "acute", "dieresis", "notequal", "AE", "Oslash", "infinity", "plusminus", "lessequal", "greaterequal", "yen", "mu", "partialdiff", "summation", "product", "pi", "integral", "ordfeminine", "ordmasculine", "Omega", "ae", "oslash", "questiondown", "exclamdown", "logicalnot", "radical", "florin", "approxequal", "Delta", "guillemotleft", "guillemotright", "ellipsis", "nonbreakingspace", "Agrave", "Atilde", "Otilde", "OE", "oe", "endash", "emdash", "quotedblleft", "quotedblright", "quoteleft", "quoteright", "divide", "lozenge", "ydieresis", "Ydieresis", "fraction", "currency", "guilsinglleft", "guilsinglright", "fi", "fl", "daggerdbl", "periodcentered", "quotesinglbase", "quotedblbase", "perthousand", "Acircumflex", "Ecircumflex", "Aacute", "Edieresis", "Egrave", "Iacute", "Icircumflex", "Idieresis", "Igrave", "Oacute", "Ocircumflex", "apple", "Ograve", "Uacute", "Ucircumflex", "Ugrave", "dotlessi", "circumflex", "tilde", "macron", "breve", "dotaccent", "ring", "cedilla", "hungarumlaut", "ogonek", "caron", "Lslash", "lslash", "Scaron", "scaron", "Zcaron", "zcaron", "brokenbar", "Eth", "eth", "Yacute", "yacute", "Thorn", "thorn", "minus", "multiply", "onesuperior", "twosuperior", "threesuperior", "onehalf", "onequarter", "threequarters", "franc", "Gbreve", "gbreve", "Idotaccent", "Scedilla", "scedilla", "Cacute", "cacute", "Ccaron", "ccaron", "dcroat"];

          function he(e) {
            this.font = e;
          }

          function me(e) {
            this.cmap = e;
          }

          function fe(e, t) {
            this.encoding = e, this.charset = t;
          }

          function ye(e) {
            switch (e.version) {
              case 1:
                this.names = de.slice();
                break;

              case 2:
                this.names = new Array(e.numberOfGlyphs);

                for (var t = 0; t < e.numberOfGlyphs; t++) e.glyphNameIndex[t] < de.length ? this.names[t] = de[e.glyphNameIndex[t]] : this.names[t] = e.names[e.glyphNameIndex[t] - de.length];

                break;

              case 2.5:
                this.names = new Array(e.numberOfGlyphs);

                for (var r = 0; r < e.numberOfGlyphs; r++) this.names[r] = de[r + e.glyphNameIndex[r]];

                break;

              case 3:
              default:
                this.names = [];
            }
          }

          he.prototype.charToGlyphIndex = function (e) {
            var t = e.codePointAt(0),
                r = this.font.glyphs;
            if (r) for (var n = 0; n < r.length; n += 1) for (var a = r.get(n), o = 0; o < a.unicodes.length; o += 1) if (a.unicodes[o] === t) return n;
            return null;
          }, me.prototype.charToGlyphIndex = function (e) {
            return this.cmap.glyphIndexMap[e.codePointAt(0)] || 0;
          }, fe.prototype.charToGlyphIndex = function (e) {
            var t = e.codePointAt(0),
                r = this.encoding[t];
            return this.charset.indexOf(r);
          }, ye.prototype.nameToGlyphIndex = function (e) {
            return this.names.indexOf(e);
          }, ye.prototype.glyphIndexToName = function (e) {
            return this.names[e];
          };
          var ge = {
            line: function (e, t, r, n, a) {
              e.beginPath(), e.moveTo(t, r), e.lineTo(n, a), e.stroke();
            }
          };

          function ve(e) {
            this.bindConstructorValues(e);
          }

          function be(t, e, r) {
            Object.defineProperty(t, e, {
              get: function () {
                return t.path, t[r];
              },
              set: function (e) {
                t[r] = e;
              },
              enumerable: !0,
              configurable: !0
            });
          }

          function _e(e, t) {
            if (this.font = e, this.glyphs = {}, Array.isArray(t)) for (var r = 0; r < t.length; r++) this.glyphs[r] = t[r];
            this.length = t && t.length || 0;
          }

          ve.prototype.bindConstructorValues = function (e) {
            var t, r;
            this.index = e.index || 0, this.name = e.name || null, this.unicode = e.unicode || void 0, this.unicodes = e.unicodes || void 0 !== e.unicode ? [e.unicode] : [], e.xMin && (this.xMin = e.xMin), e.yMin && (this.yMin = e.yMin), e.xMax && (this.xMax = e.xMax), e.yMax && (this.yMax = e.yMax), e.advanceWidth && (this.advanceWidth = e.advanceWidth), Object.defineProperty(this, "path", (t = e.path, r = t || new A(), {
              configurable: !0,
              get: function () {
                return "function" == typeof r && (r = r()), r;
              },
              set: function (e) {
                r = e;
              }
            }));
          }, ve.prototype.addUnicode = function (e) {
            0 === this.unicodes.length && (this.unicode = e), this.unicodes.push(e);
          }, ve.prototype.getBoundingBox = function () {
            return this.path.getBoundingBox();
          }, ve.prototype.getPath = function (e, t, r, n, a) {
            var o, i;
            e = void 0 !== e ? e : 0, t = void 0 !== t ? t : 0, r = void 0 !== r ? r : 72;
            var s = (n = n || {}).xScale,
                l = n.yScale;
            if (n.hinting && a && a.hinting && (i = this.path && a.hinting.exec(this, r)), i) o = a.hinting.getCommands(i), e = Math.round(e), t = Math.round(t), s = l = 1;else {
              o = this.path.commands;
              var p = 1 / this.path.unitsPerEm * r;
              void 0 === s && (s = p), void 0 === l && (l = p);
            }

            for (var u = new A(), c = 0; c < o.length; c += 1) {
              var d = o[c];
              "M" === d.type ? u.moveTo(e + d.x * s, t + -d.y * l) : "L" === d.type ? u.lineTo(e + d.x * s, t + -d.y * l) : "Q" === d.type ? u.quadraticCurveTo(e + d.x1 * s, t + -d.y1 * l, e + d.x * s, t + -d.y * l) : "C" === d.type ? u.curveTo(e + d.x1 * s, t + -d.y1 * l, e + d.x2 * s, t + -d.y2 * l, e + d.x * s, t + -d.y * l) : "Z" === d.type && u.closePath();
            }

            return u;
          }, ve.prototype.getContours = function () {
            if (void 0 === this.points) return [];

            for (var e = [], t = [], r = 0; r < this.points.length; r += 1) {
              var n = this.points[r];
              t.push(n), n.lastPointOfContour && (e.push(t), t = []);
            }

            return L.argument(0 === t.length, "There are still points left in the current contour."), e;
          }, ve.prototype.getMetrics = function () {
            for (var e = this.path.commands, t = [], r = [], n = 0; n < e.length; n += 1) {
              var a = e[n];
              "Z" !== a.type && (t.push(a.x), r.push(a.y)), "Q" !== a.type && "C" !== a.type || (t.push(a.x1), r.push(a.y1)), "C" === a.type && (t.push(a.x2), r.push(a.y2));
            }

            var o = {
              xMin: Math.min.apply(null, t),
              yMin: Math.min.apply(null, r),
              xMax: Math.max.apply(null, t),
              yMax: Math.max.apply(null, r),
              leftSideBearing: this.leftSideBearing
            };
            return isFinite(o.xMin) || (o.xMin = 0), isFinite(o.xMax) || (o.xMax = this.advanceWidth), isFinite(o.yMin) || (o.yMin = 0), isFinite(o.yMax) || (o.yMax = 0), o.rightSideBearing = this.advanceWidth - o.leftSideBearing - (o.xMax - o.xMin), o;
          }, ve.prototype.draw = function (e, t, r, n, a) {
            this.getPath(t, r, n, a).draw(e);
          }, ve.prototype.drawPoints = function (i, e, t, r) {
            function n(e, t, r, n) {
              var a = 2 * Math.PI;
              i.beginPath();

              for (var o = 0; o < e.length; o += 1) i.moveTo(t + e[o].x * n, r + e[o].y * n), i.arc(t + e[o].x * n, r + e[o].y * n, 2, 0, a, !1);

              i.closePath(), i.fill();
            }

            e = void 0 !== e ? e : 0, t = void 0 !== t ? t : 0, r = void 0 !== r ? r : 24;

            for (var a = 1 / this.path.unitsPerEm * r, o = [], s = [], l = this.path, p = 0; p < l.commands.length; p += 1) {
              var u = l.commands[p];
              void 0 !== u.x && o.push({
                x: u.x,
                y: -u.y
              }), void 0 !== u.x1 && s.push({
                x: u.x1,
                y: -u.y1
              }), void 0 !== u.x2 && s.push({
                x: u.x2,
                y: -u.y2
              });
            }

            i.fillStyle = "blue", n(o, e, t, a), i.fillStyle = "red", n(s, e, t, a);
          }, ve.prototype.drawMetrics = function (e, t, r, n) {
            var a;
            t = void 0 !== t ? t : 0, r = void 0 !== r ? r : 0, n = void 0 !== n ? n : 24, a = 1 / this.path.unitsPerEm * n, e.lineWidth = 1, e.strokeStyle = "black", ge.line(e, t, -1e4, t, 1e4), ge.line(e, -1e4, r, 1e4, r);
            var o = this.xMin || 0,
                i = this.yMin || 0,
                s = this.xMax || 0,
                l = this.yMax || 0,
                p = this.advanceWidth || 0;
            e.strokeStyle = "blue", ge.line(e, t + o * a, -1e4, t + o * a, 1e4), ge.line(e, t + s * a, -1e4, t + s * a, 1e4), ge.line(e, -1e4, r + -i * a, 1e4, r + -i * a), ge.line(e, -1e4, r + -l * a, 1e4, r + -l * a), e.strokeStyle = "green", ge.line(e, t + p * a, -1e4, t + p * a, 1e4);
          }, _e.prototype.get = function (e) {
            return "function" == typeof this.glyphs[e] && (this.glyphs[e] = this.glyphs[e]()), this.glyphs[e];
          }, _e.prototype.push = function (e, t) {
            this.glyphs[e] = t, this.length++;
          };
          var xe = {
            GlyphSet: _e,
            glyphLoader: function (e, t) {
              return new ve({
                index: t,
                font: e
              });
            },
            ttfGlyphLoader: function (r, e, n, a, o, i) {
              return function () {
                var t = new ve({
                  index: e,
                  font: r
                });
                return t.path = function () {
                  n(t, a, o);
                  var e = i(r.glyphs, t);
                  return e.unitsPerEm = r.unitsPerEm, e;
                }, be(t, "xMin", "_xMin"), be(t, "xMax", "_xMax"), be(t, "yMin", "_yMin"), be(t, "yMax", "_yMax"), t;
              };
            },
            cffGlyphLoader: function (r, e, n, a) {
              return function () {
                var t = new ve({
                  index: e,
                  font: r
                });
                return t.path = function () {
                  var e = n(r, t, a);
                  return e.unitsPerEm = r.unitsPerEm, e;
                }, t;
              };
            }
          };

          function Se(e, t) {
            if (e === t) return !0;

            if (Array.isArray(e) && Array.isArray(t)) {
              if (e.length !== t.length) return !1;

              for (var r = 0; r < e.length; r += 1) if (!Se(e[r], t[r])) return !1;

              return !0;
            }

            return !1;
          }

          function we(e) {
            return e.length < 1240 ? 107 : e.length < 33900 ? 1131 : 32768;
          }

          function Me(e, t, r) {
            var n,
                a,
                o = [],
                i = [],
                s = se.getCard16(e, t);

            if (0 !== s) {
              var l = se.getByte(e, t + 2);
              n = t + (s + 1) * l + 2;

              for (var p = t + 3, u = 0; u < s + 1; u += 1) o.push(se.getOffset(e, p, l)), p += l;

              a = n + o[s];
            } else a = t + 2;

            for (var c = 0; c < o.length - 1; c += 1) {
              var d = se.getBytes(e, n + o[c], n + o[c + 1]);
              r && (d = r(d)), i.push(d);
            }

            return {
              objects: i,
              startOffset: t,
              endOffset: a
            };
          }

          function Ee(e, t) {
            if (28 === t) return e.parseByte() << 8 | e.parseByte();
            if (29 === t) return e.parseByte() << 24 | e.parseByte() << 16 | e.parseByte() << 8 | e.parseByte();
            if (30 === t) return function (e) {
              for (var t = "", r = ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", ".", "E", "E-", null, "-"];;) {
                var n = e.parseByte(),
                    a = n >> 4,
                    o = 15 & n;
                if (15 == a) break;
                if (t += r[a], 15 == o) break;
                t += r[o];
              }

              return parseFloat(t);
            }(e);
            if (32 <= t && t <= 246) return t - 139;
            if (247 <= t && t <= 250) return 256 * (t - 247) + e.parseByte() + 108;
            if (251 <= t && t <= 254) return 256 * -(t - 251) - e.parseByte() - 108;
            throw new Error("Invalid b0 " + t);
          }

          function Te(e, t, r) {
            t = void 0 !== t ? t : 0;
            var n = new se.Parser(e, t),
                a = [],
                o = [];

            for (r = void 0 !== r ? r : e.length; n.relativeOffset < r;) {
              var i = n.parseByte();
              i <= 21 ? (12 === i && (i = 1200 + n.parseByte()), a.push([i, o]), o = []) : o.push(Ee(n, i));
            }

            return function (e) {
              for (var t = {}, r = 0; r < e.length; r += 1) {
                var n = e[r][0],
                    a = e[r][1],
                    o = void 0;
                if (o = 1 === a.length ? a[0] : a, t.hasOwnProperty(n) && !isNaN(t[n])) throw new Error("Object " + t + " already has key " + n);
                t[n] = o;
              }

              return t;
            }(a);
          }

          function Ce(e, t) {
            return t = t <= 390 ? pe[t] : e[t - 391];
          }

          function Ne(e, t, r) {
            for (var n, a = {}, o = 0; o < t.length; o += 1) {
              var i = t[o];

              if (Array.isArray(i.type)) {
                var s = [];
                s.length = i.type.length;

                for (var l = 0; l < i.type.length; l++) void 0 === (n = void 0 !== e[i.op] ? e[i.op][l] : void 0) && (n = void 0 !== i.value && void 0 !== i.value[l] ? i.value[l] : null), "SID" === i.type[l] && (n = Ce(r, n)), s[l] = n;

                a[i.name] = s;
              } else void 0 === (n = e[i.op]) && (n = void 0 !== i.value ? i.value : null), "SID" === i.type && (n = Ce(r, n)), a[i.name] = n;
            }

            return a;
          }

          var Oe = [{
            name: "version",
            op: 0,
            type: "SID"
          }, {
            name: "notice",
            op: 1,
            type: "SID"
          }, {
            name: "copyright",
            op: 1200,
            type: "SID"
          }, {
            name: "fullName",
            op: 2,
            type: "SID"
          }, {
            name: "familyName",
            op: 3,
            type: "SID"
          }, {
            name: "weight",
            op: 4,
            type: "SID"
          }, {
            name: "isFixedPitch",
            op: 1201,
            type: "number",
            value: 0
          }, {
            name: "italicAngle",
            op: 1202,
            type: "number",
            value: 0
          }, {
            name: "underlinePosition",
            op: 1203,
            type: "number",
            value: -100
          }, {
            name: "underlineThickness",
            op: 1204,
            type: "number",
            value: 50
          }, {
            name: "paintType",
            op: 1205,
            type: "number",
            value: 0
          }, {
            name: "charstringType",
            op: 1206,
            type: "number",
            value: 2
          }, {
            name: "fontMatrix",
            op: 1207,
            type: ["real", "real", "real", "real", "real", "real"],
            value: [.001, 0, 0, .001, 0, 0]
          }, {
            name: "uniqueId",
            op: 13,
            type: "number"
          }, {
            name: "fontBBox",
            op: 5,
            type: ["number", "number", "number", "number"],
            value: [0, 0, 0, 0]
          }, {
            name: "strokeWidth",
            op: 1208,
            type: "number",
            value: 0
          }, {
            name: "xuid",
            op: 14,
            type: [],
            value: null
          }, {
            name: "charset",
            op: 15,
            type: "offset",
            value: 0
          }, {
            name: "encoding",
            op: 16,
            type: "offset",
            value: 0
          }, {
            name: "charStrings",
            op: 17,
            type: "offset",
            value: 0
          }, {
            name: "private",
            op: 18,
            type: ["number", "offset"],
            value: [0, 0]
          }, {
            name: "ros",
            op: 1230,
            type: ["SID", "SID", "number"]
          }, {
            name: "cidFontVersion",
            op: 1231,
            type: "number",
            value: 0
          }, {
            name: "cidFontRevision",
            op: 1232,
            type: "number",
            value: 0
          }, {
            name: "cidFontType",
            op: 1233,
            type: "number",
            value: 0
          }, {
            name: "cidCount",
            op: 1234,
            type: "number",
            value: 8720
          }, {
            name: "uidBase",
            op: 1235,
            type: "number"
          }, {
            name: "fdArray",
            op: 1236,
            type: "offset"
          }, {
            name: "fdSelect",
            op: 1237,
            type: "offset"
          }, {
            name: "fontName",
            op: 1238,
            type: "SID"
          }],
              Le = [{
            name: "subrs",
            op: 19,
            type: "offset",
            value: 0
          }, {
            name: "defaultWidthX",
            op: 20,
            type: "number",
            value: 0
          }, {
            name: "nominalWidthX",
            op: 21,
            type: "number",
            value: 0
          }];

          function Ie(e, t, r, n) {
            return Ne(Te(e, t, r), Le, n);
          }

          function Pe(e, t, r, n) {
            for (var a, o, i = [], s = 0; s < r.length; s += 1) {
              var l = new DataView(new Uint8Array(r[s]).buffer),
                  p = (o = n, Ne(Te(a = l, 0, a.byteLength), Oe, o));
              p._subrs = [], p._subrsBias = 0;
              var u = p.private[0],
                  c = p.private[1];

              if (0 !== u && 0 !== c) {
                var d = Ie(e, c + t, u, n);

                if (p._defaultWidthX = d.defaultWidthX, p._nominalWidthX = d.nominalWidthX, 0 !== d.subrs) {
                  var h = Me(e, c + d.subrs + t);
                  p._subrs = h.objects, p._subrsBias = we(p._subrs);
                }

                p._privateDict = d;
              }

              i.push(p);
            }

            return i;
          }

          function Re(y, g, e) {
            var v,
                b,
                _,
                x,
                S,
                w,
                t,
                M,
                E = new A(),
                T = [],
                C = 0,
                N = !1,
                O = !1,
                L = 0,
                I = 0;

            if (y.isCIDFont) {
              var r = y.tables.cff.topDict._fdSelect[g.index],
                  n = y.tables.cff.topDict._fdArray[r];
              S = n._subrs, w = n._subrsBias, t = n._defaultWidthX, M = n._nominalWidthX;
            } else S = y.tables.cff.topDict._subrs, w = y.tables.cff.topDict._subrsBias, t = y.tables.cff.topDict._defaultWidthX, M = y.tables.cff.topDict._nominalWidthX;

            var P = t;

            function R(e, t) {
              O && E.closePath(), E.moveTo(e, t), O = !0;
            }

            function D() {
              T.length % 2 == 0 || N || (P = T.shift() + M), C += T.length >> 1, T.length = 0, N = !0;
            }

            return function e(t) {
              for (var r, n, a, o, i, s, l, p, u, c, d, h, m = 0; m < t.length;) {
                var f = t[m];

                switch (m += 1, f) {
                  case 1:
                  case 3:
                    D();
                    break;

                  case 4:
                    1 < T.length && !N && (P = T.shift() + M, N = !0), I += T.pop(), R(L, I);
                    break;

                  case 5:
                    for (; 0 < T.length;) L += T.shift(), I += T.shift(), E.lineTo(L, I);

                    break;

                  case 6:
                    for (; 0 < T.length && (L += T.shift(), E.lineTo(L, I), 0 !== T.length);) I += T.shift(), E.lineTo(L, I);

                    break;

                  case 7:
                    for (; 0 < T.length && (I += T.shift(), E.lineTo(L, I), 0 !== T.length);) L += T.shift(), E.lineTo(L, I);

                    break;

                  case 8:
                    for (; 0 < T.length;) v = L + T.shift(), b = I + T.shift(), _ = v + T.shift(), x = b + T.shift(), L = _ + T.shift(), I = x + T.shift(), E.curveTo(v, b, _, x, L, I);

                    break;

                  case 10:
                    i = T.pop() + w, (s = S[i]) && e(s);
                    break;

                  case 11:
                    return;

                  case 12:
                    switch (f = t[m], m += 1, f) {
                      case 35:
                        v = L + T.shift(), b = I + T.shift(), _ = v + T.shift(), x = b + T.shift(), l = _ + T.shift(), p = x + T.shift(), u = l + T.shift(), c = p + T.shift(), d = u + T.shift(), h = c + T.shift(), L = d + T.shift(), I = h + T.shift(), T.shift(), E.curveTo(v, b, _, x, l, p), E.curveTo(u, c, d, h, L, I);
                        break;

                      case 34:
                        v = L + T.shift(), b = I, _ = v + T.shift(), x = b + T.shift(), l = _ + T.shift(), p = x, u = l + T.shift(), c = x, d = u + T.shift(), h = I, L = d + T.shift(), E.curveTo(v, b, _, x, l, p), E.curveTo(u, c, d, h, L, I);
                        break;

                      case 36:
                        v = L + T.shift(), b = I + T.shift(), _ = v + T.shift(), x = b + T.shift(), l = _ + T.shift(), p = x, u = l + T.shift(), c = x, d = u + T.shift(), h = c + T.shift(), L = d + T.shift(), E.curveTo(v, b, _, x, l, p), E.curveTo(u, c, d, h, L, I);
                        break;

                      case 37:
                        v = L + T.shift(), b = I + T.shift(), _ = v + T.shift(), x = b + T.shift(), l = _ + T.shift(), p = x + T.shift(), u = l + T.shift(), c = p + T.shift(), d = u + T.shift(), h = c + T.shift(), Math.abs(d - L) > Math.abs(h - I) ? L = d + T.shift() : I = h + T.shift(), E.curveTo(v, b, _, x, l, p), E.curveTo(u, c, d, h, L, I);
                        break;

                      default:
                        console.log("Glyph " + g.index + ": unknown operator 1200" + f), T.length = 0;
                    }

                    break;

                  case 14:
                    0 < T.length && !N && (P = T.shift() + M, N = !0), O && (E.closePath(), O = !1);
                    break;

                  case 18:
                    D();
                    break;

                  case 19:
                  case 20:
                    D(), m += C + 7 >> 3;
                    break;

                  case 21:
                    2 < T.length && !N && (P = T.shift() + M, N = !0), I += T.pop(), R(L += T.pop(), I);
                    break;

                  case 22:
                    1 < T.length && !N && (P = T.shift() + M, N = !0), R(L += T.pop(), I);
                    break;

                  case 23:
                    D();
                    break;

                  case 24:
                    for (; 2 < T.length;) v = L + T.shift(), b = I + T.shift(), _ = v + T.shift(), x = b + T.shift(), L = _ + T.shift(), I = x + T.shift(), E.curveTo(v, b, _, x, L, I);

                    L += T.shift(), I += T.shift(), E.lineTo(L, I);
                    break;

                  case 25:
                    for (; 6 < T.length;) L += T.shift(), I += T.shift(), E.lineTo(L, I);

                    v = L + T.shift(), b = I + T.shift(), _ = v + T.shift(), x = b + T.shift(), L = _ + T.shift(), I = x + T.shift(), E.curveTo(v, b, _, x, L, I);
                    break;

                  case 26:
                    for (T.length % 2 && (L += T.shift()); 0 < T.length;) v = L, b = I + T.shift(), _ = v + T.shift(), x = b + T.shift(), L = _, I = x + T.shift(), E.curveTo(v, b, _, x, L, I);

                    break;

                  case 27:
                    for (T.length % 2 && (I += T.shift()); 0 < T.length;) v = L + T.shift(), b = I, _ = v + T.shift(), x = b + T.shift(), L = _ + T.shift(), I = x, E.curveTo(v, b, _, x, L, I);

                    break;

                  case 28:
                    r = t[m], n = t[m + 1], T.push((r << 24 | n << 16) >> 16), m += 2;
                    break;

                  case 29:
                    i = T.pop() + y.gsubrsBias, (s = y.gsubrs[i]) && e(s);
                    break;

                  case 30:
                    for (; 0 < T.length && (v = L, b = I + T.shift(), _ = v + T.shift(), x = b + T.shift(), L = _ + T.shift(), I = x + (1 === T.length ? T.shift() : 0), E.curveTo(v, b, _, x, L, I), 0 !== T.length);) v = L + T.shift(), b = I, _ = v + T.shift(), x = b + T.shift(), I = x + T.shift(), L = _ + (1 === T.length ? T.shift() : 0), E.curveTo(v, b, _, x, L, I);

                    break;

                  case 31:
                    for (; 0 < T.length && (v = L + T.shift(), b = I, _ = v + T.shift(), x = b + T.shift(), I = x + T.shift(), L = _ + (1 === T.length ? T.shift() : 0), E.curveTo(v, b, _, x, L, I), 0 !== T.length);) v = L, b = I + T.shift(), _ = v + T.shift(), x = b + T.shift(), L = _ + T.shift(), I = x + (1 === T.length ? T.shift() : 0), E.curveTo(v, b, _, x, L, I);

                    break;

                  default:
                    f < 32 ? console.log("Glyph " + g.index + ": unknown operator " + f) : f < 247 ? T.push(f - 139) : f < 251 ? (r = t[m], m += 1, T.push(256 * (f - 247) + r + 108)) : f < 255 ? (r = t[m], m += 1, T.push(256 * -(f - 251) - r - 108)) : (r = t[m], n = t[m + 1], a = t[m + 2], o = t[m + 3], m += 4, T.push((r << 24 | n << 16 | a << 8 | o) / 65536));
                }
              }
            }(e), g.advanceWidth = P, E;
          }

          function De(e, t) {
            var r,
                n = pe.indexOf(e);
            return 0 <= n && (r = n), 0 <= (n = t.indexOf(e)) ? r = n + pe.length : (r = pe.length + t.length, t.push(e)), r;
          }

          function Ae(e, t, r) {
            for (var n = {}, a = 0; a < e.length; a += 1) {
              var o = e[a],
                  i = t[o.name];
              void 0 === i || Se(i, o.value) || ("SID" === o.type && (i = De(i, r)), n[o.op] = {
                name: o.name,
                type: o.type,
                value: i
              });
            }

            return n;
          }

          function ke(e, t) {
            var r = new $.Record("Top DICT", [{
              name: "dict",
              type: "DICT",
              value: {}
            }]);
            return r.dict = Ae(Oe, e, t), r;
          }

          function Fe(e) {
            var t = new $.Record("Top DICT INDEX", [{
              name: "topDicts",
              type: "INDEX",
              value: []
            }]);
            return t.topDicts = [{
              name: "topDict_0",
              type: "TABLE",
              value: e
            }], t;
          }

          function Ue(e) {
            var t = [],
                r = e.path;
            t.push({
              name: "width",
              type: "NUMBER",
              value: e.advanceWidth
            });

            for (var n = 0, a = 0, o = 0; o < r.commands.length; o += 1) {
              var i = void 0,
                  s = void 0,
                  l = r.commands[o];

              if ("Q" === l.type) {
                l = {
                  type: "C",
                  x: l.x,
                  y: l.y,
                  x1: 1 / 3 * n + 2 / 3 * l.x1,
                  y1: 1 / 3 * a + 2 / 3 * l.y1,
                  x2: 1 / 3 * l.x + 2 / 3 * l.x1,
                  y2: 1 / 3 * l.y + 2 / 3 * l.y1
                };
              }

              if ("M" === l.type) i = Math.round(l.x - n), s = Math.round(l.y - a), t.push({
                name: "dx",
                type: "NUMBER",
                value: i
              }), t.push({
                name: "dy",
                type: "NUMBER",
                value: s
              }), t.push({
                name: "rmoveto",
                type: "OP",
                value: 21
              }), n = Math.round(l.x), a = Math.round(l.y);else if ("L" === l.type) i = Math.round(l.x - n), s = Math.round(l.y - a), t.push({
                name: "dx",
                type: "NUMBER",
                value: i
              }), t.push({
                name: "dy",
                type: "NUMBER",
                value: s
              }), t.push({
                name: "rlineto",
                type: "OP",
                value: 5
              }), n = Math.round(l.x), a = Math.round(l.y);else if ("C" === l.type) {
                var p = Math.round(l.x1 - n),
                    u = Math.round(l.y1 - a),
                    c = Math.round(l.x2 - l.x1),
                    d = Math.round(l.y2 - l.y1);
                i = Math.round(l.x - l.x2), s = Math.round(l.y - l.y2), t.push({
                  name: "dx1",
                  type: "NUMBER",
                  value: p
                }), t.push({
                  name: "dy1",
                  type: "NUMBER",
                  value: u
                }), t.push({
                  name: "dx2",
                  type: "NUMBER",
                  value: c
                }), t.push({
                  name: "dy2",
                  type: "NUMBER",
                  value: d
                }), t.push({
                  name: "dx",
                  type: "NUMBER",
                  value: i
                }), t.push({
                  name: "dy",
                  type: "NUMBER",
                  value: s
                }), t.push({
                  name: "rrcurveto",
                  type: "OP",
                  value: 8
                }), n = Math.round(l.x), a = Math.round(l.y);
              }
            }

            return t.push({
              name: "endchar",
              type: "OP",
              value: 14
            }), t;
          }

          var Be = {
            parse: function (e, t, r) {
              r.tables.cff = {};
              var n,
                  a,
                  o,
                  i = Me(e, (n = e, a = t, (o = {}).formatMajor = se.getCard8(n, a), o.formatMinor = se.getCard8(n, a + 1), o.size = se.getCard8(n, a + 2), o.offsetSize = se.getCard8(n, a + 3), o.startOffset = a, o.endOffset = a + 4, o).endOffset, se.bytesToString),
                  s = Me(e, i.endOffset),
                  l = Me(e, s.endOffset, se.bytesToString),
                  p = Me(e, l.endOffset);
              r.gsubrs = p.objects, r.gsubrsBias = we(r.gsubrs);
              var u = Pe(e, t, s.objects, l.objects);
              if (1 !== u.length) throw new Error("CFF table has too many fonts in 'FontSet' - count of fonts NameIndex.length = " + u.length);
              var c = u[0];

              if ((r.tables.cff.topDict = c)._privateDict && (r.defaultWidthX = c._privateDict.defaultWidthX, r.nominalWidthX = c._privateDict.nominalWidthX), void 0 !== c.ros[0] && void 0 !== c.ros[1] && (r.isCIDFont = !0), r.isCIDFont) {
                var d = c.fdArray,
                    h = c.fdSelect;
                if (0 === d || 0 === h) throw new Error("Font is marked as a CID font, but FDArray and/or FDSelect information is missing");
                var m = Pe(e, t, Me(e, d += t).objects, l.objects);
                c._fdArray = m, h += t, c._fdSelect = function (e, t, r, n) {
                  var a,
                      o = [],
                      i = new se.Parser(e, t),
                      s = i.parseCard8();
                  if (0 === s) for (var l = 0; l < r; l++) {
                    if (n <= (a = i.parseCard8())) throw new Error("CFF table CID Font FDSelect has bad FD index value " + a + " (FD count " + n + ")");
                    o.push(a);
                  } else {
                    if (3 !== s) throw new Error("CFF Table CID Font FDSelect table has unsupported format " + s);
                    var p,
                        u = i.parseCard16(),
                        c = i.parseCard16();
                    if (0 !== c) throw new Error("CFF Table CID Font FDSelect format 3 range has bad initial GID " + c);

                    for (var d = 0; d < u; d++) {
                      if (a = i.parseCard8(), p = i.parseCard16(), n <= a) throw new Error("CFF table CID Font FDSelect has bad FD index value " + a + " (FD count " + n + ")");
                      if (r < p) throw new Error("CFF Table CID Font FDSelect format 3 range has bad GID " + p);

                      for (; c < p; c++) o.push(a);

                      c = p;
                    }

                    if (p !== r) throw new Error("CFF Table CID Font FDSelect format 3 range has bad final GID " + p);
                  }
                  return o;
                }(e, h, r.numGlyphs, m.length);
              }

              var f = t + c.private[1],
                  y = Ie(e, f, c.private[0], l.objects);

              if (r.defaultWidthX = y.defaultWidthX, r.nominalWidthX = y.nominalWidthX, 0 !== y.subrs) {
                var g = Me(e, f + y.subrs);
                r.subrs = g.objects, r.subrsBias = we(r.subrs);
              } else r.subrs = [], r.subrsBias = 0;

              var v = Me(e, t + c.charStrings);
              r.nGlyphs = v.objects.length;

              var b = function (e, t, r, n) {
                var a,
                    o,
                    i = new se.Parser(e, t);
                --r;
                var s = [".notdef"],
                    l = i.parseCard8();
                if (0 === l) for (var p = 0; p < r; p += 1) a = i.parseSID(), s.push(Ce(n, a));else if (1 === l) for (; s.length <= r;) {
                  a = i.parseSID(), o = i.parseCard8();

                  for (var u = 0; u <= o; u += 1) s.push(Ce(n, a)), a += 1;
                } else {
                  if (2 !== l) throw new Error("Unknown charset format " + l);

                  for (; s.length <= r;) {
                    a = i.parseSID(), o = i.parseCard16();

                    for (var c = 0; c <= o; c += 1) s.push(Ce(n, a)), a += 1;
                  }
                }
                return s;
              }(e, t + c.charset, r.nGlyphs, l.objects);

              0 === c.encoding ? r.cffEncoding = new fe(ue, b) : 1 === c.encoding ? r.cffEncoding = new fe(ce, b) : r.cffEncoding = function (e, t, r) {
                var n,
                    a = {},
                    o = new se.Parser(e, t),
                    i = o.parseCard8();
                if (0 === i) for (var s = o.parseCard8(), l = 0; l < s; l += 1) a[n = o.parseCard8()] = l;else {
                  if (1 !== i) throw new Error("Unknown encoding format " + i);
                  var p = o.parseCard8();
                  n = 1;

                  for (var u = 0; u < p; u += 1) for (var c = o.parseCard8(), d = o.parseCard8(), h = c; h <= c + d; h += 1) a[h] = n, n += 1;
                }
                return new fe(a, r);
              }(e, t + c.encoding, b), r.encoding = r.encoding || r.cffEncoding, r.glyphs = new xe.GlyphSet(r);

              for (var _ = 0; _ < r.nGlyphs; _ += 1) {
                var x = v.objects[_];
                r.glyphs.push(_, xe.cffGlyphLoader(r, _, Re, x));
              }
            },
            make: function (e, t) {
              for (var r, n = new $.Table("CFF ", [{
                name: "header",
                type: "RECORD"
              }, {
                name: "nameIndex",
                type: "RECORD"
              }, {
                name: "topDictIndex",
                type: "RECORD"
              }, {
                name: "stringIndex",
                type: "RECORD"
              }, {
                name: "globalSubrIndex",
                type: "RECORD"
              }, {
                name: "charsets",
                type: "RECORD"
              }, {
                name: "charStringsIndex",
                type: "RECORD"
              }, {
                name: "privateDict",
                type: "RECORD"
              }]), a = 1 / t.unitsPerEm, o = {
                version: t.version,
                fullName: t.fullName,
                familyName: t.familyName,
                weight: t.weightName,
                fontBBox: t.fontBBox || [0, 0, 0, 0],
                fontMatrix: [a, 0, 0, a, 0, 0],
                charset: 999,
                encoding: 0,
                charStrings: 999,
                private: [0, 999]
              }, i = [], s = 1; s < e.length; s += 1) r = e.get(s), i.push(r.name);

              var l = [];
              n.header = new $.Record("Header", [{
                name: "major",
                type: "Card8",
                value: 1
              }, {
                name: "minor",
                type: "Card8",
                value: 0
              }, {
                name: "hdrSize",
                type: "Card8",
                value: 4
              }, {
                name: "major",
                type: "Card8",
                value: 1
              }]), n.nameIndex = function (e) {
                var t = new $.Record("Name INDEX", [{
                  name: "names",
                  type: "INDEX",
                  value: []
                }]);
                t.names = [];

                for (var r = 0; r < e.length; r += 1) t.names.push({
                  name: "name_" + r,
                  type: "NAME",
                  value: e[r]
                });

                return t;
              }([t.postScriptName]);
              var p,
                  u,
                  c,
                  d = ke(o, l);
              n.topDictIndex = Fe(d), n.globalSubrIndex = new $.Record("Global Subr INDEX", [{
                name: "subrs",
                type: "INDEX",
                value: []
              }]), n.charsets = function (e, t) {
                for (var r = new $.Record("Charsets", [{
                  name: "format",
                  type: "Card8",
                  value: 0
                }]), n = 0; n < e.length; n += 1) {
                  var a = De(e[n], t);
                  r.fields.push({
                    name: "glyph_" + n,
                    type: "SID",
                    value: a
                  });
                }

                return r;
              }(i, l), n.charStringsIndex = function (e) {
                for (var t = new $.Record("CharStrings INDEX", [{
                  name: "charStrings",
                  type: "INDEX",
                  value: []
                }]), r = 0; r < e.length; r += 1) {
                  var n = e.get(r),
                      a = Ue(n);
                  t.charStrings.push({
                    name: n.name,
                    type: "CHARSTRING",
                    value: a
                  });
                }

                return t;
              }(e), n.privateDict = (p = {}, u = l, (c = new $.Record("Private DICT", [{
                name: "dict",
                type: "DICT",
                value: {}
              }])).dict = Ae(Le, p, u), c), n.stringIndex = function (e) {
                var t = new $.Record("String INDEX", [{
                  name: "strings",
                  type: "INDEX",
                  value: []
                }]);
                t.strings = [];

                for (var r = 0; r < e.length; r += 1) t.strings.push({
                  name: "string_" + r,
                  type: "STRING",
                  value: e[r]
                });

                return t;
              }(l);
              var h = n.header.sizeOf() + n.nameIndex.sizeOf() + n.topDictIndex.sizeOf() + n.stringIndex.sizeOf() + n.globalSubrIndex.sizeOf();
              return o.charset = h, o.encoding = 0, o.charStrings = o.charset + n.charsets.sizeOf(), o.private[1] = o.charStrings + n.charStringsIndex.sizeOf(), d = ke(o, l), n.topDictIndex = Fe(d), n;
            }
          };
          var Ge = {
            parse: function (e, t) {
              var r = {},
                  n = new se.Parser(e, t);
              return r.version = n.parseVersion(), r.fontRevision = Math.round(1e3 * n.parseFixed()) / 1e3, r.checkSumAdjustment = n.parseULong(), r.magicNumber = n.parseULong(), L.argument(1594834165 === r.magicNumber, "Font header has wrong magic number."), r.flags = n.parseUShort(), r.unitsPerEm = n.parseUShort(), r.created = n.parseLongDateTime(), r.modified = n.parseLongDateTime(), r.xMin = n.parseShort(), r.yMin = n.parseShort(), r.xMax = n.parseShort(), r.yMax = n.parseShort(), r.macStyle = n.parseUShort(), r.lowestRecPPEM = n.parseUShort(), r.fontDirectionHint = n.parseShort(), r.indexToLocFormat = n.parseShort(), r.glyphDataFormat = n.parseShort(), r;
            },
            make: function (e) {
              var t = Math.round(new Date().getTime() / 1e3) + 2082844800,
                  r = t;
              return e.createdTimestamp && (r = e.createdTimestamp + 2082844800), new $.Table("head", [{
                name: "version",
                type: "FIXED",
                value: 65536
              }, {
                name: "fontRevision",
                type: "FIXED",
                value: 65536
              }, {
                name: "checkSumAdjustment",
                type: "ULONG",
                value: 0
              }, {
                name: "magicNumber",
                type: "ULONG",
                value: 1594834165
              }, {
                name: "flags",
                type: "USHORT",
                value: 0
              }, {
                name: "unitsPerEm",
                type: "USHORT",
                value: 1e3
              }, {
                name: "created",
                type: "LONGDATETIME",
                value: r
              }, {
                name: "modified",
                type: "LONGDATETIME",
                value: t
              }, {
                name: "xMin",
                type: "SHORT",
                value: 0
              }, {
                name: "yMin",
                type: "SHORT",
                value: 0
              }, {
                name: "xMax",
                type: "SHORT",
                value: 0
              }, {
                name: "yMax",
                type: "SHORT",
                value: 0
              }, {
                name: "macStyle",
                type: "USHORT",
                value: 0
              }, {
                name: "lowestRecPPEM",
                type: "USHORT",
                value: 0
              }, {
                name: "fontDirectionHint",
                type: "SHORT",
                value: 2
              }, {
                name: "indexToLocFormat",
                type: "SHORT",
                value: 0
              }, {
                name: "glyphDataFormat",
                type: "SHORT",
                value: 0
              }], e);
            }
          };
          var je = {
            parse: function (e, t) {
              var r = {},
                  n = new se.Parser(e, t);
              return r.version = n.parseVersion(), r.ascender = n.parseShort(), r.descender = n.parseShort(), r.lineGap = n.parseShort(), r.advanceWidthMax = n.parseUShort(), r.minLeftSideBearing = n.parseShort(), r.minRightSideBearing = n.parseShort(), r.xMaxExtent = n.parseShort(), r.caretSlopeRise = n.parseShort(), r.caretSlopeRun = n.parseShort(), r.caretOffset = n.parseShort(), n.relativeOffset += 8, r.metricDataFormat = n.parseShort(), r.numberOfHMetrics = n.parseUShort(), r;
            },
            make: function (e) {
              return new $.Table("hhea", [{
                name: "version",
                type: "FIXED",
                value: 65536
              }, {
                name: "ascender",
                type: "FWORD",
                value: 0
              }, {
                name: "descender",
                type: "FWORD",
                value: 0
              }, {
                name: "lineGap",
                type: "FWORD",
                value: 0
              }, {
                name: "advanceWidthMax",
                type: "UFWORD",
                value: 0
              }, {
                name: "minLeftSideBearing",
                type: "FWORD",
                value: 0
              }, {
                name: "minRightSideBearing",
                type: "FWORD",
                value: 0
              }, {
                name: "xMaxExtent",
                type: "FWORD",
                value: 0
              }, {
                name: "caretSlopeRise",
                type: "SHORT",
                value: 1
              }, {
                name: "caretSlopeRun",
                type: "SHORT",
                value: 0
              }, {
                name: "caretOffset",
                type: "SHORT",
                value: 0
              }, {
                name: "reserved1",
                type: "SHORT",
                value: 0
              }, {
                name: "reserved2",
                type: "SHORT",
                value: 0
              }, {
                name: "reserved3",
                type: "SHORT",
                value: 0
              }, {
                name: "reserved4",
                type: "SHORT",
                value: 0
              }, {
                name: "metricDataFormat",
                type: "SHORT",
                value: 0
              }, {
                name: "numberOfHMetrics",
                type: "USHORT",
                value: 0
              }], e);
            }
          };
          var Ve = {
            parse: function (e, t, r, n, a) {
              for (var o, i, s = new se.Parser(e, t), l = 0; l < n; l += 1) {
                l < r && (o = s.parseUShort(), i = s.parseShort());
                var p = a.get(l);
                p.advanceWidth = o, p.leftSideBearing = i;
              }
            },
            make: function (e) {
              for (var t = new $.Table("hmtx", []), r = 0; r < e.length; r += 1) {
                var n = e.get(r),
                    a = n.advanceWidth || 0,
                    o = n.leftSideBearing || 0;
                t.fields.push({
                  name: "advanceWidth_" + r,
                  type: "USHORT",
                  value: a
                }), t.fields.push({
                  name: "leftSideBearing_" + r,
                  type: "SHORT",
                  value: o
                });
              }

              return t;
            }
          };
          var ze = {
            make: function (e) {
              for (var t = new $.Table("ltag", [{
                name: "version",
                type: "ULONG",
                value: 1
              }, {
                name: "flags",
                type: "ULONG",
                value: 0
              }, {
                name: "numTags",
                type: "ULONG",
                value: e.length
              }]), r = "", n = 12 + 4 * e.length, a = 0; a < e.length; ++a) {
                var o = r.indexOf(e[a]);
                o < 0 && (o = r.length, r += e[a]), t.fields.push({
                  name: "offset " + a,
                  type: "USHORT",
                  value: n + o
                }), t.fields.push({
                  name: "length " + a,
                  type: "USHORT",
                  value: e[a].length
                });
              }

              return t.fields.push({
                name: "stringPool",
                type: "CHARARRAY",
                value: r
              }), t;
            },
            parse: function (e, t) {
              var r = new se.Parser(e, t),
                  n = r.parseULong();
              L.argument(1 === n, "Unsupported ltag table version."), r.skip("uLong", 1);

              for (var a = r.parseULong(), o = [], i = 0; i < a; i++) {
                for (var s = "", l = t + r.parseUShort(), p = r.parseUShort(), u = l; u < l + p; ++u) s += String.fromCharCode(e.getInt8(u));

                o.push(s);
              }

              return o;
            }
          };
          var He = {
            parse: function (e, t) {
              var r = {},
                  n = new se.Parser(e, t);
              return r.version = n.parseVersion(), r.numGlyphs = n.parseUShort(), 1 === r.version && (r.maxPoints = n.parseUShort(), r.maxContours = n.parseUShort(), r.maxCompositePoints = n.parseUShort(), r.maxCompositeContours = n.parseUShort(), r.maxZones = n.parseUShort(), r.maxTwilightPoints = n.parseUShort(), r.maxStorage = n.parseUShort(), r.maxFunctionDefs = n.parseUShort(), r.maxInstructionDefs = n.parseUShort(), r.maxStackElements = n.parseUShort(), r.maxSizeOfInstructions = n.parseUShort(), r.maxComponentElements = n.parseUShort(), r.maxComponentDepth = n.parseUShort()), r;
            },
            make: function (e) {
              return new $.Table("maxp", [{
                name: "version",
                type: "FIXED",
                value: 20480
              }, {
                name: "numGlyphs",
                type: "USHORT",
                value: e
              }]);
            }
          },
              We = ["copyright", "fontFamily", "fontSubfamily", "uniqueID", "fullName", "version", "postScriptName", "trademark", "manufacturer", "designer", "description", "manufacturerURL", "designerURL", "license", "licenseURL", "reserved", "preferredFamily", "preferredSubfamily", "compatibleFullName", "sampleText", "postScriptFindFontName", "wwsFamily", "wwsSubfamily"],
              Xe = {
            0: "en",
            1: "fr",
            2: "de",
            3: "it",
            4: "nl",
            5: "sv",
            6: "es",
            7: "da",
            8: "pt",
            9: "no",
            10: "he",
            11: "ja",
            12: "ar",
            13: "fi",
            14: "el",
            15: "is",
            16: "mt",
            17: "tr",
            18: "hr",
            19: "zh-Hant",
            20: "ur",
            21: "hi",
            22: "th",
            23: "ko",
            24: "lt",
            25: "pl",
            26: "hu",
            27: "es",
            28: "lv",
            29: "se",
            30: "fo",
            31: "fa",
            32: "ru",
            33: "zh",
            34: "nl-BE",
            35: "ga",
            36: "sq",
            37: "ro",
            38: "cz",
            39: "sk",
            40: "si",
            41: "yi",
            42: "sr",
            43: "mk",
            44: "bg",
            45: "uk",
            46: "be",
            47: "uz",
            48: "kk",
            49: "az-Cyrl",
            50: "az-Arab",
            51: "hy",
            52: "ka",
            53: "mo",
            54: "ky",
            55: "tg",
            56: "tk",
            57: "mn-CN",
            58: "mn",
            59: "ps",
            60: "ks",
            61: "ku",
            62: "sd",
            63: "bo",
            64: "ne",
            65: "sa",
            66: "mr",
            67: "bn",
            68: "as",
            69: "gu",
            70: "pa",
            71: "or",
            72: "ml",
            73: "kn",
            74: "ta",
            75: "te",
            76: "si",
            77: "my",
            78: "km",
            79: "lo",
            80: "vi",
            81: "id",
            82: "tl",
            83: "ms",
            84: "ms-Arab",
            85: "am",
            86: "ti",
            87: "om",
            88: "so",
            89: "sw",
            90: "rw",
            91: "rn",
            92: "ny",
            93: "mg",
            94: "eo",
            128: "cy",
            129: "eu",
            130: "ca",
            131: "la",
            132: "qu",
            133: "gn",
            134: "ay",
            135: "tt",
            136: "ug",
            137: "dz",
            138: "jv",
            139: "su",
            140: "gl",
            141: "af",
            142: "br",
            143: "iu",
            144: "gd",
            145: "gv",
            146: "ga",
            147: "to",
            148: "el-polyton",
            149: "kl",
            150: "az",
            151: "nn"
          },
              qe = {
            0: 0,
            1: 0,
            2: 0,
            3: 0,
            4: 0,
            5: 0,
            6: 0,
            7: 0,
            8: 0,
            9: 0,
            10: 5,
            11: 1,
            12: 4,
            13: 0,
            14: 6,
            15: 0,
            16: 0,
            17: 0,
            18: 0,
            19: 2,
            20: 4,
            21: 9,
            22: 21,
            23: 3,
            24: 29,
            25: 29,
            26: 29,
            27: 29,
            28: 29,
            29: 0,
            30: 0,
            31: 4,
            32: 7,
            33: 25,
            34: 0,
            35: 0,
            36: 0,
            37: 0,
            38: 29,
            39: 29,
            40: 0,
            41: 5,
            42: 7,
            43: 7,
            44: 7,
            45: 7,
            46: 7,
            47: 7,
            48: 7,
            49: 7,
            50: 4,
            51: 24,
            52: 23,
            53: 7,
            54: 7,
            55: 7,
            56: 7,
            57: 27,
            58: 7,
            59: 4,
            60: 4,
            61: 4,
            62: 4,
            63: 26,
            64: 9,
            65: 9,
            66: 9,
            67: 13,
            68: 13,
            69: 11,
            70: 10,
            71: 12,
            72: 17,
            73: 16,
            74: 14,
            75: 15,
            76: 18,
            77: 19,
            78: 20,
            79: 22,
            80: 30,
            81: 0,
            82: 0,
            83: 0,
            84: 4,
            85: 28,
            86: 28,
            87: 28,
            88: 0,
            89: 0,
            90: 0,
            91: 0,
            92: 0,
            93: 0,
            94: 0,
            128: 0,
            129: 0,
            130: 0,
            131: 0,
            132: 0,
            133: 0,
            134: 0,
            135: 7,
            136: 4,
            137: 26,
            138: 0,
            139: 0,
            140: 0,
            141: 0,
            142: 0,
            143: 28,
            144: 0,
            145: 0,
            146: 0,
            147: 0,
            148: 6,
            149: 0,
            150: 0,
            151: 0
          },
              Ye = {
            1078: "af",
            1052: "sq",
            1156: "gsw",
            1118: "am",
            5121: "ar-DZ",
            15361: "ar-BH",
            3073: "ar",
            2049: "ar-IQ",
            11265: "ar-JO",
            13313: "ar-KW",
            12289: "ar-LB",
            4097: "ar-LY",
            6145: "ary",
            8193: "ar-OM",
            16385: "ar-QA",
            1025: "ar-SA",
            10241: "ar-SY",
            7169: "aeb",
            14337: "ar-AE",
            9217: "ar-YE",
            1067: "hy",
            1101: "as",
            2092: "az-Cyrl",
            1068: "az",
            1133: "ba",
            1069: "eu",
            1059: "be",
            2117: "bn",
            1093: "bn-IN",
            8218: "bs-Cyrl",
            5146: "bs",
            1150: "br",
            1026: "bg",
            1027: "ca",
            3076: "zh-HK",
            5124: "zh-MO",
            2052: "zh",
            4100: "zh-SG",
            1028: "zh-TW",
            1155: "co",
            1050: "hr",
            4122: "hr-BA",
            1029: "cs",
            1030: "da",
            1164: "prs",
            1125: "dv",
            2067: "nl-BE",
            1043: "nl",
            3081: "en-AU",
            10249: "en-BZ",
            4105: "en-CA",
            9225: "en-029",
            16393: "en-IN",
            6153: "en-IE",
            8201: "en-JM",
            17417: "en-MY",
            5129: "en-NZ",
            13321: "en-PH",
            18441: "en-SG",
            7177: "en-ZA",
            11273: "en-TT",
            2057: "en-GB",
            1033: "en",
            12297: "en-ZW",
            1061: "et",
            1080: "fo",
            1124: "fil",
            1035: "fi",
            2060: "fr-BE",
            3084: "fr-CA",
            1036: "fr",
            5132: "fr-LU",
            6156: "fr-MC",
            4108: "fr-CH",
            1122: "fy",
            1110: "gl",
            1079: "ka",
            3079: "de-AT",
            1031: "de",
            5127: "de-LI",
            4103: "de-LU",
            2055: "de-CH",
            1032: "el",
            1135: "kl",
            1095: "gu",
            1128: "ha",
            1037: "he",
            1081: "hi",
            1038: "hu",
            1039: "is",
            1136: "ig",
            1057: "id",
            1117: "iu",
            2141: "iu-Latn",
            2108: "ga",
            1076: "xh",
            1077: "zu",
            1040: "it",
            2064: "it-CH",
            1041: "ja",
            1099: "kn",
            1087: "kk",
            1107: "km",
            1158: "quc",
            1159: "rw",
            1089: "sw",
            1111: "kok",
            1042: "ko",
            1088: "ky",
            1108: "lo",
            1062: "lv",
            1063: "lt",
            2094: "dsb",
            1134: "lb",
            1071: "mk",
            2110: "ms-BN",
            1086: "ms",
            1100: "ml",
            1082: "mt",
            1153: "mi",
            1146: "arn",
            1102: "mr",
            1148: "moh",
            1104: "mn",
            2128: "mn-CN",
            1121: "ne",
            1044: "nb",
            2068: "nn",
            1154: "oc",
            1096: "or",
            1123: "ps",
            1045: "pl",
            1046: "pt",
            2070: "pt-PT",
            1094: "pa",
            1131: "qu-BO",
            2155: "qu-EC",
            3179: "qu",
            1048: "ro",
            1047: "rm",
            1049: "ru",
            9275: "smn",
            4155: "smj-NO",
            5179: "smj",
            3131: "se-FI",
            1083: "se",
            2107: "se-SE",
            8251: "sms",
            6203: "sma-NO",
            7227: "sms",
            1103: "sa",
            7194: "sr-Cyrl-BA",
            3098: "sr",
            6170: "sr-Latn-BA",
            2074: "sr-Latn",
            1132: "nso",
            1074: "tn",
            1115: "si",
            1051: "sk",
            1060: "sl",
            11274: "es-AR",
            16394: "es-BO",
            13322: "es-CL",
            9226: "es-CO",
            5130: "es-CR",
            7178: "es-DO",
            12298: "es-EC",
            17418: "es-SV",
            4106: "es-GT",
            18442: "es-HN",
            2058: "es-MX",
            19466: "es-NI",
            6154: "es-PA",
            15370: "es-PY",
            10250: "es-PE",
            20490: "es-PR",
            3082: "es",
            1034: "es",
            21514: "es-US",
            14346: "es-UY",
            8202: "es-VE",
            2077: "sv-FI",
            1053: "sv",
            1114: "syr",
            1064: "tg",
            2143: "tzm",
            1097: "ta",
            1092: "tt",
            1098: "te",
            1054: "th",
            1105: "bo",
            1055: "tr",
            1090: "tk",
            1152: "ug",
            1058: "uk",
            1070: "hsb",
            1056: "ur",
            2115: "uz-Cyrl",
            1091: "uz",
            1066: "vi",
            1106: "cy",
            1160: "wo",
            1157: "sah",
            1144: "ii",
            1130: "yo"
          };

          function Ze(e, t, r) {
            switch (e) {
              case 0:
                if (65535 === t) return "und";
                if (r) return r[t];
                break;

              case 1:
                return Xe[t];

              case 3:
                return Ye[t];
            }
          }

          var Qe = "utf-16",
              Ke = {
            0: "macintosh",
            1: "x-mac-japanese",
            2: "x-mac-chinesetrad",
            3: "x-mac-korean",
            6: "x-mac-greek",
            7: "x-mac-cyrillic",
            9: "x-mac-devanagai",
            10: "x-mac-gurmukhi",
            11: "x-mac-gujarati",
            12: "x-mac-oriya",
            13: "x-mac-bengali",
            14: "x-mac-tamil",
            15: "x-mac-telugu",
            16: "x-mac-kannada",
            17: "x-mac-malayalam",
            18: "x-mac-sinhalese",
            19: "x-mac-burmese",
            20: "x-mac-khmer",
            21: "x-mac-thai",
            22: "x-mac-lao",
            23: "x-mac-georgian",
            24: "x-mac-armenian",
            25: "x-mac-chinesesimp",
            26: "x-mac-tibetan",
            27: "x-mac-mongolian",
            28: "x-mac-ethiopic",
            29: "x-mac-ce",
            30: "x-mac-vietnamese",
            31: "x-mac-extarabic"
          },
              Je = {
            15: "x-mac-icelandic",
            17: "x-mac-turkish",
            18: "x-mac-croatian",
            24: "x-mac-ce",
            25: "x-mac-ce",
            26: "x-mac-ce",
            27: "x-mac-ce",
            28: "x-mac-ce",
            30: "x-mac-icelandic",
            37: "x-mac-romanian",
            38: "x-mac-ce",
            39: "x-mac-ce",
            40: "x-mac-ce",
            143: "x-mac-inuit",
            146: "x-mac-gaelic"
          };

          function $e(e, t, r) {
            switch (e) {
              case 0:
                return Qe;

              case 1:
                return Je[r] || Ke[t];

              case 3:
                if (1 === t || 10 === t) return Qe;
            }
          }

          function et(e) {
            var t = {};

            for (var r in e) t[e[r]] = parseInt(r);

            return t;
          }

          function tt(e, t, r, n, a, o) {
            return new $.Record("NameRecord", [{
              name: "platformID",
              type: "USHORT",
              value: e
            }, {
              name: "encodingID",
              type: "USHORT",
              value: t
            }, {
              name: "languageID",
              type: "USHORT",
              value: r
            }, {
              name: "nameID",
              type: "USHORT",
              value: n
            }, {
              name: "length",
              type: "USHORT",
              value: a
            }, {
              name: "offset",
              type: "USHORT",
              value: o
            }]);
          }

          function rt(e, t) {
            var r = function (e, t) {
              var r = e.length,
                  n = t.length - r + 1;

              e: for (var a = 0; a < n; a++) for (; a < n; a++) {
                for (var o = 0; o < r; o++) if (t[a + o] !== e[o]) continue e;

                return a;
              }

              return -1;
            }(e, t);

            if (r < 0) {
              r = t.length;

              for (var n = 0, a = e.length; n < a; ++n) t.push(e[n]);
            }

            return r;
          }

          var nt = {
            parse: function (e, t, r) {
              for (var n = {}, a = new se.Parser(e, t), o = a.parseUShort(), i = a.parseUShort(), s = a.offset + a.parseUShort(), l = 0; l < i; l++) {
                var p = a.parseUShort(),
                    u = a.parseUShort(),
                    c = a.parseUShort(),
                    d = a.parseUShort(),
                    h = We[d] || d,
                    m = a.parseUShort(),
                    f = a.parseUShort(),
                    y = Ze(p, c, r),
                    g = $e(p, u, c);

                if (void 0 !== g && void 0 !== y) {
                  var v = void 0;

                  if (v = g === Qe ? P.UTF16(e, s + f, m) : P.MACSTRING(e, s + f, m, g)) {
                    var b = n[h];
                    void 0 === b && (b = n[h] = {}), b[y] = v;
                  }
                }
              }

              return 1 === o && a.parseUShort(), n;
            },
            make: function (e, t) {
              var r,
                  n = [],
                  a = {},
                  o = et(We);

              for (var i in e) {
                var s = o[i];
                if (void 0 === s && (s = i), r = parseInt(s), isNaN(r)) throw new Error('Name table entry "' + i + '" does not exist, see nameTableNames for complete list.');
                a[r] = e[i], n.push(r);
              }

              for (var l = et(Xe), p = et(Ye), u = [], c = [], d = 0; d < n.length; d++) {
                var h = a[r = n[d]];

                for (var m in h) {
                  var f = h[m],
                      y = 1,
                      g = l[m],
                      v = qe[g],
                      b = $e(y, v, g),
                      _ = R.MACSTRING(f, b);

                  void 0 === _ && (y = 0, (g = t.indexOf(m)) < 0 && (g = t.length, t.push(m)), v = 4, _ = R.UTF16(f));
                  var x = rt(_, c);
                  u.push(tt(y, v, g, r, _.length, x));
                  var S = p[m];

                  if (void 0 !== S) {
                    var w = R.UTF16(f),
                        M = rt(w, c);
                    u.push(tt(3, 1, S, r, w.length, M));
                  }
                }
              }

              u.sort(function (e, t) {
                return e.platformID - t.platformID || e.encodingID - t.encodingID || e.languageID - t.languageID || e.nameID - t.nameID;
              });

              for (var E = new $.Table("name", [{
                name: "format",
                type: "USHORT",
                value: 0
              }, {
                name: "count",
                type: "USHORT",
                value: u.length
              }, {
                name: "stringOffset",
                type: "USHORT",
                value: 6 + 12 * u.length
              }]), T = 0; T < u.length; T++) E.fields.push({
                name: "record_" + T,
                type: "RECORD",
                value: u[T]
              });

              return E.fields.push({
                name: "strings",
                type: "LITERAL",
                value: c
              }), E;
            }
          },
              at = [{
            begin: 0,
            end: 127
          }, {
            begin: 128,
            end: 255
          }, {
            begin: 256,
            end: 383
          }, {
            begin: 384,
            end: 591
          }, {
            begin: 592,
            end: 687
          }, {
            begin: 688,
            end: 767
          }, {
            begin: 768,
            end: 879
          }, {
            begin: 880,
            end: 1023
          }, {
            begin: 11392,
            end: 11519
          }, {
            begin: 1024,
            end: 1279
          }, {
            begin: 1328,
            end: 1423
          }, {
            begin: 1424,
            end: 1535
          }, {
            begin: 42240,
            end: 42559
          }, {
            begin: 1536,
            end: 1791
          }, {
            begin: 1984,
            end: 2047
          }, {
            begin: 2304,
            end: 2431
          }, {
            begin: 2432,
            end: 2559
          }, {
            begin: 2560,
            end: 2687
          }, {
            begin: 2688,
            end: 2815
          }, {
            begin: 2816,
            end: 2943
          }, {
            begin: 2944,
            end: 3071
          }, {
            begin: 3072,
            end: 3199
          }, {
            begin: 3200,
            end: 3327
          }, {
            begin: 3328,
            end: 3455
          }, {
            begin: 3584,
            end: 3711
          }, {
            begin: 3712,
            end: 3839
          }, {
            begin: 4256,
            end: 4351
          }, {
            begin: 6912,
            end: 7039
          }, {
            begin: 4352,
            end: 4607
          }, {
            begin: 7680,
            end: 7935
          }, {
            begin: 7936,
            end: 8191
          }, {
            begin: 8192,
            end: 8303
          }, {
            begin: 8304,
            end: 8351
          }, {
            begin: 8352,
            end: 8399
          }, {
            begin: 8400,
            end: 8447
          }, {
            begin: 8448,
            end: 8527
          }, {
            begin: 8528,
            end: 8591
          }, {
            begin: 8592,
            end: 8703
          }, {
            begin: 8704,
            end: 8959
          }, {
            begin: 8960,
            end: 9215
          }, {
            begin: 9216,
            end: 9279
          }, {
            begin: 9280,
            end: 9311
          }, {
            begin: 9312,
            end: 9471
          }, {
            begin: 9472,
            end: 9599
          }, {
            begin: 9600,
            end: 9631
          }, {
            begin: 9632,
            end: 9727
          }, {
            begin: 9728,
            end: 9983
          }, {
            begin: 9984,
            end: 10175
          }, {
            begin: 12288,
            end: 12351
          }, {
            begin: 12352,
            end: 12447
          }, {
            begin: 12448,
            end: 12543
          }, {
            begin: 12544,
            end: 12591
          }, {
            begin: 12592,
            end: 12687
          }, {
            begin: 43072,
            end: 43135
          }, {
            begin: 12800,
            end: 13055
          }, {
            begin: 13056,
            end: 13311
          }, {
            begin: 44032,
            end: 55215
          }, {
            begin: 55296,
            end: 57343
          }, {
            begin: 67840,
            end: 67871
          }, {
            begin: 19968,
            end: 40959
          }, {
            begin: 57344,
            end: 63743
          }, {
            begin: 12736,
            end: 12783
          }, {
            begin: 64256,
            end: 64335
          }, {
            begin: 64336,
            end: 65023
          }, {
            begin: 65056,
            end: 65071
          }, {
            begin: 65040,
            end: 65055
          }, {
            begin: 65104,
            end: 65135
          }, {
            begin: 65136,
            end: 65279
          }, {
            begin: 65280,
            end: 65519
          }, {
            begin: 65520,
            end: 65535
          }, {
            begin: 3840,
            end: 4095
          }, {
            begin: 1792,
            end: 1871
          }, {
            begin: 1920,
            end: 1983
          }, {
            begin: 3456,
            end: 3583
          }, {
            begin: 4096,
            end: 4255
          }, {
            begin: 4608,
            end: 4991
          }, {
            begin: 5024,
            end: 5119
          }, {
            begin: 5120,
            end: 5759
          }, {
            begin: 5760,
            end: 5791
          }, {
            begin: 5792,
            end: 5887
          }, {
            begin: 6016,
            end: 6143
          }, {
            begin: 6144,
            end: 6319
          }, {
            begin: 10240,
            end: 10495
          }, {
            begin: 40960,
            end: 42127
          }, {
            begin: 5888,
            end: 5919
          }, {
            begin: 66304,
            end: 66351
          }, {
            begin: 66352,
            end: 66383
          }, {
            begin: 66560,
            end: 66639
          }, {
            begin: 118784,
            end: 119039
          }, {
            begin: 119808,
            end: 120831
          }, {
            begin: 1044480,
            end: 1048573
          }, {
            begin: 65024,
            end: 65039
          }, {
            begin: 917504,
            end: 917631
          }, {
            begin: 6400,
            end: 6479
          }, {
            begin: 6480,
            end: 6527
          }, {
            begin: 6528,
            end: 6623
          }, {
            begin: 6656,
            end: 6687
          }, {
            begin: 11264,
            end: 11359
          }, {
            begin: 11568,
            end: 11647
          }, {
            begin: 19904,
            end: 19967
          }, {
            begin: 43008,
            end: 43055
          }, {
            begin: 65536,
            end: 65663
          }, {
            begin: 65856,
            end: 65935
          }, {
            begin: 66432,
            end: 66463
          }, {
            begin: 66464,
            end: 66527
          }, {
            begin: 66640,
            end: 66687
          }, {
            begin: 66688,
            end: 66735
          }, {
            begin: 67584,
            end: 67647
          }, {
            begin: 68096,
            end: 68191
          }, {
            begin: 119552,
            end: 119647
          }, {
            begin: 73728,
            end: 74751
          }, {
            begin: 119648,
            end: 119679
          }, {
            begin: 7040,
            end: 7103
          }, {
            begin: 7168,
            end: 7247
          }, {
            begin: 7248,
            end: 7295
          }, {
            begin: 43136,
            end: 43231
          }, {
            begin: 43264,
            end: 43311
          }, {
            begin: 43312,
            end: 43359
          }, {
            begin: 43520,
            end: 43615
          }, {
            begin: 65936,
            end: 65999
          }, {
            begin: 66e3,
            end: 66047
          }, {
            begin: 66208,
            end: 66271
          }, {
            begin: 127024,
            end: 127135
          }];
          var ot = {
            parse: function (e, t) {
              var r = {},
                  n = new se.Parser(e, t);
              r.version = n.parseUShort(), r.xAvgCharWidth = n.parseShort(), r.usWeightClass = n.parseUShort(), r.usWidthClass = n.parseUShort(), r.fsType = n.parseUShort(), r.ySubscriptXSize = n.parseShort(), r.ySubscriptYSize = n.parseShort(), r.ySubscriptXOffset = n.parseShort(), r.ySubscriptYOffset = n.parseShort(), r.ySuperscriptXSize = n.parseShort(), r.ySuperscriptYSize = n.parseShort(), r.ySuperscriptXOffset = n.parseShort(), r.ySuperscriptYOffset = n.parseShort(), r.yStrikeoutSize = n.parseShort(), r.yStrikeoutPosition = n.parseShort(), r.sFamilyClass = n.parseShort(), r.panose = [];

              for (var a = 0; a < 10; a++) r.panose[a] = n.parseByte();

              return r.ulUnicodeRange1 = n.parseULong(), r.ulUnicodeRange2 = n.parseULong(), r.ulUnicodeRange3 = n.parseULong(), r.ulUnicodeRange4 = n.parseULong(), r.achVendID = String.fromCharCode(n.parseByte(), n.parseByte(), n.parseByte(), n.parseByte()), r.fsSelection = n.parseUShort(), r.usFirstCharIndex = n.parseUShort(), r.usLastCharIndex = n.parseUShort(), r.sTypoAscender = n.parseShort(), r.sTypoDescender = n.parseShort(), r.sTypoLineGap = n.parseShort(), r.usWinAscent = n.parseUShort(), r.usWinDescent = n.parseUShort(), 1 <= r.version && (r.ulCodePageRange1 = n.parseULong(), r.ulCodePageRange2 = n.parseULong()), 2 <= r.version && (r.sxHeight = n.parseShort(), r.sCapHeight = n.parseShort(), r.usDefaultChar = n.parseUShort(), r.usBreakChar = n.parseUShort(), r.usMaxContent = n.parseUShort()), r;
            },
            make: function (e) {
              return new $.Table("OS/2", [{
                name: "version",
                type: "USHORT",
                value: 3
              }, {
                name: "xAvgCharWidth",
                type: "SHORT",
                value: 0
              }, {
                name: "usWeightClass",
                type: "USHORT",
                value: 0
              }, {
                name: "usWidthClass",
                type: "USHORT",
                value: 0
              }, {
                name: "fsType",
                type: "USHORT",
                value: 0
              }, {
                name: "ySubscriptXSize",
                type: "SHORT",
                value: 650
              }, {
                name: "ySubscriptYSize",
                type: "SHORT",
                value: 699
              }, {
                name: "ySubscriptXOffset",
                type: "SHORT",
                value: 0
              }, {
                name: "ySubscriptYOffset",
                type: "SHORT",
                value: 140
              }, {
                name: "ySuperscriptXSize",
                type: "SHORT",
                value: 650
              }, {
                name: "ySuperscriptYSize",
                type: "SHORT",
                value: 699
              }, {
                name: "ySuperscriptXOffset",
                type: "SHORT",
                value: 0
              }, {
                name: "ySuperscriptYOffset",
                type: "SHORT",
                value: 479
              }, {
                name: "yStrikeoutSize",
                type: "SHORT",
                value: 49
              }, {
                name: "yStrikeoutPosition",
                type: "SHORT",
                value: 258
              }, {
                name: "sFamilyClass",
                type: "SHORT",
                value: 0
              }, {
                name: "bFamilyType",
                type: "BYTE",
                value: 0
              }, {
                name: "bSerifStyle",
                type: "BYTE",
                value: 0
              }, {
                name: "bWeight",
                type: "BYTE",
                value: 0
              }, {
                name: "bProportion",
                type: "BYTE",
                value: 0
              }, {
                name: "bContrast",
                type: "BYTE",
                value: 0
              }, {
                name: "bStrokeVariation",
                type: "BYTE",
                value: 0
              }, {
                name: "bArmStyle",
                type: "BYTE",
                value: 0
              }, {
                name: "bLetterform",
                type: "BYTE",
                value: 0
              }, {
                name: "bMidline",
                type: "BYTE",
                value: 0
              }, {
                name: "bXHeight",
                type: "BYTE",
                value: 0
              }, {
                name: "ulUnicodeRange1",
                type: "ULONG",
                value: 0
              }, {
                name: "ulUnicodeRange2",
                type: "ULONG",
                value: 0
              }, {
                name: "ulUnicodeRange3",
                type: "ULONG",
                value: 0
              }, {
                name: "ulUnicodeRange4",
                type: "ULONG",
                value: 0
              }, {
                name: "achVendID",
                type: "CHARARRAY",
                value: "XXXX"
              }, {
                name: "fsSelection",
                type: "USHORT",
                value: 0
              }, {
                name: "usFirstCharIndex",
                type: "USHORT",
                value: 0
              }, {
                name: "usLastCharIndex",
                type: "USHORT",
                value: 0
              }, {
                name: "sTypoAscender",
                type: "SHORT",
                value: 0
              }, {
                name: "sTypoDescender",
                type: "SHORT",
                value: 0
              }, {
                name: "sTypoLineGap",
                type: "SHORT",
                value: 0
              }, {
                name: "usWinAscent",
                type: "USHORT",
                value: 0
              }, {
                name: "usWinDescent",
                type: "USHORT",
                value: 0
              }, {
                name: "ulCodePageRange1",
                type: "ULONG",
                value: 0
              }, {
                name: "ulCodePageRange2",
                type: "ULONG",
                value: 0
              }, {
                name: "sxHeight",
                type: "SHORT",
                value: 0
              }, {
                name: "sCapHeight",
                type: "SHORT",
                value: 0
              }, {
                name: "usDefaultChar",
                type: "USHORT",
                value: 0
              }, {
                name: "usBreakChar",
                type: "USHORT",
                value: 0
              }, {
                name: "usMaxContext",
                type: "USHORT",
                value: 0
              }], e);
            },
            unicodeRanges: at,
            getUnicodeRange: function (e) {
              for (var t = 0; t < at.length; t += 1) {
                var r = at[t];
                if (e >= r.begin && e < r.end) return t;
              }

              return -1;
            }
          };
          var it = {
            parse: function (e, t) {
              var r = {},
                  n = new se.Parser(e, t);

              switch (r.version = n.parseVersion(), r.italicAngle = n.parseFixed(), r.underlinePosition = n.parseShort(), r.underlineThickness = n.parseShort(), r.isFixedPitch = n.parseULong(), r.minMemType42 = n.parseULong(), r.maxMemType42 = n.parseULong(), r.minMemType1 = n.parseULong(), r.maxMemType1 = n.parseULong(), r.version) {
                case 1:
                  r.names = de.slice();
                  break;

                case 2:
                  r.numberOfGlyphs = n.parseUShort(), r.glyphNameIndex = new Array(r.numberOfGlyphs);

                  for (var a = 0; a < r.numberOfGlyphs; a++) r.glyphNameIndex[a] = n.parseUShort();

                  r.names = [];

                  for (var o = 0; o < r.numberOfGlyphs; o++) if (r.glyphNameIndex[o] >= de.length) {
                    var i = n.parseChar();
                    r.names.push(n.parseString(i));
                  }

                  break;

                case 2.5:
                  r.numberOfGlyphs = n.parseUShort(), r.offset = new Array(r.numberOfGlyphs);

                  for (var s = 0; s < r.numberOfGlyphs; s++) r.offset[s] = n.parseChar();

              }

              return r;
            },
            make: function () {
              return new $.Table("post", [{
                name: "version",
                type: "FIXED",
                value: 196608
              }, {
                name: "italicAngle",
                type: "FIXED",
                value: 0
              }, {
                name: "underlinePosition",
                type: "FWORD",
                value: 0
              }, {
                name: "underlineThickness",
                type: "FWORD",
                value: 0
              }, {
                name: "isFixedPitch",
                type: "ULONG",
                value: 0
              }, {
                name: "minMemType42",
                type: "ULONG",
                value: 0
              }, {
                name: "maxMemType42",
                type: "ULONG",
                value: 0
              }, {
                name: "minMemType1",
                type: "ULONG",
                value: 0
              }, {
                name: "maxMemType1",
                type: "ULONG",
                value: 0
              }]);
            }
          },
              st = new Array(9);
          st[1] = function () {
            var e = this.offset + this.relativeOffset,
                t = this.parseUShort();
            return 1 === t ? {
              substFormat: 1,
              coverage: this.parsePointer(oe.coverage),
              deltaGlyphId: this.parseUShort()
            } : 2 === t ? {
              substFormat: 2,
              coverage: this.parsePointer(oe.coverage),
              substitute: this.parseOffset16List()
            } : void L.assert(!1, "0x" + e.toString(16) + ": lookup type 1 format must be 1 or 2.");
          }, st[2] = function () {
            var e = this.parseUShort();
            return L.argument(1 === e, "GSUB Multiple Substitution Subtable identifier-format must be 1"), {
              substFormat: e,
              coverage: this.parsePointer(oe.coverage),
              sequences: this.parseListOfLists()
            };
          }, st[3] = function () {
            var e = this.parseUShort();
            return L.argument(1 === e, "GSUB Alternate Substitution Subtable identifier-format must be 1"), {
              substFormat: e,
              coverage: this.parsePointer(oe.coverage),
              alternateSets: this.parseListOfLists()
            };
          }, st[4] = function () {
            var e = this.parseUShort();
            return L.argument(1 === e, "GSUB ligature table identifier-format must be 1"), {
              substFormat: e,
              coverage: this.parsePointer(oe.coverage),
              ligatureSets: this.parseListOfLists(function () {
                return {
                  ligGlyph: this.parseUShort(),
                  components: this.parseUShortList(this.parseUShort() - 1)
                };
              })
            };
          };
          var lt = {
            sequenceIndex: oe.uShort,
            lookupListIndex: oe.uShort
          };
          st[5] = function () {
            var e = this.offset + this.relativeOffset,
                t = this.parseUShort();
            if (1 === t) return {
              substFormat: t,
              coverage: this.parsePointer(oe.coverage),
              ruleSets: this.parseListOfLists(function () {
                var e = this.parseUShort(),
                    t = this.parseUShort();
                return {
                  input: this.parseUShortList(e - 1),
                  lookupRecords: this.parseRecordList(t, lt)
                };
              })
            };
            if (2 === t) return {
              substFormat: t,
              coverage: this.parsePointer(oe.coverage),
              classDef: this.parsePointer(oe.classDef),
              classSets: this.parseListOfLists(function () {
                var e = this.parseUShort(),
                    t = this.parseUShort();
                return {
                  classes: this.parseUShortList(e - 1),
                  lookupRecords: this.parseRecordList(t, lt)
                };
              })
            };

            if (3 === t) {
              var r = this.parseUShort(),
                  n = this.parseUShort();
              return {
                substFormat: t,
                coverages: this.parseList(r, oe.pointer(oe.coverage)),
                lookupRecords: this.parseRecordList(n, lt)
              };
            }

            L.assert(!1, "0x" + e.toString(16) + ": lookup type 5 format must be 1, 2 or 3.");
          }, st[6] = function () {
            var e = this.offset + this.relativeOffset,
                t = this.parseUShort();
            return 1 === t ? {
              substFormat: 1,
              coverage: this.parsePointer(oe.coverage),
              chainRuleSets: this.parseListOfLists(function () {
                return {
                  backtrack: this.parseUShortList(),
                  input: this.parseUShortList(this.parseShort() - 1),
                  lookahead: this.parseUShortList(),
                  lookupRecords: this.parseRecordList(lt)
                };
              })
            } : 2 === t ? {
              substFormat: 2,
              coverage: this.parsePointer(oe.coverage),
              backtrackClassDef: this.parsePointer(oe.classDef),
              inputClassDef: this.parsePointer(oe.classDef),
              lookaheadClassDef: this.parsePointer(oe.classDef),
              chainClassSet: this.parseListOfLists(function () {
                return {
                  backtrack: this.parseUShortList(),
                  input: this.parseUShortList(this.parseShort() - 1),
                  lookahead: this.parseUShortList(),
                  lookupRecords: this.parseRecordList(lt)
                };
              })
            } : 3 === t ? {
              substFormat: 3,
              backtrackCoverage: this.parseList(oe.pointer(oe.coverage)),
              inputCoverage: this.parseList(oe.pointer(oe.coverage)),
              lookaheadCoverage: this.parseList(oe.pointer(oe.coverage)),
              lookupRecords: this.parseRecordList(lt)
            } : void L.assert(!1, "0x" + e.toString(16) + ": lookup type 6 format must be 1, 2 or 3.");
          }, st[7] = function () {
            var e = this.parseUShort();
            L.argument(1 === e, "GSUB Extension Substitution subtable identifier-format must be 1");
            var t = this.parseUShort(),
                r = new oe(this.data, this.offset + this.parseULong());
            return {
              substFormat: 1,
              lookupType: t,
              extension: st[t].call(r)
            };
          }, st[8] = function () {
            var e = this.parseUShort();
            return L.argument(1 === e, "GSUB Reverse Chaining Contextual Single Substitution Subtable identifier-format must be 1"), {
              substFormat: e,
              coverage: this.parsePointer(oe.coverage),
              backtrackCoverage: this.parseList(oe.pointer(oe.coverage)),
              lookaheadCoverage: this.parseList(oe.pointer(oe.coverage)),
              substitutes: this.parseUShortList()
            };
          };
          var pt = new Array(9);
          pt[1] = function (e) {
            return 1 === e.substFormat ? new $.Table("substitutionTable", [{
              name: "substFormat",
              type: "USHORT",
              value: 1
            }, {
              name: "coverage",
              type: "TABLE",
              value: new $.Coverage(e.coverage)
            }, {
              name: "deltaGlyphID",
              type: "USHORT",
              value: e.deltaGlyphId
            }]) : new $.Table("substitutionTable", [{
              name: "substFormat",
              type: "USHORT",
              value: 2
            }, {
              name: "coverage",
              type: "TABLE",
              value: new $.Coverage(e.coverage)
            }].concat($.ushortList("substitute", e.substitute)));
          }, pt[3] = function (e) {
            return L.assert(1 === e.substFormat, "Lookup type 3 substFormat must be 1."), new $.Table("substitutionTable", [{
              name: "substFormat",
              type: "USHORT",
              value: 1
            }, {
              name: "coverage",
              type: "TABLE",
              value: new $.Coverage(e.coverage)
            }].concat($.tableList("altSet", e.alternateSets, function (e) {
              return new $.Table("alternateSetTable", $.ushortList("alternate", e));
            })));
          }, pt[4] = function (e) {
            return L.assert(1 === e.substFormat, "Lookup type 4 substFormat must be 1."), new $.Table("substitutionTable", [{
              name: "substFormat",
              type: "USHORT",
              value: 1
            }, {
              name: "coverage",
              type: "TABLE",
              value: new $.Coverage(e.coverage)
            }].concat($.tableList("ligSet", e.ligatureSets, function (e) {
              return new $.Table("ligatureSetTable", $.tableList("ligature", e, function (e) {
                return new $.Table("ligatureTable", [{
                  name: "ligGlyph",
                  type: "USHORT",
                  value: e.ligGlyph
                }].concat($.ushortList("component", e.components, e.components.length + 1)));
              }));
            })));
          };
          var ut = {
            parse: function (e, t) {
              var r = new oe(e, t = t || 0),
                  n = r.parseVersion(1);
              return L.argument(1 === n || 1.1 === n, "Unsupported GSUB table version."), 1 === n ? {
                version: n,
                scripts: r.parseScriptList(),
                features: r.parseFeatureList(),
                lookups: r.parseLookupList(st)
              } : {
                version: n,
                scripts: r.parseScriptList(),
                features: r.parseFeatureList(),
                lookups: r.parseLookupList(st),
                variations: r.parseFeatureVariationsList()
              };
            },
            make: function (e) {
              return new $.Table("GSUB", [{
                name: "version",
                type: "ULONG",
                value: 65536
              }, {
                name: "scripts",
                type: "TABLE",
                value: new $.ScriptList(e.scripts)
              }, {
                name: "features",
                type: "TABLE",
                value: new $.FeatureList(e.features)
              }, {
                name: "lookups",
                type: "TABLE",
                value: new $.LookupList(e.lookups, pt)
              }]);
            }
          };
          var ct = {
            parse: function (e, t) {
              var r = new se.Parser(e, t),
                  n = r.parseULong();
              L.argument(1 === n, "Unsupported META table version."), r.parseULong(), r.parseULong();

              for (var a = r.parseULong(), o = {}, i = 0; i < a; i++) {
                var s = r.parseTag(),
                    l = r.parseULong(),
                    p = r.parseULong(),
                    u = P.UTF8(e, t + l, p);
                o[s] = u;
              }

              return o;
            },
            make: function (e) {
              var t = Object.keys(e).length,
                  r = "",
                  n = 16 + 12 * t,
                  a = new $.Table("meta", [{
                name: "version",
                type: "ULONG",
                value: 1
              }, {
                name: "flags",
                type: "ULONG",
                value: 0
              }, {
                name: "offset",
                type: "ULONG",
                value: n
              }, {
                name: "numTags",
                type: "ULONG",
                value: t
              }]);

              for (var o in e) {
                var i = r.length;
                r += e[o], a.fields.push({
                  name: "tag " + o,
                  type: "TAG",
                  value: o
                }), a.fields.push({
                  name: "offset " + o,
                  type: "ULONG",
                  value: n + i
                }), a.fields.push({
                  name: "length " + o,
                  type: "ULONG",
                  value: e[o].length
                });
              }

              return a.fields.push({
                name: "stringPool",
                type: "CHARARRAY",
                value: r
              }), a;
            }
          };

          function dt(e) {
            return Math.log(e) / Math.log(2) | 0;
          }

          function ht(e) {
            for (; e.length % 4 != 0;) e.push(0);

            for (var t = 0, r = 0; r < e.length; r += 4) t += (e[r] << 24) + (e[r + 1] << 16) + (e[r + 2] << 8) + e[r + 3];

            return t %= Math.pow(2, 32);
          }

          function mt(e, t, r, n) {
            return new $.Record("Table Record", [{
              name: "tag",
              type: "TAG",
              value: void 0 !== e ? e : ""
            }, {
              name: "checkSum",
              type: "ULONG",
              value: void 0 !== t ? t : 0
            }, {
              name: "offset",
              type: "ULONG",
              value: void 0 !== r ? r : 0
            }, {
              name: "length",
              type: "ULONG",
              value: void 0 !== n ? n : 0
            }]);
          }

          function ft(e) {
            var t = new $.Table("sfnt", [{
              name: "version",
              type: "TAG",
              value: "OTTO"
            }, {
              name: "numTables",
              type: "USHORT",
              value: 0
            }, {
              name: "searchRange",
              type: "USHORT",
              value: 0
            }, {
              name: "entrySelector",
              type: "USHORT",
              value: 0
            }, {
              name: "rangeShift",
              type: "USHORT",
              value: 0
            }]);
            t.tables = e, t.numTables = e.length;
            var r = Math.pow(2, dt(t.numTables));
            t.searchRange = 16 * r, t.entrySelector = dt(r), t.rangeShift = 16 * t.numTables - t.searchRange;

            for (var n = [], a = [], o = t.sizeOf() + mt().sizeOf() * t.numTables; o % 4 != 0;) o += 1, a.push({
              name: "padding",
              type: "BYTE",
              value: 0
            });

            for (var i = 0; i < e.length; i += 1) {
              var s = e[i];
              L.argument(4 === s.tableName.length, "Table name" + s.tableName + " is invalid.");
              var l = s.sizeOf(),
                  p = mt(s.tableName, ht(s.encode()), o, l);

              for (n.push({
                name: p.tag + " Table Record",
                type: "RECORD",
                value: p
              }), a.push({
                name: s.tableName + " table",
                type: "RECORD",
                value: s
              }), o += l, L.argument(!isNaN(o), "Something went wrong calculating the offset."); o % 4 != 0;) o += 1, a.push({
                name: "padding",
                type: "BYTE",
                value: 0
              });
            }

            return n.sort(function (e, t) {
              return e.value.tag > t.value.tag ? 1 : -1;
            }), t.fields = t.fields.concat(n), t.fields = t.fields.concat(a), t;
          }

          function yt(e, t, r) {
            for (var n = 0; n < t.length; n += 1) {
              var a = e.charToGlyphIndex(t[n]);
              if (0 < a) return e.glyphs.get(a).getMetrics();
            }

            return r;
          }

          var gt = {
            make: ft,
            fontToTable: function (e) {
              for (var t, r = [], n = [], a = [], o = [], i = [], s = [], l = [], p = 0, u = 0, c = 0, d = 0, h = 0, m = 0; m < e.glyphs.length; m += 1) {
                var f = e.glyphs.get(m),
                    y = 0 | f.unicode;
                if (isNaN(f.advanceWidth)) throw new Error("Glyph " + f.name + " (" + m + "): advanceWidth is not a number.");
                (y < t || void 0 === t) && 0 < y && (t = y), p < y && (p = y);
                var g = ot.getUnicodeRange(y);
                if (g < 32) u |= 1 << g;else if (g < 64) c |= 1 << g - 32;else if (g < 96) d |= 1 << g - 64;else {
                  if (!(g < 123)) throw new Error("Unicode ranges bits > 123 are reserved for internal usage");
                  h |= 1 << g - 96;
                }

                if (".notdef" !== f.name) {
                  var v = f.getMetrics();
                  r.push(v.xMin), n.push(v.yMin), a.push(v.xMax), o.push(v.yMax), s.push(v.leftSideBearing), l.push(v.rightSideBearing), i.push(f.advanceWidth);
                }
              }

              var b = {
                xMin: Math.min.apply(null, r),
                yMin: Math.min.apply(null, n),
                xMax: Math.max.apply(null, a),
                yMax: Math.max.apply(null, o),
                advanceWidthMax: Math.max.apply(null, i),
                advanceWidthAvg: function (e) {
                  for (var t = 0, r = 0; r < e.length; r += 1) t += e[r];

                  return t / e.length;
                }(i),
                minLeftSideBearing: Math.min.apply(null, s),
                maxLeftSideBearing: Math.max.apply(null, s),
                minRightSideBearing: Math.min.apply(null, l)
              };
              b.ascender = e.ascender, b.descender = e.descender;

              var _ = Ge.make({
                flags: 3,
                unitsPerEm: e.unitsPerEm,
                xMin: b.xMin,
                yMin: b.yMin,
                xMax: b.xMax,
                yMax: b.yMax,
                lowestRecPPEM: 3,
                createdTimestamp: e.createdTimestamp
              }),
                  x = je.make({
                ascender: b.ascender,
                descender: b.descender,
                advanceWidthMax: b.advanceWidthMax,
                minLeftSideBearing: b.minLeftSideBearing,
                minRightSideBearing: b.minRightSideBearing,
                xMaxExtent: b.maxLeftSideBearing + (b.xMax - b.xMin),
                numberOfHMetrics: e.glyphs.length
              }),
                  S = He.make(e.glyphs.length),
                  w = ot.make({
                xAvgCharWidth: Math.round(b.advanceWidthAvg),
                usWeightClass: e.tables.os2.usWeightClass,
                usWidthClass: e.tables.os2.usWidthClass,
                usFirstCharIndex: t,
                usLastCharIndex: p,
                ulUnicodeRange1: u,
                ulUnicodeRange2: c,
                ulUnicodeRange3: d,
                ulUnicodeRange4: h,
                fsSelection: e.tables.os2.fsSelection,
                sTypoAscender: b.ascender,
                sTypoDescender: b.descender,
                sTypoLineGap: 0,
                usWinAscent: b.yMax,
                usWinDescent: Math.abs(b.yMin),
                ulCodePageRange1: 1,
                sxHeight: yt(e, "xyvw", {
                  yMax: Math.round(b.ascender / 2)
                }).yMax,
                sCapHeight: yt(e, "HIKLEFJMNTZBDPRAGOQSUVWXY", b).yMax,
                usDefaultChar: e.hasChar(" ") ? 32 : 0,
                usBreakChar: e.hasChar(" ") ? 32 : 0
              }),
                  M = Ve.make(e.glyphs),
                  E = le.make(e.glyphs),
                  T = e.getEnglishName("fontFamily"),
                  C = e.getEnglishName("fontSubfamily"),
                  N = T + " " + C,
                  O = e.getEnglishName("postScriptName");

              O = O || T.replace(/\s/g, "") + "-" + C;
              var L = {};

              for (var I in e.names) L[I] = e.names[I];

              L.uniqueID || (L.uniqueID = {
                en: e.getEnglishName("manufacturer") + ":" + N
              }), L.postScriptName || (L.postScriptName = {
                en: O
              }), L.preferredFamily || (L.preferredFamily = e.names.fontFamily), L.preferredSubfamily || (L.preferredSubfamily = e.names.fontSubfamily);
              var P = [],
                  R = nt.make(L, P),
                  D = 0 < P.length ? ze.make(P) : void 0,
                  A = it.make(),
                  k = Be.make(e.glyphs, {
                version: e.getEnglishName("version"),
                fullName: N,
                familyName: T,
                weightName: C,
                postScriptName: O,
                unitsPerEm: e.unitsPerEm,
                fontBBox: [0, b.yMin, b.ascender, b.advanceWidthMax]
              }),
                  F = e.metas && 0 < Object.keys(e.metas).length ? ct.make(e.metas) : void 0,
                  U = [_, x, S, w, R, E, A, k, M];
              D && U.push(D), e.tables.gsub && U.push(ut.make(e.tables.gsub)), F && U.push(F);

              for (var B = ft(U), G = ht(B.encode()), j = B.fields, V = !1, z = 0; z < j.length; z += 1) if ("head table" === j[z].name) {
                j[z].value.checkSumAdjustment = 2981146554 - G, V = !0;
                break;
              }

              if (!V) throw new Error("Could not find head table with checkSum to adjust.");
              return B;
            },
            computeCheckSum: ht
          };

          function vt(e, t) {
            for (var r = 0, n = e.length - 1; r <= n;) {
              var a = r + n >>> 1,
                  o = e[a].tag;
              if (o === t) return a;
              o < t ? r = 1 + a : n = a - 1;
            }

            return -r - 1;
          }

          function bt(e, t) {
            for (var r = 0, n = e.length - 1; r <= n;) {
              var a = r + n >>> 1,
                  o = e[a];
              if (o === t) return a;
              o < t ? r = 1 + a : n = a - 1;
            }

            return -r - 1;
          }

          function _t(e, t) {
            for (var r, n = 0, a = e.length - 1; n <= a;) {
              var o = n + a >>> 1,
                  i = (r = e[o]).start;
              if (i === t) return r;
              i < t ? n = 1 + o : a = o - 1;
            }

            if (0 < n) return t > (r = e[n - 1]).end ? 0 : r;
          }

          function xt(e, t) {
            this.font = e, this.tableName = t;
          }

          function St(e) {
            xt.call(this, e, "gpos");
          }

          function wt(e) {
            xt.call(this, e, "gsub");
          }

          function Mt(e, t) {
            var r = e.length;
            if (r !== t.length) return !1;

            for (var n = 0; n < r; n++) if (e[n] !== t[n]) return !1;

            return !0;
          }

          function Et(e, t, r) {
            for (var n = e.subtables, a = 0; a < n.length; a++) {
              var o = n[a];
              if (o.substFormat === t) return o;
            }

            if (r) return n.push(r), r;
          }

          function Tt(e) {
            for (var t = new ArrayBuffer(e.length), r = new Uint8Array(t), n = 0; n < e.length; ++n) r[n] = e[n];

            return t;
          }

          function Ct(e, t) {
            if (!e) throw t;
          }

          function Nt(e, t, r, n, a) {
            var o;
            return o = 0 < (t & n) ? (o = e.parseByte(), 0 == (t & a) && (o = -o), r + o) : 0 < (t & a) ? r : r + e.parseShort();
          }

          function Ot(e, t, r) {
            var n,
                a,
                o = new se.Parser(t, r);

            if (e.numberOfContours = o.parseShort(), e._xMin = o.parseShort(), e._yMin = o.parseShort(), e._xMax = o.parseShort(), e._yMax = o.parseShort(), 0 < e.numberOfContours) {
              for (var i = e.endPointIndices = [], s = 0; s < e.numberOfContours; s += 1) i.push(o.parseUShort());

              e.instructionLength = o.parseUShort(), e.instructions = [];

              for (var l = 0; l < e.instructionLength; l += 1) e.instructions.push(o.parseByte());

              var p = i[i.length - 1] + 1;
              n = [];

              for (var u = 0; u < p; u += 1) if (a = o.parseByte(), n.push(a), 0 < (8 & a)) for (var c = o.parseByte(), d = 0; d < c; d += 1) n.push(a), u += 1;

              if (L.argument(n.length === p, "Bad flags."), 0 < i.length) {
                var h,
                    m = [];

                if (0 < p) {
                  for (var f = 0; f < p; f += 1) a = n[f], (h = {}).onCurve = !!(1 & a), h.lastPointOfContour = 0 <= i.indexOf(f), m.push(h);

                  for (var y = 0, g = 0; g < p; g += 1) a = n[g], (h = m[g]).x = Nt(o, a, y, 2, 16), y = h.x;

                  for (var v = 0, b = 0; b < p; b += 1) a = n[b], (h = m[b]).y = Nt(o, a, v, 4, 32), v = h.y;
                }

                e.points = m;
              } else e.points = [];
            } else if (0 === e.numberOfContours) e.points = [];else {
              e.isComposite = !0, e.points = [], e.components = [];

              for (var _ = !0; _;) {
                n = o.parseUShort();
                var x = {
                  glyphIndex: o.parseUShort(),
                  xScale: 1,
                  scale01: 0,
                  scale10: 0,
                  yScale: 1,
                  dx: 0,
                  dy: 0
                };
                0 < (1 & n) ? 0 < (2 & n) ? (x.dx = o.parseShort(), x.dy = o.parseShort()) : x.matchedPoints = [o.parseUShort(), o.parseUShort()] : 0 < (2 & n) ? (x.dx = o.parseChar(), x.dy = o.parseChar()) : x.matchedPoints = [o.parseByte(), o.parseByte()], 0 < (8 & n) ? x.xScale = x.yScale = o.parseF2Dot14() : 0 < (64 & n) ? (x.xScale = o.parseF2Dot14(), x.yScale = o.parseF2Dot14()) : 0 < (128 & n) && (x.xScale = o.parseF2Dot14(), x.scale01 = o.parseF2Dot14(), x.scale10 = o.parseF2Dot14(), x.yScale = o.parseF2Dot14()), e.components.push(x), _ = !!(32 & n);
              }

              if (256 & n) {
                e.instructionLength = o.parseUShort(), e.instructions = [];

                for (var S = 0; S < e.instructionLength; S += 1) e.instructions.push(o.parseByte());
              }
            }
          }

          function Lt(e, t) {
            for (var r = [], n = 0; n < e.length; n += 1) {
              var a = e[n],
                  o = {
                x: t.xScale * a.x + t.scale01 * a.y + t.dx,
                y: t.scale10 * a.x + t.yScale * a.y + t.dy,
                onCurve: a.onCurve,
                lastPointOfContour: a.lastPointOfContour
              };
              r.push(o);
            }

            return r;
          }

          function It(e) {
            var t = new A();
            if (!e) return t;

            for (var r = function (e) {
              for (var t = [], r = [], n = 0; n < e.length; n += 1) {
                var a = e[n];
                r.push(a), a.lastPointOfContour && (t.push(r), r = []);
              }

              return L.argument(0 === r.length, "There are still points left in the current contour."), t;
            }(e), n = 0; n < r.length; ++n) {
              var a = r[n],
                  o = null,
                  i = a[a.length - 1],
                  s = a[0];
              if (i.onCurve) t.moveTo(i.x, i.y);else if (s.onCurve) t.moveTo(s.x, s.y);else {
                var l = {
                  x: .5 * (i.x + s.x),
                  y: .5 * (i.y + s.y)
                };
                t.moveTo(l.x, l.y);
              }

              for (var p = 0; p < a.length; ++p) if (o = i, i = s, s = a[(p + 1) % a.length], i.onCurve) t.lineTo(i.x, i.y);else {
                var u = s;
                o.onCurve || {
                  x: .5 * (i.x + o.x),
                  y: .5 * (i.y + o.y)
                }, s.onCurve || (u = {
                  x: .5 * (i.x + s.x),
                  y: .5 * (i.y + s.y)
                }), t.quadraticCurveTo(i.x, i.y, u.x, u.y);
              }

              t.closePath();
            }

            return t;
          }

          function Pt(e, t) {
            if (t.isComposite) for (var r = 0; r < t.components.length; r += 1) {
              var n = t.components[r],
                  a = e.get(n.glyphIndex);

              if (a.getPath(), a.points) {
                var o = void 0;
                if (void 0 === n.matchedPoints) o = Lt(a.points, n);else {
                  if (n.matchedPoints[0] > t.points.length - 1 || n.matchedPoints[1] > a.points.length - 1) throw Error("Matched points out of range in " + t.name);
                  var i = t.points[n.matchedPoints[0]],
                      s = a.points[n.matchedPoints[1]],
                      l = {
                    xScale: n.xScale,
                    scale01: n.scale01,
                    scale10: n.scale10,
                    yScale: n.yScale,
                    dx: 0,
                    dy: 0
                  };
                  s = Lt([s], l)[0], l.dx = i.x - s.x, l.dy = i.y - s.y, o = Lt(a.points, l);
                }
                t.points = t.points.concat(o);
              }
            }
            return It(t.points);
          }

          (St.prototype = xt.prototype = {
            searchTag: vt,
            binSearch: bt,
            getTable: function (e) {
              var t = this.font.tables[this.tableName];
              return !t && e && (t = this.font.tables[this.tableName] = this.createDefaultTable()), t;
            },
            getScriptNames: function () {
              var e = this.getTable();
              return e ? e.scripts.map(function (e) {
                return e.tag;
              }) : [];
            },
            getDefaultScriptName: function () {
              var e = this.getTable();

              if (e) {
                for (var t = !1, r = 0; r < e.scripts.length; r++) {
                  var n = e.scripts[r].tag;
                  if ("DFLT" === n) return n;
                  "latn" === n && (t = !0);
                }

                return t ? "latn" : void 0;
              }
            },
            getScriptTable: function (e, t) {
              var r = this.getTable(t);

              if (r) {
                e = e || "DFLT";
                var n = r.scripts,
                    a = vt(r.scripts, e);
                if (0 <= a) return n[a].script;

                if (t) {
                  var o = {
                    tag: e,
                    script: {
                      defaultLangSys: {
                        reserved: 0,
                        reqFeatureIndex: 65535,
                        featureIndexes: []
                      },
                      langSysRecords: []
                    }
                  };
                  return n.splice(-1 - a, 0, o), o.script;
                }
              }
            },
            getLangSysTable: function (e, t, r) {
              var n = this.getScriptTable(e, r);

              if (n) {
                if (!t || "dflt" === t || "DFLT" === t) return n.defaultLangSys;
                var a = vt(n.langSysRecords, t);
                if (0 <= a) return n.langSysRecords[a].langSys;

                if (r) {
                  var o = {
                    tag: t,
                    langSys: {
                      reserved: 0,
                      reqFeatureIndex: 65535,
                      featureIndexes: []
                    }
                  };
                  return n.langSysRecords.splice(-1 - a, 0, o), o.langSys;
                }
              }
            },
            getFeatureTable: function (e, t, r, n) {
              var a = this.getLangSysTable(e, t, n);

              if (a) {
                for (var o, i = a.featureIndexes, s = this.font.tables[this.tableName].features, l = 0; l < i.length; l++) if ((o = s[i[l]]).tag === r) return o.feature;

                if (n) {
                  var p = s.length;
                  return L.assert(0 === p || r >= s[p - 1].tag, "Features must be added in alphabetical order."), o = {
                    tag: r,
                    feature: {
                      params: 0,
                      lookupListIndexes: []
                    }
                  }, s.push(o), i.push(p), o.feature;
                }
              }
            },
            getLookupTables: function (e, t, r, n, a) {
              var o = this.getFeatureTable(e, t, r, a),
                  i = [];

              if (o) {
                for (var s, l = o.lookupListIndexes, p = this.font.tables[this.tableName].lookups, u = 0; u < l.length; u++) (s = p[l[u]]).lookupType === n && i.push(s);

                if (0 === i.length && a) {
                  s = {
                    lookupType: n,
                    lookupFlag: 0,
                    subtables: [],
                    markFilteringSet: void 0
                  };
                  var c = p.length;
                  return p.push(s), l.push(c), [s];
                }
              }

              return i;
            },
            getGlyphClass: function (e, t) {
              switch (e.format) {
                case 1:
                  return e.startGlyph <= t && t < e.startGlyph + e.classes.length ? e.classes[t - e.startGlyph] : 0;

                case 2:
                  var r = _t(e.ranges, t);

                  return r ? r.classId : 0;
              }
            },
            getCoverageIndex: function (e, t) {
              switch (e.format) {
                case 1:
                  var r = bt(e.glyphs, t);
                  return 0 <= r ? r : -1;

                case 2:
                  var n = _t(e.ranges, t);

                  return n ? n.index + t - n.start : -1;
              }
            },
            expandCoverage: function (e) {
              if (1 === e.format) return e.glyphs;

              for (var t = [], r = e.ranges, n = 0; n < r.length; n++) for (var a = r[n], o = a.start, i = a.end, s = o; s <= i; s++) t.push(s);

              return t;
            }
          }).init = function () {
            var e = this.getDefaultScriptName();
            this.defaultKerningTables = this.getKerningTables(e);
          }, St.prototype.getKerningValue = function (e, t, r) {
            for (var n = 0; n < e.length; n++) for (var a = e[n].subtables, o = 0; o < a.length; o++) {
              var i = a[o],
                  s = this.getCoverageIndex(i.coverage, t);
              if (!(s < 0)) switch (i.posFormat) {
                case 1:
                  for (var l = i.pairSets[s], p = 0; p < l.length; p++) {
                    var u = l[p];
                    if (u.secondGlyph === r) return u.value1 && u.value1.xAdvance || 0;
                  }

                  break;

                case 2:
                  var c = this.getGlyphClass(i.classDef1, t),
                      d = this.getGlyphClass(i.classDef2, r),
                      h = i.classRecords[c][d];
                  return h.value1 && h.value1.xAdvance || 0;
              }
            }

            return 0;
          }, St.prototype.getKerningTables = function (e, t) {
            if (this.font.tables.gpos) return this.getLookupTables(e, t, "kern", 2);
          }, (wt.prototype = xt.prototype).createDefaultTable = function () {
            return {
              version: 1,
              scripts: [{
                tag: "DFLT",
                script: {
                  defaultLangSys: {
                    reserved: 0,
                    reqFeatureIndex: 65535,
                    featureIndexes: []
                  },
                  langSysRecords: []
                }
              }],
              features: [],
              lookups: []
            };
          }, wt.prototype.getSingle = function (e, t, r) {
            for (var n = [], a = this.getLookupTables(t, r, e, 1), o = 0; o < a.length; o++) for (var i = a[o].subtables, s = 0; s < i.length; s++) {
              var l = i[s],
                  p = this.expandCoverage(l.coverage),
                  u = void 0;

              if (1 === l.substFormat) {
                var c = l.deltaGlyphId;

                for (u = 0; u < p.length; u++) {
                  var d = p[u];
                  n.push({
                    sub: d,
                    by: d + c
                  });
                }
              } else {
                var h = l.substitute;

                for (u = 0; u < p.length; u++) n.push({
                  sub: p[u],
                  by: h[u]
                });
              }
            }

            return n;
          }, wt.prototype.getAlternates = function (e, t, r) {
            for (var n = [], a = this.getLookupTables(t, r, e, 3), o = 0; o < a.length; o++) for (var i = a[o].subtables, s = 0; s < i.length; s++) for (var l = i[s], p = this.expandCoverage(l.coverage), u = l.alternateSets, c = 0; c < p.length; c++) n.push({
              sub: p[c],
              by: u[c]
            });

            return n;
          }, wt.prototype.getLigatures = function (e, t, r) {
            for (var n = [], a = this.getLookupTables(t, r, e, 4), o = 0; o < a.length; o++) for (var i = a[o].subtables, s = 0; s < i.length; s++) for (var l = i[s], p = this.expandCoverage(l.coverage), u = l.ligatureSets, c = 0; c < p.length; c++) for (var d = p[c], h = u[c], m = 0; m < h.length; m++) {
              var f = h[m];
              n.push({
                sub: [d].concat(f.components),
                by: f.ligGlyph
              });
            }

            return n;
          }, wt.prototype.addSingle = function (e, t, r, n) {
            var a = Et(this.getLookupTables(r, n, e, 1, !0)[0], 2, {
              substFormat: 2,
              coverage: {
                format: 1,
                glyphs: []
              },
              substitute: []
            });
            L.assert(1 === a.coverage.format, "Ligature: unable to modify coverage table format " + a.coverage.format);
            var o = t.sub,
                i = this.binSearch(a.coverage.glyphs, o);
            i < 0 && (i = -1 - i, a.coverage.glyphs.splice(i, 0, o), a.substitute.splice(i, 0, 0)), a.substitute[i] = t.by;
          }, wt.prototype.addAlternate = function (e, t, r, n) {
            var a = Et(this.getLookupTables(r, n, e, 3, !0)[0], 1, {
              substFormat: 1,
              coverage: {
                format: 1,
                glyphs: []
              },
              alternateSets: []
            });
            L.assert(1 === a.coverage.format, "Ligature: unable to modify coverage table format " + a.coverage.format);
            var o = t.sub,
                i = this.binSearch(a.coverage.glyphs, o);
            i < 0 && (i = -1 - i, a.coverage.glyphs.splice(i, 0, o), a.alternateSets.splice(i, 0, 0)), a.alternateSets[i] = t.by;
          }, wt.prototype.addLigature = function (e, t, r, n) {
            var a = this.getLookupTables(r, n, e, 4, !0)[0],
                o = a.subtables[0];
            o || (o = {
              substFormat: 1,
              coverage: {
                format: 1,
                glyphs: []
              },
              ligatureSets: []
            }, a.subtables[0] = o), L.assert(1 === o.coverage.format, "Ligature: unable to modify coverage table format " + o.coverage.format);
            var i = t.sub[0],
                s = t.sub.slice(1),
                l = {
              ligGlyph: t.by,
              components: s
            },
                p = this.binSearch(o.coverage.glyphs, i);

            if (0 <= p) {
              for (var u = o.ligatureSets[p], c = 0; c < u.length; c++) if (Mt(u[c].components, s)) return;

              u.push(l);
            } else p = -1 - p, o.coverage.glyphs.splice(p, 0, i), o.ligatureSets.splice(p, 0, [l]);
          }, wt.prototype.getFeature = function (e, t, r) {
            if (/ss\d\d/.test(e)) return this.getSingle(e, t, r);

            switch (e) {
              case "aalt":
              case "salt":
                return this.getSingle(e, t, r).concat(this.getAlternates(e, t, r));

              case "dlig":
              case "liga":
              case "rlig":
                return this.getLigatures(e, t, r);
            }
          }, wt.prototype.add = function (e, t, r, n) {
            if (/ss\d\d/.test(e)) return this.addSingle(e, t, r, n);

            switch (e) {
              case "aalt":
              case "salt":
                return "number" == typeof t.by ? this.addSingle(e, t, r, n) : this.addAlternate(e, t, r, n);

              case "dlig":
              case "liga":
              case "rlig":
                return this.addLigature(e, t, r, n);
            }
          };
          var Rt,
              Dt,
              At,
              kt,
              Ft = {
            getPath: It,
            parse: function (e, t, r, n) {
              for (var a = new xe.GlyphSet(n), o = 0; o < r.length - 1; o += 1) {
                var i = r[o];
                i !== r[o + 1] ? a.push(o, xe.ttfGlyphLoader(n, o, Ot, e, t + i, Pt)) : a.push(o, xe.glyphLoader(n, o));
              }

              return a;
            }
          };

          function Ut(e) {
            this.font = e, this.getCommands = function (e) {
              return Ft.getPath(e).commands;
            }, this._fpgmState = this._prepState = void 0, this._errorState = 0;
          }

          function Bt(e) {
            return e;
          }

          function Gt(e) {
            return Math.sign(e) * Math.round(Math.abs(e));
          }

          function jt(e) {
            return Math.sign(e) * Math.round(Math.abs(2 * e)) / 2;
          }

          function Vt(e) {
            return Math.sign(e) * (Math.round(Math.abs(e) + .5) - .5);
          }

          function zt(e) {
            return Math.sign(e) * Math.ceil(Math.abs(e));
          }

          function Ht(e) {
            return Math.sign(e) * Math.floor(Math.abs(e));
          }

          function Wt(e) {
            var t = this.srPeriod,
                r = this.srPhase,
                n = 1;
            return e < 0 && (e = -e, n = -1), e += this.srThreshold - r, e = Math.trunc(e / t) * t, (e += r) < 0 ? r * n : e * n;
          }

          var Xt = {
            x: 1,
            y: 0,
            axis: "x",
            distance: function (e, t, r, n) {
              return (r ? e.xo : e.x) - (n ? t.xo : t.x);
            },
            interpolate: function (e, t, r, n) {
              var a, o, i, s, l, p, u;
              if (!n || n === this) return a = e.xo - t.xo, o = e.xo - r.xo, l = t.x - t.xo, p = r.x - r.xo, 0 === (u = (i = Math.abs(a)) + (s = Math.abs(o))) ? void (e.x = e.xo + (l + p) / 2) : void (e.x = e.xo + (l * s + p * i) / u);
              a = n.distance(e, t, !0, !0), o = n.distance(e, r, !0, !0), l = n.distance(t, t, !1, !0), p = n.distance(r, r, !1, !0), 0 !== (u = (i = Math.abs(a)) + (s = Math.abs(o))) ? Xt.setRelative(e, e, (l * s + p * i) / u, n, !0) : Xt.setRelative(e, e, (l + p) / 2, n, !0);
            },
            normalSlope: Number.NEGATIVE_INFINITY,
            setRelative: function (e, t, r, n, a) {
              if (n && n !== this) {
                var o = a ? t.xo : t.x,
                    i = a ? t.yo : t.y,
                    s = o + r * n.x,
                    l = i + r * n.y;
                e.x = s + (e.y - l) / n.normalSlope;
              } else e.x = (a ? t.xo : t.x) + r;
            },
            slope: 0,
            touch: function (e) {
              e.xTouched = !0;
            },
            touched: function (e) {
              return e.xTouched;
            },
            untouch: function (e) {
              e.xTouched = !1;
            }
          },
              qt = {
            x: 0,
            y: 1,
            axis: "y",
            distance: function (e, t, r, n) {
              return (r ? e.yo : e.y) - (n ? t.yo : t.y);
            },
            interpolate: function (e, t, r, n) {
              var a, o, i, s, l, p, u;
              if (!n || n === this) return a = e.yo - t.yo, o = e.yo - r.yo, l = t.y - t.yo, p = r.y - r.yo, 0 === (u = (i = Math.abs(a)) + (s = Math.abs(o))) ? void (e.y = e.yo + (l + p) / 2) : void (e.y = e.yo + (l * s + p * i) / u);
              a = n.distance(e, t, !0, !0), o = n.distance(e, r, !0, !0), l = n.distance(t, t, !1, !0), p = n.distance(r, r, !1, !0), 0 !== (u = (i = Math.abs(a)) + (s = Math.abs(o))) ? qt.setRelative(e, e, (l * s + p * i) / u, n, !0) : qt.setRelative(e, e, (l + p) / 2, n, !0);
            },
            normalSlope: 0,
            setRelative: function (e, t, r, n, a) {
              if (n && n !== this) {
                var o = a ? t.xo : t.x,
                    i = a ? t.yo : t.y,
                    s = o + r * n.x,
                    l = i + r * n.y;
                e.y = l + n.normalSlope * (e.x - s);
              } else e.y = (a ? t.yo : t.y) + r;
            },
            slope: Number.POSITIVE_INFINITY,
            touch: function (e) {
              e.yTouched = !0;
            },
            touched: function (e) {
              return e.yTouched;
            },
            untouch: function (e) {
              e.yTouched = !1;
            }
          };

          function Yt(e, t) {
            this.x = e, this.y = t, this.axis = void 0, this.slope = t / e, this.normalSlope = -e / t, Object.freeze(this);
          }

          function Zt(e, t) {
            var r = Math.sqrt(e * e + t * t);
            return t /= r, 1 === (e /= r) && 0 === t ? Xt : 0 === e && 1 === t ? qt : new Yt(e, t);
          }

          function Qt(e, t, r, n) {
            this.x = this.xo = Math.round(64 * e) / 64, this.y = this.yo = Math.round(64 * t) / 64, this.lastPointOfContour = r, this.onCurve = n, this.prevPointOnContour = void 0, this.nextPointOnContour = void 0, this.xTouched = !1, this.yTouched = !1, Object.preventExtensions(this);
          }

          Object.freeze(Xt), Object.freeze(qt), Yt.prototype.distance = function (e, t, r, n) {
            return this.x * Xt.distance(e, t, r, n) + this.y * qt.distance(e, t, r, n);
          }, Yt.prototype.interpolate = function (e, t, r, n) {
            var a, o, i, s, l, p, u;
            i = n.distance(e, t, !0, !0), s = n.distance(e, r, !0, !0), a = n.distance(t, t, !1, !0), o = n.distance(r, r, !1, !0), 0 !== (u = (l = Math.abs(i)) + (p = Math.abs(s))) ? this.setRelative(e, e, (a * p + o * l) / u, n, !0) : this.setRelative(e, e, (a + o) / 2, n, !0);
          }, Yt.prototype.setRelative = function (e, t, r, n, a) {
            n = n || this;
            var o = a ? t.xo : t.x,
                i = a ? t.yo : t.y,
                s = o + r * n.x,
                l = i + r * n.y,
                p = n.normalSlope,
                u = this.slope,
                c = e.x,
                d = e.y;
            e.x = (u * c - p * s + l - d) / (u - p), e.y = u * (e.x - c) + d;
          }, Yt.prototype.touch = function (e) {
            e.xTouched = !0, e.yTouched = !0;
          }, Qt.prototype.nextTouched = function (e) {
            for (var t = this.nextPointOnContour; !e.touched(t) && t !== this;) t = t.nextPointOnContour;

            return t;
          }, Qt.prototype.prevTouched = function (e) {
            for (var t = this.prevPointOnContour; !e.touched(t) && t !== this;) t = t.prevPointOnContour;

            return t;
          };
          var Kt = Object.freeze(new Qt(0, 0)),
              Jt = {
            cvCutIn: 17 / 16,
            deltaBase: 9,
            deltaShift: .125,
            loop: 1,
            minDis: 1,
            autoFlip: !0
          };

          function $t(e, t) {
            switch (this.env = e, this.stack = [], this.prog = t, e) {
              case "glyf":
                this.zp0 = this.zp1 = this.zp2 = 1, this.rp0 = this.rp1 = this.rp2 = 0;

              case "prep":
                this.fv = this.pv = this.dpv = Xt, this.round = Gt;
            }
          }

          function er(e) {
            for (var t = e.tZone = new Array(e.gZone.length), r = 0; r < t.length; r++) t[r] = new Qt(0, 0);
          }

          function tr(e, t) {
            var r,
                n = e.prog,
                a = e.ip,
                o = 1;

            do {
              if (88 === (r = n[++a])) o++;else if (89 === r) o--;else if (64 === r) a += n[a + 1] + 1;else if (65 === r) a += 2 * n[a + 1] + 1;else if (176 <= r && r <= 183) a += r - 176 + 1;else if (184 <= r && r <= 191) a += 2 * (r - 184 + 1);else if (t && 1 === o && 27 === r) break;
            } while (0 < o);

            e.ip = a;
          }

          function rr(e, t) {
            E.DEBUG && console.log(t.step, "SVTCA[" + e.axis + "]"), t.fv = t.pv = t.dpv = e;
          }

          function nr(e, t) {
            E.DEBUG && console.log(t.step, "SPVTCA[" + e.axis + "]"), t.pv = t.dpv = e;
          }

          function ar(e, t) {
            E.DEBUG && console.log(t.step, "SFVTCA[" + e.axis + "]"), t.fv = e;
          }

          function or(e, t) {
            var r,
                n,
                a = t.stack,
                o = a.pop(),
                i = a.pop(),
                s = t.z2[o],
                l = t.z1[i];
            E.DEBUG && console.log("SPVTL[" + e + "]", o, i), n = e ? (r = s.y - l.y, l.x - s.x) : (r = l.x - s.x, l.y - s.y), t.pv = t.dpv = Zt(r, n);
          }

          function ir(e, t) {
            var r,
                n,
                a = t.stack,
                o = a.pop(),
                i = a.pop(),
                s = t.z2[o],
                l = t.z1[i];
            E.DEBUG && console.log("SFVTL[" + e + "]", o, i), n = e ? (r = s.y - l.y, l.x - s.x) : (r = l.x - s.x, l.y - s.y), t.fv = Zt(r, n);
          }

          function sr(e) {
            E.DEBUG && console.log(e.step, "POP[]"), e.stack.pop();
          }

          function lr(e, t) {
            var r = t.stack.pop(),
                n = t.z0[r],
                a = t.fv,
                o = t.pv;
            E.DEBUG && console.log(t.step, "MDAP[" + e + "]", r);
            var i = o.distance(n, Kt);
            e && (i = t.round(i)), a.setRelative(n, Kt, i, o), a.touch(n), t.rp0 = t.rp1 = r;
          }

          function pr(e, t) {
            var r,
                n,
                a,
                o = t.z2,
                i = o.length - 2;
            E.DEBUG && console.log(t.step, "IUP[" + e.axis + "]");

            for (var s = 0; s < i; s++) r = o[s], e.touched(r) || (n = r.prevTouched(e)) !== r && (n === (a = r.nextTouched(e)) && e.setRelative(r, r, e.distance(n, n, !1, !0), e, !0), e.interpolate(r, n, a, e));
          }

          function ur(e, t) {
            for (var r = t.stack, n = e ? t.rp1 : t.rp2, a = (e ? t.z0 : t.z1)[n], o = t.fv, i = t.pv, s = t.loop, l = t.z2; s--;) {
              var p = r.pop(),
                  u = l[p],
                  c = i.distance(a, a, !1, !0);
              o.setRelative(u, u, c, i), o.touch(u), E.DEBUG && console.log(t.step, (1 < t.loop ? "loop " + (t.loop - s) + ": " : "") + "SHP[" + (e ? "rp1" : "rp2") + "]", p);
            }

            t.loop = 1;
          }

          function cr(e, t) {
            var r = t.stack,
                n = e ? t.rp1 : t.rp2,
                a = (e ? t.z0 : t.z1)[n],
                o = t.fv,
                i = t.pv,
                s = r.pop(),
                l = t.z2[t.contours[s]],
                p = l;
            E.DEBUG && console.log(t.step, "SHC[" + e + "]", s);

            for (var u = i.distance(a, a, !1, !0); p !== a && o.setRelative(p, p, u, i), (p = p.nextPointOnContour) !== l;);
          }

          function dr(e, t) {
            var r,
                n,
                a = t.stack,
                o = e ? t.rp1 : t.rp2,
                i = (e ? t.z0 : t.z1)[o],
                s = t.fv,
                l = t.pv,
                p = a.pop();

            switch (E.DEBUG && console.log(t.step, "SHZ[" + e + "]", p), p) {
              case 0:
                r = t.tZone;
                break;

              case 1:
                r = t.gZone;
                break;

              default:
                throw new Error("Invalid zone");
            }

            for (var u = l.distance(i, i, !1, !0), c = r.length - 2, d = 0; d < c; d++) n = r[d], s.setRelative(n, n, u, l);
          }

          function hr(e, t) {
            var r = t.stack,
                n = r.pop() / 64,
                a = r.pop(),
                o = t.z1[a],
                i = t.z0[t.rp0],
                s = t.fv,
                l = t.pv;
            s.setRelative(o, i, n, l), s.touch(o), E.DEBUG && console.log(t.step, "MSIRP[" + e + "]", n, a), t.rp1 = t.rp0, t.rp2 = a, e && (t.rp0 = a);
          }

          function mr(e, t) {
            var r = t.stack,
                n = r.pop(),
                a = r.pop(),
                o = t.z0[a],
                i = t.fv,
                s = t.pv,
                l = t.cvt[n];
            E.DEBUG && console.log(t.step, "MIAP[" + e + "]", n, "(", l, ")", a);
            var p = s.distance(o, Kt);
            e && (Math.abs(p - l) < t.cvCutIn && (p = l), p = t.round(p)), i.setRelative(o, Kt, p, s), 0 === t.zp0 && (o.xo = o.x, o.yo = o.y), i.touch(o), t.rp0 = t.rp1 = a;
          }

          function fr(e, t) {
            var r = t.stack,
                n = r.pop(),
                a = t.z2[n];
            E.DEBUG && console.log(t.step, "GC[" + e + "]", n), r.push(64 * t.dpv.distance(a, Kt, e, !1));
          }

          function yr(e, t) {
            var r = t.stack,
                n = r.pop(),
                a = r.pop(),
                o = t.z1[n],
                i = t.z0[a],
                s = t.dpv.distance(i, o, e, e);
            E.DEBUG && console.log(t.step, "MD[" + e + "]", n, a, "->", s), t.stack.push(Math.round(64 * s));
          }

          function gr(e, t) {
            var r = t.stack,
                n = r.pop(),
                a = t.fv,
                o = t.pv,
                i = t.ppem,
                s = t.deltaBase + 16 * (e - 1),
                l = t.deltaShift,
                p = t.z0;
            E.DEBUG && console.log(t.step, "DELTAP[" + e + "]", n, r);

            for (var u = 0; u < n; u++) {
              var c = r.pop(),
                  d = r.pop();

              if (s + ((240 & d) >> 4) === i) {
                var h = (15 & d) - 8;
                0 <= h && h++, E.DEBUG && console.log(t.step, "DELTAPFIX", c, "by", h * l);
                var m = p[c];
                a.setRelative(m, m, h * l, o);
              }
            }
          }

          function vr(e, t) {
            var r = t.stack,
                n = r.pop();
            E.DEBUG && console.log(t.step, "ROUND[]"), r.push(64 * t.round(n / 64));
          }

          function br(e, t) {
            var r = t.stack,
                n = r.pop(),
                a = t.ppem,
                o = t.deltaBase + 16 * (e - 1),
                i = t.deltaShift;
            E.DEBUG && console.log(t.step, "DELTAC[" + e + "]", n, r);

            for (var s = 0; s < n; s++) {
              var l = r.pop(),
                  p = r.pop();

              if (o + ((240 & p) >> 4) === a) {
                var u = (15 & p) - 8;
                0 <= u && u++;
                var c = u * i;
                E.DEBUG && console.log(t.step, "DELTACFIX", l, "by", c), t.cvt[l] += c;
              }
            }
          }

          function _r(e, t) {
            var r,
                n,
                a = t.stack,
                o = a.pop(),
                i = a.pop(),
                s = t.z2[o],
                l = t.z1[i];
            E.DEBUG && console.log(t.step, "SDPVTL[" + e + "]", o, i), n = e ? (r = s.y - l.y, l.x - s.x) : (r = l.x - s.x, l.y - s.y), t.dpv = Zt(r, n);
          }

          function xr(e, t) {
            var r = t.stack,
                n = t.prog,
                a = t.ip;
            E.DEBUG && console.log(t.step, "PUSHB[" + e + "]");

            for (var o = 0; o < e; o++) r.push(n[++a]);

            t.ip = a;
          }

          function Sr(e, t) {
            var r = t.ip,
                n = t.prog,
                a = t.stack;
            E.DEBUG && console.log(t.ip, "PUSHW[" + e + "]");

            for (var o = 0; o < e; o++) {
              var i = n[++r] << 8 | n[++r];
              32768 & i && (i = -(1 + (65535 ^ i))), a.push(i);
            }

            t.ip = r;
          }

          function wr(e, t, r, n, a, o) {
            var i,
                s,
                l,
                p,
                u = o.stack,
                c = e && u.pop(),
                d = u.pop(),
                h = o.rp0,
                m = o.z0[h],
                f = o.z1[d],
                y = o.minDis,
                g = o.fv,
                v = o.dpv;
            l = 0 <= (s = i = v.distance(f, m, !0, !0)) ? 1 : -1, s = Math.abs(s), e && (p = o.cvt[c], n && Math.abs(s - p) < o.cvCutIn && (s = p)), r && s < y && (s = y), n && (s = o.round(s)), g.setRelative(f, m, l * s, v), g.touch(f), E.DEBUG && console.log(o.step, (e ? "MIRP[" : "MDRP[") + (t ? "M" : "m") + (r ? ">" : "_") + (n ? "R" : "_") + (0 === a ? "Gr" : 1 === a ? "Bl" : 2 === a ? "Wh" : "") + "]", e ? c + "(" + o.cvt[c] + "," + p + ")" : "", d, "(d =", i, "->", l * s, ")"), o.rp1 = o.rp0, o.rp2 = d, t && (o.rp0 = d);
          }

          Ut.prototype.exec = function (e, t) {
            if ("number" != typeof t) throw new Error("Point size is not a number!");

            if (!(2 < this._errorState)) {
              var r = this.font,
                  n = this._prepState;

              if (!n || n.ppem !== t) {
                var a = this._fpgmState;

                if (!a) {
                  $t.prototype = Jt, (a = this._fpgmState = new $t("fpgm", r.tables.fpgm)).funcs = [], a.font = r, E.DEBUG && (console.log("---EXEC FPGM---"), a.step = -1);

                  try {
                    Dt(a);
                  } catch (e) {
                    return console.log("Hinting error in FPGM:" + e), void (this._errorState = 3);
                  }
                }

                $t.prototype = a, (n = this._prepState = new $t("prep", r.tables.prep)).ppem = t;
                var o = r.tables.cvt;
                if (o) for (var i = n.cvt = new Array(o.length), s = t / r.unitsPerEm, l = 0; l < o.length; l++) i[l] = o[l] * s;else n.cvt = [];
                E.DEBUG && (console.log("---EXEC PREP---"), n.step = -1);

                try {
                  Dt(n);
                } catch (e) {
                  this._errorState < 2 && console.log("Hinting error in PREP:" + e), this._errorState = 2;
                }
              }

              if (!(1 < this._errorState)) try {
                return At(e, n);
              } catch (e) {
                return this._errorState < 1 && (console.log("Hinting error:" + e), console.log("Note: further hinting errors are silenced")), void (this._errorState = 1);
              }
            }
          }, At = function (e, t) {
            var r,
                n,
                a,
                o = t.ppem / t.font.unitsPerEm,
                i = o,
                s = e.components;

            if ($t.prototype = t, s) {
              var l = t.font;
              n = [], r = [];

              for (var p = 0; p < s.length; p++) {
                var u = s[p],
                    c = l.glyphs.get(u.glyphIndex);
                a = new $t("glyf", c.instructions), E.DEBUG && (console.log("---EXEC COMP " + p + "---"), a.step = -1), kt(c, a, o, i);

                for (var d = Math.round(u.dx * o), h = Math.round(u.dy * i), m = a.gZone, f = a.contours, y = 0; y < m.length; y++) {
                  var g = m[y];
                  g.xTouched = g.yTouched = !1, g.xo = g.x = g.x + d, g.yo = g.y = g.y + h;
                }

                var v = n.length;
                n.push.apply(n, m);

                for (var b = 0; b < f.length; b++) r.push(f[b] + v);
              }

              e.instructions && !a.inhibitGridFit && ((a = new $t("glyf", e.instructions)).gZone = a.z0 = a.z1 = a.z2 = n, a.contours = r, n.push(new Qt(0, 0), new Qt(Math.round(e.advanceWidth * o), 0)), E.DEBUG && (console.log("---EXEC COMPOSITE---"), a.step = -1), Dt(a), n.length -= 2);
            } else a = new $t("glyf", e.instructions), E.DEBUG && (console.log("---EXEC GLYPH---"), a.step = -1), kt(e, a, o, i), n = a.gZone;

            return n;
          }, kt = function (e, t, r, n) {
            for (var a, o, i, s = e.points || [], l = s.length, p = t.gZone = t.z0 = t.z1 = t.z2 = [], u = t.contours = [], c = 0; c < l; c++) a = s[c], p[c] = new Qt(a.x * r, a.y * n, a.lastPointOfContour, a.onCurve);

            for (var d = 0; d < l; d++) a = p[d], o || (o = a, u.push(d)), a.lastPointOfContour ? ((a.nextPointOnContour = o).prevPointOnContour = a, o = void 0) : (i = p[d + 1], (a.nextPointOnContour = i).prevPointOnContour = a);

            if (!t.inhibitGridFit) {
              if (E.DEBUG) {
                console.log("PROCESSING GLYPH", t.stack);

                for (var h = 0; h < l; h++) console.log(h, p[h].x, p[h].y);
              }

              if (p.push(new Qt(0, 0), new Qt(Math.round(e.advanceWidth * r), 0)), Dt(t), p.length -= 2, E.DEBUG) {
                console.log("FINISHED GLYPH", t.stack);

                for (var m = 0; m < l; m++) console.log(m, p[m].x, p[m].y);
              }
            }
          }, Dt = function (e) {
            var t = e.prog;

            if (t) {
              var r,
                  n = t.length;

              for (e.ip = 0; e.ip < n; e.ip++) {
                if (E.DEBUG && e.step++, !(r = Rt[t[e.ip]])) throw new Error("unknown instruction: 0x" + Number(t[e.ip]).toString(16));
                r(e);
              }
            }
          }, Rt = [rr.bind(void 0, qt), rr.bind(void 0, Xt), nr.bind(void 0, qt), nr.bind(void 0, Xt), ar.bind(void 0, qt), ar.bind(void 0, Xt), or.bind(void 0, 0), or.bind(void 0, 1), ir.bind(void 0, 0), ir.bind(void 0, 1), function (e) {
            var t = e.stack,
                r = t.pop(),
                n = t.pop();
            E.DEBUG && console.log(e.step, "SPVFS[]", r, n), e.pv = e.dpv = Zt(n, r);
          }, function (e) {
            var t = e.stack,
                r = t.pop(),
                n = t.pop();
            E.DEBUG && console.log(e.step, "SPVFS[]", r, n), e.fv = Zt(n, r);
          }, function (e) {
            var t = e.stack,
                r = e.pv;
            E.DEBUG && console.log(e.step, "GPV[]"), t.push(16384 * r.x), t.push(16384 * r.y);
          }, function (e) {
            var t = e.stack,
                r = e.fv;
            E.DEBUG && console.log(e.step, "GFV[]"), t.push(16384 * r.x), t.push(16384 * r.y);
          }, function (e) {
            e.fv = e.pv, E.DEBUG && console.log(e.step, "SFVTPV[]");
          }, function (e) {
            var t = e.stack,
                r = t.pop(),
                n = t.pop(),
                a = t.pop(),
                o = t.pop(),
                i = t.pop(),
                s = e.z0,
                l = e.z1,
                p = s[r],
                u = s[n],
                c = l[a],
                d = l[o],
                h = e.z2[i];
            E.DEBUG && console.log("ISECT[], ", r, n, a, o, i);
            var m = p.x,
                f = p.y,
                y = u.x,
                g = u.y,
                v = c.x,
                b = c.y,
                _ = d.x,
                x = d.y,
                S = (m - y) * (b - x) - (f - g) * (v - _),
                w = m * g - f * y,
                M = v * x - b * _;
            h.x = (w * (v - _) - M * (m - y)) / S, h.y = (w * (b - x) - M * (f - g)) / S;
          }, function (e) {
            e.rp0 = e.stack.pop(), E.DEBUG && console.log(e.step, "SRP0[]", e.rp0);
          }, function (e) {
            e.rp1 = e.stack.pop(), E.DEBUG && console.log(e.step, "SRP1[]", e.rp1);
          }, function (e) {
            e.rp2 = e.stack.pop(), E.DEBUG && console.log(e.step, "SRP2[]", e.rp2);
          }, function (e) {
            var t = e.stack.pop();

            switch (E.DEBUG && console.log(e.step, "SZP0[]", t), e.zp0 = t) {
              case 0:
                e.tZone || er(e), e.z0 = e.tZone;
                break;

              case 1:
                e.z0 = e.gZone;
                break;

              default:
                throw new Error("Invalid zone pointer");
            }
          }, function (e) {
            var t = e.stack.pop();

            switch (E.DEBUG && console.log(e.step, "SZP1[]", t), e.zp1 = t) {
              case 0:
                e.tZone || er(e), e.z1 = e.tZone;
                break;

              case 1:
                e.z1 = e.gZone;
                break;

              default:
                throw new Error("Invalid zone pointer");
            }
          }, function (e) {
            var t = e.stack.pop();

            switch (E.DEBUG && console.log(e.step, "SZP2[]", t), e.zp2 = t) {
              case 0:
                e.tZone || er(e), e.z2 = e.tZone;
                break;

              case 1:
                e.z2 = e.gZone;
                break;

              default:
                throw new Error("Invalid zone pointer");
            }
          }, function (e) {
            var t = e.stack.pop();

            switch (E.DEBUG && console.log(e.step, "SZPS[]", t), e.zp0 = e.zp1 = e.zp2 = t, t) {
              case 0:
                e.tZone || er(e), e.z0 = e.z1 = e.z2 = e.tZone;
                break;

              case 1:
                e.z0 = e.z1 = e.z2 = e.gZone;
                break;

              default:
                throw new Error("Invalid zone pointer");
            }
          }, function (e) {
            e.loop = e.stack.pop(), E.DEBUG && console.log(e.step, "SLOOP[]", e.loop);
          }, function (e) {
            E.DEBUG && console.log(e.step, "RTG[]"), e.round = Gt;
          }, function (e) {
            E.DEBUG && console.log(e.step, "RTHG[]"), e.round = Vt;
          }, function (e) {
            var t = e.stack.pop();
            E.DEBUG && console.log(e.step, "SMD[]", t), e.minDis = t / 64;
          }, function (e) {
            E.DEBUG && console.log(e.step, "ELSE[]"), tr(e, !1);
          }, function (e) {
            var t = e.stack.pop();
            E.DEBUG && console.log(e.step, "JMPR[]", t), e.ip += t - 1;
          }, function (e) {
            var t = e.stack.pop();
            E.DEBUG && console.log(e.step, "SCVTCI[]", t), e.cvCutIn = t / 64;
          }, void 0, void 0, function (e) {
            var t = e.stack;
            E.DEBUG && console.log(e.step, "DUP[]"), t.push(t[t.length - 1]);
          }, sr, function (e) {
            E.DEBUG && console.log(e.step, "CLEAR[]"), e.stack.length = 0;
          }, function (e) {
            var t = e.stack,
                r = t.pop(),
                n = t.pop();
            E.DEBUG && console.log(e.step, "SWAP[]"), t.push(r), t.push(n);
          }, function (e) {
            var t = e.stack;
            E.DEBUG && console.log(e.step, "DEPTH[]"), t.push(t.length);
          }, function (e) {
            var t = e.stack,
                r = t.pop();
            E.DEBUG && console.log(e.step, "CINDEX[]", r), t.push(t[t.length - r]);
          }, function (e) {
            var t = e.stack,
                r = t.pop();
            E.DEBUG && console.log(e.step, "MINDEX[]", r), t.push(t.splice(t.length - r, 1)[0]);
          }, void 0, void 0, void 0, function (e) {
            var t = e.stack,
                r = t.pop(),
                n = t.pop();
            E.DEBUG && console.log(e.step, "LOOPCALL[]", r, n);
            var a = e.ip,
                o = e.prog;
            e.prog = e.funcs[r];

            for (var i = 0; i < n; i++) Dt(e), E.DEBUG && console.log(++e.step, i + 1 < n ? "next loopcall" : "done loopcall", i);

            e.ip = a, e.prog = o;
          }, function (e) {
            var t = e.stack.pop();
            E.DEBUG && console.log(e.step, "CALL[]", t);
            var r = e.ip,
                n = e.prog;
            e.prog = e.funcs[t], Dt(e), e.ip = r, e.prog = n, E.DEBUG && console.log(++e.step, "returning from", t);
          }, function (e) {
            if ("fpgm" !== e.env) throw new Error("FDEF not allowed here");
            var t = e.stack,
                r = e.prog,
                n = e.ip,
                a = t.pop(),
                o = n;

            for (E.DEBUG && console.log(e.step, "FDEF[]", a); 45 !== r[++n];);

            e.ip = n, e.funcs[a] = r.slice(o + 1, n);
          }, void 0, lr.bind(void 0, 0), lr.bind(void 0, 1), pr.bind(void 0, qt), pr.bind(void 0, Xt), ur.bind(void 0, 0), ur.bind(void 0, 1), cr.bind(void 0, 0), cr.bind(void 0, 1), dr.bind(void 0, 0), dr.bind(void 0, 1), function (e) {
            for (var t = e.stack, r = e.loop, n = e.fv, a = t.pop() / 64, o = e.z2; r--;) {
              var i = t.pop(),
                  s = o[i];
              E.DEBUG && console.log(e.step, (1 < e.loop ? "loop " + (e.loop - r) + ": " : "") + "SHPIX[]", i, a), n.setRelative(s, s, a), n.touch(s);
            }

            e.loop = 1;
          }, function (e) {
            for (var t = e.stack, r = e.rp1, n = e.rp2, a = e.loop, o = e.z0[r], i = e.z1[n], s = e.fv, l = e.dpv, p = e.z2; a--;) {
              var u = t.pop(),
                  c = p[u];
              E.DEBUG && console.log(e.step, (1 < e.loop ? "loop " + (e.loop - a) + ": " : "") + "IP[]", u, r, "<->", n), s.interpolate(c, o, i, l), s.touch(c);
            }

            e.loop = 1;
          }, hr.bind(void 0, 0), hr.bind(void 0, 1), function (e) {
            for (var t = e.stack, r = e.rp0, n = e.z0[r], a = e.loop, o = e.fv, i = e.pv, s = e.z1; a--;) {
              var l = t.pop(),
                  p = s[l];
              E.DEBUG && console.log(e.step, (1 < e.loop ? "loop " + (e.loop - a) + ": " : "") + "ALIGNRP[]", l), o.setRelative(p, n, 0, i), o.touch(p);
            }

            e.loop = 1;
          }, function (e) {
            E.DEBUG && console.log(e.step, "RTDG[]"), e.round = jt;
          }, mr.bind(void 0, 0), mr.bind(void 0, 1), function (e) {
            var t = e.prog,
                r = e.ip,
                n = e.stack,
                a = t[++r];
            E.DEBUG && console.log(e.step, "NPUSHB[]", a);

            for (var o = 0; o < a; o++) n.push(t[++r]);

            e.ip = r;
          }, function (e) {
            var t = e.ip,
                r = e.prog,
                n = e.stack,
                a = r[++t];
            E.DEBUG && console.log(e.step, "NPUSHW[]", a);

            for (var o = 0; o < a; o++) {
              var i = r[++t] << 8 | r[++t];
              32768 & i && (i = -(1 + (65535 ^ i))), n.push(i);
            }

            e.ip = t;
          }, function (e) {
            var t = e.stack,
                r = e.store;
            r = r || (e.store = []);
            var n = t.pop(),
                a = t.pop();
            E.DEBUG && console.log(e.step, "WS", n, a), r[a] = n;
          }, function (e) {
            var t = e.stack,
                r = e.store,
                n = t.pop();
            E.DEBUG && console.log(e.step, "RS", n);
            var a = r && r[n] || 0;
            t.push(a);
          }, function (e) {
            var t = e.stack,
                r = t.pop(),
                n = t.pop();
            E.DEBUG && console.log(e.step, "WCVTP", r, n), e.cvt[n] = r / 64;
          }, function (e) {
            var t = e.stack,
                r = t.pop();
            E.DEBUG && console.log(e.step, "RCVT", r), t.push(64 * e.cvt[r]);
          }, fr.bind(void 0, 0), fr.bind(void 0, 1), void 0, yr.bind(void 0, 0), yr.bind(void 0, 1), function (e) {
            E.DEBUG && console.log(e.step, "MPPEM[]"), e.stack.push(e.ppem);
          }, void 0, function (e) {
            E.DEBUG && console.log(e.step, "FLIPON[]"), e.autoFlip = !0;
          }, void 0, void 0, function (e) {
            var t = e.stack,
                r = t.pop(),
                n = t.pop();
            E.DEBUG && console.log(e.step, "LT[]", r, n), t.push(n < r ? 1 : 0);
          }, function (e) {
            var t = e.stack,
                r = t.pop(),
                n = t.pop();
            E.DEBUG && console.log(e.step, "LTEQ[]", r, n), t.push(n <= r ? 1 : 0);
          }, function (e) {
            var t = e.stack,
                r = t.pop(),
                n = t.pop();
            E.DEBUG && console.log(e.step, "GT[]", r, n), t.push(r < n ? 1 : 0);
          }, function (e) {
            var t = e.stack,
                r = t.pop(),
                n = t.pop();
            E.DEBUG && console.log(e.step, "GTEQ[]", r, n), t.push(r <= n ? 1 : 0);
          }, function (e) {
            var t = e.stack,
                r = t.pop(),
                n = t.pop();
            E.DEBUG && console.log(e.step, "EQ[]", r, n), t.push(r === n ? 1 : 0);
          }, function (e) {
            var t = e.stack,
                r = t.pop(),
                n = t.pop();
            E.DEBUG && console.log(e.step, "NEQ[]", r, n), t.push(r !== n ? 1 : 0);
          }, function (e) {
            var t = e.stack,
                r = t.pop();
            E.DEBUG && console.log(e.step, "ODD[]", r), t.push(Math.trunc(r) % 2 ? 1 : 0);
          }, function (e) {
            var t = e.stack,
                r = t.pop();
            E.DEBUG && console.log(e.step, "EVEN[]", r), t.push(Math.trunc(r) % 2 ? 0 : 1);
          }, function (e) {
            var t = e.stack.pop();
            E.DEBUG && console.log(e.step, "IF[]", t), t || (tr(e, !0), E.DEBUG && console.log(e.step, "EIF[]"));
          }, function (e) {
            E.DEBUG && console.log(e.step, "EIF[]");
          }, function (e) {
            var t = e.stack,
                r = t.pop(),
                n = t.pop();
            E.DEBUG && console.log(e.step, "AND[]", r, n), t.push(r && n ? 1 : 0);
          }, function (e) {
            var t = e.stack,
                r = t.pop(),
                n = t.pop();
            E.DEBUG && console.log(e.step, "OR[]", r, n), t.push(r || n ? 1 : 0);
          }, function (e) {
            var t = e.stack,
                r = t.pop();
            E.DEBUG && console.log(e.step, "NOT[]", r), t.push(r ? 0 : 1);
          }, gr.bind(void 0, 1), function (e) {
            var t = e.stack.pop();
            E.DEBUG && console.log(e.step, "SDB[]", t), e.deltaBase = t;
          }, function (e) {
            var t = e.stack.pop();
            E.DEBUG && console.log(e.step, "SDS[]", t), e.deltaShift = Math.pow(.5, t);
          }, function (e) {
            var t = e.stack,
                r = t.pop(),
                n = t.pop();
            E.DEBUG && console.log(e.step, "ADD[]", r, n), t.push(n + r);
          }, function (e) {
            var t = e.stack,
                r = t.pop(),
                n = t.pop();
            E.DEBUG && console.log(e.step, "SUB[]", r, n), t.push(n - r);
          }, function (e) {
            var t = e.stack,
                r = t.pop(),
                n = t.pop();
            E.DEBUG && console.log(e.step, "DIV[]", r, n), t.push(64 * n / r);
          }, function (e) {
            var t = e.stack,
                r = t.pop(),
                n = t.pop();
            E.DEBUG && console.log(e.step, "MUL[]", r, n), t.push(n * r / 64);
          }, function (e) {
            var t = e.stack,
                r = t.pop();
            E.DEBUG && console.log(e.step, "ABS[]", r), t.push(Math.abs(r));
          }, function (e) {
            var t = e.stack,
                r = t.pop();
            E.DEBUG && console.log(e.step, "NEG[]", r), t.push(-r);
          }, function (e) {
            var t = e.stack,
                r = t.pop();
            E.DEBUG && console.log(e.step, "FLOOR[]", r), t.push(64 * Math.floor(r / 64));
          }, function (e) {
            var t = e.stack,
                r = t.pop();
            E.DEBUG && console.log(e.step, "CEILING[]", r), t.push(64 * Math.ceil(r / 64));
          }, vr.bind(void 0, 0), vr.bind(void 0, 1), vr.bind(void 0, 2), vr.bind(void 0, 3), void 0, void 0, void 0, void 0, function (e) {
            var t = e.stack,
                r = t.pop(),
                n = t.pop();
            E.DEBUG && console.log(e.step, "WCVTF[]", r, n), e.cvt[n] = r * e.ppem / e.font.unitsPerEm;
          }, gr.bind(void 0, 2), gr.bind(void 0, 3), br.bind(void 0, 1), br.bind(void 0, 2), br.bind(void 0, 3), function (e) {
            var t,
                r = e.stack.pop();

            switch (E.DEBUG && console.log(e.step, "SROUND[]", r), e.round = Wt, 192 & r) {
              case 0:
                t = .5;
                break;

              case 64:
                t = 1;
                break;

              case 128:
                t = 2;
                break;

              default:
                throw new Error("invalid SROUND value");
            }

            switch (e.srPeriod = t, 48 & r) {
              case 0:
                e.srPhase = 0;
                break;

              case 16:
                e.srPhase = .25 * t;
                break;

              case 32:
                e.srPhase = .5 * t;
                break;

              case 48:
                e.srPhase = .75 * t;
                break;

              default:
                throw new Error("invalid SROUND value");
            }

            r &= 15, e.srThreshold = 0 === r ? 0 : (r / 8 - .5) * t;
          }, function (e) {
            var t,
                r = e.stack.pop();

            switch (E.DEBUG && console.log(e.step, "S45ROUND[]", r), e.round = Wt, 192 & r) {
              case 0:
                t = Math.sqrt(2) / 2;
                break;

              case 64:
                t = Math.sqrt(2);
                break;

              case 128:
                t = 2 * Math.sqrt(2);
                break;

              default:
                throw new Error("invalid S45ROUND value");
            }

            switch (e.srPeriod = t, 48 & r) {
              case 0:
                e.srPhase = 0;
                break;

              case 16:
                e.srPhase = .25 * t;
                break;

              case 32:
                e.srPhase = .5 * t;
                break;

              case 48:
                e.srPhase = .75 * t;
                break;

              default:
                throw new Error("invalid S45ROUND value");
            }

            r &= 15, e.srThreshold = 0 === r ? 0 : (r / 8 - .5) * t;
          }, void 0, void 0, function (e) {
            E.DEBUG && console.log(e.step, "ROFF[]"), e.round = Bt;
          }, void 0, function (e) {
            E.DEBUG && console.log(e.step, "RUTG[]"), e.round = zt;
          }, function (e) {
            E.DEBUG && console.log(e.step, "RDTG[]"), e.round = Ht;
          }, sr, sr, void 0, void 0, void 0, void 0, void 0, function (e) {
            var t = e.stack.pop();
            E.DEBUG && console.log(e.step, "SCANCTRL[]", t);
          }, _r.bind(void 0, 0), _r.bind(void 0, 1), function (e) {
            var t = e.stack,
                r = t.pop(),
                n = 0;
            E.DEBUG && console.log(e.step, "GETINFO[]", r), 1 & r && (n = 35), 32 & r && (n |= 4096), t.push(n);
          }, void 0, function (e) {
            var t = e.stack,
                r = t.pop(),
                n = t.pop(),
                a = t.pop();
            E.DEBUG && console.log(e.step, "ROLL[]"), t.push(n), t.push(r), t.push(a);
          }, function (e) {
            var t = e.stack,
                r = t.pop(),
                n = t.pop();
            E.DEBUG && console.log(e.step, "MAX[]", r, n), t.push(Math.max(n, r));
          }, function (e) {
            var t = e.stack,
                r = t.pop(),
                n = t.pop();
            E.DEBUG && console.log(e.step, "MIN[]", r, n), t.push(Math.min(n, r));
          }, function (e) {
            var t = e.stack.pop();
            E.DEBUG && console.log(e.step, "SCANTYPE[]", t);
          }, function (e) {
            var t = e.stack.pop(),
                r = e.stack.pop();

            switch (E.DEBUG && console.log(e.step, "INSTCTRL[]", t, r), t) {
              case 1:
                return void (e.inhibitGridFit = !!r);

              case 2:
                return void (e.ignoreCvt = !!r);

              default:
                throw new Error("invalid INSTCTRL[] selector");
            }
          }, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, xr.bind(void 0, 1), xr.bind(void 0, 2), xr.bind(void 0, 3), xr.bind(void 0, 4), xr.bind(void 0, 5), xr.bind(void 0, 6), xr.bind(void 0, 7), xr.bind(void 0, 8), Sr.bind(void 0, 1), Sr.bind(void 0, 2), Sr.bind(void 0, 3), Sr.bind(void 0, 4), Sr.bind(void 0, 5), Sr.bind(void 0, 6), Sr.bind(void 0, 7), Sr.bind(void 0, 8), wr.bind(void 0, 0, 0, 0, 0, 0), wr.bind(void 0, 0, 0, 0, 0, 1), wr.bind(void 0, 0, 0, 0, 0, 2), wr.bind(void 0, 0, 0, 0, 0, 3), wr.bind(void 0, 0, 0, 0, 1, 0), wr.bind(void 0, 0, 0, 0, 1, 1), wr.bind(void 0, 0, 0, 0, 1, 2), wr.bind(void 0, 0, 0, 0, 1, 3), wr.bind(void 0, 0, 0, 1, 0, 0), wr.bind(void 0, 0, 0, 1, 0, 1), wr.bind(void 0, 0, 0, 1, 0, 2), wr.bind(void 0, 0, 0, 1, 0, 3), wr.bind(void 0, 0, 0, 1, 1, 0), wr.bind(void 0, 0, 0, 1, 1, 1), wr.bind(void 0, 0, 0, 1, 1, 2), wr.bind(void 0, 0, 0, 1, 1, 3), wr.bind(void 0, 0, 1, 0, 0, 0), wr.bind(void 0, 0, 1, 0, 0, 1), wr.bind(void 0, 0, 1, 0, 0, 2), wr.bind(void 0, 0, 1, 0, 0, 3), wr.bind(void 0, 0, 1, 0, 1, 0), wr.bind(void 0, 0, 1, 0, 1, 1), wr.bind(void 0, 0, 1, 0, 1, 2), wr.bind(void 0, 0, 1, 0, 1, 3), wr.bind(void 0, 0, 1, 1, 0, 0), wr.bind(void 0, 0, 1, 1, 0, 1), wr.bind(void 0, 0, 1, 1, 0, 2), wr.bind(void 0, 0, 1, 1, 0, 3), wr.bind(void 0, 0, 1, 1, 1, 0), wr.bind(void 0, 0, 1, 1, 1, 1), wr.bind(void 0, 0, 1, 1, 1, 2), wr.bind(void 0, 0, 1, 1, 1, 3), wr.bind(void 0, 1, 0, 0, 0, 0), wr.bind(void 0, 1, 0, 0, 0, 1), wr.bind(void 0, 1, 0, 0, 0, 2), wr.bind(void 0, 1, 0, 0, 0, 3), wr.bind(void 0, 1, 0, 0, 1, 0), wr.bind(void 0, 1, 0, 0, 1, 1), wr.bind(void 0, 1, 0, 0, 1, 2), wr.bind(void 0, 1, 0, 0, 1, 3), wr.bind(void 0, 1, 0, 1, 0, 0), wr.bind(void 0, 1, 0, 1, 0, 1), wr.bind(void 0, 1, 0, 1, 0, 2), wr.bind(void 0, 1, 0, 1, 0, 3), wr.bind(void 0, 1, 0, 1, 1, 0), wr.bind(void 0, 1, 0, 1, 1, 1), wr.bind(void 0, 1, 0, 1, 1, 2), wr.bind(void 0, 1, 0, 1, 1, 3), wr.bind(void 0, 1, 1, 0, 0, 0), wr.bind(void 0, 1, 1, 0, 0, 1), wr.bind(void 0, 1, 1, 0, 0, 2), wr.bind(void 0, 1, 1, 0, 0, 3), wr.bind(void 0, 1, 1, 0, 1, 0), wr.bind(void 0, 1, 1, 0, 1, 1), wr.bind(void 0, 1, 1, 0, 1, 2), wr.bind(void 0, 1, 1, 0, 1, 3), wr.bind(void 0, 1, 1, 1, 0, 0), wr.bind(void 0, 1, 1, 1, 0, 1), wr.bind(void 0, 1, 1, 1, 0, 2), wr.bind(void 0, 1, 1, 1, 0, 3), wr.bind(void 0, 1, 1, 1, 1, 0), wr.bind(void 0, 1, 1, 1, 1, 1), wr.bind(void 0, 1, 1, 1, 1, 2), wr.bind(void 0, 1, 1, 1, 1, 3)];

          var Mr = Array.from || function (e) {
            return e.match(/[\uD800-\uDBFF][\uDC00-\uDFFF]?|[^\uD800-\uDFFF]|./g) || [];
          };

          function Er(e) {
            (e = e || {}).empty || (Ct(e.familyName, "When creating a new Font object, familyName is required."), Ct(e.styleName, "When creating a new Font object, styleName is required."), Ct(e.unitsPerEm, "When creating a new Font object, unitsPerEm is required."), Ct(e.ascender, "When creating a new Font object, ascender is required."), Ct(e.descender, "When creating a new Font object, descender is required."), Ct(e.descender < 0, "Descender should be negative (e.g. -512)."), this.names = {
              fontFamily: {
                en: e.familyName || " "
              },
              fontSubfamily: {
                en: e.styleName || " "
              },
              fullName: {
                en: e.fullName || e.familyName + " " + e.styleName
              },
              postScriptName: {
                en: e.postScriptName || (e.familyName + e.styleName).replace(/\s/g, "")
              },
              designer: {
                en: e.designer || " "
              },
              designerURL: {
                en: e.designerURL || " "
              },
              manufacturer: {
                en: e.manufacturer || " "
              },
              manufacturerURL: {
                en: e.manufacturerURL || " "
              },
              license: {
                en: e.license || " "
              },
              licenseURL: {
                en: e.licenseURL || " "
              },
              version: {
                en: e.version || "Version 0.1"
              },
              description: {
                en: e.description || " "
              },
              copyright: {
                en: e.copyright || " "
              },
              trademark: {
                en: e.trademark || " "
              }
            }, this.unitsPerEm = e.unitsPerEm || 1e3, this.ascender = e.ascender, this.descender = e.descender, this.createdTimestamp = e.createdTimestamp, this.tables = {
              os2: {
                usWeightClass: e.weightClass || this.usWeightClasses.MEDIUM,
                usWidthClass: e.widthClass || this.usWidthClasses.MEDIUM,
                fsSelection: e.fsSelection || this.fsSelectionValues.REGULAR
              }
            }), this.supported = !0, this.glyphs = new xe.GlyphSet(this, e.glyphs || []), this.encoding = new he(this), this.position = new St(this), this.substitution = new wt(this), this.tables = this.tables || {}, Object.defineProperty(this, "hinting", {
              get: function () {
                return this._hinting ? this._hinting : "truetype" === this.outlinesFormat ? this._hinting = new Ut(this) : void 0;
              }
            });
          }

          function Tr(e, t) {
            var r = JSON.stringify(e),
                n = 256;

            for (var a in t) {
              var o = parseInt(a);

              if (o && !(o < 256)) {
                if (JSON.stringify(t[a]) === r) return o;
                n <= o && (n = o + 1);
              }
            }

            return t[n] = e, n;
          }

          function Cr(e, t, r, n) {
            for (var a = [{
              name: "nameID_" + e,
              type: "USHORT",
              value: Tr(t.name, n)
            }, {
              name: "flags_" + e,
              type: "USHORT",
              value: 0
            }], o = 0; o < r.length; ++o) {
              var i = r[o].tag;
              a.push({
                name: "axis_" + e + " " + i,
                type: "FIXED",
                value: t.coordinates[i] << 16
              });
            }

            return a;
          }

          function Nr(e, t, r, n) {
            var a = {},
                o = new se.Parser(e, t);
            a.name = n[o.parseUShort()] || {}, o.skip("uShort", 1), a.coordinates = {};

            for (var i = 0; i < r.length; ++i) a.coordinates[r[i].tag] = o.parseFixed();

            return a;
          }

          Er.prototype.hasChar = function (e) {
            return null !== this.encoding.charToGlyphIndex(e);
          }, Er.prototype.charToGlyphIndex = function (e) {
            return this.encoding.charToGlyphIndex(e);
          }, Er.prototype.charToGlyph = function (e) {
            var t = this.charToGlyphIndex(e),
                r = this.glyphs.get(t);
            return r = r || this.glyphs.get(0);
          }, Er.prototype.stringToGlyphs = function (e, t) {
            t = t || this.defaultRenderOptions;

            for (var r = Mr(e), n = [], a = 0; a < r.length; a += 1) {
              var o = r[a];
              n.push(this.charToGlyphIndex(o));
            }

            var i = n.length;

            if (t.features) {
              var s = t.script || this.substitution.getDefaultScriptName(),
                  l = [];
              t.features.liga && (l = l.concat(this.substitution.getFeature("liga", s, t.language))), t.features.rlig && (l = l.concat(this.substitution.getFeature("rlig", s, t.language)));

              for (var p = 0; p < i; p += 1) for (var u = 0; u < l.length; u++) {
                for (var c = l[u], d = c.sub, h = d.length, m = 0; m < h && d[m] === n[p + m];) m++;

                m === h && (n.splice(p, h, c.by), i = i - h + 1);
              }
            }

            for (var f = new Array(i), y = this.glyphs.get(0), g = 0; g < i; g += 1) f[g] = this.glyphs.get(n[g]) || y;

            return f;
          }, Er.prototype.nameToGlyphIndex = function (e) {
            return this.glyphNames.nameToGlyphIndex(e);
          }, Er.prototype.nameToGlyph = function (e) {
            var t = this.nameToGlyphIndex(e),
                r = this.glyphs.get(t);
            return r = r || this.glyphs.get(0);
          }, Er.prototype.glyphIndexToName = function (e) {
            return this.glyphNames.glyphIndexToName ? this.glyphNames.glyphIndexToName(e) : "";
          }, Er.prototype.getKerningValue = function (e, t) {
            e = e.index || e, t = t.index || t;
            var r = this.position.defaultKerningTables;
            return r ? this.position.getKerningValue(r, e, t) : this.kerningPairs[e + "," + t] || 0;
          }, Er.prototype.defaultRenderOptions = {
            kerning: !0,
            features: {
              liga: !0,
              rlig: !0
            }
          }, Er.prototype.forEachGlyph = function (e, t, r, n, a, o) {
            t = void 0 !== t ? t : 0, r = void 0 !== r ? r : 0, n = void 0 !== n ? n : 72, a = a || this.defaultRenderOptions;
            var i,
                s = 1 / this.unitsPerEm * n,
                l = this.stringToGlyphs(e, a);

            if (a.kerning) {
              var p = a.script || this.position.getDefaultScriptName();
              i = this.position.getKerningTables(p, a.language);
            }

            for (var u = 0; u < l.length; u += 1) {
              var c = l[u];
              if (o.call(this, c, t, r, n, a), c.advanceWidth && (t += c.advanceWidth * s), a.kerning && u < l.length - 1) t += (i ? this.position.getKerningValue(i, c.index, l[u + 1].index) : this.getKerningValue(c, l[u + 1])) * s;
              a.letterSpacing ? t += a.letterSpacing * n : a.tracking && (t += a.tracking / 1e3 * n);
            }

            return t;
          }, Er.prototype.getPath = function (e, t, r, n, o) {
            var i = new A();
            return this.forEachGlyph(e, t, r, n, o, function (e, t, r, n) {
              var a = e.getPath(t, r, n, o, this);
              i.extend(a);
            }), i;
          }, Er.prototype.getPaths = function (e, t, r, n, o) {
            var i = [];
            return this.forEachGlyph(e, t, r, n, o, function (e, t, r, n) {
              var a = e.getPath(t, r, n, o, this);
              i.push(a);
            }), i;
          }, Er.prototype.getAdvanceWidth = function (e, t, r) {
            return this.forEachGlyph(e, 0, 0, t, r, function () {});
          }, Er.prototype.draw = function (e, t, r, n, a, o) {
            this.getPath(t, r, n, a, o).draw(e);
          }, Er.prototype.drawPoints = function (a, e, t, r, n, o) {
            this.forEachGlyph(e, t, r, n, o, function (e, t, r, n) {
              e.drawPoints(a, t, r, n);
            });
          }, Er.prototype.drawMetrics = function (a, e, t, r, n, o) {
            this.forEachGlyph(e, t, r, n, o, function (e, t, r, n) {
              e.drawMetrics(a, t, r, n);
            });
          }, Er.prototype.getEnglishName = function (e) {
            var t = this.names[e];
            if (t) return t.en;
          }, Er.prototype.validate = function () {
            var r = this;

            function e(e) {
              var t = r.getEnglishName(e);
              t && t.trim().length;
            }

            e("fontFamily"), e("weightName"), e("manufacturer"), e("copyright"), e("version"), this.unitsPerEm;
          }, Er.prototype.toTables = function () {
            return gt.fontToTable(this);
          }, Er.prototype.toBuffer = function () {
            return console.warn("Font.toBuffer is deprecated. Use Font.toArrayBuffer instead."), this.toArrayBuffer();
          }, Er.prototype.toArrayBuffer = function () {
            for (var e = this.toTables().encode(), t = new ArrayBuffer(e.length), r = new Uint8Array(t), n = 0; n < e.length; n++) r[n] = e[n];

            return t;
          }, Er.prototype.download = function (t) {
            var e = this.getEnglishName("fontFamily"),
                r = this.getEnglishName("fontSubfamily");
            t = t || e.replace(/\s/g, "") + "-" + r + ".otf";
            var a = this.toArrayBuffer();
            if ("undefined" != typeof window) window.requestFileSystem = window.requestFileSystem || window.webkitRequestFileSystem, window.requestFileSystem(window.TEMPORARY, a.byteLength, function (e) {
              e.root.getFile(t, {
                create: !0
              }, function (n) {
                n.createWriter(function (e) {
                  var t = new DataView(a),
                      r = new Blob([t], {
                    type: "font/opentype"
                  });
                  e.write(r), e.addEventListener("writeend", function () {
                    location.href = n.toURL();
                  }, !1);
                });
              });
            }, function (e) {
              throw new Error(e.name + ": " + e.message);
            });else {
              var n = jr("fs"),
                  o = function (e) {
                for (var t = new Gr(e.byteLength), r = new Uint8Array(e), n = 0; n < t.length; ++n) t[n] = r[n];

                return t;
              }(a);

              n.writeFileSync(t, o);
            }
          }, Er.prototype.fsSelectionValues = {
            ITALIC: 1,
            UNDERSCORE: 2,
            NEGATIVE: 4,
            OUTLINED: 8,
            STRIKEOUT: 16,
            BOLD: 32,
            REGULAR: 64,
            USER_TYPO_METRICS: 128,
            WWS: 256,
            OBLIQUE: 512
          }, Er.prototype.usWidthClasses = {
            ULTRA_CONDENSED: 1,
            EXTRA_CONDENSED: 2,
            CONDENSED: 3,
            SEMI_CONDENSED: 4,
            MEDIUM: 5,
            SEMI_EXPANDED: 6,
            EXPANDED: 7,
            EXTRA_EXPANDED: 8,
            ULTRA_EXPANDED: 9
          }, Er.prototype.usWeightClasses = {
            THIN: 100,
            EXTRA_LIGHT: 200,
            LIGHT: 300,
            NORMAL: 400,
            MEDIUM: 500,
            SEMI_BOLD: 600,
            BOLD: 700,
            EXTRA_BOLD: 800,
            BLACK: 900
          };
          var Or = {
            make: function (e, t) {
              var r,
                  n,
                  a,
                  o,
                  i = new $.Table("fvar", [{
                name: "version",
                type: "ULONG",
                value: 65536
              }, {
                name: "offsetToData",
                type: "USHORT",
                value: 0
              }, {
                name: "countSizePairs",
                type: "USHORT",
                value: 2
              }, {
                name: "axisCount",
                type: "USHORT",
                value: e.axes.length
              }, {
                name: "axisSize",
                type: "USHORT",
                value: 20
              }, {
                name: "instanceCount",
                type: "USHORT",
                value: e.instances.length
              }, {
                name: "instanceSize",
                type: "USHORT",
                value: 4 + 4 * e.axes.length
              }]);
              i.offsetToData = i.sizeOf();

              for (var s = 0; s < e.axes.length; s++) i.fields = i.fields.concat((r = s, n = e.axes[s], a = t, o = Tr(n.name, a), [{
                name: "tag_" + r,
                type: "TAG",
                value: n.tag
              }, {
                name: "minValue_" + r,
                type: "FIXED",
                value: n.minValue << 16
              }, {
                name: "defaultValue_" + r,
                type: "FIXED",
                value: n.defaultValue << 16
              }, {
                name: "maxValue_" + r,
                type: "FIXED",
                value: n.maxValue << 16
              }, {
                name: "flags_" + r,
                type: "USHORT",
                value: 0
              }, {
                name: "nameID_" + r,
                type: "USHORT",
                value: o
              }]));

              for (var l = 0; l < e.instances.length; l++) i.fields = i.fields.concat(Cr(l, e.instances[l], e.axes, t));

              return i;
            },
            parse: function (e, t, r) {
              var n = new se.Parser(e, t),
                  a = n.parseULong();
              L.argument(65536 === a, "Unsupported fvar table version.");
              var o = n.parseOffset16();
              n.skip("uShort", 1);

              for (var i, s, l, p, u, c = n.parseUShort(), d = n.parseUShort(), h = n.parseUShort(), m = n.parseUShort(), f = [], y = 0; y < c; y++) f.push((i = e, s = t + o + y * d, l = r, u = p = void 0, p = {}, u = new se.Parser(i, s), p.tag = u.parseTag(), p.minValue = u.parseFixed(), p.defaultValue = u.parseFixed(), p.maxValue = u.parseFixed(), u.skip("uShort", 1), p.name = l[u.parseUShort()] || {}, p));

              for (var g = [], v = t + o + c * d, b = 0; b < h; b++) g.push(Nr(e, v + b * m, f, r));

              return {
                axes: f,
                instances: g
              };
            }
          },
              Lr = new Array(10);
          Lr[1] = function () {
            var e = this.offset + this.relativeOffset,
                t = this.parseUShort();
            return 1 === t ? {
              posFormat: 1,
              coverage: this.parsePointer(oe.coverage),
              value: this.parseValueRecord()
            } : 2 === t ? {
              posFormat: 2,
              coverage: this.parsePointer(oe.coverage),
              values: this.parseValueRecordList()
            } : void L.assert(!1, "0x" + e.toString(16) + ": GPOS lookup type 1 format must be 1 or 2.");
          }, Lr[2] = function () {
            var e = this.offset + this.relativeOffset,
                t = this.parseUShort();
            L.assert(1 === t || 2 === t, "0x" + e.toString(16) + ": GPOS lookup type 2 format must be 1 or 2.");
            var r = this.parsePointer(oe.coverage),
                n = this.parseUShort(),
                a = this.parseUShort();
            if (1 === t) return {
              posFormat: t,
              coverage: r,
              valueFormat1: n,
              valueFormat2: a,
              pairSets: this.parseList(oe.pointer(oe.list(function () {
                return {
                  secondGlyph: this.parseUShort(),
                  value1: this.parseValueRecord(n),
                  value2: this.parseValueRecord(a)
                };
              })))
            };

            if (2 === t) {
              var o = this.parsePointer(oe.classDef),
                  i = this.parsePointer(oe.classDef),
                  s = this.parseUShort(),
                  l = this.parseUShort();
              return {
                posFormat: t,
                coverage: r,
                valueFormat1: n,
                valueFormat2: a,
                classDef1: o,
                classDef2: i,
                class1Count: s,
                class2Count: l,
                classRecords: this.parseList(s, oe.list(l, function () {
                  return {
                    value1: this.parseValueRecord(n),
                    value2: this.parseValueRecord(a)
                  };
                }))
              };
            }
          }, Lr[3] = function () {
            return {
              error: "GPOS Lookup 3 not supported"
            };
          }, Lr[4] = function () {
            return {
              error: "GPOS Lookup 4 not supported"
            };
          }, Lr[5] = function () {
            return {
              error: "GPOS Lookup 5 not supported"
            };
          }, Lr[6] = function () {
            return {
              error: "GPOS Lookup 6 not supported"
            };
          }, Lr[7] = function () {
            return {
              error: "GPOS Lookup 7 not supported"
            };
          }, Lr[8] = function () {
            return {
              error: "GPOS Lookup 8 not supported"
            };
          }, Lr[9] = function () {
            return {
              error: "GPOS Lookup 9 not supported"
            };
          };
          var Ir = new Array(10);
          var Pr = {
            parse: function (e, t) {
              var r = new oe(e, t = t || 0),
                  n = r.parseVersion(1);
              return L.argument(1 === n || 1.1 === n, "Unsupported GPOS table version " + n), 1 === n ? {
                version: n,
                scripts: r.parseScriptList(),
                features: r.parseFeatureList(),
                lookups: r.parseLookupList(Lr)
              } : {
                version: n,
                scripts: r.parseScriptList(),
                features: r.parseFeatureList(),
                lookups: r.parseLookupList(Lr),
                variations: r.parseFeatureVariationsList()
              };
            },
            make: function (e) {
              return new $.Table("GPOS", [{
                name: "version",
                type: "ULONG",
                value: 65536
              }, {
                name: "scripts",
                type: "TABLE",
                value: new $.ScriptList(e.scripts)
              }, {
                name: "features",
                type: "TABLE",
                value: new $.FeatureList(e.features)
              }, {
                name: "lookups",
                type: "TABLE",
                value: new $.LookupList(e.lookups, Ir)
              }]);
            }
          };
          var Rr = {
            parse: function (e, t) {
              var r = new se.Parser(e, t),
                  n = r.parseUShort();
              if (0 === n) return function (e) {
                var t = {};
                e.skip("uShort");
                var r = e.parseUShort();
                L.argument(0 === r, "Unsupported kern sub-table version."), e.skip("uShort", 2);
                var n = e.parseUShort();
                e.skip("uShort", 3);

                for (var a = 0; a < n; a += 1) {
                  var o = e.parseUShort(),
                      i = e.parseUShort(),
                      s = e.parseShort();
                  t[o + "," + i] = s;
                }

                return t;
              }(r);
              if (1 === n) return function (e) {
                var t = {};
                e.skip("uShort"), 1 < e.parseULong() && console.warn("Only the first kern subtable is supported."), e.skip("uLong");
                var r = 255 & e.parseUShort();

                if (e.skip("uShort"), 0 == r) {
                  var n = e.parseUShort();
                  e.skip("uShort", 3);

                  for (var a = 0; a < n; a += 1) {
                    var o = e.parseUShort(),
                        i = e.parseUShort(),
                        s = e.parseShort();
                    t[o + "," + i] = s;
                  }
                }

                return t;
              }(r);
              throw new Error("Unsupported kern table version (" + n + ").");
            }
          };
          var Dr = {
            parse: function (e, t, r, n) {
              for (var a = new se.Parser(e, t), o = n ? a.parseUShort : a.parseULong, i = [], s = 0; s < r + 1; s += 1) {
                var l = o.call(a);
                n && (l *= 2), i.push(l);
              }

              return i;
            }
          };

          function Ar(e, r) {
            jr("fs").readFile(e, function (e, t) {
              if (e) return r(e.message);
              r(null, Tt(t));
            });
          }

          function kr(e, t) {
            var r = new XMLHttpRequest();
            r.open("get", e, !0), r.responseType = "arraybuffer", r.onload = function () {
              return r.response ? t(null, r.response) : t("Font could not be loaded: " + r.statusText);
            }, r.onerror = function () {
              t("Font could not be loaded");
            }, r.send();
          }

          function Fr(e, t) {
            for (var r = [], n = 12, a = 0; a < t; a += 1) {
              var o = se.getTag(e, n),
                  i = se.getULong(e, n + 4),
                  s = se.getULong(e, n + 8),
                  l = se.getULong(e, n + 12);
              r.push({
                tag: o,
                checksum: i,
                offset: s,
                length: l,
                compression: !1
              }), n += 16;
            }

            return r;
          }

          function Ur(e, t) {
            if ("WOFF" !== t.compression) return {
              data: e,
              offset: t.offset
            };
            var r = new Uint8Array(e.buffer, t.offset + 2, t.compressedLength - 2),
                n = new Uint8Array(t.length);
            if (a(r, n), n.byteLength !== t.length) throw new Error("Decompression error: " + t.tag + " decompressed length doesn't match recorded length");
            return {
              data: new DataView(n.buffer, 0),
              offset: 0
            };
          }

          function Br(e) {
            var t,
                r,
                n,
                a,
                o,
                i,
                s,
                l,
                p,
                u,
                c,
                d,
                h,
                m,
                f = new Er({
              empty: !0
            }),
                y = new DataView(e, 0),
                g = [],
                v = se.getTag(y, 0);
            if (v === String.fromCharCode(0, 1, 0, 0) || "true" === v || "typ1" === v) f.outlinesFormat = "truetype", g = Fr(y, n = se.getUShort(y, 4));else if ("OTTO" === v) f.outlinesFormat = "cff", g = Fr(y, n = se.getUShort(y, 4));else {
              if ("wOFF" !== v) throw new Error("Unsupported OpenType signature " + v);
              var b = se.getTag(y, 4);
              if (b === String.fromCharCode(0, 1, 0, 0)) f.outlinesFormat = "truetype";else {
                if ("OTTO" !== b) throw new Error("Unsupported OpenType flavor " + v);
                f.outlinesFormat = "cff";
              }

              g = function (e, t) {
                for (var r = [], n = 44, a = 0; a < t; a += 1) {
                  var o = se.getTag(e, n),
                      i = se.getULong(e, n + 4),
                      s = se.getULong(e, n + 8),
                      l = se.getULong(e, n + 12),
                      p = void 0;
                  p = s < l && "WOFF", r.push({
                    tag: o,
                    offset: i,
                    compression: p,
                    compressedLength: s,
                    length: l
                  }), n += 20;
                }

                return r;
              }(y, n = se.getUShort(y, 12));
            }

            for (var _ = 0; _ < n; _ += 1) {
              var x = g[_],
                  S = void 0;

              switch (x.tag) {
                case "cmap":
                  S = Ur(y, x), f.tables.cmap = le.parse(S.data, S.offset), f.encoding = new me(f.tables.cmap);
                  break;

                case "cvt ":
                  S = Ur(y, x), m = new se.Parser(S.data, S.offset), f.tables.cvt = m.parseShortList(x.length / 2);
                  break;

                case "fvar":
                  o = x;
                  break;

                case "fpgm":
                  S = Ur(y, x), m = new se.Parser(S.data, S.offset), f.tables.fpgm = m.parseByteList(x.length);
                  break;

                case "head":
                  S = Ur(y, x), f.tables.head = Ge.parse(S.data, S.offset), f.unitsPerEm = f.tables.head.unitsPerEm, t = f.tables.head.indexToLocFormat;
                  break;

                case "hhea":
                  S = Ur(y, x), f.tables.hhea = je.parse(S.data, S.offset), f.ascender = f.tables.hhea.ascender, f.descender = f.tables.hhea.descender, f.numberOfHMetrics = f.tables.hhea.numberOfHMetrics;
                  break;

                case "hmtx":
                  p = x;
                  break;

                case "ltag":
                  S = Ur(y, x), r = ze.parse(S.data, S.offset);
                  break;

                case "maxp":
                  S = Ur(y, x), f.tables.maxp = He.parse(S.data, S.offset), f.numGlyphs = f.tables.maxp.numGlyphs;
                  break;

                case "name":
                  d = x;
                  break;

                case "OS/2":
                  S = Ur(y, x), f.tables.os2 = ot.parse(S.data, S.offset);
                  break;

                case "post":
                  S = Ur(y, x), f.tables.post = it.parse(S.data, S.offset), f.glyphNames = new ye(f.tables.post);
                  break;

                case "prep":
                  S = Ur(y, x), m = new se.Parser(S.data, S.offset), f.tables.prep = m.parseByteList(x.length);
                  break;

                case "glyf":
                  i = x;
                  break;

                case "loca":
                  c = x;
                  break;

                case "CFF ":
                  a = x;
                  break;

                case "kern":
                  u = x;
                  break;

                case "GPOS":
                  s = x;
                  break;

                case "GSUB":
                  l = x;
                  break;

                case "meta":
                  h = x;
              }
            }

            var w = Ur(y, d);

            if (f.tables.name = nt.parse(w.data, w.offset, r), f.names = f.tables.name, i && c) {
              var M = 0 === t,
                  E = Ur(y, c),
                  T = Dr.parse(E.data, E.offset, f.numGlyphs, M),
                  C = Ur(y, i);
              f.glyphs = Ft.parse(C.data, C.offset, T, f);
            } else {
              if (!a) throw new Error("Font doesn't contain TrueType or CFF outlines.");
              var N = Ur(y, a);
              Be.parse(N.data, N.offset, f);
            }

            var O = Ur(y, p);

            if (Ve.parse(O.data, O.offset, f.numberOfHMetrics, f.numGlyphs, f.glyphs), function (e) {
              for (var t, r = e.tables.cmap.glyphIndexMap, n = Object.keys(r), a = 0; a < n.length; a += 1) {
                var o = n[a],
                    i = r[o];
                (t = e.glyphs.get(i)).addUnicode(parseInt(o));
              }

              for (var s = 0; s < e.glyphs.length; s += 1) t = e.glyphs.get(s), e.cffEncoding ? e.isCIDFont ? t.name = "gid" + s : t.name = e.cffEncoding.charset[s] : e.glyphNames.names && (t.name = e.glyphNames.glyphIndexToName(s));
            }(f), u) {
              var L = Ur(y, u);
              f.kerningPairs = Rr.parse(L.data, L.offset);
            } else f.kerningPairs = {};

            if (s) {
              var I = Ur(y, s);
              f.tables.gpos = Pr.parse(I.data, I.offset), f.position.init();
            }

            if (l) {
              var P = Ur(y, l);
              f.tables.gsub = ut.parse(P.data, P.offset);
            }

            if (o) {
              var R = Ur(y, o);
              f.tables.fvar = Or.parse(R.data, R.offset, f.names);
            }

            if (h) {
              var D = Ur(y, h);
              f.tables.meta = ct.parse(D.data, D.offset), f.metas = f.tables.meta;
            }

            return f;
          }

          E.Font = Er, E.Glyph = ve, E.Path = A, E.BoundingBox = C, E._parse = se, E.parse = Br, E.load = function (e, n) {
            ("undefined" == typeof window ? Ar : kr)(e, function (e, t) {
              if (e) return n(e);
              var r;

              try {
                r = Br(t);
              } catch (e) {
                return n(e, null);
              }

              return n(null, r);
            });
          }, E.loadSync = function (e) {
            return Br(Tt(jr("fs").readFileSync(e)));
          }, Object.defineProperty(E, "__esModule", {
            value: !0
          });
        }("object" == typeof r && void 0 !== t ? r : e.opentype = {});
      }).call(this, jr("buffer").Buffer);
    }, {
      buffer: 5,
      fs: 3
    }],
    14: [function (e, t, p) {
      (function (a) {
        function o(e, t) {
          for (var r = 0, n = e.length - 1; 0 <= n; n--) {
            var a = e[n];
            "." === a ? e.splice(n, 1) : ".." === a ? (e.splice(n, 1), r++) : r && (e.splice(n, 1), r--);
          }

          if (t) for (; r--;) e.unshift("..");
          return e;
        }

        function i(e, t) {
          if (e.filter) return e.filter(t);

          for (var r = [], n = 0; n < e.length; n++) t(e[n], n, e) && r.push(e[n]);

          return r;
        }

        p.resolve = function () {
          for (var e = "", t = !1, r = arguments.length - 1; -1 <= r && !t; r--) {
            var n = 0 <= r ? arguments[r] : a.cwd();
            if ("string" != typeof n) throw new TypeError("Arguments to path.resolve must be strings");
            n && (e = n + "/" + e, t = "/" === n.charAt(0));
          }

          return (t ? "/" : "") + (e = o(i(e.split("/"), function (e) {
            return !!e;
          }), !t).join("/")) || ".";
        }, p.normalize = function (e) {
          var t = p.isAbsolute(e),
              r = "/" === n(e, -1);
          return (e = o(i(e.split("/"), function (e) {
            return !!e;
          }), !t).join("/")) || t || (e = "."), e && r && (e += "/"), (t ? "/" : "") + e;
        }, p.isAbsolute = function (e) {
          return "/" === e.charAt(0);
        }, p.join = function () {
          var e = Array.prototype.slice.call(arguments, 0);
          return p.normalize(i(e, function (e, t) {
            if ("string" != typeof e) throw new TypeError("Arguments to path.join must be strings");
            return e;
          }).join("/"));
        }, p.relative = function (e, t) {
          function r(e) {
            for (var t = 0; t < e.length && "" === e[t]; t++);

            for (var r = e.length - 1; 0 <= r && "" === e[r]; r--);

            return r < t ? [] : e.slice(t, r - t + 1);
          }

          e = p.resolve(e).substr(1), t = p.resolve(t).substr(1);

          for (var n = r(e.split("/")), a = r(t.split("/")), o = Math.min(n.length, a.length), i = o, s = 0; s < o; s++) if (n[s] !== a[s]) {
            i = s;
            break;
          }

          var l = [];

          for (s = i; s < n.length; s++) l.push("..");

          return (l = l.concat(a.slice(i))).join("/");
        }, p.sep = "/", p.delimiter = ":", p.dirname = function (e) {
          if ("string" != typeof e && (e += ""), 0 === e.length) return ".";

          for (var t = e.charCodeAt(0), r = 47 === t, n = -1, a = !0, o = e.length - 1; 1 <= o; --o) if (47 === (t = e.charCodeAt(o))) {
            if (!a) {
              n = o;
              break;
            }
          } else a = !1;

          return -1 === n ? r ? "/" : "." : r && 1 === n ? "/" : e.slice(0, n);
        }, p.basename = function (e, t) {
          var r = function (e) {
            "string" != typeof e && (e += "");
            var t,
                r = 0,
                n = -1,
                a = !0;

            for (t = e.length - 1; 0 <= t; --t) if (47 === e.charCodeAt(t)) {
              if (!a) {
                r = t + 1;
                break;
              }
            } else -1 === n && (a = !1, n = t + 1);

            return -1 === n ? "" : e.slice(r, n);
          }(e);

          return t && r.substr(-1 * t.length) === t && (r = r.substr(0, r.length - t.length)), r;
        }, p.extname = function (e) {
          "string" != typeof e && (e += "");

          for (var t = -1, r = 0, n = -1, a = !0, o = 0, i = e.length - 1; 0 <= i; --i) {
            var s = e.charCodeAt(i);

            if (47 === s) {
              if (a) continue;
              r = i + 1;
              break;
            }

            -1 === n && (a = !1, n = i + 1), 46 === s ? -1 === t ? t = i : 1 !== o && (o = 1) : -1 !== t && (o = -1);
          }

          return -1 === t || -1 === n || 0 === o || 1 === o && t === n - 1 && t === r + 1 ? "" : e.slice(t, n);
        };
        var n = "b" === "ab".substr(-1) ? function (e, t, r) {
          return e.substr(t, r);
        } : function (e, t, r) {
          return t < 0 && (t = e.length + t), e.substr(t, r);
        };
      }).call(this, e("_process"));
    }, {
      _process: 15
    }],
    15: [function (e, t, r) {
      var n,
          a,
          o = t.exports = {};

      function i() {
        throw new Error("setTimeout has not been defined");
      }

      function s() {
        throw new Error("clearTimeout has not been defined");
      }

      function l(t) {
        if (n === setTimeout) return setTimeout(t, 0);
        if ((n === i || !n) && setTimeout) return n = setTimeout, setTimeout(t, 0);

        try {
          return n(t, 0);
        } catch (e) {
          try {
            return n.call(null, t, 0);
          } catch (e) {
            return n.call(this, t, 0);
          }
        }
      }

      !function () {
        try {
          n = "function" == typeof setTimeout ? setTimeout : i;
        } catch (e) {
          n = i;
        }

        try {
          a = "function" == typeof clearTimeout ? clearTimeout : s;
        } catch (e) {
          a = s;
        }
      }();
      var p,
          u = [],
          c = !1,
          d = -1;

      function h() {
        c && p && (c = !1, p.length ? u = p.concat(u) : d = -1, u.length && m());
      }

      function m() {
        if (!c) {
          var e = l(h);
          c = !0;

          for (var t = u.length; t;) {
            for (p = u, u = []; ++d < t;) p && p[d].run();

            d = -1, t = u.length;
          }

          p = null, c = !1, function (t) {
            if (a === clearTimeout) return clearTimeout(t);
            if ((a === s || !a) && clearTimeout) return a = clearTimeout, clearTimeout(t);

            try {
              a(t);
            } catch (e) {
              try {
                return a.call(null, t);
              } catch (e) {
                return a.call(this, t);
              }
            }
          }(e);
        }
      }

      function f(e, t) {
        this.fun = e, this.array = t;
      }

      function y() {}

      o.nextTick = function (e) {
        var t = new Array(arguments.length - 1);
        if (1 < arguments.length) for (var r = 1; r < arguments.length; r++) t[r - 1] = arguments[r];
        u.push(new f(e, t)), 1 !== u.length || c || l(m);
      }, f.prototype.run = function () {
        this.fun.apply(null, this.array);
      }, o.title = "browser", o.browser = !0, o.env = {}, o.argv = [], o.version = "", o.versions = {}, o.on = y, o.addListener = y, o.once = y, o.off = y, o.removeListener = y, o.removeAllListeners = y, o.emit = y, o.prependListener = y, o.prependOnceListener = y, o.listeners = function (e) {
        return [];
      }, o.binding = function (e) {
        throw new Error("process.binding is not supported");
      }, o.cwd = function () {
        return "/";
      }, o.chdir = function (e) {
        throw new Error("process.chdir is not supported");
      }, o.umask = function () {
        return 0;
      };
    }, {}],
    16: [function (e, t, r) {
      !function (e) {
        "use strict";

        if (!e.fetch) {
          var t = ("URLSearchParams" in e),
              r = "Symbol" in e && "iterator" in Symbol,
              i = "FileReader" in e && "Blob" in e && function () {
            try {
              return new Blob(), !0;
            } catch (e) {
              return !1;
            }
          }(),
              n = ("FormData" in e),
              a = ("ArrayBuffer" in e);

          if (a) var o = ["[object Int8Array]", "[object Uint8Array]", "[object Uint8ClampedArray]", "[object Int16Array]", "[object Uint16Array]", "[object Int32Array]", "[object Uint32Array]", "[object Float32Array]", "[object Float64Array]"],
              s = function (e) {
            return e && DataView.prototype.isPrototypeOf(e);
          },
              l = ArrayBuffer.isView || function (e) {
            return e && -1 < o.indexOf(Object.prototype.toString.call(e));
          };
          m.prototype.append = function (e, t) {
            e = c(e), t = d(t);
            var r = this.map[e];
            this.map[e] = r ? r + "," + t : t;
          }, m.prototype.delete = function (e) {
            delete this.map[c(e)];
          }, m.prototype.get = function (e) {
            return e = c(e), this.has(e) ? this.map[e] : null;
          }, m.prototype.has = function (e) {
            return this.map.hasOwnProperty(c(e));
          }, m.prototype.set = function (e, t) {
            this.map[c(e)] = d(t);
          }, m.prototype.forEach = function (e, t) {
            for (var r in this.map) this.map.hasOwnProperty(r) && e.call(t, this.map[r], r, this);
          }, m.prototype.keys = function () {
            var r = [];
            return this.forEach(function (e, t) {
              r.push(t);
            }), h(r);
          }, m.prototype.values = function () {
            var t = [];
            return this.forEach(function (e) {
              t.push(e);
            }), h(t);
          }, m.prototype.entries = function () {
            var r = [];
            return this.forEach(function (e, t) {
              r.push([t, e]);
            }), h(r);
          }, r && (m.prototype[Symbol.iterator] = m.prototype.entries);
          var p = ["DELETE", "GET", "HEAD", "OPTIONS", "POST", "PUT"];
          _.prototype.clone = function () {
            return new _(this, {
              body: this._bodyInit
            });
          }, b.call(_.prototype), b.call(S.prototype), S.prototype.clone = function () {
            return new S(this._bodyInit, {
              status: this.status,
              statusText: this.statusText,
              headers: new m(this.headers),
              url: this.url
            });
          }, S.error = function () {
            var e = new S(null, {
              status: 0,
              statusText: ""
            });
            return e.type = "error", e;
          };
          var u = [301, 302, 303, 307, 308];
          S.redirect = function (e, t) {
            if (-1 === u.indexOf(t)) throw new RangeError("Invalid status code");
            return new S(null, {
              status: t,
              headers: {
                location: e
              }
            });
          }, e.Headers = m, e.Request = _, e.Response = S, e.fetch = function (r, a) {
            return new Promise(function (n, e) {
              var t = new _(r, a),
                  o = new XMLHttpRequest();
              o.onload = function () {
                var e,
                    a,
                    t = {
                  status: o.status,
                  statusText: o.statusText,
                  headers: (e = o.getAllResponseHeaders() || "", a = new m(), e.replace(/\r?\n[\t ]+/g, " ").split(/\r?\n/).forEach(function (e) {
                    var t = e.split(":"),
                        r = t.shift().trim();

                    if (r) {
                      var n = t.join(":").trim();
                      a.append(r, n);
                    }
                  }), a)
                };
                t.url = "responseURL" in o ? o.responseURL : t.headers.get("X-Request-URL");
                var r = "response" in o ? o.response : o.responseText;
                n(new S(r, t));
              }, o.onerror = function () {
                e(new TypeError("Network request failed"));
              }, o.ontimeout = function () {
                e(new TypeError("Network request failed"));
              }, o.open(t.method, t.url, !0), "include" === t.credentials ? o.withCredentials = !0 : "omit" === t.credentials && (o.withCredentials = !1), "responseType" in o && i && (o.responseType = "blob"), t.headers.forEach(function (e, t) {
                o.setRequestHeader(t, e);
              }), o.send(void 0 === t._bodyInit ? null : t._bodyInit);
            });
          }, e.fetch.polyfill = !0;
        }

        function c(e) {
          if ("string" != typeof e && (e = String(e)), /[^a-z0-9\-#$%&'*+.\^_`|~]/i.test(e)) throw new TypeError("Invalid character in header field name");
          return e.toLowerCase();
        }

        function d(e) {
          return "string" != typeof e && (e = String(e)), e;
        }

        function h(t) {
          var e = {
            next: function () {
              var e = t.shift();
              return {
                done: void 0 === e,
                value: e
              };
            }
          };
          return r && (e[Symbol.iterator] = function () {
            return e;
          }), e;
        }

        function m(t) {
          this.map = {}, t instanceof m ? t.forEach(function (e, t) {
            this.append(t, e);
          }, this) : Array.isArray(t) ? t.forEach(function (e) {
            this.append(e[0], e[1]);
          }, this) : t && Object.getOwnPropertyNames(t).forEach(function (e) {
            this.append(e, t[e]);
          }, this);
        }

        function f(e) {
          if (e.bodyUsed) return Promise.reject(new TypeError("Already read"));
          e.bodyUsed = !0;
        }

        function y(r) {
          return new Promise(function (e, t) {
            r.onload = function () {
              e(r.result);
            }, r.onerror = function () {
              t(r.error);
            };
          });
        }

        function g(e) {
          var t = new FileReader(),
              r = y(t);
          return t.readAsArrayBuffer(e), r;
        }

        function v(e) {
          if (e.slice) return e.slice(0);
          var t = new Uint8Array(e.byteLength);
          return t.set(new Uint8Array(e)), t.buffer;
        }

        function b() {
          return this.bodyUsed = !1, this._initBody = function (e) {
            if (this._bodyInit = e) {
              if ("string" == typeof e) this._bodyText = e;else if (i && Blob.prototype.isPrototypeOf(e)) this._bodyBlob = e;else if (n && FormData.prototype.isPrototypeOf(e)) this._bodyFormData = e;else if (t && URLSearchParams.prototype.isPrototypeOf(e)) this._bodyText = e.toString();else if (a && i && s(e)) this._bodyArrayBuffer = v(e.buffer), this._bodyInit = new Blob([this._bodyArrayBuffer]);else {
                if (!a || !ArrayBuffer.prototype.isPrototypeOf(e) && !l(e)) throw new Error("unsupported BodyInit type");
                this._bodyArrayBuffer = v(e);
              }
            } else this._bodyText = "";
            this.headers.get("content-type") || ("string" == typeof e ? this.headers.set("content-type", "text/plain;charset=UTF-8") : this._bodyBlob && this._bodyBlob.type ? this.headers.set("content-type", this._bodyBlob.type) : t && URLSearchParams.prototype.isPrototypeOf(e) && this.headers.set("content-type", "application/x-www-form-urlencoded;charset=UTF-8"));
          }, i && (this.blob = function () {
            var e = f(this);
            if (e) return e;
            if (this._bodyBlob) return Promise.resolve(this._bodyBlob);
            if (this._bodyArrayBuffer) return Promise.resolve(new Blob([this._bodyArrayBuffer]));
            if (this._bodyFormData) throw new Error("could not read FormData body as blob");
            return Promise.resolve(new Blob([this._bodyText]));
          }, this.arrayBuffer = function () {
            return this._bodyArrayBuffer ? f(this) || Promise.resolve(this._bodyArrayBuffer) : this.blob().then(g);
          }), this.text = function () {
            var e,
                t,
                r,
                n = f(this);
            if (n) return n;
            if (this._bodyBlob) return e = this._bodyBlob, t = new FileReader(), r = y(t), t.readAsText(e), r;
            if (this._bodyArrayBuffer) return Promise.resolve(function (e) {
              for (var t = new Uint8Array(e), r = new Array(t.length), n = 0; n < t.length; n++) r[n] = String.fromCharCode(t[n]);

              return r.join("");
            }(this._bodyArrayBuffer));
            if (this._bodyFormData) throw new Error("could not read FormData body as text");
            return Promise.resolve(this._bodyText);
          }, n && (this.formData = function () {
            return this.text().then(x);
          }), this.json = function () {
            return this.text().then(JSON.parse);
          }, this;
        }

        function _(e, t) {
          var r,
              n,
              a = (t = t || {}).body;

          if (e instanceof _) {
            if (e.bodyUsed) throw new TypeError("Already read");
            this.url = e.url, this.credentials = e.credentials, t.headers || (this.headers = new m(e.headers)), this.method = e.method, this.mode = e.mode, a || null == e._bodyInit || (a = e._bodyInit, e.bodyUsed = !0);
          } else this.url = String(e);

          if (this.credentials = t.credentials || this.credentials || "omit", !t.headers && this.headers || (this.headers = new m(t.headers)), this.method = (r = t.method || this.method || "GET", n = r.toUpperCase(), -1 < p.indexOf(n) ? n : r), this.mode = t.mode || this.mode || null, this.referrer = null, ("GET" === this.method || "HEAD" === this.method) && a) throw new TypeError("Body not allowed for GET or HEAD requests");

          this._initBody(a);
        }

        function x(e) {
          var a = new FormData();
          return e.trim().split("&").forEach(function (e) {
            if (e) {
              var t = e.split("="),
                  r = t.shift().replace(/\+/g, " "),
                  n = t.join("=").replace(/\+/g, " ");
              a.append(decodeURIComponent(r), decodeURIComponent(n));
            }
          }), a;
        }

        function S(e, t) {
          t = t || {}, this.type = "default", this.status = void 0 === t.status ? 200 : t.status, this.ok = 200 <= this.status && this.status < 300, this.statusText = "statusText" in t ? t.statusText : "OK", this.headers = new m(t.headers), this.url = t.url || "", this._initBody(e);
        }
      }("undefined" != typeof self ? self : this);
    }, {}],
    17: [function (e, t, r) {
      "use strict";

      var n,
          a = (n = e("./core/main")) && n.__esModule ? n : {
        default: n
      };
      e("./core/constants"), e("./core/environment"), e("./core/friendly_errors/stacktrace"), e("./core/friendly_errors/validate_params"), e("./core/friendly_errors/file_errors"), e("./core/friendly_errors/fes_core"), e("./core/helpers"), e("./core/legacy"), e("./core/preload"), e("./core/p5.Element"), e("./core/p5.Graphics"), e("./core/p5.Renderer"), e("./core/p5.Renderer2D"), e("./core/rendering"), e("./core/shim"), e("./core/structure"), e("./core/transform"), e("./core/shape/2d_primitives"), e("./core/shape/attributes"), e("./core/shape/curves"), e("./core/shape/vertex"), e("./color/color_conversion"), e("./color/creating_reading"), e("./color/p5.Color"), e("./color/setting"), e("./data/p5.TypedDict"), e("./data/local_storage.js"), e("./dom/dom"), e("./events/acceleration"), e("./events/keyboard"), e("./events/mouse"), e("./events/touch"), e("./image/filters"), e("./image/image"), e("./image/loading_displaying"), e("./image/p5.Image"), e("./image/pixels"), e("./io/files"), e("./io/p5.Table"), e("./io/p5.TableRow"), e("./io/p5.XML"), e("./math/calculation"), e("./math/math"), e("./math/noise"), e("./math/p5.Vector"), e("./math/random"), e("./math/trigonometry"), e("./typography/attributes"), e("./typography/loading_displaying"), e("./typography/p5.Font"), e("./utilities/array_functions"), e("./utilities/conversion"), e("./utilities/string_functions"), e("./utilities/time_date"), e("./webgl/3d_primitives"), e("./webgl/interaction"), e("./webgl/light"), e("./webgl/loading"), e("./webgl/material"), e("./webgl/p5.Camera"), e("./webgl/p5.Geometry"), e("./webgl/p5.Matrix"), e("./webgl/p5.RendererGL.Immediate"), e("./webgl/p5.RendererGL"), e("./webgl/p5.RendererGL.Retained"), e("./webgl/p5.Shader"), e("./webgl/p5.RenderBuffer"), e("./webgl/p5.Texture"), e("./webgl/text"), e("./core/init"), t.exports = a.default;
    }, {
      "./color/color_conversion": 18,
      "./color/creating_reading": 19,
      "./color/p5.Color": 20,
      "./color/setting": 21,
      "./core/constants": 22,
      "./core/environment": 23,
      "./core/friendly_errors/fes_core": 24,
      "./core/friendly_errors/file_errors": 25,
      "./core/friendly_errors/stacktrace": 26,
      "./core/friendly_errors/validate_params": 27,
      "./core/helpers": 28,
      "./core/init": 29,
      "./core/legacy": 31,
      "./core/main": 32,
      "./core/p5.Element": 33,
      "./core/p5.Graphics": 34,
      "./core/p5.Renderer": 35,
      "./core/p5.Renderer2D": 36,
      "./core/preload": 37,
      "./core/rendering": 38,
      "./core/shape/2d_primitives": 39,
      "./core/shape/attributes": 40,
      "./core/shape/curves": 41,
      "./core/shape/vertex": 42,
      "./core/shim": 43,
      "./core/structure": 44,
      "./core/transform": 45,
      "./data/local_storage.js": 46,
      "./data/p5.TypedDict": 47,
      "./dom/dom": 48,
      "./events/acceleration": 49,
      "./events/keyboard": 50,
      "./events/mouse": 51,
      "./events/touch": 52,
      "./image/filters": 53,
      "./image/image": 54,
      "./image/loading_displaying": 55,
      "./image/p5.Image": 56,
      "./image/pixels": 57,
      "./io/files": 58,
      "./io/p5.Table": 59,
      "./io/p5.TableRow": 60,
      "./io/p5.XML": 61,
      "./math/calculation": 62,
      "./math/math": 63,
      "./math/noise": 64,
      "./math/p5.Vector": 65,
      "./math/random": 66,
      "./math/trigonometry": 67,
      "./typography/attributes": 68,
      "./typography/loading_displaying": 69,
      "./typography/p5.Font": 70,
      "./utilities/array_functions": 71,
      "./utilities/conversion": 72,
      "./utilities/string_functions": 73,
      "./utilities/time_date": 74,
      "./webgl/3d_primitives": 75,
      "./webgl/interaction": 76,
      "./webgl/light": 77,
      "./webgl/loading": 78,
      "./webgl/material": 79,
      "./webgl/p5.Camera": 80,
      "./webgl/p5.Geometry": 81,
      "./webgl/p5.Matrix": 82,
      "./webgl/p5.RenderBuffer": 83,
      "./webgl/p5.RendererGL": 86,
      "./webgl/p5.RendererGL.Immediate": 84,
      "./webgl/p5.RendererGL.Retained": 85,
      "./webgl/p5.Shader": 87,
      "./webgl/p5.Texture": 88,
      "./webgl/text": 89
    }],
    18: [function (e, t, r) {
      "use strict";

      Object.defineProperty(r, "__esModule", {
        value: !0
      }), r.default = void 0;
      var n,
          a = (n = e("../core/main")) && n.__esModule ? n : {
        default: n
      };
      a.default.ColorConversion = {}, a.default.ColorConversion._hsbaToHSLA = function (e) {
        var t = e[0],
            r = e[1],
            n = e[2],
            a = (2 - r) * n / 2;
        return 0 != a && (1 == a ? r = 0 : a < .5 ? r /= 2 - r : r = r * n / (2 - 2 * a)), [t, r, a, e[3]];
      }, a.default.ColorConversion._hsbaToRGBA = function (e) {
        var t = 6 * e[0],
            r = e[1],
            n = e[2],
            a = [];
        if (0 === r) a = [n, n, n, e[3]];else {
          var o,
              i,
              s,
              l = Math.floor(t),
              p = n * (1 - r),
              u = n * (1 - r * (t - l)),
              c = n * (1 - r * (1 + l - t));
          s = 1 === l ? (o = u, i = n, p) : 2 === l ? (o = p, i = n, c) : 3 === l ? (o = p, i = u, n) : 4 === l ? (o = c, i = p, n) : 5 === l ? (o = n, i = p, u) : (o = n, i = c, p), a = [o, i, s, e[3]];
        }
        return a;
      }, a.default.ColorConversion._hslaToHSBA = function (e) {
        var t,
            r = e[0],
            n = e[1],
            a = e[2];
        return [r, n = 2 * ((t = a < .5 ? (1 + n) * a : a + n - a * n) - a) / t, t, e[3]];
      }, a.default.ColorConversion._hslaToRGBA = function (e) {
        var t = 6 * e[0],
            r = e[1],
            n = e[2],
            a = [];
        if (0 === r) a = [n, n, n, e[3]];else {
          var o,
              i = 2 * n - (o = n < .5 ? (1 + r) * n : n + r - n * r),
              s = function (e, t, r) {
            return e < 0 ? e += 6 : 6 <= e && (e -= 6), e < 1 ? t + (r - t) * e : e < 3 ? r : e < 4 ? t + (r - t) * (4 - e) : t;
          };

          a = [s(2 + t, i, o), s(t, i, o), s(t - 2, i, o), e[3]];
        }
        return a;
      }, a.default.ColorConversion._rgbaToHSBA = function (e) {
        var t,
            r,
            n = e[0],
            a = e[1],
            o = e[2],
            i = Math.max(n, a, o),
            s = i - Math.min(n, a, o);
        return 0 == s ? r = t = 0 : (r = s / i, n === i ? t = (a - o) / s : a === i ? t = 2 + (o - n) / s : o === i && (t = 4 + (n - a) / s), t < 0 ? t += 6 : 6 <= t && (t -= 6)), [t / 6, r, i, e[3]];
      }, a.default.ColorConversion._rgbaToHSLA = function (e) {
        var t,
            r,
            n = e[0],
            a = e[1],
            o = e[2],
            i = Math.max(n, a, o),
            s = Math.min(n, a, o),
            l = i + s,
            p = i - s;
        return 0 == p ? r = t = 0 : (r = l < 1 ? p / l : p / (2 - l), n === i ? t = (a - o) / p : a === i ? t = 2 + (o - n) / p : o === i && (t = 4 + (n - a) / p), t < 0 ? t += 6 : 6 <= t && (t -= 6)), [t / 6, r, l / 2, e[3]];
      };
      var o = a.default.ColorConversion;
      r.default = o;
    }, {
      "../core/main": 32
    }],
    19: [function (e, t, r) {
      "use strict";

      function i(e) {
        return (i = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (e) {
          return typeof e;
        } : function (e) {
          return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e;
        })(e);
      }

      Object.defineProperty(r, "__esModule", {
        value: !0
      }), r.default = void 0;

      var n,
          c = (n = e("../core/main")) && n.__esModule ? n : {
        default: n
      },
          d = function (e) {
        if (e && e.__esModule) return e;
        if (null === e || "object" !== i(e) && "function" != typeof e) return {
          default: e
        };
        var t = s();
        if (t && t.has(e)) return t.get(e);
        var r = {},
            n = Object.defineProperty && Object.getOwnPropertyDescriptor;

        for (var a in e) if (Object.prototype.hasOwnProperty.call(e, a)) {
          var o = n ? Object.getOwnPropertyDescriptor(e, a) : null;
          o && (o.get || o.set) ? Object.defineProperty(r, a, o) : r[a] = e[a];
        }

        r.default = e, t && t.set(e, r);
        return r;
      }(e("../core/constants"));

      function s() {
        if ("function" != typeof WeakMap) return null;
        var e = new WeakMap();
        return s = function () {
          return e;
        }, e;
      }

      e("./p5.Color"), e("../core/friendly_errors/validate_params"), e("../core/friendly_errors/file_errors"), e("../core/friendly_errors/fes_core"), c.default.prototype.alpha = function (e) {
        return c.default._validateParameters("alpha", arguments), this.color(e)._getAlpha();
      }, c.default.prototype.blue = function (e) {
        return c.default._validateParameters("blue", arguments), this.color(e)._getBlue();
      }, c.default.prototype.brightness = function (e) {
        return c.default._validateParameters("brightness", arguments), this.color(e)._getBrightness();
      }, c.default.prototype.color = function () {
        if (c.default._validateParameters("color", arguments), arguments[0] instanceof c.default.Color) return arguments[0];
        var e = arguments[0] instanceof Array ? arguments[0] : arguments;
        return new c.default.Color(this, e);
      }, c.default.prototype.green = function (e) {
        return c.default._validateParameters("green", arguments), this.color(e)._getGreen();
      }, c.default.prototype.hue = function (e) {
        return c.default._validateParameters("hue", arguments), this.color(e)._getHue();
      }, c.default.prototype.lerpColor = function (e, t, r) {
        c.default._validateParameters("lerpColor", arguments);

        var n,
            a,
            o,
            i,
            s,
            l,
            p = this._colorMode,
            u = this._colorMaxes;
        if (p === d.RGB) s = e.levels.map(function (e) {
          return e / 255;
        }), l = t.levels.map(function (e) {
          return e / 255;
        });else if (p === d.HSB) e._getBrightness(), t._getBrightness(), s = e.hsba, l = t.hsba;else {
          if (p !== d.HSL) throw new Error("".concat(p, "cannot be used for interpolation."));
          e._getLightness(), t._getLightness(), s = e.hsla, l = t.hsla;
        }
        return r = Math.max(Math.min(r, 1), 0), void 0 === this.lerp && (this.lerp = function (e, t, r) {
          return r * (t - e) + e;
        }), n = this.lerp(s[0], l[0], r), a = this.lerp(s[1], l[1], r), o = this.lerp(s[2], l[2], r), i = this.lerp(s[3], l[3], r), n *= u[p][0], a *= u[p][1], o *= u[p][2], i *= u[p][3], this.color(n, a, o, i);
      }, c.default.prototype.lightness = function (e) {
        return c.default._validateParameters("lightness", arguments), this.color(e)._getLightness();
      }, c.default.prototype.red = function (e) {
        return c.default._validateParameters("red", arguments), this.color(e)._getRed();
      }, c.default.prototype.saturation = function (e) {
        return c.default._validateParameters("saturation", arguments), this.color(e)._getSaturation();
      };
      var a = c.default;
      r.default = a;
    }, {
      "../core/constants": 22,
      "../core/friendly_errors/fes_core": 24,
      "../core/friendly_errors/file_errors": 25,
      "../core/friendly_errors/validate_params": 27,
      "../core/main": 32,
      "./p5.Color": 20
    }],
    20: [function (e, t, r) {
      "use strict";

      function i(e) {
        return (i = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (e) {
          return typeof e;
        } : function (e) {
          return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e;
        })(e);
      }

      Object.defineProperty(r, "__esModule", {
        value: !0
      }), r.default = void 0;

      var c = n(e("../core/main")),
          d = function (e) {
        if (e && e.__esModule) return e;
        if (null === e || "object" !== i(e) && "function" != typeof e) return {
          default: e
        };
        var t = s();
        if (t && t.has(e)) return t.get(e);
        var r = {},
            n = Object.defineProperty && Object.getOwnPropertyDescriptor;

        for (var a in e) if (Object.prototype.hasOwnProperty.call(e, a)) {
          var o = n ? Object.getOwnPropertyDescriptor(e, a) : null;
          o && (o.get || o.set) ? Object.defineProperty(r, a, o) : r[a] = e[a];
        }

        r.default = e, t && t.set(e, r);
        return r;
      }(e("../core/constants")),
          h = n(e("./color_conversion"));

      function s() {
        if ("function" != typeof WeakMap) return null;
        var e = new WeakMap();
        return s = function () {
          return e;
        }, e;
      }

      function n(e) {
        return e && e.__esModule ? e : {
          default: e
        };
      }

      c.default.Color = function (e, t) {
        if (this._storeModeAndMaxes(e._colorMode, e._colorMaxes), this.mode !== d.RGB && this.mode !== d.HSL && this.mode !== d.HSB) throw new Error("".concat(this.mode, " is an invalid colorMode."));
        return this._array = c.default.Color._parseInputs.apply(this, t), this._calculateLevels(), this;
      }, c.default.Color.prototype.toString = function (e) {
        var t = this.levels,
            r = this._array,
            n = r[3];

        switch (e) {
          case "#rrggbb":
            return "#".concat(t[0] < 16 ? "0".concat(t[0].toString(16)) : t[0].toString(16), t[1] < 16 ? "0".concat(t[1].toString(16)) : t[1].toString(16), t[2] < 16 ? "0".concat(t[2].toString(16)) : t[2].toString(16));

          case "#rrggbbaa":
            return "#".concat(t[0] < 16 ? "0".concat(t[0].toString(16)) : t[0].toString(16), t[1] < 16 ? "0".concat(t[1].toString(16)) : t[1].toString(16), t[2] < 16 ? "0".concat(t[2].toString(16)) : t[2].toString(16), t[3] < 16 ? "0".concat(t[2].toString(16)) : t[3].toString(16));

          case "#rgb":
            return "#".concat(Math.round(15 * r[0]).toString(16), Math.round(15 * r[1]).toString(16), Math.round(15 * r[2]).toString(16));

          case "#rgba":
            return "#".concat(Math.round(15 * r[0]).toString(16), Math.round(15 * r[1]).toString(16), Math.round(15 * r[2]).toString(16), Math.round(15 * r[3]).toString(16));

          case "rgb":
            return "rgb(".concat(t[0], ", ", t[1], ", ", t[2], ")");

          case "rgb%":
            return "rgb(".concat((100 * r[0]).toPrecision(3), "%, ", (100 * r[1]).toPrecision(3), "%, ", (100 * r[2]).toPrecision(3), "%)");

          case "rgba%":
            return "rgba(".concat((100 * r[0]).toPrecision(3), "%, ", (100 * r[1]).toPrecision(3), "%, ", (100 * r[2]).toPrecision(3), "%, ", (100 * r[3]).toPrecision(3), "%)");

          case "hsb":
          case "hsv":
            return this.hsba || (this.hsba = h.default._rgbaToHSBA(this._array)), "hsb(".concat(this.hsba[0] * this.maxes[d.HSB][0], ", ", this.hsba[1] * this.maxes[d.HSB][1], ", ", this.hsba[2] * this.maxes[d.HSB][2], ")");

          case "hsb%":
          case "hsv%":
            return this.hsba || (this.hsba = h.default._rgbaToHSBA(this._array)), "hsb(".concat((100 * this.hsba[0]).toPrecision(3), "%, ", (100 * this.hsba[1]).toPrecision(3), "%, ", (100 * this.hsba[2]).toPrecision(3), "%)");

          case "hsba":
          case "hsva":
            return this.hsba || (this.hsba = h.default._rgbaToHSBA(this._array)), "hsba(".concat(this.hsba[0] * this.maxes[d.HSB][0], ", ", this.hsba[1] * this.maxes[d.HSB][1], ", ", this.hsba[2] * this.maxes[d.HSB][2], ", ", n, ")");

          case "hsba%":
          case "hsva%":
            return this.hsba || (this.hsba = h.default._rgbaToHSBA(this._array)), "hsba(".concat((100 * this.hsba[0]).toPrecision(3), "%, ", (100 * this.hsba[1]).toPrecision(3), "%, ", (100 * this.hsba[2]).toPrecision(3), "%, ", (100 * n).toPrecision(3), "%)");

          case "hsl":
            return this.hsla || (this.hsla = h.default._rgbaToHSLA(this._array)), "hsl(".concat(this.hsla[0] * this.maxes[d.HSL][0], ", ", this.hsla[1] * this.maxes[d.HSL][1], ", ", this.hsla[2] * this.maxes[d.HSL][2], ")");

          case "hsl%":
            return this.hsla || (this.hsla = h.default._rgbaToHSLA(this._array)), "hsl(".concat((100 * this.hsla[0]).toPrecision(3), "%, ", (100 * this.hsla[1]).toPrecision(3), "%, ", (100 * this.hsla[2]).toPrecision(3), "%)");

          case "hsla":
            return this.hsla || (this.hsla = h.default._rgbaToHSLA(this._array)), "hsla(".concat(this.hsla[0] * this.maxes[d.HSL][0], ", ", this.hsla[1] * this.maxes[d.HSL][1], ", ", this.hsla[2] * this.maxes[d.HSL][2], ", ", n, ")");

          case "hsla%":
            return this.hsla || (this.hsla = h.default._rgbaToHSLA(this._array)), "hsl(".concat((100 * this.hsla[0]).toPrecision(3), "%, ", (100 * this.hsla[1]).toPrecision(3), "%, ", (100 * this.hsla[2]).toPrecision(3), "%, ", (100 * n).toPrecision(3), "%)");

          case "rgba":
          default:
            return "rgba(".concat(t[0], ",", t[1], ",", t[2], ",", n, ")");
        }
      }, c.default.Color.prototype.setRed = function (e) {
        this._array[0] = e / this.maxes[d.RGB][0], this._calculateLevels();
      }, c.default.Color.prototype.setGreen = function (e) {
        this._array[1] = e / this.maxes[d.RGB][1], this._calculateLevels();
      }, c.default.Color.prototype.setBlue = function (e) {
        this._array[2] = e / this.maxes[d.RGB][2], this._calculateLevels();
      }, c.default.Color.prototype.setAlpha = function (e) {
        this._array[3] = e / this.maxes[this.mode][3], this._calculateLevels();
      }, c.default.Color.prototype._calculateLevels = function () {
        for (var e = this._array, t = this.levels = new Array(e.length), r = e.length - 1; 0 <= r; --r) t[r] = Math.round(255 * e[r]);
      }, c.default.Color.prototype._getAlpha = function () {
        return this._array[3] * this.maxes[this.mode][3];
      }, c.default.Color.prototype._storeModeAndMaxes = function (e, t) {
        this.mode = e, this.maxes = t;
      }, c.default.Color.prototype._getMode = function () {
        return this.mode;
      }, c.default.Color.prototype._getMaxes = function () {
        return this.maxes;
      }, c.default.Color.prototype._getBlue = function () {
        return this._array[2] * this.maxes[d.RGB][2];
      }, c.default.Color.prototype._getBrightness = function () {
        return this.hsba || (this.hsba = h.default._rgbaToHSBA(this._array)), this.hsba[2] * this.maxes[d.HSB][2];
      }, c.default.Color.prototype._getGreen = function () {
        return this._array[1] * this.maxes[d.RGB][1];
      }, c.default.Color.prototype._getHue = function () {
        return this.mode === d.HSB ? (this.hsba || (this.hsba = h.default._rgbaToHSBA(this._array)), this.hsba[0] * this.maxes[d.HSB][0]) : (this.hsla || (this.hsla = h.default._rgbaToHSLA(this._array)), this.hsla[0] * this.maxes[d.HSL][0]);
      }, c.default.Color.prototype._getLightness = function () {
        return this.hsla || (this.hsla = h.default._rgbaToHSLA(this._array)), this.hsla[2] * this.maxes[d.HSL][2];
      }, c.default.Color.prototype._getRed = function () {
        return this._array[0] * this.maxes[d.RGB][0];
      }, c.default.Color.prototype._getSaturation = function () {
        return this.mode === d.HSB ? (this.hsba || (this.hsba = h.default._rgbaToHSBA(this._array)), this.hsba[1] * this.maxes[d.HSB][1]) : (this.hsla || (this.hsla = h.default._rgbaToHSLA(this._array)), this.hsla[1] * this.maxes[d.HSL][1]);
      };
      var m = {
        aliceblue: "#f0f8ff",
        antiquewhite: "#faebd7",
        aqua: "#00ffff",
        aquamarine: "#7fffd4",
        azure: "#f0ffff",
        beige: "#f5f5dc",
        bisque: "#ffe4c4",
        black: "#000000",
        blanchedalmond: "#ffebcd",
        blue: "#0000ff",
        blueviolet: "#8a2be2",
        brown: "#a52a2a",
        burlywood: "#deb887",
        cadetblue: "#5f9ea0",
        chartreuse: "#7fff00",
        chocolate: "#d2691e",
        coral: "#ff7f50",
        cornflowerblue: "#6495ed",
        cornsilk: "#fff8dc",
        crimson: "#dc143c",
        cyan: "#00ffff",
        darkblue: "#00008b",
        darkcyan: "#008b8b",
        darkgoldenrod: "#b8860b",
        darkgray: "#a9a9a9",
        darkgreen: "#006400",
        darkgrey: "#a9a9a9",
        darkkhaki: "#bdb76b",
        darkmagenta: "#8b008b",
        darkolivegreen: "#556b2f",
        darkorange: "#ff8c00",
        darkorchid: "#9932cc",
        darkred: "#8b0000",
        darksalmon: "#e9967a",
        darkseagreen: "#8fbc8f",
        darkslateblue: "#483d8b",
        darkslategray: "#2f4f4f",
        darkslategrey: "#2f4f4f",
        darkturquoise: "#00ced1",
        darkviolet: "#9400d3",
        deeppink: "#ff1493",
        deepskyblue: "#00bfff",
        dimgray: "#696969",
        dimgrey: "#696969",
        dodgerblue: "#1e90ff",
        firebrick: "#b22222",
        floralwhite: "#fffaf0",
        forestgreen: "#228b22",
        fuchsia: "#ff00ff",
        gainsboro: "#dcdcdc",
        ghostwhite: "#f8f8ff",
        gold: "#ffd700",
        goldenrod: "#daa520",
        gray: "#808080",
        green: "#008000",
        greenyellow: "#adff2f",
        grey: "#808080",
        honeydew: "#f0fff0",
        hotpink: "#ff69b4",
        indianred: "#cd5c5c",
        indigo: "#4b0082",
        ivory: "#fffff0",
        khaki: "#f0e68c",
        lavender: "#e6e6fa",
        lavenderblush: "#fff0f5",
        lawngreen: "#7cfc00",
        lemonchiffon: "#fffacd",
        lightblue: "#add8e6",
        lightcoral: "#f08080",
        lightcyan: "#e0ffff",
        lightgoldenrodyellow: "#fafad2",
        lightgray: "#d3d3d3",
        lightgreen: "#90ee90",
        lightgrey: "#d3d3d3",
        lightpink: "#ffb6c1",
        lightsalmon: "#ffa07a",
        lightseagreen: "#20b2aa",
        lightskyblue: "#87cefa",
        lightslategray: "#778899",
        lightslategrey: "#778899",
        lightsteelblue: "#b0c4de",
        lightyellow: "#ffffe0",
        lime: "#00ff00",
        limegreen: "#32cd32",
        linen: "#faf0e6",
        magenta: "#ff00ff",
        maroon: "#800000",
        mediumaquamarine: "#66cdaa",
        mediumblue: "#0000cd",
        mediumorchid: "#ba55d3",
        mediumpurple: "#9370db",
        mediumseagreen: "#3cb371",
        mediumslateblue: "#7b68ee",
        mediumspringgreen: "#00fa9a",
        mediumturquoise: "#48d1cc",
        mediumvioletred: "#c71585",
        midnightblue: "#191970",
        mintcream: "#f5fffa",
        mistyrose: "#ffe4e1",
        moccasin: "#ffe4b5",
        navajowhite: "#ffdead",
        navy: "#000080",
        oldlace: "#fdf5e6",
        olive: "#808000",
        olivedrab: "#6b8e23",
        orange: "#ffa500",
        orangered: "#ff4500",
        orchid: "#da70d6",
        palegoldenrod: "#eee8aa",
        palegreen: "#98fb98",
        paleturquoise: "#afeeee",
        palevioletred: "#db7093",
        papayawhip: "#ffefd5",
        peachpuff: "#ffdab9",
        peru: "#cd853f",
        pink: "#ffc0cb",
        plum: "#dda0dd",
        powderblue: "#b0e0e6",
        purple: "#800080",
        rebeccapurple: "#663399",
        red: "#ff0000",
        rosybrown: "#bc8f8f",
        royalblue: "#4169e1",
        saddlebrown: "#8b4513",
        salmon: "#fa8072",
        sandybrown: "#f4a460",
        seagreen: "#2e8b57",
        seashell: "#fff5ee",
        sienna: "#a0522d",
        silver: "#c0c0c0",
        skyblue: "#87ceeb",
        slateblue: "#6a5acd",
        slategray: "#708090",
        slategrey: "#708090",
        snow: "#fffafa",
        springgreen: "#00ff7f",
        steelblue: "#4682b4",
        tan: "#d2b48c",
        teal: "#008080",
        thistle: "#d8bfd8",
        tomato: "#ff6347",
        turquoise: "#40e0d0",
        violet: "#ee82ee",
        wheat: "#f5deb3",
        white: "#ffffff",
        whitesmoke: "#f5f5f5",
        yellow: "#ffff00",
        yellowgreen: "#9acd32"
      },
          a = /\s*/,
          o = /(\d{1,3})/,
          l = /((?:\d+(?:\.\d+)?)|(?:\.\d+))/,
          p = new RegExp("".concat(l.source, "%")),
          f = {
        HEX3: /^#([a-f0-9])([a-f0-9])([a-f0-9])$/i,
        HEX4: /^#([a-f0-9])([a-f0-9])([a-f0-9])([a-f0-9])$/i,
        HEX6: /^#([a-f0-9]{2})([a-f0-9]{2})([a-f0-9]{2})$/i,
        HEX8: /^#([a-f0-9]{2})([a-f0-9]{2})([a-f0-9]{2})([a-f0-9]{2})$/i,
        RGB: new RegExp(["^rgb\\(", o.source, ",", o.source, ",", o.source, "\\)$"].join(a.source), "i"),
        RGB_PERCENT: new RegExp(["^rgb\\(", p.source, ",", p.source, ",", p.source, "\\)$"].join(a.source), "i"),
        RGBA: new RegExp(["^rgba\\(", o.source, ",", o.source, ",", o.source, ",", l.source, "\\)$"].join(a.source), "i"),
        RGBA_PERCENT: new RegExp(["^rgba\\(", p.source, ",", p.source, ",", p.source, ",", l.source, "\\)$"].join(a.source), "i"),
        HSL: new RegExp(["^hsl\\(", o.source, ",", p.source, ",", p.source, "\\)$"].join(a.source), "i"),
        HSLA: new RegExp(["^hsla\\(", o.source, ",", p.source, ",", p.source, ",", l.source, "\\)$"].join(a.source), "i"),
        HSB: new RegExp(["^hsb\\(", o.source, ",", p.source, ",", p.source, "\\)$"].join(a.source), "i"),
        HSBA: new RegExp(["^hsba\\(", o.source, ",", p.source, ",", p.source, ",", l.source, "\\)$"].join(a.source), "i")
      };

      c.default.Color._parseInputs = function (e, t, r, n) {
        var a,
            o = arguments.length,
            i = this.mode,
            s = this.maxes[i],
            l = [];

        if (3 <= o) {
          for (l[0] = e / s[0], l[1] = t / s[1], l[2] = r / s[2], l[3] = "number" == typeof n ? n / s[3] : 1, a = l.length - 1; 0 <= a; --a) {
            var p = l[a];
            p < 0 ? l[a] = 0 : 1 < p && (l[a] = 1);
          }

          return i === d.HSL ? h.default._hslaToRGBA(l) : i === d.HSB ? h.default._hsbaToRGBA(l) : l;
        }

        if (1 === o && "string" == typeof e) {
          var u = e.trim().toLowerCase();
          if (m[u]) return c.default.Color._parseInputs.call(this, m[u]);
          if (f.HEX3.test(u)) return (l = f.HEX3.exec(u).slice(1).map(function (e) {
            return parseInt(e + e, 16) / 255;
          }))[3] = 1, l;
          if (f.HEX6.test(u)) return (l = f.HEX6.exec(u).slice(1).map(function (e) {
            return parseInt(e, 16) / 255;
          }))[3] = 1, l;
          if (f.HEX4.test(u)) return l = f.HEX4.exec(u).slice(1).map(function (e) {
            return parseInt(e + e, 16) / 255;
          });
          if (f.HEX8.test(u)) return l = f.HEX8.exec(u).slice(1).map(function (e) {
            return parseInt(e, 16) / 255;
          });
          if (f.RGB.test(u)) return (l = f.RGB.exec(u).slice(1).map(function (e) {
            return e / 255;
          }))[3] = 1, l;
          if (f.RGB_PERCENT.test(u)) return (l = f.RGB_PERCENT.exec(u).slice(1).map(function (e) {
            return parseFloat(e) / 100;
          }))[3] = 1, l;
          if (f.RGBA.test(u)) return l = f.RGBA.exec(u).slice(1).map(function (e, t) {
            return 3 === t ? parseFloat(e) : e / 255;
          });
          if (f.RGBA_PERCENT.test(u)) return l = f.RGBA_PERCENT.exec(u).slice(1).map(function (e, t) {
            return 3 === t ? parseFloat(e) : parseFloat(e) / 100;
          });
          if (f.HSL.test(u) ? (l = f.HSL.exec(u).slice(1).map(function (e, t) {
            return 0 === t ? parseInt(e, 10) / 360 : parseInt(e, 10) / 100;
          }))[3] = 1 : f.HSLA.test(u) && (l = f.HSLA.exec(u).slice(1).map(function (e, t) {
            return 0 === t ? parseInt(e, 10) / 360 : 3 === t ? parseFloat(e) : parseInt(e, 10) / 100;
          })), (l = l.map(function (e) {
            return Math.max(Math.min(e, 1), 0);
          })).length) return h.default._hslaToRGBA(l);

          if (f.HSB.test(u) ? (l = f.HSB.exec(u).slice(1).map(function (e, t) {
            return 0 === t ? parseInt(e, 10) / 360 : parseInt(e, 10) / 100;
          }))[3] = 1 : f.HSBA.test(u) && (l = f.HSBA.exec(u).slice(1).map(function (e, t) {
            return 0 === t ? parseInt(e, 10) / 360 : 3 === t ? parseFloat(e) : parseInt(e, 10) / 100;
          })), l.length) {
            for (a = l.length - 1; 0 <= a; --a) l[a] = Math.max(Math.min(l[a], 1), 0);

            return h.default._hsbaToRGBA(l);
          }

          l = [1, 1, 1, 1];
        } else {
          if (1 !== o && 2 !== o || "number" != typeof e) throw new Error("".concat(arguments, "is not a valid color representation."));
          l[0] = e / s[2], l[1] = e / s[2], l[2] = e / s[2], l[3] = "number" == typeof t ? t / s[3] : 1, l = l.map(function (e) {
            return Math.max(Math.min(e, 1), 0);
          });
        }

        return l;
      };

      var u = c.default.Color;
      r.default = u;
    }, {
      "../core/constants": 22,
      "../core/main": 32,
      "./color_conversion": 18
    }],
    21: [function (e, t, r) {
      "use strict";

      function i(e) {
        return (i = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (e) {
          return typeof e;
        } : function (e) {
          return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e;
        })(e);
      }

      Object.defineProperty(r, "__esModule", {
        value: !0
      }), r.default = void 0;

      var n,
          s = (n = e("../core/main")) && n.__esModule ? n : {
        default: n
      },
          l = function (e) {
        if (e && e.__esModule) return e;
        if (null === e || "object" !== i(e) && "function" != typeof e) return {
          default: e
        };
        var t = p();
        if (t && t.has(e)) return t.get(e);
        var r = {},
            n = Object.defineProperty && Object.getOwnPropertyDescriptor;

        for (var a in e) if (Object.prototype.hasOwnProperty.call(e, a)) {
          var o = n ? Object.getOwnPropertyDescriptor(e, a) : null;
          o && (o.get || o.set) ? Object.defineProperty(r, a, o) : r[a] = e[a];
        }

        r.default = e, t && t.set(e, r);
        return r;
      }(e("../core/constants"));

      function p() {
        if ("function" != typeof WeakMap) return null;
        var e = new WeakMap();
        return p = function () {
          return e;
        }, e;
      }

      e("./p5.Color"), s.default.prototype.background = function () {
        var e;
        return (e = this._renderer).background.apply(e, arguments), this;
      }, s.default.prototype.clear = function () {
        return this._renderer.clear(), this;
      }, s.default.prototype.colorMode = function (e, t, r, n, a) {
        if (s.default._validateParameters("colorMode", arguments), e === l.RGB || e === l.HSB || e === l.HSL) {
          this._colorMode = e;
          var o = this._colorMaxes[e];
          2 === arguments.length ? (o[0] = t, o[1] = t, o[2] = t, o[3] = t) : 4 === arguments.length ? (o[0] = t, o[1] = r, o[2] = n) : 5 === arguments.length && (o[0] = t, o[1] = r, o[2] = n, o[3] = a);
        }

        return this;
      }, s.default.prototype.fill = function () {
        var e;
        return this._renderer._setProperty("_fillSet", !0), this._renderer._setProperty("_doFill", !0), (e = this._renderer).fill.apply(e, arguments), this;
      }, s.default.prototype.noFill = function () {
        return this._renderer._setProperty("_doFill", !1), this;
      }, s.default.prototype.noStroke = function () {
        return this._renderer._setProperty("_doStroke", !1), this;
      }, s.default.prototype.stroke = function () {
        var e;
        return this._renderer._setProperty("_strokeSet", !0), this._renderer._setProperty("_doStroke", !0), (e = this._renderer).stroke.apply(e, arguments), this;
      }, s.default.prototype.erase = function () {
        var e = 0 < arguments.length && void 0 !== arguments[0] ? arguments[0] : 255,
            t = 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : 255;
        return this._renderer.erase(e, t), this;
      }, s.default.prototype.noErase = function () {
        return this._renderer.noErase(), this;
      };
      var a = s.default;
      r.default = a;
    }, {
      "../core/constants": 22,
      "../core/main": 32,
      "./p5.Color": 20
    }],
    22: [function (e, t, r) {
      "use strict";

      Object.defineProperty(r, "__esModule", {
        value: !0
      }), r.FILL = r.STROKE = r.CURVE = r.BEZIER = r.QUADRATIC = r.LINEAR = r._CTX_MIDDLE = r._DEFAULT_LEADMULT = r._DEFAULT_TEXT_FILL = r.BOLDITALIC = r.BOLD = r.ITALIC = r.NORMAL = r.BLUR = r.ERODE = r.DILATE = r.POSTERIZE = r.INVERT = r.OPAQUE = r.GRAY = r.THRESHOLD = r.BURN = r.DODGE = r.SOFT_LIGHT = r.HARD_LIGHT = r.OVERLAY = r.REPLACE = r.SCREEN = r.MULTIPLY = r.EXCLUSION = r.SUBTRACT = r.DIFFERENCE = r.LIGHTEST = r.DARKEST = r.ADD = r.REMOVE = r.BLEND = r.UP_ARROW = r.TAB = r.SHIFT = r.RIGHT_ARROW = r.RETURN = r.OPTION = r.LEFT_ARROW = r.ESCAPE = r.ENTER = r.DOWN_ARROW = r.DELETE = r.CONTROL = r.BACKSPACE = r.ALT = r.AUTO = r.HSL = r.HSB = r.RGB = r.MITER = r.BEVEL = r.ROUND = r.SQUARE = r.PROJECT = r.PIE = r.CHORD = r.OPEN = r.CLOSE = r.TESS = r.QUAD_STRIP = r.QUADS = r.TRIANGLE_STRIP = r.TRIANGLE_FAN = r.TRIANGLES = r.LINE_LOOP = r.LINE_STRIP = r.LINES = r.POINTS = r.BASELINE = r.BOTTOM = r.TOP = r.CENTER = r.LEFT = r.RIGHT = r.RADIUS = r.CORNERS = r.CORNER = r.RAD_TO_DEG = r.DEG_TO_RAD = r.RADIANS = r.DEGREES = r.TWO_PI = r.TAU = r.QUARTER_PI = r.PI = r.HALF_PI = r.WAIT = r.TEXT = r.MOVE = r.HAND = r.CROSS = r.ARROW = r.WEBGL = r.P2D = void 0, r.AXES = r.GRID = r._DEFAULT_FILL = r._DEFAULT_STROKE = r.PORTRAIT = r.LANDSCAPE = r.MIRROR = r.CLAMP = r.REPEAT = r.NEAREST = r.IMAGE = r.IMMEDIATE = r.TEXTURE = void 0;
      var n = Math.PI;
      r.P2D = "p2d";
      r.WEBGL = "webgl";
      r.ARROW = "default";
      r.CROSS = "crosshair";
      r.HAND = "pointer";
      r.MOVE = "move";
      r.TEXT = "text";
      r.WAIT = "wait";
      var a = n / 2;
      r.HALF_PI = a;
      var o = n;
      r.PI = o;
      var i = n / 4;
      r.QUARTER_PI = i;
      var s = 2 * n;
      r.TAU = s;
      var l = 2 * n;
      r.TWO_PI = l;
      r.DEGREES = "degrees";
      r.RADIANS = "radians";
      var p = n / 180;
      r.DEG_TO_RAD = p;
      var u = 180 / n;
      r.RAD_TO_DEG = u;
      r.CORNER = "corner";
      r.CORNERS = "corners";
      r.RADIUS = "radius";
      r.RIGHT = "right";
      r.LEFT = "left";
      r.CENTER = "center";
      r.TOP = "top";
      r.BOTTOM = "bottom";
      r.BASELINE = "alphabetic";
      r.POINTS = 0;
      r.LINES = 1;
      r.LINE_STRIP = 3;
      r.LINE_LOOP = 2;
      r.TRIANGLES = 4;
      r.TRIANGLE_FAN = 6;
      r.TRIANGLE_STRIP = 5;
      r.QUADS = "quads";
      r.QUAD_STRIP = "quad_strip";
      r.TESS = "tess";
      r.CLOSE = "close";
      r.OPEN = "open";
      r.CHORD = "chord";
      r.PIE = "pie";
      r.PROJECT = "square";
      r.SQUARE = "butt";
      r.ROUND = "round";
      r.BEVEL = "bevel";
      r.MITER = "miter";
      r.RGB = "rgb";
      r.HSB = "hsb";
      r.HSL = "hsl";
      r.AUTO = "auto";
      r.ALT = 18;
      r.BACKSPACE = 8;
      r.CONTROL = 17;
      r.DELETE = 46;
      r.DOWN_ARROW = 40;
      r.ENTER = 13;
      r.ESCAPE = 27;
      r.LEFT_ARROW = 37;
      r.OPTION = 18;
      r.RETURN = 13;
      r.RIGHT_ARROW = 39;
      r.SHIFT = 16;
      r.TAB = 9;
      r.UP_ARROW = 38;
      r.BLEND = "source-over";
      r.REMOVE = "destination-out";
      r.ADD = "lighter";
      r.DARKEST = "darken";
      r.LIGHTEST = "lighten";
      r.DIFFERENCE = "difference";
      r.SUBTRACT = "subtract";
      r.EXCLUSION = "exclusion";
      r.MULTIPLY = "multiply";
      r.SCREEN = "screen";
      r.REPLACE = "copy";
      r.OVERLAY = "overlay";
      r.HARD_LIGHT = "hard-light";
      r.SOFT_LIGHT = "soft-light";
      r.DODGE = "color-dodge";
      r.BURN = "color-burn";
      r.THRESHOLD = "threshold";
      r.GRAY = "gray";
      r.OPAQUE = "opaque";
      r.INVERT = "invert";
      r.POSTERIZE = "posterize";
      r.DILATE = "dilate";
      r.ERODE = "erode";
      r.BLUR = "blur";
      r.NORMAL = "normal";
      r.ITALIC = "italic";
      r.BOLD = "bold";
      r.BOLDITALIC = "bold italic";
      r._DEFAULT_TEXT_FILL = "#000000";
      r._DEFAULT_LEADMULT = 1.25;
      r._CTX_MIDDLE = "middle";
      r.LINEAR = "linear";
      r.QUADRATIC = "quadratic";
      r.BEZIER = "bezier";
      r.CURVE = "curve";
      r.STROKE = "stroke";
      r.FILL = "fill";
      r.TEXTURE = "texture";
      r.IMMEDIATE = "immediate";
      r.IMAGE = "image";
      r.NEAREST = "nearest";
      r.REPEAT = "repeat";
      r.CLAMP = "clamp";
      r.MIRROR = "mirror";
      r.LANDSCAPE = "landscape";
      r.PORTRAIT = "portrait";
      r._DEFAULT_STROKE = "#000000";
      r._DEFAULT_FILL = "#FFFFFF";
      r.GRID = "grid";
      r.AXES = "axes";
    }, {}],
    23: [function (e, t, r) {
      "use strict";

      function i(e) {
        return (i = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (e) {
          return typeof e;
        } : function (e) {
          return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e;
        })(e);
      }

      Object.defineProperty(r, "__esModule", {
        value: !0
      }), r.default = void 0;

      var n,
          a = (n = e("./main")) && n.__esModule ? n : {
        default: n
      },
          o = function (e) {
        if (e && e.__esModule) return e;
        if (null === e || "object" !== i(e) && "function" != typeof e) return {
          default: e
        };
        var t = s();
        if (t && t.has(e)) return t.get(e);
        var r = {},
            n = Object.defineProperty && Object.getOwnPropertyDescriptor;

        for (var a in e) if (Object.prototype.hasOwnProperty.call(e, a)) {
          var o = n ? Object.getOwnPropertyDescriptor(e, a) : null;
          o && (o.get || o.set) ? Object.defineProperty(r, a, o) : r[a] = e[a];
        }

        r.default = e, t && t.set(e, r);
        return r;
      }(e("./constants"));

      function s() {
        if ("function" != typeof WeakMap) return null;
        var e = new WeakMap();
        return s = function () {
          return e;
        }, e;
      }

      var l = [o.ARROW, o.CROSS, o.HAND, o.MOVE, o.TEXT, o.WAIT];
      a.default.prototype._frameRate = 0, a.default.prototype._lastFrameTime = window.performance.now(), a.default.prototype._targetFrameRate = 60;
      var p = window.print;

      function u() {
        return window.innerWidth || document.documentElement && document.documentElement.clientWidth || document.body && document.body.clientWidth || 0;
      }

      function c() {
        return window.innerHeight || document.documentElement && document.documentElement.clientHeight || document.body && document.body.clientHeight || 0;
      }

      a.default.prototype.print = function () {
        var e;
        arguments.length ? (e = console).log.apply(e, arguments) : p();
      }, a.default.prototype.frameCount = 0, a.default.prototype.deltaTime = 0, a.default.prototype.focused = document.hasFocus(), a.default.prototype.cursor = function (e, t, r) {
        var n = "auto",
            a = this._curElement.elt;
        if (l.includes(e)) n = e;else if ("string" == typeof e) {
          var o = "";
          t && r && "number" == typeof t && "number" == typeof r && (o = "".concat(t, " ").concat(r)), n = "http://" === e.substring(0, 7) || "https://" === e.substring(0, 8) ? "url(".concat(e, ") ").concat(o, ", auto") : /\.(cur|jpg|jpeg|gif|png|CUR|JPG|JPEG|GIF|PNG)$/.test(e) ? "url(".concat(e, ") ").concat(o, ", auto") : e;
        }
        a.style.cursor = n;
      }, a.default.prototype.frameRate = function (e) {
        return a.default._validateParameters("frameRate", arguments), "number" != typeof e || e < 0 ? this._frameRate : (this._setProperty("_targetFrameRate", e), 0 === e && this._setProperty("_frameRate", e), this);
      }, a.default.prototype.getFrameRate = function () {
        return this.frameRate();
      }, a.default.prototype.setFrameRate = function (e) {
        return this.frameRate(e);
      }, a.default.prototype.noCursor = function () {
        this._curElement.elt.style.cursor = "none";
      }, a.default.prototype.displayWidth = screen.width, a.default.prototype.displayHeight = screen.height, a.default.prototype.windowWidth = u(), a.default.prototype.windowHeight = c(), a.default.prototype._onresize = function (e) {
        this._setProperty("windowWidth", u()), this._setProperty("windowHeight", c());
        var t,
            r = this._isGlobal ? window : this;
        "function" == typeof r.windowResized && (void 0 === (t = r.windowResized(e)) || t || e.preventDefault());
      }, a.default.prototype.width = 0, a.default.prototype.height = 0, a.default.prototype.fullscreen = function (e) {
        if (a.default._validateParameters("fullscreen", arguments), void 0 === e) return document.fullscreenElement || document.webkitFullscreenElement || document.mozFullScreenElement || document.msFullscreenElement;
        e ? function (e) {
          if (!(document.fullscreenEnabled || document.webkitFullscreenEnabled || document.mozFullScreenEnabled || document.msFullscreenEnabled)) throw new Error("Fullscreen not enabled in this browser.");
          e.requestFullscreen ? e.requestFullscreen() : e.mozRequestFullScreen ? e.mozRequestFullScreen() : e.webkitRequestFullscreen ? e.webkitRequestFullscreen() : e.msRequestFullscreen && e.msRequestFullscreen();
        }(document.documentElement) : document.exitFullscreen ? document.exitFullscreen() : document.mozCancelFullScreen ? document.mozCancelFullScreen() : document.webkitExitFullscreen ? document.webkitExitFullscreen() : document.msExitFullscreen && document.msExitFullscreen();
      }, a.default.prototype.pixelDensity = function (e) {
        var t;
        return a.default._validateParameters("pixelDensity", arguments), "number" == typeof e ? (e !== this._pixelDensity && (this._pixelDensity = e), (t = this).resizeCanvas(this.width, this.height, !0)) : t = this._pixelDensity, t;
      }, a.default.prototype.displayDensity = function () {
        return window.devicePixelRatio;
      }, a.default.prototype.getURL = function () {
        return location.href;
      }, a.default.prototype.getURLPath = function () {
        return location.pathname.split("/").filter(function (e) {
          return "" !== e;
        });
      }, a.default.prototype.getURLParams = function () {
        for (var e, t = /[?&]([^&=]+)(?:[&=])([^&=]+)/gim, r = {}; null != (e = t.exec(location.search));) e.index === t.lastIndex && t.lastIndex++, r[e[1]] = e[2];

        return r;
      };
      var d = a.default;
      r.default = d;
    }, {
      "./constants": 22,
      "./main": 32
    }],
    24: [function (r, e, t) {
      "use strict";

      Object.defineProperty(t, "__esModule", {
        value: !0
      }), t.default = void 0;
      var n,
          a = (n = r("../main")) && n.__esModule ? n : {
        default: n
      };
      r("../internationalization");
      var o = null,
          i = null;
      a.default._friendlyError = a.default._checkForUserDefinedFunctions = a.default._fesErrorMonitor = function () {}, o = null;
      var s = "https://github.com/processing/p5.js/wiki/p5.js-overview#why-cant-i-assign-variables-using-p5-functions-and-variables-before-setup";

      i = function () {
        function e(r) {
          return Object.getOwnPropertyNames(r).filter(function (e) {
            return "_" !== e[0] && !(e in t) && (t[e] = !0);
          }).map(function (e) {
            var t;
            return t = "function" == typeof r[e] ? "function" : e === e.toUpperCase() ? "constant" : "variable", {
              name: e,
              type: t
            };
          });
        }

        var t = {};
        (o = [].concat(e(a.default.prototype), e(r("../constants")))).sort(function (e, t) {
          return t.name.length - e.name.length;
        });
      };

      function l(r, n) {
        n = n || console.log.bind(console), o || i(), o.some(function (e) {
          if (r.message && null !== r.message.match("\\W?".concat(e.name, "\\W"))) {
            var t = "function" === e.type ? "".concat(e.name, "()") : e.name;
            return n("Did you just try to use p5.js's ".concat(t, " ").concat(e.type, "? If so, you may want to move it into your sketch's setup() function.\n\nFor more details, see: ").concat(s)), !0;
          }
        });
      }

      a.default.prototype._helpForMisusedAtTopLevelCode = l, "complete" !== document.readyState && (window.addEventListener("error", l, !1), window.addEventListener("load", function () {
        window.removeEventListener("error", l, !1);
      }));
      var p = a.default;
      t.default = p;
    }, {
      "../constants": 22,
      "../internationalization": 30,
      "../main": 32,
      "./browser_errors": void 0
    }],
    25: [function (e, t, r) {
      "use strict";

      Object.defineProperty(r, "__esModule", {
        value: !0
      }), r.default = void 0;
      var n,
          a = (n = e("../main")) && n.__esModule ? n : {
        default: n
      };
      e("../internationalization");

      a.default._friendlyFileLoadError = function () {};

      var o = a.default;
      r.default = o;
    }, {
      "../internationalization": 30,
      "../main": 32
    }],
    26: [function (e, t, r) {
      "use strict";

      Object.defineProperty(r, "__esModule", {
        value: !0
      }), r.default = void 0;
      var n,
          a = (n = e("../main")) && n.__esModule ? n : {
        default: n
      };

      function o() {
        var t = /(^|@)\S+:\d+/,
            r = /^\s*at .*(\S+:\d+|\(native\))/m,
            n = /^(eval@)?(\[native code])?$/;
        return {
          parse: function (e) {
            return void 0 !== e.stacktrace || void 0 !== e["opera#sourceloc"] ? this.parseOpera(e) : e.stack && e.stack.match(r) ? this.parseV8OrIE(e) : e.stack ? this.parseFFOrSafari(e) : void 0;
          },
          extractLocation: function (e) {
            if (-1 === e.indexOf(":")) return [e];
            var t = /(.+?)(?::(\d+))?(?::(\d+))?$/.exec(e.replace(/[()]/g, ""));
            return [t[1], t[2] || void 0, t[3] || void 0];
          },
          parseV8OrIE: function (e) {
            return e.stack.split("\n").filter(function (e) {
              return !!e.match(r);
            }, this).map(function (e) {
              -1 < e.indexOf("(eval ") && (e = e.replace(/eval code/g, "eval").replace(/(\(eval at [^()]*)|(\),.*$)/g, ""));
              var t = e.replace(/^\s+/, "").replace(/\(eval code/g, "("),
                  r = t.match(/ (\((.+):(\d+):(\d+)\)$)/),
                  n = (t = r ? t.replace(r[0], "") : t).split(/\s+/).slice(1),
                  a = this.extractLocation(r ? r[1] : n.pop());
              return {
                functionName: n.join(" ") || void 0,
                fileName: -1 < ["eval", "<anonymous>"].indexOf(a[0]) ? void 0 : a[0],
                lineNumber: a[1],
                columnNumber: a[2],
                source: e
              };
            }, this);
          },
          parseFFOrSafari: function (e) {
            return e.stack.split("\n").filter(function (e) {
              return !e.match(n);
            }, this).map(function (e) {
              if (-1 < e.indexOf(" > eval") && (e = e.replace(/ line (\d+)(?: > eval line \d+)* > eval:\d+:\d+/g, ":$1")), -1 === e.indexOf("@") && -1 === e.indexOf(":")) return {
                functionName: e
              };
              var t = /((.*".+"[^@]*)?[^@]*)(?:@)/,
                  r = e.match(t),
                  n = r && r[1] ? r[1] : void 0,
                  a = this.extractLocation(e.replace(t, ""));
              return {
                functionName: n,
                fileName: a[0],
                lineNumber: a[1],
                columnNumber: a[2],
                source: e
              };
            }, this);
          },
          parseOpera: function (e) {
            return !e.stacktrace || -1 < e.message.indexOf("\n") && e.message.split("\n").length > e.stacktrace.split("\n").length ? this.parseOpera9(e) : e.stack ? this.parseOpera11(e) : this.parseOpera10(e);
          },
          parseOpera9: function (e) {
            for (var t = /Line (\d+).*script (?:in )?(\S+)/i, r = e.message.split("\n"), n = [], a = 2, o = r.length; a < o; a += 2) {
              var i = t.exec(r[a]);
              i && n.push({
                fileName: i[2],
                lineNumber: i[1],
                source: r[a]
              });
            }

            return n;
          },
          parseOpera10: function (e) {
            for (var t = /Line (\d+).*script (?:in )?(\S+)(?:: In function (\S+))?$/i, r = e.stacktrace.split("\n"), n = [], a = 0, o = r.length; a < o; a += 2) {
              var i = t.exec(r[a]);
              i && n.push({
                functionName: i[3] || void 0,
                fileName: i[2],
                lineNumber: i[1],
                source: r[a]
              });
            }

            return n;
          },
          parseOpera11: function (e) {
            return e.stack.split("\n").filter(function (e) {
              return !!e.match(t) && !e.match(/^Error created at/);
            }, this).map(function (e) {
              var t,
                  r = e.split("@"),
                  n = this.extractLocation(r.pop()),
                  a = r.shift() || "",
                  o = a.replace(/<anonymous function(: (\w+))?>/, "$2").replace(/\([^)]*\)/g, "") || void 0;
              return a.match(/\(([^)]*)\)/) && (t = a.replace(/^[^(]+\(([^)]*)\)$/, "$1")), {
                functionName: o,
                args: void 0 === t || "[arguments not available]" === t ? void 0 : t.split(","),
                fileName: n[0],
                lineNumber: n[1],
                columnNumber: n[2],
                source: e
              };
            }, this);
          }
        };
      }

      a.default._getErrorStackParser = function () {
        return new o();
      };

      var i = a.default;
      r.default = i;
    }, {
      "../main": 32
    }],
    27: [function (e, t, r) {
      "use strict";

      Object.defineProperty(r, "__esModule", {
        value: !0
      }), r.default = void 0;
      var n,
          a = (n = e("../main")) && n.__esModule ? n : {
        default: n
      };
      (function (e) {
        if (e && e.__esModule) return;
        if (null === e || "object" !== s(e) && "function" != typeof e) return;
        var t = i();
        if (t && t.has(e)) return t.get(e);
        var r = {},
            n = Object.defineProperty && Object.getOwnPropertyDescriptor;

        for (var a in e) if (Object.prototype.hasOwnProperty.call(e, a)) {
          var o = n ? Object.getOwnPropertyDescriptor(e, a) : null;
          o && (o.get || o.set) ? Object.defineProperty(r, a, o) : r[a] = e[a];
        }

        r.default = e, t && t.set(e, r);
      })(e("../constants")), e("../internationalization");

      function i() {
        if ("function" != typeof WeakMap) return null;
        var e = new WeakMap();
        return i = function () {
          return e;
        }, e;
      }

      function s(e) {
        return (s = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (e) {
          return typeof e;
        } : function (e) {
          return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e;
        })(e);
      }

      a.default._validateParameters = a.default._clearValidateParamsCache = function () {};

      var o = a.default;
      r.default = o;
    }, {
      "../../../docs/parameterData.json": 1,
      "../constants": 22,
      "../internationalization": 30,
      "../main": 32
    }],
    28: [function (e, t, r) {
      "use strict";

      function i(e) {
        return (i = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (e) {
          return typeof e;
        } : function (e) {
          return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e;
        })(e);
      }

      Object.defineProperty(r, "__esModule", {
        value: !0
      }), r.default = void 0;

      var o = function (e) {
        if (e && e.__esModule) return e;
        if (null === e || "object" !== i(e) && "function" != typeof e) return {
          default: e
        };
        var t = s();
        if (t && t.has(e)) return t.get(e);
        var r = {},
            n = Object.defineProperty && Object.getOwnPropertyDescriptor;

        for (var a in e) if (Object.prototype.hasOwnProperty.call(e, a)) {
          var o = n ? Object.getOwnPropertyDescriptor(e, a) : null;
          o && (o.get || o.set) ? Object.defineProperty(r, a, o) : r[a] = e[a];
        }

        r.default = e, t && t.set(e, r);
        return r;
      }(e("./constants"));

      function s() {
        if ("function" != typeof WeakMap) return null;
        var e = new WeakMap();
        return s = function () {
          return e;
        }, e;
      }

      var n = {
        modeAdjust: function (e, t, r, n, a) {
          return a === o.CORNER ? {
            x: e,
            y: t,
            w: r,
            h: n
          } : a === o.CORNERS ? {
            x: e,
            y: t,
            w: r - e,
            h: n - t
          } : a === o.RADIUS ? {
            x: e - r,
            y: t - n,
            w: 2 * r,
            h: 2 * n
          } : a === o.CENTER ? {
            x: e - .5 * r,
            y: t - .5 * n,
            w: r,
            h: n
          } : void 0;
        }
      };
      r.default = n;
    }, {
      "./constants": 22
    }],
    29: [function (e, t, r) {
      "use strict";

      var n,
          a = (n = e("../core/main")) && n.__esModule ? n : {
        default: n
      };
      e("./internationalization");
      var o = Promise.resolve();
      Promise.all([new Promise(function (e, t) {
        "complete" === document.readyState ? e() : window.addEventListener("load", e, !1);
      }), o]).then(function () {
        void 0 === window._setupDone ? window.mocha || (window.setup && "function" == typeof window.setup || window.draw && "function" == typeof window.draw) && !a.default.instance && new a.default() : console.warn("p5.js seems to have been imported multiple times. Please remove the duplicate import");
      });
    }, {
      "../core/main": 32,
      "./internationalization": 30
    }],
    30: [function (e, t, n) {
      "use strict";

      Object.defineProperty(n, "__esModule", {
        value: !0
      }), n.initialize = n.translator = void 0;
      var a,
          o = r(e("i18next")),
          i = r(e("i18next-browser-languagedetector"));

      function r(e) {
        return e && e.__esModule ? e : {
          default: e
        };
      }

      var s = function () {
        return console.debug("p5.js translator called before translations were loaded"), "";
      };

      n.translator = s;

      n.initialize = function () {
        return new Promise(function (t, r) {
          o.default.use(i.default).init({
            fallbackLng: "en",
            nestingPrefix: "$tr(",
            nestingSuffix: ")",
            defaultNS: "translation",
            returnEmptyString: !1,
            interpolation: {
              escapeValue: !1
            },
            detection: {
              checkWhitelist: !1
            },
            resources: a
          }).then(function (e) {
            n.translator = s = e, t();
          }, function (e) {
            return r("Translations failed to load (".concat(e, ")"));
          });
        });
      };
    }, {
      "../../translations": void 0,
      i18next: 4,
      "i18next-browser-languagedetector": 4
    }],
    31: [function (e, t, r) {
      "use strict";

      Object.defineProperty(r, "__esModule", {
        value: !0
      }), r.default = void 0;
      var n,
          a = (n = e("./main")) && n.__esModule ? n : {
        default: n
      };
      a.default.prototype.pushStyle = function () {
        throw new Error("pushStyle() not used, see push()");
      }, a.default.prototype.popStyle = function () {
        throw new Error("popStyle() not used, see pop()");
      }, a.default.prototype.popMatrix = function () {
        throw new Error("popMatrix() not used, see pop()");
      }, a.default.prototype.pushMatrix = function () {
        throw new Error("pushMatrix() not used, see push()");
      };
      var o = a.default;
      r.default = o;
    }, {
      "./main": 32
    }],
    32: [function (e, t, r) {
      "use strict";

      function i(e) {
        return (i = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (e) {
          return typeof e;
        } : function (e) {
          return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e;
        })(e);
      }

      Object.defineProperty(r, "__esModule", {
        value: !0
      }), r.default = void 0, e("./shim");

      var n = function (e) {
        if (e && e.__esModule) return e;
        if (null === e || "object" !== i(e) && "function" != typeof e) return {
          default: e
        };
        var t = s();
        if (t && t.has(e)) return t.get(e);
        var r = {},
            n = Object.defineProperty && Object.getOwnPropertyDescriptor;

        for (var a in e) if (Object.prototype.hasOwnProperty.call(e, a)) {
          var o = n ? Object.getOwnPropertyDescriptor(e, a) : null;
          o && (o.get || o.set) ? Object.defineProperty(r, a, o) : r[a] = e[a];
        }

        r.default = e, t && t.set(e, r);
        return r;
      }(e("./constants"));

      function s() {
        if ("function" != typeof WeakMap) return null;
        var e = new WeakMap();
        return s = function () {
          return e;
        }, e;
      }

      function a(e, t) {
        for (var r = 0; r < t.length; r++) {
          var n = t[r];
          n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, n.key, n);
        }
      }

      var o = function () {
        function _(e, t, r) {
          var d = this;
          !function (e, t) {
            if (!(e instanceof t)) throw new TypeError("Cannot call a class as a function");
          }(this, _), this._setupDone = !1, this._pixelDensity = Math.ceil(window.devicePixelRatio) || 1, this._userNode = t, this._curElement = null, this._elements = [], this._glAttributes = null, this._requestAnimId = 0, this._preloadCount = 0, this._isGlobal = !1, this._loop = !0, this._initializeInstanceVariables(), this._defaultCanvasSize = {
            width: 100,
            height: 100
          }, this._events = {
            mousemove: null,
            mousedown: null,
            mouseup: null,
            dragend: null,
            dragover: null,
            click: null,
            dblclick: null,
            mouseover: null,
            mouseout: null,
            keydown: null,
            keyup: null,
            keypress: null,
            touchstart: null,
            touchmove: null,
            touchend: null,
            resize: null,
            blur: null
          }, this._millisStart = -1, this._lcg_random_state = null, this._gaussian_previous = !1, this._events.wheel = null, this._loadingScreenId = "p5_loading", this._registeredMethods = {};
          var n = Object.getOwnPropertyNames(_.prototype._registeredMethods),
              a = !0,
              o = !1,
              i = void 0;

          try {
            for (var s, l = n[Symbol.iterator](); !(a = (s = l.next()).done); a = !0) {
              var p = s.value;
              this._registeredMethods[p] = _.prototype._registeredMethods[p].slice();
            }
          } catch (e) {
            o = !0, i = e;
          } finally {
            try {
              a || null == l.return || l.return();
            } finally {
              if (o) throw i;
            }
          }

          window.DeviceOrientationEvent && (this._events.deviceorientation = null), window.DeviceMotionEvent && !window._isNodeWebkit && (this._events.devicemotion = null), this._start = function () {
            d._userNode && "string" == typeof d._userNode && (d._userNode = document.getElementById(d._userNode));
            var e = (d._isGlobal ? window : d).preload;

            if (e) {
              var t = document.getElementById(d._loadingScreenId);
              if (!t) (t = document.createElement("div")).innerHTML = "Loading...", t.style.position = "absolute", t.id = d._loadingScreenId, (d._userNode || document.body).appendChild(t);
              var r = d._preloadMethods;

              for (var n in r) {
                r[n] = r[n] || _;
                var a = r[n];
                a !== _.prototype && a !== _ || (d._isGlobal && (window[n] = d._wrapPreload(d, n)), a = d), d._registeredPreloadMethods[n] = a[n], a[n] = d._wrapPreload(a, n);
              }

              e(), d._runIfPreloadsAreDone();
            } else d._setup(), d._draw();
          }, this._runIfPreloadsAreDone = function () {
            var e = this._isGlobal ? window : this;

            if (0 === e._preloadCount) {
              var t = document.getElementById(e._loadingScreenId);
              t && t.parentNode.removeChild(t), this._lastFrameTime = window.performance.now(), e._setup(), e._draw();
            }
          }, this._decrementPreload = function () {
            var e = this._isGlobal ? window : this;
            "function" == typeof e.preload && (e._setProperty("_preloadCount", e._preloadCount - 1), e._runIfPreloadsAreDone());
          }, this._wrapPreload = function (n, a) {
            var o = this;
            return function () {
              o._incrementPreload();

              for (var e = arguments.length, t = new Array(e), r = 0; r < e; r++) t[r] = arguments[r];

              return o._registeredPreloadMethods[a].apply(n, t);
            };
          }, this._incrementPreload = function () {
            var e = this._isGlobal ? window : this;

            e._setProperty("_preloadCount", e._preloadCount + 1);
          }, this._setup = function () {
            d.createCanvas(d._defaultCanvasSize.width, d._defaultCanvasSize.height, "p2d");
            var e = d._isGlobal ? window : d;
            if ("function" == typeof e.preload) for (var t in d._preloadMethods) e[t] = d._preloadMethods[t][t], e[t] && d && (e[t] = e[t].bind(d));
            d._millisStart = window.performance.now(), "function" == typeof e.setup && e.setup();
            var r = document.getElementsByTagName("canvas"),
                n = !0,
                a = !1,
                o = void 0;

            try {
              for (var i, s = r[Symbol.iterator](); !(n = (i = s.next()).done); n = !0) {
                var l = i.value;
                "true" === l.dataset.hidden && (l.style.visibility = "", delete l.dataset.hidden);
              }
            } catch (e) {
              a = !0, o = e;
            } finally {
              try {
                n || null == s.return || s.return();
              } finally {
                if (a) throw o;
              }
            }

            d._lastFrameTime = window.performance.now(), d._setupDone = !0;
          }, this._draw = function () {
            var e = window.performance.now(),
                t = e - d._lastFrameTime,
                r = 1e3 / d._targetFrameRate;
            (!d._loop || r - 5 <= t) && (d.redraw(), d._frameRate = 1e3 / (e - d._lastFrameTime), d.deltaTime = e - d._lastFrameTime, d._setProperty("deltaTime", d.deltaTime), d._lastFrameTime = e, void 0 !== d._updateMouseCoords && (d._updateMouseCoords(), d._setProperty("movedX", 0), d._setProperty("movedY", 0))), d._loop && (d._requestAnimId = window.requestAnimationFrame(d._draw));
          }, this._setProperty = function (e, t) {
            d[e] = t, d._isGlobal && (window[e] = t);
          }, this.remove = function () {
            var e = document.getElementById(d._loadingScreenId);

            if (e && (e.parentNode.removeChild(e), d._incrementPreload()), d._curElement) {
              for (var t in d._loop = !1, d._requestAnimId && window.cancelAnimationFrame(d._requestAnimId), d._events) window.removeEventListener(t, d._events[t]);

              var r = !0,
                  n = !1,
                  a = void 0;

              try {
                for (var o, i = d._elements[Symbol.iterator](); !(r = (o = i.next()).done); r = !0) {
                  var s = o.value;

                  for (var l in s.elt && s.elt.parentNode && s.elt.parentNode.removeChild(s.elt), s._events) s.elt.removeEventListener(l, s._events[l]);
                }
              } catch (e) {
                n = !0, a = e;
              } finally {
                try {
                  r || null == i.return || i.return();
                } finally {
                  if (n) throw a;
                }
              }

              var p = d;

              d._registeredMethods.remove.forEach(function (e) {
                void 0 !== e && e.call(p);
              });
            }

            if (d._isGlobal) {
              for (var u in _.prototype) try {
                delete window[u];
              } catch (e) {
                window[u] = void 0;
              }

              for (var c in d) if (d.hasOwnProperty(c)) try {
                delete window[c];
              } catch (e) {
                window[c] = void 0;
              }

              _.instance = null;
            }
          }, this._registeredMethods.init.forEach(function (e) {
            void 0 !== e && e.call(this);
          }, this), this._setupPromisePreloads();

          var u = this._createFriendlyGlobalFunctionBinder();

          if (e) e(this), _._checkForUserDefinedFunctions(this);else {
            for (var c in this._isGlobal = !0, _.instance = this, _.prototype) if ("function" == typeof _.prototype[c]) {
              var h = c.substring(2);
              this._events.hasOwnProperty(h) || (Math.hasOwnProperty(c) && Math[c] === _.prototype[c] ? u(c, _.prototype[c]) : u(c, _.prototype[c].bind(this)));
            } else u(c, _.prototype[c]);

            for (var m in this) this.hasOwnProperty(m) && u(m, this[m]);
          }

          for (var f in this._events) {
            var y = this["_on".concat(f)];

            if (y) {
              var g = y.bind(this);
              window.addEventListener(f, g, {
                passive: !1
              }), this._events[f] = g;
            }
          }

          function v() {
            d._setProperty("focused", !0);
          }

          function b() {
            d._setProperty("focused", !1);
          }

          window.addEventListener("focus", v), window.addEventListener("blur", b), this.registerMethod("remove", function () {
            window.removeEventListener("focus", v), window.removeEventListener("blur", b);
          }), "complete" === document.readyState ? this._start() : window.addEventListener("load", this._start.bind(this), !1);
        }

        var e, t, r;
        return e = _, (t = [{
          key: "_initializeInstanceVariables",
          value: function () {
            this._styles = [], this._bezierDetail = 20, this._curveDetail = 20, this._colorMode = n.RGB, this._colorMaxes = {
              rgb: [255, 255, 255, 255],
              hsb: [360, 100, 100, 1],
              hsl: [360, 100, 100, 1]
            }, this._downKeys = {};
          }
        }, {
          key: "registerPreloadMethod",
          value: function (e, t) {
            _.prototype._preloadMethods.hasOwnProperty(e) || (_.prototype._preloadMethods[e] = t);
          }
        }, {
          key: "registerMethod",
          value: function (e, t) {
            var r = this || _.prototype;
            r._registeredMethods.hasOwnProperty(e) || (r._registeredMethods[e] = []), r._registeredMethods[e].push(t);
          }
        }, {
          key: "_createFriendlyGlobalFunctionBinder",
          value: function (e) {
            var t = 0 < arguments.length && void 0 !== e ? e : {},
                r = t.globalObject || window;
            t.log || console.log.bind(console);
            return function (e, t) {
              r[e] = t;
            };
          }
        }]) && a(e.prototype, t), r && a(e, r), _;
      }();

      for (var l in o.instance = null, o.disableFriendlyErrors = !1, n) o.prototype[l] = n[l];

      o.prototype._preloadMethods = {
        loadJSON: o.prototype,
        loadImage: o.prototype,
        loadStrings: o.prototype,
        loadXML: o.prototype,
        loadBytes: o.prototype,
        loadTable: o.prototype,
        loadFont: o.prototype,
        loadModel: o.prototype,
        loadShader: o.prototype
      }, o.prototype._registeredMethods = {
        init: [],
        pre: [],
        post: [],
        remove: []
      }, o.prototype._registeredPreloadMethods = {};
      var p = o;
      r.default = p;
    }, {
      "./constants": 22,
      "./shim": 43
    }],
    33: [function (e, t, r) {
      "use strict";

      Object.defineProperty(r, "__esModule", {
        value: !0
      }), r.default = void 0;
      var n,
          a = (n = e("./main")) && n.__esModule ? n : {
        default: n
      };
      a.default.Element = function (e, t) {
        this.elt = e, this._pInst = this._pixelsState = t, this._events = {}, this.width = this.elt.offsetWidth, this.height = this.elt.offsetHeight;
      }, a.default.Element.prototype.parent = function (e) {
        return void 0 === e ? this.elt.parentNode : ("string" == typeof e ? ("#" === e[0] && (e = e.substring(1)), e = document.getElementById(e)) : e instanceof a.default.Element && (e = e.elt), e.appendChild(this.elt), this);
      }, a.default.Element.prototype.id = function (e) {
        return void 0 === e ? this.elt.id : (this.elt.id = e, this.width = this.elt.offsetWidth, this.height = this.elt.offsetHeight, this);
      }, a.default.Element.prototype.class = function (e) {
        return void 0 === e ? this.elt.className : (this.elt.className = e, this);
      }, a.default.Element.prototype.mousePressed = function (t) {
        return a.default.Element._adjustListener("mousedown", function (e) {
          return this._pInst._setProperty("mouseIsPressed", !0), this._pInst._setMouseButton(e), t.call(this);
        }, this), this;
      }, a.default.Element.prototype.doubleClicked = function (e) {
        return a.default.Element._adjustListener("dblclick", e, this), this;
      }, a.default.Element.prototype.mouseWheel = function (e) {
        return a.default.Element._adjustListener("wheel", e, this), this;
      }, a.default.Element.prototype.mouseReleased = function (e) {
        return a.default.Element._adjustListener("mouseup", e, this), this;
      }, a.default.Element.prototype.mouseClicked = function (e) {
        return a.default.Element._adjustListener("click", e, this), this;
      }, a.default.Element.prototype.mouseMoved = function (e) {
        return a.default.Element._adjustListener("mousemove", e, this), this;
      }, a.default.Element.prototype.mouseOver = function (e) {
        return a.default.Element._adjustListener("mouseover", e, this), this;
      }, a.default.Element.prototype.mouseOut = function (e) {
        return a.default.Element._adjustListener("mouseout", e, this), this;
      }, a.default.Element.prototype.touchStarted = function (e) {
        return a.default.Element._adjustListener("touchstart", e, this), this;
      }, a.default.Element.prototype.touchMoved = function (e) {
        return a.default.Element._adjustListener("touchmove", e, this), this;
      }, a.default.Element.prototype.touchEnded = function (e) {
        return a.default.Element._adjustListener("touchend", e, this), this;
      }, a.default.Element.prototype.dragOver = function (e) {
        return a.default.Element._adjustListener("dragover", e, this), this;
      }, a.default.Element.prototype.dragLeave = function (e) {
        return a.default.Element._adjustListener("dragleave", e, this), this;
      }, a.default.Element._adjustListener = function (e, t, r) {
        return !1 === t ? a.default.Element._detachListener(e, r) : a.default.Element._attachListener(e, t, r), this;
      }, a.default.Element._attachListener = function (e, t, r) {
        r._events[e] && a.default.Element._detachListener(e, r);
        var n = t.bind(r);
        r.elt.addEventListener(e, n, !1), r._events[e] = n;
      }, a.default.Element._detachListener = function (e, t) {
        var r = t._events[e];
        t.elt.removeEventListener(e, r, !1), t._events[e] = null;
      }, a.default.Element.prototype._setProperty = function (e, t) {
        this[e] = t;
      };
      var o = a.default.Element;
      r.default = o;
    }, {
      "./main": 32
    }],
    34: [function (e, t, r) {
      "use strict";

      function i(e) {
        return (i = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (e) {
          return typeof e;
        } : function (e) {
          return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e;
        })(e);
      }

      Object.defineProperty(r, "__esModule", {
        value: !0
      }), r.default = void 0;

      var n,
          s = (n = e("./main")) && n.__esModule ? n : {
        default: n
      },
          l = function (e) {
        if (e && e.__esModule) return e;
        if (null === e || "object" !== i(e) && "function" != typeof e) return {
          default: e
        };
        var t = p();
        if (t && t.has(e)) return t.get(e);
        var r = {},
            n = Object.defineProperty && Object.getOwnPropertyDescriptor;

        for (var a in e) if (Object.prototype.hasOwnProperty.call(e, a)) {
          var o = n ? Object.getOwnPropertyDescriptor(e, a) : null;
          o && (o.get || o.set) ? Object.defineProperty(r, a, o) : r[a] = e[a];
        }

        r.default = e, t && t.set(e, r);
        return r;
      }(e("./constants"));

      function p() {
        if ("function" != typeof WeakMap) return null;
        var e = new WeakMap();
        return p = function () {
          return e;
        }, e;
      }

      s.default.Graphics = function (e, t, r, n) {
        var a = r || l.P2D;
        this.canvas = document.createElement("canvas");
        var o = n._userNode || document.body;

        for (var i in o.appendChild(this.canvas), s.default.Element.call(this, this.canvas, n), s.default.prototype) this[i] || ("function" == typeof s.default.prototype[i] ? this[i] = s.default.prototype[i].bind(this) : this[i] = s.default.prototype[i]);

        return s.default.prototype._initializeInstanceVariables.apply(this), this.width = e, this.height = t, this._pixelDensity = n._pixelDensity, a === l.WEBGL ? this._renderer = new s.default.RendererGL(this.canvas, this, !1) : this._renderer = new s.default.Renderer2D(this.canvas, this, !1), n._elements.push(this), Object.defineProperty(this, "deltaTime", {
          get: function () {
            return this._pInst.deltaTime;
          }
        }), this._renderer.resize(e, t), this._renderer._applyDefaults(), this;
      }, s.default.Graphics.prototype = Object.create(s.default.Element.prototype), s.default.Graphics.prototype.reset = function () {
        this._renderer.resetMatrix(), this._renderer.isP3D && this._renderer._update();
      }, s.default.Graphics.prototype.remove = function () {
        this.elt.parentNode && this.elt.parentNode.removeChild(this.elt);

        var e = this._pInst._elements.indexOf(this);

        for (var t in -1 !== e && this._pInst._elements.splice(e, 1), this._events) this.elt.removeEventListener(t, this._events[t]);
      };
      var a = s.default.Graphics;
      r.default = a;
    }, {
      "./constants": 22,
      "./main": 32
    }],
    35: [function (e, t, r) {
      "use strict";

      Object.defineProperty(r, "__esModule", {
        value: !0
      }), r.default = void 0;

      var n,
          l = (n = e("./main")) && n.__esModule ? n : {
        default: n
      },
          b = function (e) {
        if (e && e.__esModule) return e;
        if (null === e || "object" !== s(e) && "function" != typeof e) return {
          default: e
        };
        var t = i();
        if (t && t.has(e)) return t.get(e);
        var r = {},
            n = Object.defineProperty && Object.getOwnPropertyDescriptor;

        for (var a in e) if (Object.prototype.hasOwnProperty.call(e, a)) {
          var o = n ? Object.getOwnPropertyDescriptor(e, a) : null;
          o && (o.get || o.set) ? Object.defineProperty(r, a, o) : r[a] = e[a];
        }

        r.default = e, t && t.set(e, r);
        return r;
      }(e("../core/constants"));

      function i() {
        if ("function" != typeof WeakMap) return null;
        var e = new WeakMap();
        return i = function () {
          return e;
        }, e;
      }

      function s(e) {
        return (s = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (e) {
          return typeof e;
        } : function (e) {
          return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e;
        })(e);
      }

      function p(e) {
        var t = 0,
            r = 0;
        if (e.offsetParent) for (; t += e.offsetLeft, r += e.offsetTop, e = e.offsetParent;);else t += e.offsetLeft, r += e.offsetTop;
        return [t, r];
      }

      l.default.Renderer = function (e, t, r) {
        l.default.Element.call(this, e, t), this.canvas = e, this._pixelsState = t, r ? (this._isMainCanvas = !0, this._pInst._setProperty("_curElement", this), this._pInst._setProperty("canvas", this.canvas), this._pInst._setProperty("width", this.width), this._pInst._setProperty("height", this.height)) : (this.canvas.style.display = "none", this._styles = []), this._textSize = 12, this._textLeading = 15, this._textFont = "sans-serif", this._textStyle = b.NORMAL, this._textAscent = null, this._textDescent = null, this._textAlign = b.LEFT, this._textBaseline = b.BASELINE, this._rectMode = b.CORNER, this._ellipseMode = b.CENTER, this._curveTightness = 0, this._imageMode = b.CORNER, this._tint = null, this._doStroke = !0, this._doFill = !0, this._strokeSet = !1, this._fillSet = !1;
      }, l.default.Renderer.prototype = Object.create(l.default.Element.prototype), l.default.Renderer.prototype.push = function () {
        return {
          properties: {
            _doStroke: this._doStroke,
            _strokeSet: this._strokeSet,
            _doFill: this._doFill,
            _fillSet: this._fillSet,
            _tint: this._tint,
            _imageMode: this._imageMode,
            _rectMode: this._rectMode,
            _ellipseMode: this._ellipseMode,
            _textFont: this._textFont,
            _textLeading: this._textLeading,
            _textSize: this._textSize,
            _textAlign: this._textAlign,
            _textBaseline: this._textBaseline,
            _textStyle: this._textStyle
          }
        };
      }, l.default.Renderer.prototype.pop = function (e) {
        e.properties && Object.assign(this, e.properties);
      }, l.default.Renderer.prototype.resize = function (e, t) {
        this.width = e, this.height = t, this.elt.width = e * this._pInst._pixelDensity, this.elt.height = t * this._pInst._pixelDensity, this.elt.style.width = "".concat(e, "px"), this.elt.style.height = "".concat(t, "px"), this._isMainCanvas && (this._pInst._setProperty("width", this.width), this._pInst._setProperty("height", this.height));
      }, l.default.Renderer.prototype.get = function (e, t, r, n) {
        var a = this._pixelsState,
            o = a._pixelDensity,
            i = this.canvas;
        if (void 0 === e && void 0 === t) e = t = 0, r = a.width, n = a.height;else if (e *= o, t *= o, void 0 === r && void 0 === n) return e < 0 || t < 0 || e >= i.width || t >= i.height ? [0, 0, 0, 0] : this._getPixel(e, t);
        var s = new l.default.Image(r, n);
        return s.canvas.getContext("2d").drawImage(i, e, t, r * o, n * o, 0, 0, r, n), s;
      }, l.default.Renderer.prototype.textLeading = function (e) {
        return "number" == typeof e ? (this._setProperty("_textLeading", e), this._pInst) : this._textLeading;
      }, l.default.Renderer.prototype.textSize = function (e) {
        return "number" == typeof e ? (this._setProperty("_textSize", e), this._setProperty("_textLeading", e * b._DEFAULT_LEADMULT), this._applyTextProperties()) : this._textSize;
      }, l.default.Renderer.prototype.textStyle = function (e) {
        return e ? (e !== b.NORMAL && e !== b.ITALIC && e !== b.BOLD && e !== b.BOLDITALIC || this._setProperty("_textStyle", e), this._applyTextProperties()) : this._textStyle;
      }, l.default.Renderer.prototype.textAscent = function () {
        return null === this._textAscent && this._updateTextMetrics(), this._textAscent;
      }, l.default.Renderer.prototype.textDescent = function () {
        return null === this._textDescent && this._updateTextMetrics(), this._textDescent;
      }, l.default.Renderer.prototype.textAlign = function (e, t) {
        return void 0 !== e ? (this._setProperty("_textAlign", e), void 0 !== t && this._setProperty("_textBaseline", t), this._applyTextProperties()) : {
          horizontal: this._textAlign,
          vertical: this._textBaseline
        };
      }, l.default.Renderer.prototype.text = function (e, t, r, n, a) {
        var o,
            i,
            s,
            l,
            p,
            u,
            c,
            d,
            h,
            m = this._pInst,
            f = Number.MAX_VALUE;

        if ((this._doFill || this._doStroke) && void 0 !== e) {
          if ("string" != typeof e && (e = e.toString()), o = (e = e.replace(/(\t)/g, "  ")).split("\n"), void 0 !== n) {
            for (c = 1, s = h = 0; s < o.length; s++) {
              for (p = "", d = o[s].split(" "), i = 0; i < d.length; i++) u = "".concat(p + d[i], " "), n < this.textWidth(u) && 1 < c ? (p = "".concat(d[i], " "), h += m.textLeading(), c = 1) : (p = u, c += 1);

              s < o.length - 1 && (h += m.textLeading());
            }

            switch (this._rectMode === b.CENTER && (t -= n / 2, r -= a / 2), this._textAlign) {
              case b.CENTER:
                t += n / 2;
                break;

              case b.RIGHT:
                t += n;
            }

            var y = !1;

            if (void 0 !== a) {
              switch (this._textBaseline) {
                case b.BOTTOM:
                  r += a - h;
                  break;

                case b.CENTER:
                  r += (a - h) / 2;
                  break;

                case b.BASELINE:
                  y = !0, this._textBaseline = b.TOP;
              }

              f = r + a - m.textAscent();
            }

            for (s = 0; s < o.length; s++) {
              for (p = "", d = o[s].split(" "), i = 0; i < d.length; i++) u = "".concat(p + d[i], " "), n < this.textWidth(u) && 0 < p.length ? (this._renderText(m, p, t, r, f), p = "".concat(d[i], " "), r += m.textLeading()) : p = u;

              this._renderText(m, p, t, r, f), r += m.textLeading(), y && (this._textBaseline = b.BASELINE);
            }
          } else {
            var g = 0,
                v = m.textAlign().vertical;

            for (v === b.CENTER ? g = (o.length - 1) * m.textLeading() / 2 : v === b.BOTTOM && (g = (o.length - 1) * m.textLeading()), l = 0; l < o.length; l++) this._renderText(m, o[l], t, r - g, f), r += m.textLeading();
          }

          return m;
        }
      }, l.default.Renderer.prototype._applyDefaults = function () {
        return this;
      }, l.default.Renderer.prototype._isOpenType = function () {
        var e = 0 < arguments.length && void 0 !== arguments[0] ? arguments[0] : this._textFont;
        return "object" === s(e) && e.font && e.font.supported;
      }, l.default.Renderer.prototype._updateTextMetrics = function () {
        if (this._isOpenType()) return this._setProperty("_textAscent", this._textFont._textAscent()), this._setProperty("_textDescent", this._textFont._textDescent()), this;
        var e = document.createElement("span");
        e.style.fontFamily = this._textFont, e.style.fontSize = "".concat(this._textSize, "px"), e.innerHTML = "ABCjgq|";
        var t = document.createElement("div");
        t.style.display = "inline-block", t.style.width = "1px", t.style.height = "0px";
        var r = document.createElement("div");
        r.appendChild(e), r.appendChild(t), r.style.height = "0px", r.style.overflow = "hidden", document.body.appendChild(r), t.style.verticalAlign = "baseline";
        var n = p(t),
            a = p(e),
            o = n[1] - a[1];
        t.style.verticalAlign = "bottom", n = p(t), a = p(e);
        var i = n[1] - a[1] - o;
        return document.body.removeChild(r), this._setProperty("_textAscent", o), this._setProperty("_textDescent", i), this;
      };
      var a = l.default.Renderer;
      r.default = a;
    }, {
      "../core/constants": 22,
      "./main": 32
    }],
    36: [function (e, t, r) {
      "use strict";

      function i(e) {
        return (i = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (e) {
          return typeof e;
        } : function (e) {
          return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e;
        })(e);
      }

      Object.defineProperty(r, "__esModule", {
        value: !0
      }), r.default = void 0;

      var c = n(e("./main")),
          m = function (e) {
        if (e && e.__esModule) return e;
        if (null === e || "object" !== i(e) && "function" != typeof e) return {
          default: e
        };
        var t = s();
        if (t && t.has(e)) return t.get(e);
        var r = {},
            n = Object.defineProperty && Object.getOwnPropertyDescriptor;

        for (var a in e) if (Object.prototype.hasOwnProperty.call(e, a)) {
          var o = n ? Object.getOwnPropertyDescriptor(e, a) : null;
          o && (o.get || o.set) ? Object.defineProperty(r, a, o) : r[a] = e[a];
        }

        r.default = e, t && t.set(e, r);
        return r;
      }(e("./constants")),
          d = n(e("../image/filters"));

      function s() {
        if ("function" != typeof WeakMap) return null;
        var e = new WeakMap();
        return s = function () {
          return e;
        }, e;
      }

      function n(e) {
        return e && e.__esModule ? e : {
          default: e
        };
      }

      e("./p5.Renderer");
      var y = "rgba(0,0,0,0)";
      c.default.Renderer2D = function (e, t, r) {
        return c.default.Renderer.call(this, e, t, r), this.drawingContext = this.canvas.getContext("2d"), this._pInst._setProperty("drawingContext", this.drawingContext), this;
      }, c.default.Renderer2D.prototype = Object.create(c.default.Renderer.prototype), c.default.Renderer2D.prototype._applyDefaults = function () {
        this._cachedFillStyle = this._cachedStrokeStyle = void 0, this._cachedBlendMode = m.BLEND, this._setFill(m._DEFAULT_FILL), this._setStroke(m._DEFAULT_STROKE), this.drawingContext.lineCap = m.ROUND, this.drawingContext.font = "normal 12px sans-serif";
      }, c.default.Renderer2D.prototype.resize = function (e, t) {
        c.default.Renderer.prototype.resize.call(this, e, t), this.drawingContext.scale(this._pInst._pixelDensity, this._pInst._pixelDensity);
      }, c.default.Renderer2D.prototype.background = function () {
        if (this.drawingContext.save(), this.resetMatrix(), (arguments.length <= 0 ? void 0 : arguments[0]) instanceof c.default.Image) this._pInst.image(arguments.length <= 0 ? void 0 : arguments[0], 0, 0, this.width, this.height);else {
          var e,
              t = this._getFill(),
              r = (e = this._pInst).color.apply(e, arguments).toString();

          this._setFill(r), this._isErasing && this.blendMode(this._cachedBlendMode), this.drawingContext.fillRect(0, 0, this.width, this.height), this._setFill(t), this._isErasing && this._pInst.erase();
        }
        this.drawingContext.restore();
      }, c.default.Renderer2D.prototype.clear = function () {
        this.drawingContext.save(), this.resetMatrix(), this.drawingContext.clearRect(0, 0, this.width, this.height), this.drawingContext.restore();
      }, c.default.Renderer2D.prototype.fill = function () {
        var e,
            t = (e = this._pInst).color.apply(e, arguments);

        this._setFill(t.toString());
      }, c.default.Renderer2D.prototype.stroke = function () {
        var e,
            t = (e = this._pInst).color.apply(e, arguments);

        this._setStroke(t.toString());
      }, c.default.Renderer2D.prototype.erase = function (e, t) {
        if (!this._isErasing) {
          this._cachedFillStyle = this.drawingContext.fillStyle;

          var r = this._pInst.color(255, e).toString();

          this.drawingContext.fillStyle = r, this._cachedStrokeStyle = this.drawingContext.strokeStyle;

          var n = this._pInst.color(255, t).toString();

          this.drawingContext.strokeStyle = n;
          var a = this._cachedBlendMode;
          this.blendMode(m.REMOVE), this._cachedBlendMode = a, this._isErasing = !0;
        }
      }, c.default.Renderer2D.prototype.noErase = function () {
        this._isErasing && (this.drawingContext.fillStyle = this._cachedFillStyle, this.drawingContext.strokeStyle = this._cachedStrokeStyle, this.blendMode(this._cachedBlendMode), this._isErasing = !1);
      }, c.default.Renderer2D.prototype.image = function (e, t, r, n, a, o, i, s, l) {
        var p;
        e.gifProperties && e._animateGif(this._pInst);

        try {
          this._tint && (c.default.MediaElement && e instanceof c.default.MediaElement && e.loadPixels(), e.canvas && (p = this._getTintedImageCanvas(e))), p = p || e.canvas || e.elt;
          var u = 1;
          e.width && 0 < e.width && (u = p.width / e.width), this._isErasing && this.blendMode(this._cachedBlendMode), this.drawingContext.drawImage(p, u * t, u * r, u * n, u * a, o, i, s, l), this._isErasing && this._pInst.erase();
        } catch (e) {
          if ("NS_ERROR_NOT_AVAILABLE" !== e.name) throw e;
        }
      }, c.default.Renderer2D.prototype._getTintedImageCanvas = function (e) {
        if (!e.canvas) return e;

        var t = d.default._toPixels(e.canvas),
            r = document.createElement("canvas");

        r.width = e.canvas.width, r.height = e.canvas.height;

        for (var n = r.getContext("2d"), a = n.createImageData(e.canvas.width, e.canvas.height), o = a.data, i = 0; i < t.length; i += 4) {
          var s = t[i],
              l = t[i + 1],
              p = t[i + 2],
              u = t[i + 3];
          o[i] = s * this._tint[0] / 255, o[i + 1] = l * this._tint[1] / 255, o[i + 2] = p * this._tint[2] / 255, o[i + 3] = u * this._tint[3] / 255;
        }

        return n.putImageData(a, 0, 0), r;
      }, c.default.Renderer2D.prototype.blendMode = function (e) {
        if (e === m.SUBTRACT) console.warn("blendMode(SUBTRACT) only works in WEBGL mode.");else {
          if (e !== m.BLEND && e !== m.REMOVE && e !== m.DARKEST && e !== m.LIGHTEST && e !== m.DIFFERENCE && e !== m.MULTIPLY && e !== m.EXCLUSION && e !== m.SCREEN && e !== m.REPLACE && e !== m.OVERLAY && e !== m.HARD_LIGHT && e !== m.SOFT_LIGHT && e !== m.DODGE && e !== m.BURN && e !== m.ADD) throw new Error("Mode ".concat(e, " not recognized."));
          this._cachedBlendMode = e, this.drawingContext.globalCompositeOperation = e;
        }
      }, c.default.Renderer2D.prototype.blend = function () {
        for (var e = this.drawingContext.globalCompositeOperation, t = arguments.length, r = new Array(t), n = 0; n < t; n++) r[n] = arguments[n];

        var a = r[r.length - 1],
            o = Array.prototype.slice.call(r, 0, r.length - 1);
        this.drawingContext.globalCompositeOperation = a, c.default.prototype.copy.apply(this, o), this.drawingContext.globalCompositeOperation = e;
      }, c.default.Renderer2D.prototype._getPixel = function (e, t) {
        var r;
        return [(r = this.drawingContext.getImageData(e, t, 1, 1).data)[0], r[1], r[2], r[3]];
      }, c.default.Renderer2D.prototype.loadPixels = function () {
        var e = this._pixelsState,
            t = e._pixelDensity,
            r = this.width * t,
            n = this.height * t,
            a = this.drawingContext.getImageData(0, 0, r, n);
        e._setProperty("imageData", a), e._setProperty("pixels", a.data);
      }, c.default.Renderer2D.prototype.set = function (e, t, r) {
        e = Math.floor(e), t = Math.floor(t);
        var n = this._pixelsState;
        if (r instanceof c.default.Image) this.drawingContext.save(), this.drawingContext.setTransform(1, 0, 0, 1, 0, 0), this.drawingContext.scale(n._pixelDensity, n._pixelDensity), this.drawingContext.clearRect(e, t, r.width, r.height), this.drawingContext.drawImage(r.canvas, e, t), this.drawingContext.restore();else {
          var a = 0,
              o = 0,
              i = 0,
              s = 0,
              l = 4 * (t * n._pixelDensity * (this.width * n._pixelDensity) + e * n._pixelDensity);
          if (n.imageData || n.loadPixels.call(n), "number" == typeof r) l < n.pixels.length && (i = o = a = r, s = 255);else if (r instanceof Array) {
            if (r.length < 4) throw new Error("pixel array must be of the form [R, G, B, A]");
            l < n.pixels.length && (a = r[0], o = r[1], i = r[2], s = r[3]);
          } else r instanceof c.default.Color && l < n.pixels.length && (a = r.levels[0], o = r.levels[1], i = r.levels[2], s = r.levels[3]);

          for (var p = 0; p < n._pixelDensity; p++) for (var u = 0; u < n._pixelDensity; u++) l = 4 * ((t * n._pixelDensity + u) * this.width * n._pixelDensity + (e * n._pixelDensity + p)), n.pixels[l] = a, n.pixels[l + 1] = o, n.pixels[l + 2] = i, n.pixels[l + 3] = s;
        }
      }, c.default.Renderer2D.prototype.updatePixels = function (e, t, r, n) {
        var a = this._pixelsState,
            o = a._pixelDensity;
        void 0 === e && void 0 === t && void 0 === r && void 0 === n && (t = e = 0, r = this.width, n = this.height), e *= o, t *= o, r *= o, n *= o, this.gifProperties && (this.gifProperties.frames[this.gifProperties.displayIndex].image = a.imageData), this.drawingContext.putImageData(a.imageData, e, t, 0, 0, r, n);
      }, c.default.Renderer2D.prototype._acuteArcToBezier = function (e, t) {
        var r = t / 2,
            n = Math.cos(r),
            a = Math.sin(r),
            o = 1 / Math.tan(r),
            i = e + r,
            s = Math.cos(i),
            l = Math.sin(i),
            p = (4 - n) / 3,
            u = a + (n - p) * o;
        return {
          ax: Math.cos(e).toFixed(7),
          ay: Math.sin(e).toFixed(7),
          bx: (p * s + u * l).toFixed(7),
          by: (p * l - u * s).toFixed(7),
          cx: (p * s - u * l).toFixed(7),
          cy: (p * l + u * s).toFixed(7),
          dx: Math.cos(e + t).toFixed(7),
          dy: Math.sin(e + t).toFixed(7)
        };
      }, c.default.Renderer2D.prototype.arc = function (r, n, e, t, a, o, i) {
        var s = this.drawingContext,
            l = e / 2,
            p = t / 2,
            u = 0,
            c = [];

        for (r += l, n += p; 1e-5 <= o - a;) u = Math.min(o - a, m.HALF_PI), c.push(this._acuteArcToBezier(a, u)), a += u;

        return this._doFill && (s.beginPath(), c.forEach(function (e, t) {
          0 === t && s.moveTo(r + e.ax * l, n + e.ay * p), s.bezierCurveTo(r + e.bx * l, n + e.by * p, r + e.cx * l, n + e.cy * p, r + e.dx * l, n + e.dy * p);
        }), i !== m.PIE && null != i || s.lineTo(r, n), s.closePath(), s.fill()), this._doStroke && (s.beginPath(), c.forEach(function (e, t) {
          0 === t && s.moveTo(r + e.ax * l, n + e.ay * p), s.bezierCurveTo(r + e.bx * l, n + e.by * p, r + e.cx * l, n + e.cy * p, r + e.dx * l, n + e.dy * p);
        }), i === m.PIE ? (s.lineTo(r, n), s.closePath()) : i === m.CHORD && s.closePath(), s.stroke()), this;
      }, c.default.Renderer2D.prototype.ellipse = function (e) {
        var t = this.drawingContext,
            r = this._doFill,
            n = this._doStroke,
            a = parseFloat(e[0]),
            o = parseFloat(e[1]),
            i = parseFloat(e[2]),
            s = parseFloat(e[3]);

        if (r && !n) {
          if (this._getFill() === y) return this;
        } else if (!r && n && this._getStroke() === y) return this;

        var l = i / 2 * .5522847498,
            p = s / 2 * .5522847498,
            u = a + i,
            c = o + s,
            d = a + i / 2,
            h = o + s / 2;
        t.beginPath(), t.moveTo(a, h), t.bezierCurveTo(a, h - p, d - l, o, d, o), t.bezierCurveTo(d + l, o, u, h - p, u, h), t.bezierCurveTo(u, h + p, d + l, c, d, c), t.bezierCurveTo(d - l, c, a, h + p, a, h), r && t.fill(), n && t.stroke();
      }, c.default.Renderer2D.prototype.line = function (e, t, r, n) {
        var a = this.drawingContext;
        return this._doStroke && (this._getStroke() === y || (a.beginPath(), a.moveTo(e, t), a.lineTo(r, n), a.stroke())), this;
      }, c.default.Renderer2D.prototype.point = function (e, t) {
        var r = this.drawingContext;
        if (!this._doStroke) return this;
        if (this._getStroke() === y) return this;

        var n = this._getStroke(),
            a = this._getFill();

        e = Math.round(e), t = Math.round(t), this._setFill(n), 1 < r.lineWidth ? (r.beginPath(), r.arc(e, t, r.lineWidth / 2, 0, m.TWO_PI, !1), r.fill()) : r.fillRect(e, t, 1, 1), this._setFill(a);
      }, c.default.Renderer2D.prototype.quad = function (e, t, r, n, a, o, i, s) {
        var l = this.drawingContext,
            p = this._doFill,
            u = this._doStroke;

        if (p && !u) {
          if (this._getFill() === y) return this;
        } else if (!p && u && this._getStroke() === y) return this;

        return l.beginPath(), l.moveTo(e, t), l.lineTo(r, n), l.lineTo(a, o), l.lineTo(i, s), l.closePath(), p && l.fill(), u && l.stroke(), this;
      }, c.default.Renderer2D.prototype.rect = function (e) {
        var t = e[0],
            r = e[1],
            n = e[2],
            a = e[3],
            o = e[4],
            i = e[5],
            s = e[6],
            l = e[7],
            p = this.drawingContext,
            u = this._doFill,
            c = this._doStroke;

        if (u && !c) {
          if (this._getFill() === y) return this;
        } else if (!u && c && this._getStroke() === y) return this;

        if (p.beginPath(), void 0 === o) p.rect(t, r, n, a);else {
          void 0 === i && (i = o), void 0 === s && (s = i), void 0 === l && (l = s);
          var d = Math.abs(n),
              h = Math.abs(a),
              m = d / 2,
              f = h / 2;
          d < 2 * o && (o = m), h < 2 * o && (o = f), d < 2 * i && (i = m), h < 2 * i && (i = f), d < 2 * s && (s = m), h < 2 * s && (s = f), d < 2 * l && (l = m), h < 2 * l && (l = f), p.beginPath(), p.moveTo(t + o, r), p.arcTo(t + n, r, t + n, r + a, i), p.arcTo(t + n, r + a, t, r + a, s), p.arcTo(t, r + a, t, r, l), p.arcTo(t, r, t + n, r, o), p.closePath();
        }
        return this._doFill && p.fill(), this._doStroke && p.stroke(), this;
      }, c.default.Renderer2D.prototype.triangle = function (e) {
        var t = this.drawingContext,
            r = this._doFill,
            n = this._doStroke,
            a = e[0],
            o = e[1],
            i = e[2],
            s = e[3],
            l = e[4],
            p = e[5];

        if (r && !n) {
          if (this._getFill() === y) return this;
        } else if (!r && n && this._getStroke() === y) return this;

        t.beginPath(), t.moveTo(a, o), t.lineTo(i, s), t.lineTo(l, p), t.closePath(), r && t.fill(), n && t.stroke();
      }, c.default.Renderer2D.prototype.endShape = function (e, t, r, n, a, o, i) {
        if (0 === t.length) return this;
        if (!this._doStroke && !this._doFill) return this;
        var s,
            l,
            p,
            u = e === m.CLOSE;
        u && !o && t.push(t[0]);
        var c = t.length;
        if (!r || i !== m.POLYGON && null !== i) {
          if (!n || i !== m.POLYGON && null !== i) {
            if (!a || i !== m.POLYGON && null !== i) {
              if (i === m.POINTS) for (l = 0; l < c; l++) s = t[l], this._doStroke && this._pInst.stroke(s[6]), this._pInst.point(s[0], s[1]);else if (i === m.LINES) for (l = 0; l + 1 < c; l += 2) s = t[l], this._doStroke && this._pInst.stroke(t[l + 1][6]), this._pInst.line(s[0], s[1], t[l + 1][0], t[l + 1][1]);else if (i === m.TRIANGLES) for (l = 0; l + 2 < c; l += 3) s = t[l], this.drawingContext.beginPath(), this.drawingContext.moveTo(s[0], s[1]), this.drawingContext.lineTo(t[l + 1][0], t[l + 1][1]), this.drawingContext.lineTo(t[l + 2][0], t[l + 2][1]), this.drawingContext.closePath(), this._doFill && (this._pInst.fill(t[l + 2][5]), this.drawingContext.fill()), this._doStroke && (this._pInst.stroke(t[l + 2][6]), this.drawingContext.stroke());else if (i === m.TRIANGLE_STRIP) for (l = 0; l + 1 < c; l++) s = t[l], this.drawingContext.beginPath(), this.drawingContext.moveTo(t[l + 1][0], t[l + 1][1]), this.drawingContext.lineTo(s[0], s[1]), this._doStroke && this._pInst.stroke(t[l + 1][6]), this._doFill && this._pInst.fill(t[l + 1][5]), l + 2 < c && (this.drawingContext.lineTo(t[l + 2][0], t[l + 2][1]), this._doStroke && this._pInst.stroke(t[l + 2][6]), this._doFill && this._pInst.fill(t[l + 2][5])), this._doFillStrokeClose(u);else if (i === m.TRIANGLE_FAN) {
                if (2 < c) {
                  for (this.drawingContext.beginPath(), l = 2; l < c; l++) s = t[l], this.drawingContext.moveTo(t[0][0], t[0][1]), this.drawingContext.lineTo(t[l - 1][0], t[l - 1][1]), this.drawingContext.lineTo(s[0], s[1]), this.drawingContext.lineTo(t[0][0], t[0][1]), l < c - 1 && (this._doFill && s[5] !== t[l + 1][5] || this._doStroke && s[6] !== t[l + 1][6]) && (this._doFill && (this._pInst.fill(s[5]), this.drawingContext.fill(), this._pInst.fill(t[l + 1][5])), this._doStroke && (this._pInst.stroke(s[6]), this.drawingContext.stroke(), this._pInst.stroke(t[l + 1][6])), this.drawingContext.closePath(), this.drawingContext.beginPath());

                  this._doFillStrokeClose(u);
                }
              } else if (i === m.QUADS) for (l = 0; l + 3 < c; l += 4) {
                for (s = t[l], this.drawingContext.beginPath(), this.drawingContext.moveTo(s[0], s[1]), p = 1; p < 4; p++) this.drawingContext.lineTo(t[l + p][0], t[l + p][1]);

                this.drawingContext.lineTo(s[0], s[1]), this._doFill && this._pInst.fill(t[l + 3][5]), this._doStroke && this._pInst.stroke(t[l + 3][6]), this._doFillStrokeClose(u);
              } else if (i === m.QUAD_STRIP) {
                if (3 < c) for (l = 0; l + 1 < c; l += 2) s = t[l], this.drawingContext.beginPath(), l + 3 < c ? (this.drawingContext.moveTo(t[l + 2][0], t[l + 2][1]), this.drawingContext.lineTo(s[0], s[1]), this.drawingContext.lineTo(t[l + 1][0], t[l + 1][1]), this.drawingContext.lineTo(t[l + 3][0], t[l + 3][1]), this._doFill && this._pInst.fill(t[l + 3][5]), this._doStroke && this._pInst.stroke(t[l + 3][6])) : (this.drawingContext.moveTo(s[0], s[1]), this.drawingContext.lineTo(t[l + 1][0], t[l + 1][1])), this._doFillStrokeClose(u);
              } else {
                for (this.drawingContext.beginPath(), this.drawingContext.moveTo(t[0][0], t[0][1]), l = 1; l < c; l++) (s = t[l]).isVert && (s.moveTo ? this.drawingContext.moveTo(s[0], s[1]) : this.drawingContext.lineTo(s[0], s[1]));

                this._doFillStrokeClose(u);
              }
            } else {
              for (this.drawingContext.beginPath(), l = 0; l < c; l++) t[l].isVert ? t[l].moveTo ? this.drawingContext.moveTo(t[l][0], t[l][1]) : this.drawingContext.lineTo(t[l][0], t[l][1]) : this.drawingContext.quadraticCurveTo(t[l][0], t[l][1], t[l][2], t[l][3]);

              this._doFillStrokeClose(u);
            }
          } else {
            for (this.drawingContext.beginPath(), l = 0; l < c; l++) t[l].isVert ? t[l].moveTo ? this.drawingContext.moveTo(t[l][0], t[l][1]) : this.drawingContext.lineTo(t[l][0], t[l][1]) : this.drawingContext.bezierCurveTo(t[l][0], t[l][1], t[l][2], t[l][3], t[l][4], t[l][5]);

            this._doFillStrokeClose(u);
          }
        } else if (3 < c) {
          var d = [],
              h = 1 - this._curveTightness;

          for (this.drawingContext.beginPath(), this.drawingContext.moveTo(t[1][0], t[1][1]), l = 1; l + 2 < c; l++) s = t[l], d[0] = [s[0], s[1]], d[1] = [s[0] + (h * t[l + 1][0] - h * t[l - 1][0]) / 6, s[1] + (h * t[l + 1][1] - h * t[l - 1][1]) / 6], d[2] = [t[l + 1][0] + (h * t[l][0] - h * t[l + 2][0]) / 6, t[l + 1][1] + (h * t[l][1] - h * t[l + 2][1]) / 6], d[3] = [t[l + 1][0], t[l + 1][1]], this.drawingContext.bezierCurveTo(d[1][0], d[1][1], d[2][0], d[2][1], d[3][0], d[3][1]);

          u && this.drawingContext.lineTo(t[l + 1][0], t[l + 1][1]), this._doFillStrokeClose(u);
        }
        return o = a = n = r = !1, u && t.pop(), this;
      }, c.default.Renderer2D.prototype.strokeCap = function (e) {
        return e !== m.ROUND && e !== m.SQUARE && e !== m.PROJECT || (this.drawingContext.lineCap = e), this;
      }, c.default.Renderer2D.prototype.strokeJoin = function (e) {
        return e !== m.ROUND && e !== m.BEVEL && e !== m.MITER || (this.drawingContext.lineJoin = e), this;
      }, c.default.Renderer2D.prototype.strokeWeight = function (e) {
        return this.drawingContext.lineWidth = void 0 === e || 0 === e ? 1e-4 : e, this;
      }, c.default.Renderer2D.prototype._getFill = function () {
        return this._cachedFillStyle || (this._cachedFillStyle = this.drawingContext.fillStyle), this._cachedFillStyle;
      }, c.default.Renderer2D.prototype._setFill = function (e) {
        e !== this._cachedFillStyle && (this.drawingContext.fillStyle = e, this._cachedFillStyle = e);
      }, c.default.Renderer2D.prototype._getStroke = function () {
        return this._cachedStrokeStyle || (this._cachedStrokeStyle = this.drawingContext.strokeStyle), this._cachedStrokeStyle;
      }, c.default.Renderer2D.prototype._setStroke = function (e) {
        e !== this._cachedStrokeStyle && (this.drawingContext.strokeStyle = e, this._cachedStrokeStyle = e);
      }, c.default.Renderer2D.prototype.bezier = function (e, t, r, n, a, o, i, s) {
        return this._pInst.beginShape(), this._pInst.vertex(e, t), this._pInst.bezierVertex(r, n, a, o, i, s), this._pInst.endShape(), this;
      }, c.default.Renderer2D.prototype.curve = function (e, t, r, n, a, o, i, s) {
        return this._pInst.beginShape(), this._pInst.curveVertex(e, t), this._pInst.curveVertex(r, n), this._pInst.curveVertex(a, o), this._pInst.curveVertex(i, s), this._pInst.endShape(), this;
      }, c.default.Renderer2D.prototype._doFillStrokeClose = function (e) {
        e && this.drawingContext.closePath(), this._doFill && this.drawingContext.fill(), this._doStroke && this.drawingContext.stroke();
      }, c.default.Renderer2D.prototype.applyMatrix = function (e, t, r, n, a, o) {
        this.drawingContext.transform(e, t, r, n, a, o);
      }, c.default.Renderer2D.prototype.resetMatrix = function () {
        return this.drawingContext.setTransform(1, 0, 0, 1, 0, 0), this.drawingContext.scale(this._pInst._pixelDensity, this._pInst._pixelDensity), this;
      }, c.default.Renderer2D.prototype.rotate = function (e) {
        this.drawingContext.rotate(e);
      }, c.default.Renderer2D.prototype.scale = function (e, t) {
        return this.drawingContext.scale(e, t), this;
      }, c.default.Renderer2D.prototype.translate = function (e, t) {
        return e instanceof c.default.Vector && (t = e.y, e = e.x), this.drawingContext.translate(e, t), this;
      }, c.default.Renderer2D.prototype.text = function (e, t, r, n, a) {
        var o;
        void 0 !== n && this.drawingContext.textBaseline === m.BASELINE && (o = !0, this.drawingContext.textBaseline = m.TOP);
        var i = c.default.Renderer.prototype.text.apply(this, arguments);
        return o && (this.drawingContext.textBaseline = m.BASELINE), i;
      }, c.default.Renderer2D.prototype._renderText = function (e, t, r, n, a) {
        if (!(a <= n)) return e.push(), this._isOpenType() ? this._textFont._renderPath(t, r, n, {
          renderer: this
        }) : (this._doStroke && this._strokeSet && this.drawingContext.strokeText(t, r, n), this._doFill && (this._fillSet || this._setFill(m._DEFAULT_TEXT_FILL), this.drawingContext.fillText(t, r, n))), e.pop(), e;
      }, c.default.Renderer2D.prototype.textWidth = function (e) {
        return this._isOpenType() ? this._textFont._textWidth(e, this._textSize) : this.drawingContext.measureText(e).width;
      }, c.default.Renderer2D.prototype._applyTextProperties = function () {
        var e,
            t = this._pInst;
        return this._setProperty("_textAscent", null), this._setProperty("_textDescent", null), e = this._textFont, this._isOpenType() && (e = this._textFont.font.familyName, this._setProperty("_textStyle", this._textFont.font.styleName)), this.drawingContext.font = "".concat(this._textStyle || "normal", " ").concat(this._textSize || 12, "px ").concat(e || "sans-serif"), this.drawingContext.textAlign = this._textAlign, this._textBaseline === m.CENTER ? this.drawingContext.textBaseline = m._CTX_MIDDLE : this.drawingContext.textBaseline = this._textBaseline, t;
      }, c.default.Renderer2D.prototype.push = function () {
        return this.drawingContext.save(), c.default.Renderer.prototype.push.apply(this);
      }, c.default.Renderer2D.prototype.pop = function (e) {
        this.drawingContext.restore(), this._cachedFillStyle = this.drawingContext.fillStyle, this._cachedStrokeStyle = this.drawingContext.strokeStyle, c.default.Renderer.prototype.pop.call(this, e);
      };
      var a = c.default.Renderer2D;
      r.default = a;
    }, {
      "../image/filters": 53,
      "./constants": 22,
      "./main": 32,
      "./p5.Renderer": 35
    }],
    37: [function (e, t, r) {
      "use strict";

      var n,
          d = (n = e("./main")) && n.__esModule ? n : {
        default: n
      };
      d.default.prototype._promisePreloads = [];
      var h = !(d.default.prototype.registerPromisePreload = function (e) {
        d.default.prototype._promisePreloads.push(e);
      });
      d.default.prototype._setupPromisePreloads = function () {
        var e = !0,
            t = !1,
            r = void 0;

        try {
          for (var n, a = this._promisePreloads[Symbol.iterator](); !(e = (n = a.next()).done); e = !0) {
            var o = n.value,
                i = this,
                s = o.method,
                l = o.addCallbacks,
                p = o.legacyPreloadSetup,
                u = o.target || this,
                c = u[s].bind(u);

            if (u === d.default.prototype) {
              if (h) continue;
              i = null, c = u[s];
            }

            if (u[s] = this._wrapPromisePreload(i, c, l), p) u[p.method] = this._legacyPreloadGenerator(i, p, u[s]);
          }
        } catch (e) {
          t = !0, r = e;
        } finally {
          try {
            e || null == a.return || a.return();
          } finally {
            if (t) throw r;
          }
        }

        h = !0;
      }, d.default.prototype._wrapPromisePreload = function (e, l, p) {
        var t = function () {
          var e = this;

          this._incrementPreload();

          for (var t = null, r = null, n = arguments.length, a = new Array(n), o = 0; o < n; o++) a[o] = arguments[o];

          if (p) for (var i = a.length - 1; 0 <= i && !r && "function" == typeof a[i]; i--) r = t, t = a.pop();
          var s = Promise.resolve(l.apply(this, a));
          return t && s.then(t), r && s.catch(r), s.then(function () {
            return e._decrementPreload();
          }), s;
        };

        return e && (t = t.bind(e)), t;
      };

      function o() {
        return {};
      }

      d.default.prototype._legacyPreloadGenerator = function (e, t, n) {
        var a = t.createBaseObject || o,
            r = function () {
          var t = this;

          this._incrementPreload();

          var r = a.apply(this, arguments);
          return n.apply(this, arguments).then(function (e) {
            Object.assign(r, e), t._decrementPreload();
          }), r;
        };

        return e && (r = r.bind(e)), r;
      };
    }, {
      "./main": 32
    }],
    38: [function (e, t, r) {
      "use strict";

      Object.defineProperty(r, "__esModule", {
        value: !0
      }), r.default = void 0;

      var n,
          l = (n = e("./main")) && n.__esModule ? n : {
        default: n
      },
          p = function (e) {
        if (e && e.__esModule) return e;
        if (null === e || "object" !== s(e) && "function" != typeof e) return {
          default: e
        };
        var t = i();
        if (t && t.has(e)) return t.get(e);
        var r = {},
            n = Object.defineProperty && Object.getOwnPropertyDescriptor;

        for (var a in e) if (Object.prototype.hasOwnProperty.call(e, a)) {
          var o = n ? Object.getOwnPropertyDescriptor(e, a) : null;
          o && (o.get || o.set) ? Object.defineProperty(r, a, o) : r[a] = e[a];
        }

        r.default = e, t && t.set(e, r);
        return r;
      }(e("./constants"));

      function i() {
        if ("function" != typeof WeakMap) return null;
        var e = new WeakMap();
        return i = function () {
          return e;
        }, e;
      }

      function s(e) {
        return (s = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (e) {
          return typeof e;
        } : function (e) {
          return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e;
        })(e);
      }

      e("./p5.Graphics"), e("./p5.Renderer2D"), e("../webgl/p5.RendererGL");
      var u = "defaultCanvas0";
      l.default.prototype.createCanvas = function (e, t, r) {
        l.default._validateParameters("createCanvas", arguments);

        var n,
            a = r || p.P2D;

        if (a === p.WEBGL) {
          if (n = document.getElementById(u)) {
            n.parentNode.removeChild(n);
            var o = this._renderer;
            this._elements = this._elements.filter(function (e) {
              return e !== o;
            });
          }

          (n = document.createElement("canvas")).id = u, n.classList.add("p5Canvas");
        } else if (this._defaultGraphicsCreated) n = this.canvas;else {
          n = document.createElement("canvas");

          for (var i = 0; document.getElementById("defaultCanvas".concat(i));) i++;

          u = "defaultCanvas".concat(i), n.id = u, n.classList.add("p5Canvas");
        }

        if (this._setupDone || (n.dataset.hidden = !0, n.style.visibility = "hidden"), this._userNode) this._userNode.appendChild(n);else {
          if (0 === document.getElementsByTagName("main").length) {
            var s = document.createElement("main");
            document.body.appendChild(s);
          }

          document.getElementsByTagName("main")[0].appendChild(n);
        }
        return a === p.WEBGL ? (this._setProperty("_renderer", new l.default.RendererGL(n, this, !0)), this._elements.push(this._renderer)) : this._defaultGraphicsCreated || (this._setProperty("_renderer", new l.default.Renderer2D(n, this, !0)), this._defaultGraphicsCreated = !0, this._elements.push(this._renderer)), this._renderer.resize(e, t), this._renderer._applyDefaults(), this._renderer;
      }, l.default.prototype.resizeCanvas = function (e, t, r) {
        if (l.default._validateParameters("resizeCanvas", arguments), this._renderer) {
          var n = {};

          for (var a in this.drawingContext) {
            var o = this.drawingContext[a];
            "object" !== s(o) && "function" != typeof o && (n[a] = o);
          }

          for (var i in this._renderer.resize(e, t), this.width = e, this.height = t, n) try {
            this.drawingContext[i] = n[i];
          } catch (e) {}

          r || this.redraw();
        }
      }, l.default.prototype.noCanvas = function () {
        this.canvas && this.canvas.parentNode.removeChild(this.canvas);
      }, l.default.prototype.createGraphics = function (e, t, r) {
        return l.default._validateParameters("createGraphics", arguments), new l.default.Graphics(e, t, r, this);
      }, l.default.prototype.blendMode = function (e) {
        l.default._validateParameters("blendMode", arguments), e === p.NORMAL && (console.warn("NORMAL has been deprecated for use in blendMode. defaulting to BLEND instead."), e = p.BLEND), this._renderer.blendMode(e);
      };
      var a = l.default;
      r.default = a;
    }, {
      "../webgl/p5.RendererGL": 86,
      "./constants": 22,
      "./main": 32,
      "./p5.Graphics": 34,
      "./p5.Renderer2D": 36
    }],
    39: [function (e, t, r) {
      "use strict";

      function i(e) {
        return (i = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (e) {
          return typeof e;
        } : function (e) {
          return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e;
        })(e);
      }

      Object.defineProperty(r, "__esModule", {
        value: !0
      }), r.default = void 0;

      var u = n(e("../main")),
          s = function (e) {
        if (e && e.__esModule) return e;
        if (null === e || "object" !== i(e) && "function" != typeof e) return {
          default: e
        };
        var t = l();
        if (t && t.has(e)) return t.get(e);
        var r = {},
            n = Object.defineProperty && Object.getOwnPropertyDescriptor;

        for (var a in e) if (Object.prototype.hasOwnProperty.call(e, a)) {
          var o = n ? Object.getOwnPropertyDescriptor(e, a) : null;
          o && (o.get || o.set) ? Object.defineProperty(r, a, o) : r[a] = e[a];
        }

        r.default = e, t && t.set(e, r);
        return r;
      }(e("../constants")),
          c = n(e("../helpers"));

      function l() {
        if ("function" != typeof WeakMap) return null;
        var e = new WeakMap();
        return l = function () {
          return e;
        }, e;
      }

      function n(e) {
        return e && e.__esModule ? e : {
          default: e
        };
      }

      e("../friendly_errors/fes_core"), e("../friendly_errors/file_errors"), e("../friendly_errors/validate_params"), u.default.prototype._normalizeArcAngles = function (e, t, r, n, a) {
        var o;
        return e -= s.TWO_PI * Math.floor(e / s.TWO_PI), t -= s.TWO_PI * Math.floor(t / s.TWO_PI), o = Math.min(Math.abs(e - t), s.TWO_PI - Math.abs(e - t)), a && (e = e <= s.HALF_PI ? Math.atan(r / n * Math.tan(e)) : e > s.HALF_PI && e <= 3 * s.HALF_PI ? Math.atan(r / n * Math.tan(e)) + s.PI : Math.atan(r / n * Math.tan(e)) + s.TWO_PI, t = t <= s.HALF_PI ? Math.atan(r / n * Math.tan(t)) : t > s.HALF_PI && t <= 3 * s.HALF_PI ? Math.atan(r / n * Math.tan(t)) + s.PI : Math.atan(r / n * Math.tan(t)) + s.TWO_PI), t < e && (t += s.TWO_PI), {
          start: e,
          stop: t,
          correspondToSamePoint: o < 1e-5
        };
      }, u.default.prototype.arc = function (e, t, r, n, a, o, i, s) {
        if (u.default._validateParameters("arc", arguments), !this._renderer._doStroke && !this._renderer._doFill) return this;
        if (a === o) return this;
        a = this._toRadians(a), o = this._toRadians(o), r = Math.abs(r), n = Math.abs(n);

        var l = c.default.modeAdjust(e, t, r, n, this._renderer._ellipseMode),
            p = this._normalizeArcAngles(a, o, l.w, l.h, !0);

        return p.correspondToSamePoint ? this._renderer.ellipse([l.x, l.y, l.w, l.h, s]) : this._renderer.arc(l.x, l.y, l.w, l.h, p.start, p.stop, i, s), this;
      }, u.default.prototype.ellipse = function (e, t, r, n, a) {
        return u.default._validateParameters("ellipse", arguments), this._renderEllipse.apply(this, arguments);
      }, u.default.prototype.circle = function () {
        u.default._validateParameters("circle", arguments);

        var e = Array.prototype.slice.call(arguments, 0, 2);
        return e.push(arguments[2]), e.push(arguments[2]), this._renderEllipse.apply(this, e);
      }, u.default.prototype._renderEllipse = function (e, t, r, n, a) {
        if (!this._renderer._doStroke && !this._renderer._doFill) return this;
        r < 0 && (r = Math.abs(r)), void 0 === n ? n = r : n < 0 && (n = Math.abs(n));
        var o = c.default.modeAdjust(e, t, r, n, this._renderer._ellipseMode);
        return this._renderer.ellipse([o.x, o.y, o.w, o.h, a]), this;
      }, u.default.prototype.line = function () {
        for (var e = arguments.length, t = new Array(e), r = 0; r < e; r++) t[r] = arguments[r];

        var n;
        u.default._validateParameters("line", t), this._renderer._doStroke && (n = this._renderer).line.apply(n, t);
        return this;
      }, u.default.prototype.point = function () {
        for (var e = arguments.length, t = new Array(e), r = 0; r < e; r++) t[r] = arguments[r];

        var n;
        u.default._validateParameters("point", t), this._renderer._doStroke && (1 === t.length && t[0] instanceof u.default.Vector ? this._renderer.point.call(this._renderer, t[0].x, t[0].y, t[0].z) : (n = this._renderer).point.apply(n, t));
        return this;
      }, u.default.prototype.quad = function () {
        for (var e = arguments.length, t = new Array(e), r = 0; r < e; r++) t[r] = arguments[r];

        var n;
        u.default._validateParameters("quad", t), (this._renderer._doStroke || this._renderer._doFill) && (this._renderer.isP3D && 12 !== t.length ? this._renderer.quad.call(this._renderer, t[0], t[1], 0, t[2], t[3], 0, t[4], t[5], 0, t[6], t[7], 0) : (n = this._renderer).quad.apply(n, t));
        return this;
      }, u.default.prototype.rect = function () {
        return u.default._validateParameters("rect", arguments), this._renderRect.apply(this, arguments);
      }, u.default.prototype.square = function (e, t, r, n, a, o, i) {
        return u.default._validateParameters("square", arguments), this._renderRect.call(this, e, t, r, r, n, a, o, i);
      }, u.default.prototype._renderRect = function () {
        if (this._renderer._doStroke || this._renderer._doFill) {
          3 === arguments.length && (arguments[3] = arguments[2]);

          for (var e = c.default.modeAdjust(arguments[0], arguments[1], arguments[2], arguments[3], this._renderer._rectMode), t = [e.x, e.y, e.w, e.h], r = 4; r < arguments.length; r++) t[r] = arguments[r];

          this._renderer.rect(t);
        }

        return this;
      }, u.default.prototype.triangle = function () {
        for (var e = arguments.length, t = new Array(e), r = 0; r < e; r++) t[r] = arguments[r];

        return u.default._validateParameters("triangle", t), (this._renderer._doStroke || this._renderer._doFill) && this._renderer.triangle(t), this;
      };
      var a = u.default;
      r.default = a;
    }, {
      "../constants": 22,
      "../friendly_errors/fes_core": 24,
      "../friendly_errors/file_errors": 25,
      "../friendly_errors/validate_params": 27,
      "../helpers": 28,
      "../main": 32
    }],
    40: [function (e, t, r) {
      "use strict";

      function i(e) {
        return (i = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (e) {
          return typeof e;
        } : function (e) {
          return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e;
        })(e);
      }

      Object.defineProperty(r, "__esModule", {
        value: !0
      }), r.default = void 0;

      var n,
          a = (n = e("../main")) && n.__esModule ? n : {
        default: n
      },
          o = function (e) {
        if (e && e.__esModule) return e;
        if (null === e || "object" !== i(e) && "function" != typeof e) return {
          default: e
        };
        var t = s();
        if (t && t.has(e)) return t.get(e);
        var r = {},
            n = Object.defineProperty && Object.getOwnPropertyDescriptor;

        for (var a in e) if (Object.prototype.hasOwnProperty.call(e, a)) {
          var o = n ? Object.getOwnPropertyDescriptor(e, a) : null;
          o && (o.get || o.set) ? Object.defineProperty(r, a, o) : r[a] = e[a];
        }

        r.default = e, t && t.set(e, r);
        return r;
      }(e("../constants"));

      function s() {
        if ("function" != typeof WeakMap) return null;
        var e = new WeakMap();
        return s = function () {
          return e;
        }, e;
      }

      a.default.prototype.ellipseMode = function (e) {
        return a.default._validateParameters("ellipseMode", arguments), e !== o.CORNER && e !== o.CORNERS && e !== o.RADIUS && e !== o.CENTER || (this._renderer._ellipseMode = e), this;
      }, a.default.prototype.noSmooth = function () {
        return this.setAttributes("antialias", !1), this._renderer.isP3D || "imageSmoothingEnabled" in this.drawingContext && (this.drawingContext.imageSmoothingEnabled = !1), this;
      }, a.default.prototype.rectMode = function (e) {
        return a.default._validateParameters("rectMode", arguments), e !== o.CORNER && e !== o.CORNERS && e !== o.RADIUS && e !== o.CENTER || (this._renderer._rectMode = e), this;
      }, a.default.prototype.smooth = function () {
        return this.setAttributes("antialias", !0), this._renderer.isP3D || "imageSmoothingEnabled" in this.drawingContext && (this.drawingContext.imageSmoothingEnabled = !0), this;
      }, a.default.prototype.strokeCap = function (e) {
        return a.default._validateParameters("strokeCap", arguments), e !== o.ROUND && e !== o.SQUARE && e !== o.PROJECT || this._renderer.strokeCap(e), this;
      }, a.default.prototype.strokeJoin = function (e) {
        return a.default._validateParameters("strokeJoin", arguments), e !== o.ROUND && e !== o.BEVEL && e !== o.MITER || this._renderer.strokeJoin(e), this;
      }, a.default.prototype.strokeWeight = function (e) {
        return a.default._validateParameters("strokeWeight", arguments), this._renderer.strokeWeight(e), this;
      };
      var l = a.default;
      r.default = l;
    }, {
      "../constants": 22,
      "../main": 32
    }],
    41: [function (e, t, r) {
      "use strict";

      Object.defineProperty(r, "__esModule", {
        value: !0
      }), r.default = void 0;
      var n,
          s = (n = e("../main")) && n.__esModule ? n : {
        default: n
      };
      e("../friendly_errors/fes_core"), e("../friendly_errors/file_errors"), e("../friendly_errors/validate_params"), s.default.prototype.bezier = function () {
        for (var e, t = arguments.length, r = new Array(t), n = 0; n < t; n++) r[n] = arguments[n];

        return s.default._validateParameters("bezier", r), (this._renderer._doStroke || this._renderer._doFill) && (e = this._renderer).bezier.apply(e, r), this;
      }, s.default.prototype.bezierDetail = function (e) {
        return s.default._validateParameters("bezierDetail", arguments), this._bezierDetail = e, this;
      }, s.default.prototype.bezierPoint = function (e, t, r, n, a) {
        s.default._validateParameters("bezierPoint", arguments);

        var o = 1 - a;
        return Math.pow(o, 3) * e + 3 * Math.pow(o, 2) * a * t + 3 * o * Math.pow(a, 2) * r + Math.pow(a, 3) * n;
      }, s.default.prototype.bezierTangent = function (e, t, r, n, a) {
        s.default._validateParameters("bezierTangent", arguments);

        var o = 1 - a;
        return 3 * n * Math.pow(a, 2) - 3 * r * Math.pow(a, 2) + 6 * r * o * a - 6 * t * o * a + 3 * t * Math.pow(o, 2) - 3 * e * Math.pow(o, 2);
      }, s.default.prototype.curve = function () {
        for (var e = arguments.length, t = new Array(e), r = 0; r < e; r++) t[r] = arguments[r];

        var n;
        s.default._validateParameters("curve", t), this._renderer._doStroke && (n = this._renderer).curve.apply(n, t);
        return this;
      }, s.default.prototype.curveDetail = function (e) {
        return s.default._validateParameters("curveDetail", arguments), this._curveDetail = e < 3 ? 3 : e, this;
      }, s.default.prototype.curveTightness = function (e) {
        return s.default._validateParameters("curveTightness", arguments), this._renderer._curveTightness = e, this;
      }, s.default.prototype.curvePoint = function (e, t, r, n, a) {
        s.default._validateParameters("curvePoint", arguments);

        var o = a * a * a,
            i = a * a;
        return e * (-.5 * o + i - .5 * a) + t * (1.5 * o - 2.5 * i + 1) + r * (-1.5 * o + 2 * i + .5 * a) + n * (.5 * o - .5 * i);
      }, s.default.prototype.curveTangent = function (e, t, r, n, a) {
        s.default._validateParameters("curveTangent", arguments);

        var o = a * a;
        return e * (-3 * o / 2 + 2 * a - .5) + t * (9 * o / 2 - 5 * a) + r * (-9 * o / 2 + 4 * a + .5) + n * (3 * o / 2 - a);
      };
      var a = s.default;
      r.default = a;
    }, {
      "../friendly_errors/fes_core": 24,
      "../friendly_errors/file_errors": 25,
      "../friendly_errors/validate_params": 27,
      "../main": 32
    }],
    42: [function (e, t, r) {
      "use strict";

      function i(e) {
        return (i = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (e) {
          return typeof e;
        } : function (e) {
          return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e;
        })(e);
      }

      Object.defineProperty(r, "__esModule", {
        value: !0
      }), r.default = void 0;

      var n,
          s = (n = e("../main")) && n.__esModule ? n : {
        default: n
      },
          l = function (e) {
        if (e && e.__esModule) return e;
        if (null === e || "object" !== i(e) && "function" != typeof e) return {
          default: e
        };
        var t = p();
        if (t && t.has(e)) return t.get(e);
        var r = {},
            n = Object.defineProperty && Object.getOwnPropertyDescriptor;

        for (var a in e) if (Object.prototype.hasOwnProperty.call(e, a)) {
          var o = n ? Object.getOwnPropertyDescriptor(e, a) : null;
          o && (o.get || o.set) ? Object.defineProperty(r, a, o) : r[a] = e[a];
        }

        r.default = e, t && t.set(e, r);
        return r;
      }(e("../constants"));

      function p() {
        if ("function" != typeof WeakMap) return null;
        var e = new WeakMap();
        return p = function () {
          return e;
        }, e;
      }

      var a = null,
          u = [],
          c = [],
          d = !1,
          o = !1,
          h = !1,
          m = !1,
          f = !0;
      s.default.prototype.beginContour = function () {
        return c = [], m = !0, this;
      }, s.default.prototype.beginShape = function (e) {
        var t;
        (s.default._validateParameters("beginShape", arguments), this._renderer.isP3D) ? (t = this._renderer).beginShape.apply(t, arguments) : (a = e === l.POINTS || e === l.LINES || e === l.TRIANGLES || e === l.TRIANGLE_FAN || e === l.TRIANGLE_STRIP || e === l.QUADS || e === l.QUAD_STRIP ? e : null, u = [], c = []);
        return this;
      }, s.default.prototype.bezierVertex = function () {
        for (var e = arguments.length, t = new Array(e), r = 0; r < e; r++) t[r] = arguments[r];

        var n;
        if (s.default._validateParameters("bezierVertex", t), this._renderer.isP3D) (n = this._renderer).bezierVertex.apply(n, t);else if (0 === u.length) s.default._friendlyError("vertex() must be used once before calling bezierVertex()", "bezierVertex");else {
          d = !0;

          for (var a = [], o = 0; o < t.length; o++) a[o] = t[o];

          a.isVert = !1, m ? c.push(a) : u.push(a);
        }
        return this;
      }, s.default.prototype.curveVertex = function () {
        for (var e = arguments.length, t = new Array(e), r = 0; r < e; r++) t[r] = arguments[r];

        var n;
        (s.default._validateParameters("curveVertex", t), this._renderer.isP3D) ? (n = this._renderer).curveVertex.apply(n, t) : (o = !0, this.vertex(t[0], t[1]));
        return this;
      }, s.default.prototype.endContour = function () {
        var e = c[0].slice();
        e.isVert = c[0].isVert, e.moveTo = !1, c.push(e), f && (u.push(u[0]), f = !1);

        for (var t = 0; t < c.length; t++) u.push(c[t]);

        return this;
      }, s.default.prototype.endShape = function (e) {
        if (s.default._validateParameters("endShape", arguments), this._renderer.isP3D) this._renderer.endShape(e, o, d, h, m, a);else {
          if (0 === u.length) return this;
          if (!this._renderer._doStroke && !this._renderer._doFill) return this;
          var t = e === l.CLOSE;
          t && !m && u.push(u[0]), this._renderer.endShape(e, u, o, d, h, m, a), f = !(m = h = d = o = !1), t && u.pop();
        }
        return this;
      }, s.default.prototype.quadraticVertex = function () {
        for (var e = arguments.length, t = new Array(e), r = 0; r < e; r++) t[r] = arguments[r];

        if (s.default._validateParameters("quadraticVertex", t), this._renderer.isP3D) {
          var n;

          (n = this._renderer).quadraticVertex.apply(n, t);
        } else {
          if (this._contourInited) {
            var a = {};
            return a.x = t[0], a.y = t[1], a.x3 = t[2], a.y3 = t[3], a.type = l.QUADRATIC, this._contourVertices.push(a), this;
          }

          if (0 < u.length) {
            h = !0;

            for (var o = [], i = 0; i < t.length; i++) o[i] = t[i];

            o.isVert = !1, m ? c.push(o) : u.push(o);
          } else s.default._friendlyError("vertex() must be used once before calling quadraticVertex()", "quadraticVertex");
        }

        return this;
      }, s.default.prototype.vertex = function (e, t, r, n, a) {
        if (this._renderer.isP3D) {
          var o;

          (o = this._renderer).vertex.apply(o, arguments);
        } else {
          var i = [];
          i.isVert = !0, i[0] = e, i[1] = t, i[2] = 0, i[3] = 0, i[4] = 0, i[5] = this._renderer._getFill(), i[6] = this._renderer._getStroke(), r && (i.moveTo = r), m ? (0 === c.length && (i.moveTo = !0), c.push(i)) : u.push(i);
        }

        return this;
      };
      var y = s.default;
      r.default = y;
    }, {
      "../constants": 22,
      "../main": 32
    }],
    43: [function (e, t, r) {
      "use strict";

      function n(e) {
        return (n = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (e) {
          return typeof e;
        } : function (e) {
          return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e;
        })(e);
      }

      window.requestAnimationFrame = window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame || function (e, t) {
        window.setTimeout(e, 1e3 / 60);
      }, "undefined" == typeof Uint8ClampedArray || Uint8ClampedArray.prototype.slice || Object.defineProperty(Uint8ClampedArray.prototype, "slice", {
        value: Array.prototype.slice,
        writable: !0,
        configurable: !0,
        enumerable: !1
      }), function () {
        if (!Object.assign) {
          var s = Object.keys,
              e = Object.defineProperty,
              l = "function" == typeof Symbol && "symbol" === n(Symbol()),
              r = Object.prototype.propertyIsEnumerable,
              p = function (t) {
            return function (e) {
              return r.call(t, e);
            };
          };

          e(Object, "assign", {
            value: function (e, t) {
              if (null == e) throw new TypeError("target must be an object");
              var r,
                  n,
                  a,
                  o,
                  i = Object(e);

              for (r = 1; r < arguments.length; ++r) for (n = Object(arguments[r]), o = s(n), l && Object.getOwnPropertySymbols && o.push.apply(o, Object.getOwnPropertySymbols(n).filter(p(n))), a = 0; a < o.length; ++a) i[o[a]] = n[o[a]];

              return i;
            },
            configurable: !0,
            enumerable: !1,
            writable: !0
          });
        }
      }();
    }, {}],
    44: [function (e, t, r) {
      "use strict";

      Object.defineProperty(r, "__esModule", {
        value: !0
      }), r.default = void 0;
      var n,
          a = (n = e("./main")) && n.__esModule ? n : {
        default: n
      };
      a.default.prototype.noLoop = function () {
        this._loop = !1;
      }, a.default.prototype.loop = function () {
        this._loop || (this._loop = !0, this._setupDone && this._draw());
      }, a.default.prototype.isLooping = function () {
        return this._loop;
      }, a.default.prototype.push = function () {
        this._styles.push({
          props: {
            _colorMode: this._colorMode
          },
          renderer: this._renderer.push()
        });
      }, a.default.prototype.pop = function () {
        var e = this._styles.pop();

        e ? (this._renderer.pop(e.renderer), Object.assign(this, e.props)) : console.warn("pop() was called without matching push()");
      }, a.default.prototype.redraw = function (e) {
        if (!this._inUserDraw && this._setupDone) {
          var t = parseInt(e);
          (isNaN(t) || t < 1) && (t = 1);
          var r = this._isGlobal ? window : this,
              n = r.setup,
              a = r.draw;

          if ("function" == typeof a) {
            void 0 === n && r.scale(r._pixelDensity, r._pixelDensity);

            for (var o = function (e) {
              e.call(r);
            }, i = 0; i < t; i++) {
              r.resetMatrix(), r._renderer.isP3D && r._renderer._update(), r._setProperty("frameCount", r.frameCount + 1), r._registeredMethods.pre.forEach(o), this._inUserDraw = !0;

              try {
                a();
              } finally {
                this._inUserDraw = !1;
              }

              r._registeredMethods.post.forEach(o);
            }
          }
        }
      };
      var o = a.default;
      r.default = o;
    }, {
      "./main": 32
    }],
    45: [function (e, t, r) {
      "use strict";

      Object.defineProperty(r, "__esModule", {
        value: !0
      }), r.default = void 0;
      var n,
          o = (n = e("./main")) && n.__esModule ? n : {
        default: n
      };
      o.default.prototype.applyMatrix = function (e, t, r, n, a, o) {
        var i;
        return (i = this._renderer).applyMatrix.apply(i, arguments), this;
      }, o.default.prototype.resetMatrix = function () {
        return this._renderer.resetMatrix(), this;
      }, o.default.prototype.rotate = function (e, t) {
        return o.default._validateParameters("rotate", arguments), this._renderer.rotate(this._toRadians(e), t), this;
      }, o.default.prototype.rotateX = function (e) {
        return this._assert3d("rotateX"), o.default._validateParameters("rotateX", arguments), this._renderer.rotateX(this._toRadians(e)), this;
      }, o.default.prototype.rotateY = function (e) {
        return this._assert3d("rotateY"), o.default._validateParameters("rotateY", arguments), this._renderer.rotateY(this._toRadians(e)), this;
      }, o.default.prototype.rotateZ = function (e) {
        return this._assert3d("rotateZ"), o.default._validateParameters("rotateZ", arguments), this._renderer.rotateZ(this._toRadians(e)), this;
      }, o.default.prototype.scale = function (e, t, r) {
        if (o.default._validateParameters("scale", arguments), e instanceof o.default.Vector) {
          var n = e;
          e = n.x, t = n.y, r = n.z;
        } else if (e instanceof Array) {
          var a = e;
          e = a[0], t = a[1], r = a[2] || 1;
        }

        return isNaN(t) ? t = r = e : isNaN(r) && (r = 1), this._renderer.scale.call(this._renderer, e, t, r), this;
      }, o.default.prototype.shearX = function (e) {
        o.default._validateParameters("shearX", arguments);

        var t = this._toRadians(e);

        return this._renderer.applyMatrix(1, 0, Math.tan(t), 1, 0, 0), this;
      }, o.default.prototype.shearY = function (e) {
        o.default._validateParameters("shearY", arguments);

        var t = this._toRadians(e);

        return this._renderer.applyMatrix(1, Math.tan(t), 0, 1, 0, 0), this;
      }, o.default.prototype.translate = function (e, t, r) {
        return o.default._validateParameters("translate", arguments), this._renderer.isP3D ? this._renderer.translate(e, t, r) : this._renderer.translate(e, t), this;
      };
      var a = o.default;
      r.default = a;
    }, {
      "./main": 32
    }],
    46: [function (e, t, r) {
      "use strict";

      var n,
          a = (n = e("../core/main")) && n.__esModule ? n : {
        default: n
      };

      function o(e) {
        return function (e) {
          if (Array.isArray(e)) {
            for (var t = 0, r = new Array(e.length); t < e.length; t++) r[t] = e[t];

            return r;
          }
        }(e) || function (e) {
          if (Symbol.iterator in Object(e) || "[object Arguments]" === Object.prototype.toString.call(e)) return Array.from(e);
        }(e) || function () {
          throw new TypeError("Invalid attempt to spread non-iterable instance");
        }();
      }

      function i(e) {
        return (i = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (e) {
          return typeof e;
        } : function (e) {
          return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e;
        })(e);
      }

      a.default.prototype.storeItem = function (e, t) {
        "string" != typeof e && console.log("The argument that you passed to storeItem() - ".concat(e, " is not a string.")), e.endsWith("p5TypeID") && console.log("The argument that you passed to storeItem() - ".concat(e, " must not end with 'p5TypeID'.")), void 0 === t && console.log("You cannot store undefined variables using storeItem().");
        var r = i(t);

        switch (r) {
          case "number":
          case "boolean":
            t = t.toString();
            break;

          case "object":
            if (t instanceof a.default.Color) r = "p5.Color";else if (t instanceof a.default.Vector) {
              r = "p5.Vector", t = [t.x, t.y, t.z];
            }
            t = JSON.stringify(t);
        }

        localStorage.setItem(e, t);
        var n = "".concat(e, "p5TypeID");
        localStorage.setItem(n, r);
      }, a.default.prototype.getItem = function (e) {
        var t = localStorage.getItem(e),
            r = localStorage.getItem("".concat(e, "p5TypeID"));
        if (void 0 === r) console.log("Unable to determine type of item stored under ".concat(e, "in local storage. Did you save the item with something other than setItem()?"));else if (null !== t) switch (r) {
          case "number":
            t = parseInt(t);
            break;

          case "boolean":
            t = "true" === t;
            break;

          case "object":
            t = JSON.parse(t);
            break;

          case "p5.Color":
            t = JSON.parse(t), t = this.color.apply(this, o(t.levels));
            break;

          case "p5.Vector":
            t = JSON.parse(t), t = this.createVector.apply(this, o(t));
        }
        return t;
      }, a.default.prototype.clearStorage = function () {
        localStorage.clear();
      }, a.default.prototype.removeItem = function (e) {
        "string" != typeof e && console.log("The argument that you passed to removeItem() - ".concat(e, " is not a string.")), localStorage.removeItem(e), localStorage.removeItem("".concat(e, "p5TypeID"));
      };
    }, {
      "../core/main": 32
    }],
    47: [function (e, t, r) {
      "use strict";

      Object.defineProperty(r, "__esModule", {
        value: !0
      }), r.default = void 0;
      var n,
          a = (n = e("../core/main")) && n.__esModule ? n : {
        default: n
      };
      a.default.prototype.createStringDict = function (e, t) {
        return a.default._validateParameters("createStringDict", arguments), new a.default.StringDict(e, t);
      }, a.default.prototype.createNumberDict = function (e, t) {
        return a.default._validateParameters("createNumberDict", arguments), new a.default.NumberDict(e, t);
      }, a.default.TypedDict = function (e, t) {
        return e instanceof Object ? this.data = e : (this.data = {}, this.data[e] = t), this;
      }, a.default.TypedDict.prototype.size = function () {
        return Object.keys(this.data).length;
      }, a.default.TypedDict.prototype.hasKey = function (e) {
        return this.data.hasOwnProperty(e);
      }, a.default.TypedDict.prototype.get = function (e) {
        if (this.data.hasOwnProperty(e)) return this.data[e];
        console.log("".concat(e, " does not exist in this Dictionary"));
      }, a.default.TypedDict.prototype.set = function (e, t) {
        this._validate(t) ? this.data[e] = t : console.log("Those values dont work for this dictionary type.");
      }, a.default.TypedDict.prototype._addObj = function (e) {
        for (var t in e) this.set(t, e[t]);
      }, a.default.TypedDict.prototype.create = function (e, t) {
        e instanceof Object && void 0 === t ? this._addObj(e) : void 0 !== e ? this.set(e, t) : console.log("In order to create a new Dictionary entry you must pass an object or a key, value pair");
      }, a.default.TypedDict.prototype.clear = function () {
        this.data = {};
      }, a.default.TypedDict.prototype.remove = function (e) {
        if (!this.data.hasOwnProperty(e)) throw new Error("".concat(e, " does not exist in this Dictionary"));
        delete this.data[e];
      }, a.default.TypedDict.prototype.print = function () {
        for (var e in this.data) console.log("key:".concat(e, " value:").concat(this.data[e]));
      }, a.default.TypedDict.prototype.saveTable = function (e) {
        var t = "";

        for (var r in this.data) t += "".concat(r, ",").concat(this.data[r], "\n");

        var n = new Blob([t], {
          type: "text/csv"
        });
        a.default.prototype.downloadFile(n, e || "mycsv", "csv");
      }, a.default.TypedDict.prototype.saveJSON = function (e, t) {
        a.default.prototype.saveJSON(this.data, e, t);
      }, a.default.TypedDict.prototype._validate = function (e) {
        return !0;
      }, a.default.StringDict = function () {
        for (var e = arguments.length, t = new Array(e), r = 0; r < e; r++) t[r] = arguments[r];

        a.default.TypedDict.apply(this, t);
      }, a.default.StringDict.prototype = Object.create(a.default.TypedDict.prototype), a.default.StringDict.prototype._validate = function (e) {
        return "string" == typeof e;
      }, a.default.NumberDict = function () {
        for (var e = arguments.length, t = new Array(e), r = 0; r < e; r++) t[r] = arguments[r];

        a.default.TypedDict.apply(this, t);
      }, a.default.NumberDict.prototype = Object.create(a.default.TypedDict.prototype), a.default.NumberDict.prototype._validate = function (e) {
        return "number" == typeof e;
      }, a.default.NumberDict.prototype.add = function (e, t) {
        this.data.hasOwnProperty(e) ? this.data[e] += t : console.log("The key - ".concat(e, " does not exist in this dictionary."));
      }, a.default.NumberDict.prototype.sub = function (e, t) {
        this.add(e, -t);
      }, a.default.NumberDict.prototype.mult = function (e, t) {
        this.data.hasOwnProperty(e) ? this.data[e] *= t : console.log("The key - ".concat(e, " does not exist in this dictionary."));
      }, a.default.NumberDict.prototype.div = function (e, t) {
        this.data.hasOwnProperty(e) ? this.data[e] /= t : console.log("The key - ".concat(e, " does not exist in this dictionary."));
      }, a.default.NumberDict.prototype._valueTest = function (e) {
        if (0 === Object.keys(this.data).length) throw new Error("Unable to search for a minimum or maximum value on an empty NumberDict");
        if (1 === Object.keys(this.data).length) return this.data[Object.keys(this.data)[0]];
        var t = this.data[Object.keys(this.data)[0]];

        for (var r in this.data) this.data[r] * e < t * e && (t = this.data[r]);

        return t;
      }, a.default.NumberDict.prototype.minValue = function () {
        return this._valueTest(1);
      }, a.default.NumberDict.prototype.maxValue = function () {
        return this._valueTest(-1);
      }, a.default.NumberDict.prototype._keyTest = function (e) {
        if (0 === Object.keys(this.data).length) throw new Error("Unable to use minValue on an empty NumberDict");
        if (1 === Object.keys(this.data).length) return Object.keys(this.data)[0];

        for (var t = Object.keys(this.data)[0], r = 1; r < Object.keys(this.data).length; r++) Object.keys(this.data)[r] * e < t * e && (t = Object.keys(this.data)[r]);

        return t;
      }, a.default.NumberDict.prototype.minKey = function () {
        return this._keyTest(1);
      }, a.default.NumberDict.prototype.maxKey = function () {
        return this._keyTest(-1);
      };
      var o = a.default.TypedDict;
      r.default = o;
    }, {
      "../core/main": 32
    }],
    48: [function (e, t, r) {
      "use strict";

      Object.defineProperty(r, "__esModule", {
        value: !0
      }), r.default = void 0;
      var n,
          d = (n = e("../core/main")) && n.__esModule ? n : {
        default: n
      };

      function h(e) {
        return (h = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (e) {
          return typeof e;
        } : function (e) {
          return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e;
        })(e);
      }

      function f(e, t, r) {
        (t._userNode ? t._userNode : document.body).appendChild(e);
        var n = r ? new d.default.MediaElement(e, t) : new d.default.Element(e, t);
        return t._elements.push(n), n;
      }

      function a(e, t, r, n) {
        var a = document.createElement(t);
        "string" == typeof (r = r || "") && (r = [r]);
        var o = !0,
            i = !1,
            s = void 0;

        try {
          for (var l, p = r[Symbol.iterator](); !(o = (l = p.next()).done); o = !0) {
            var u = l.value,
                c = document.createElement("source");
            c.setAttribute("src", u), a.appendChild(c);
          }
        } catch (e) {
          i = !0, s = e;
        } finally {
          try {
            o || null == p.return || p.return();
          } finally {
            if (i) throw s;
          }
        }

        if ("function" == typeof n) {
          a.addEventListener("canplaythrough", function e() {
            n(), a.removeEventListener("canplaythrough", e);
          });
        }

        var d = f(a, e, !0);
        return d.loadedmetadata = !1, a.addEventListener("loadedmetadata", function () {
          d.width = a.videoWidth, d.height = a.videoHeight, 0 === d.elt.width && (d.elt.width = a.videoWidth), 0 === d.elt.height && (d.elt.height = a.videoHeight), d.presetPlaybackRate && (d.elt.playbackRate = d.presetPlaybackRate, delete d.presetPlaybackRate), d.loadedmetadata = !0;
        }), d;
      }

      d.default.prototype.select = function (e, t) {
        d.default._validateParameters("select", arguments);

        var r = this._getContainer(t).querySelector(e);

        return r ? this._wrapElement(r) : null;
      }, d.default.prototype.selectAll = function (e, t) {
        d.default._validateParameters("selectAll", arguments);

        var r = [],
            n = this._getContainer(t).querySelectorAll(e);

        if (n) for (var a = 0; a < n.length; a++) {
          var o = this._wrapElement(n[a]);

          r.push(o);
        }
        return r;
      }, d.default.prototype._getContainer = function (e) {
        var t = document;
        return "string" == typeof e ? t = document.querySelector(e) || document : e instanceof d.default.Element ? t = e.elt : e instanceof HTMLElement && (t = e), t;
      }, d.default.prototype._wrapElement = function (e) {
        var t = Array.prototype.slice.call(e.children);
        if ("INPUT" !== e.tagName || "checkbox" !== e.type) return "VIDEO" === e.tagName || "AUDIO" === e.tagName ? new d.default.MediaElement(e, this) : "SELECT" === e.tagName ? this.createSelect(new d.default.Element(e, this)) : 0 < t.length && t.every(function (e) {
          return "INPUT" === e.tagName || "LABEL" === e.tagName;
        }) ? this.createRadio(new d.default.Element(e, this)) : new d.default.Element(e, this);
        var r = new d.default.Element(e, this);
        return r.checked = function () {
          return 0 === arguments.length ? this.elt.checked : (this.elt.checked = !!arguments[0], this);
        }, r;
      }, d.default.prototype.removeElements = function (e) {
        d.default._validateParameters("removeElements", arguments);

        this._elements.filter(function (e) {
          return !(e.elt instanceof HTMLCanvasElement);
        }).map(function (e) {
          return e.remove();
        });
      }, d.default.Element.prototype.changed = function (e) {
        return d.default.Element._adjustListener("change", e, this), this;
      }, d.default.Element.prototype.input = function (e) {
        return d.default.Element._adjustListener("input", e, this), this;
      }, d.default.prototype.createDiv = function () {
        var e = 0 < arguments.length && void 0 !== arguments[0] ? arguments[0] : "",
            t = document.createElement("div");
        return t.innerHTML = e, f(t, this);
      }, d.default.prototype.createP = function () {
        var e = 0 < arguments.length && void 0 !== arguments[0] ? arguments[0] : "",
            t = document.createElement("p");
        return t.innerHTML = e, f(t, this);
      }, d.default.prototype.createSpan = function () {
        var e = 0 < arguments.length && void 0 !== arguments[0] ? arguments[0] : "",
            t = document.createElement("span");
        return t.innerHTML = e, f(t, this);
      }, d.default.prototype.createImg = function () {
        d.default._validateParameters("createImg", arguments);

        var t,
            r = document.createElement("img"),
            n = arguments;
        return 1 < n.length && "string" == typeof n[1] && (r.alt = n[1]), 2 < n.length && "string" == typeof n[2] && (r.crossOrigin = n[2]), r.src = n[0], t = f(r, this), r.addEventListener("load", function () {
          t.width = r.offsetWidth || r.width, t.height = r.offsetHeight || r.height;
          var e = n[n.length - 1];
          "function" == typeof e && e(t);
        }), t;
      }, d.default.prototype.createA = function (e, t, r) {
        d.default._validateParameters("createA", arguments);

        var n = document.createElement("a");
        return n.href = e, n.innerHTML = t, r && (n.target = r), f(n, this);
      }, d.default.prototype.createSlider = function (e, t, r, n) {
        d.default._validateParameters("createSlider", arguments);

        var a = document.createElement("input");
        return a.type = "range", a.min = e, a.max = t, 0 === n ? a.step = 1e-18 : n && (a.step = n), "number" == typeof r && (a.value = r), f(a, this);
      }, d.default.prototype.createButton = function (e, t) {
        d.default._validateParameters("createButton", arguments);

        var r = document.createElement("button");
        return r.innerHTML = e, t && (r.value = t), f(r, this);
      }, d.default.prototype.createCheckbox = function () {
        d.default._validateParameters("createCheckbox", arguments);

        var e = document.createElement("div"),
            t = document.createElement("input");
        t.type = "checkbox", e.appendChild(t);
        var r = f(e, this);

        if (r.checked = function () {
          var e = r.elt.getElementsByTagName("input")[0];

          if (e) {
            if (0 === arguments.length) return e.checked;
            e.checked = !!arguments[0];
          }

          return r;
        }, this.value = function (e) {
          return r.value = e, this;
        }, arguments[0]) {
          var n = Math.random().toString(36).slice(2),
              a = document.createElement("label");
          t.setAttribute("id", n), a.htmlFor = n, r.value(arguments[0]), a.appendChild(document.createTextNode(arguments[0])), e.appendChild(a);
        }

        return arguments[1] && (t.checked = !0), r;
      }, d.default.prototype.createSelect = function () {
        var e;

        d.default._validateParameters("createSelect", arguments);

        var t = arguments[0];
        if (t instanceof d.default.Element && t.elt instanceof HTMLSelectElement) e = t, this.elt = t.elt;else if (t instanceof HTMLSelectElement) e = f(t, this), this.elt = t;else {
          var r = document.createElement("select");
          t && "boolean" == typeof t && r.setAttribute("multiple", "true"), e = f(r, this), this.elt = r;
        }
        return e.option = function (e, t) {
          var r;

          if (void 0 !== e) {
            for (var n = 0; n < this.elt.length; n += 1) if (this.elt[n].innerHTML === e) {
              r = n;
              break;
            }

            if (void 0 !== r) !1 === t ? this.elt.remove(r) : this.elt[r].value = t;else {
              var a = document.createElement("option");
              a.innerHTML = e, a.value = void 0 === t ? e : t, this.elt.appendChild(a), this._pInst._elements.push(a);
            }
          }
        }, e.selected = function (e) {
          if (void 0 !== e) {
            for (var t = 0; t < this.elt.length; t += 1) this.elt[t].value.toString() === e.toString() && (this.elt.selectedIndex = t);

            return this;
          }

          if (this.elt.getAttribute("multiple")) {
            var r = [],
                n = !0,
                a = !1,
                o = void 0;

            try {
              for (var i, s = this.elt.selectedOptions[Symbol.iterator](); !(n = (i = s.next()).done); n = !0) {
                var l = i.value;
                r.push(l.value);
              }
            } catch (e) {
              a = !0, o = e;
            } finally {
              try {
                n || null == s.return || s.return();
              } finally {
                if (a) throw o;
              }
            }

            return r;
          }

          return this.elt.value;
        }, e.disable = function (e) {
          if ("string" == typeof e) for (var t = 0; t < this.elt.length; t++) this.elt[t].value.toString() === e && (this.elt[t].disabled = !0, this.elt[t].selected = !1);else this.elt.disabled = !0;
          return this;
        }, e;
      }, d.default.prototype.createRadio = function () {
        var e,
            t,
            r = arguments[0];
        r instanceof HTMLDivElement || r instanceof HTMLSpanElement ? (e = r, "string" == typeof arguments[1] && (t = arguments[1])) : ("string" == typeof r && (t = r), e = document.createElement("div"));
        var m = f(this.elt = e, this);
        m._name = t || "radioOption";

        function n(e) {
          return e instanceof HTMLInputElement && "radio" === e.type;
        }

        function u(e) {
          return e.nextElementSibling instanceof HTMLLabelElement;
        }

        return m._getOptionsArray = function () {
          return Array.from(this.elt.children).filter(n);
        }, m.option = function (e, t) {
          var r,
              n,
              a = !0,
              o = !1,
              i = void 0;

          try {
            for (var s, l = m._getOptionsArray()[Symbol.iterator](); !(a = (s = l.next()).done); a = !0) {
              var p = s.value;

              if (p.value === e) {
                r = p;
                break;
              }
            }
          } catch (e) {
            o = !0, i = e;
          } finally {
            try {
              a || null == l.return || l.return();
            } finally {
              if (o) throw i;
            }
          }

          return void 0 === r && ((r = document.createElement("input")).setAttribute("type", "radio"), r.setAttribute("value", e), this.elt.appendChild(r)), u(r) ? n = r.nextElementSibling : (n = document.createElement("label"), r.insertAdjacentElement("afterend", n)), n.innerHTML = void 0 === t ? e : t, r.setAttribute("name", m._name), r;
        }, m.remove = function (e) {
          var t = !0,
              r = !1,
              n = void 0;

          try {
            for (var a, o = m._getOptionsArray()[Symbol.iterator](); !(t = (a = o.next()).done); t = !0) {
              var i = a.value;
              if (i.value === e) return u(i) && i.nextElementSibling.remove(), void i.remove();
            }
          } catch (e) {
            r = !0, n = e;
          } finally {
            try {
              t || null == o.return || o.return();
            } finally {
              if (r) throw n;
            }
          }
        }, m.value = function () {
          var e = "",
              t = !0,
              r = !1,
              n = void 0;

          try {
            for (var a, o = m._getOptionsArray()[Symbol.iterator](); !(t = (a = o.next()).done); t = !0) {
              var i = a.value;

              if (i.checked) {
                e = i.value;
                break;
              }
            }
          } catch (e) {
            r = !0, n = e;
          } finally {
            try {
              t || null == o.return || o.return();
            } finally {
              if (r) throw n;
            }
          }

          return e;
        }, m.selected = function (e) {
          var t = null;

          if (void 0 === e) {
            var r = !0,
                n = !1,
                a = void 0;

            try {
              for (var o, i = m._getOptionsArray()[Symbol.iterator](); !(r = (o = i.next()).done); r = !0) {
                var s = o.value;

                if (s.checked) {
                  t = s;
                  break;
                }
              }
            } catch (e) {
              n = !0, a = e;
            } finally {
              try {
                r || null == i.return || i.return();
              } finally {
                if (n) throw a;
              }
            }
          } else {
            var l = !0,
                p = !1,
                u = void 0;

            try {
              for (var c, d = m._getOptionsArray()[Symbol.iterator](); !(l = (c = d.next()).done); l = !0) {
                var h = c.value;
                h.value === e && (h.setAttribute("checked", !0), t = h);
              }
            } catch (e) {
              p = !0, u = e;
            } finally {
              try {
                l || null == d.return || d.return();
              } finally {
                if (p) throw u;
              }
            }
          }

          return t;
        }, m.disable = function () {
          var e = !(0 < arguments.length && void 0 !== arguments[0]) || arguments[0],
              t = !0,
              r = !1,
              n = void 0;

          try {
            for (var a, o = m._getOptionsArray()[Symbol.iterator](); !(t = (a = o.next()).done); t = !0) {
              a.value.setAttribute("disabled", e);
            }
          } catch (e) {
            r = !0, n = e;
          } finally {
            try {
              t || null == o.return || o.return();
            } finally {
              if (r) throw n;
            }
          }
        }, m;
      }, d.default.prototype.createColorPicker = function (e) {
        d.default._validateParameters("createColorPicker", arguments);

        var t,
            r = document.createElement("input");
        return r.type = "color", e ? e instanceof d.default.Color ? r.value = e.toString("#rrggbb") : (d.default.prototype._colorMode = "rgb", d.default.prototype._colorMaxes = {
          rgb: [255, 255, 255, 255],
          hsb: [360, 100, 100, 1],
          hsl: [360, 100, 100, 1]
        }, r.value = d.default.prototype.color(e).toString("#rrggbb")) : r.value = "#000000", (t = f(r, this)).color = function () {
          return e && (e.mode && (d.default.prototype._colorMode = e.mode), e.maxes && (d.default.prototype._colorMaxes = e.maxes)), d.default.prototype.color(this.elt.value);
        }, t;
      }, d.default.prototype.createInput = function () {
        var e = 0 < arguments.length && void 0 !== arguments[0] ? arguments[0] : "",
            t = 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : "text";

        d.default._validateParameters("createInput", arguments);

        var r = document.createElement("input");
        return r.setAttribute("value", e), r.setAttribute("type", t), f(r, this);
      }, d.default.prototype.createFileInput = function (s) {
        var e = 1 < arguments.length && void 0 !== arguments[1] && arguments[1];

        d.default._validateParameters("createFileInput", arguments);

        if (window.File && window.FileReader && window.FileList && window.Blob) {
          var t = document.createElement("input");
          return t.setAttribute("type", "file"), e && t.setAttribute("multiple", !0), t.addEventListener("change", function (e) {
            var t = !0,
                r = !1,
                n = void 0;

            try {
              for (var a, o = e.target.files[Symbol.iterator](); !(t = (a = o.next()).done); t = !0) {
                var i = a.value;

                d.default.File._load(i, s);
              }
            } catch (e) {
              r = !0, n = e;
            } finally {
              try {
                t || null == o.return || o.return();
              } finally {
                if (r) throw n;
              }
            }
          }, !1), f(t, this);
        }

        console.log("The File APIs are not fully supported in this browser. Cannot create element.");
      }, d.default.prototype.createVideo = function (e, t) {
        return d.default._validateParameters("createVideo", arguments), a(this, "video", e, t);
      }, d.default.prototype.createAudio = function (e, t) {
        return d.default._validateParameters("createAudio", arguments), a(this, "audio", e, t);
      }, d.default.prototype.VIDEO = "video", d.default.prototype.AUDIO = "audio", void 0 === navigator.mediaDevices && (navigator.mediaDevices = {}), void 0 === navigator.mediaDevices.getUserMedia && (navigator.mediaDevices.getUserMedia = function (r) {
        var n = navigator.webkitGetUserMedia || navigator.mozGetUserMedia;
        return n ? new Promise(function (e, t) {
          n.call(navigator, r, e, t);
        }) : Promise.reject(new Error("getUserMedia is not implemented in this browser"));
      }), d.default.prototype.createCapture = function () {
        if (d.default._validateParameters("createCapture", arguments), !navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) throw new DOMException("getUserMedia not supported in this browser");
        var e,
            t,
            r = !0,
            n = !0,
            a = !0,
            o = !1,
            i = void 0;

        try {
          for (var s, l = arguments[Symbol.iterator](); !(a = (s = l.next()).done); a = !0) {
            var p = s.value;
            p === d.default.prototype.VIDEO ? n = !1 : p === d.default.prototype.AUDIO ? r = !1 : "object" === h(p) ? e = p : "function" == typeof p && (t = p);
          }
        } catch (e) {
          o = !0, i = e;
        } finally {
          try {
            a || null == l.return || l.return();
          } finally {
            if (o) throw i;
          }
        }

        e = e || {
          video: r,
          audio: n
        };
        var u = document.createElement("video");
        u.setAttribute("playsinline", ""), navigator.mediaDevices.getUserMedia(e).then(function (t) {
          try {
            "srcObject" in u ? u.srcObject = t : u.src = window.URL.createObjectURL(t);
          } catch (e) {
            u.src = t;
          }
        }, console.log);
        var c = f(u, this, !0);
        return c.loadedmetadata = !1, u.addEventListener("loadedmetadata", function () {
          u.play(), u.width ? (c.width = u.width, c.height = u.height) : (c.width = c.elt.width = u.videoWidth, c.height = c.elt.height = u.videoHeight), c.loadedmetadata = !0, t && t(u.srcObject);
        }), c;
      }, d.default.prototype.createElement = function (e, t) {
        d.default._validateParameters("createElement", arguments);

        var r = document.createElement(e);
        return void 0 !== t && (r.innerHTML = t), f(r, this);
      }, d.default.Element.prototype.addClass = function (e) {
        return this.elt.className ? this.hasClass(e) || (this.elt.className = this.elt.className + " " + e) : this.elt.className = e, this;
      }, d.default.Element.prototype.removeClass = function (e) {
        return this.elt.classList.remove(e), this;
      }, d.default.Element.prototype.hasClass = function (e) {
        return this.elt.classList.contains(e);
      }, d.default.Element.prototype.toggleClass = function (e) {
        return this.elt.classList.contains(e) ? this.elt.classList.remove(e) : this.elt.classList.add(e), this;
      }, d.default.Element.prototype.child = function (e) {
        return void 0 === e ? this.elt.childNodes : ("string" == typeof e ? ("#" === e[0] && (e = e.substring(1)), e = document.getElementById(e)) : e instanceof d.default.Element && (e = e.elt), e instanceof HTMLElement && this.elt.appendChild(e), this);
      }, d.default.Element.prototype.center = function (e) {
        var t = this.elt.style.display,
            r = "none" === this.elt.style.display,
            n = "none" === this.parent().style.display,
            a = {
          x: this.elt.offsetLeft,
          y: this.elt.offsetTop
        };
        r && this.show(), n && this.parent().show(), this.elt.style.display = "block", this.position(0, 0);
        var o = Math.abs(this.parent().offsetWidth - this.elt.offsetWidth),
            i = Math.abs(this.parent().offsetHeight - this.elt.offsetHeight);
        return "both" === e || void 0 === e ? this.position(o / 2 + this.parent().offsetLeft, i / 2 + this.parent().offsetTop) : "horizontal" === e ? this.position(o / 2 + this.parent().offsetLeft, a.y) : "vertical" === e && this.position(a.x, i / 2 + this.parent().offsetTop), this.style("display", t), r && this.hide(), n && this.parent().hide(), this;
      }, d.default.Element.prototype.html = function () {
        return 0 === arguments.length ? this.elt.innerHTML : (arguments[1] ? this.elt.insertAdjacentHTML("beforeend", arguments[0]) : this.elt.innerHTML = arguments[0], this);
      }, d.default.Element.prototype.position = function () {
        if (0 === arguments.length) return {
          x: this.elt.offsetLeft,
          y: this.elt.offsetTop
        };
        var e = "absolute";
        return "static" !== arguments[2] && "fixed" !== arguments[2] && "relative" !== arguments[2] && "sticky" !== arguments[2] && "initial" !== arguments[2] && "inherit" !== arguments[2] || (e = arguments[2]), this.elt.style.position = e, this.elt.style.left = arguments[0] + "px", this.elt.style.top = arguments[1] + "px", this.x = arguments[0], this.y = arguments[1], this;
      }, d.default.Element.prototype._translate = function () {
        this.elt.style.position = "absolute";
        var e = "";
        return this.elt.style.transform && (e = (e = this.elt.style.transform.replace(/translate3d\(.*\)/g, "")).replace(/translate[X-Z]?\(.*\)/g, "")), 2 === arguments.length ? this.elt.style.transform = "translate(" + arguments[0] + "px, " + arguments[1] + "px)" : 2 < arguments.length && (this.elt.style.transform = "translate3d(" + arguments[0] + "px," + arguments[1] + "px," + arguments[2] + "px)", this.elt.parentElement.style.perspective = 3 === arguments.length ? "1000px" : arguments[3] + "px"), this.elt.style.transform += e, this;
      }, d.default.Element.prototype._rotate = function () {
        var e = "";
        return this.elt.style.transform && (e = (e = this.elt.style.transform.replace(/rotate3d\(.*\)/g, "")).replace(/rotate[X-Z]?\(.*\)/g, "")), 1 === arguments.length ? this.elt.style.transform = "rotate(" + arguments[0] + "deg)" : 2 === arguments.length ? this.elt.style.transform = "rotate(" + arguments[0] + "deg, " + arguments[1] + "deg)" : 3 === arguments.length && (this.elt.style.transform = "rotateX(" + arguments[0] + "deg)", this.elt.style.transform += "rotateY(" + arguments[1] + "deg)", this.elt.style.transform += "rotateZ(" + arguments[2] + "deg)"), this.elt.style.transform += e, this;
      }, d.default.Element.prototype.style = function (e, t) {
        if (t instanceof d.default.Color && (t = "rgba(" + t.levels[0] + "," + t.levels[1] + "," + t.levels[2] + "," + t.levels[3] / 255 + ")"), void 0 === t) {
          if (-1 === e.indexOf(":")) return window.getComputedStyle(this.elt).getPropertyValue(e);

          for (var r = e.split(";"), n = 0; n < r.length; n++) {
            var a = r[n].split(":");
            a[0] && a[1] && (this.elt.style[a[0].trim()] = a[1].trim());
          }
        } else if (this.elt.style[e] = t, "width" === e || "height" === e || "left" === e || "top" === e) {
          var o = window.getComputedStyle(this.elt).getPropertyValue(e).replace(/\D+/g, "");
          this[e] = parseInt(o, 10);
        }

        return this;
      }, d.default.Element.prototype.attribute = function (e, t) {
        if (null == this.elt.firstChild || "checkbox" !== this.elt.firstChild.type && "radio" !== this.elt.firstChild.type) return void 0 === t ? this.elt.getAttribute(e) : (this.elt.setAttribute(e, t), this);
        if (void 0 === t) return this.elt.firstChild.getAttribute(e);

        for (var r = 0; r < this.elt.childNodes.length; r++) this.elt.childNodes[r].setAttribute(e, t);
      }, d.default.Element.prototype.removeAttribute = function (e) {
        if (null != this.elt.firstChild && ("checkbox" === this.elt.firstChild.type || "radio" === this.elt.firstChild.type)) for (var t = 0; t < this.elt.childNodes.length; t++) this.elt.childNodes[t].removeAttribute(e);
        return this.elt.removeAttribute(e), this;
      }, d.default.Element.prototype.value = function () {
        return 0 < arguments.length ? (this.elt.value = arguments[0], this) : "range" === this.elt.type ? parseFloat(this.elt.value) : this.elt.value;
      }, d.default.Element.prototype.show = function () {
        return this.elt.style.display = "block", this;
      }, d.default.Element.prototype.hide = function () {
        return this.elt.style.display = "none", this;
      }, d.default.Element.prototype.size = function (e, t) {
        if (0 === arguments.length) return {
          width: this.elt.offsetWidth,
          height: this.elt.offsetHeight
        };
        var r = e,
            n = t,
            a = d.default.prototype.AUTO;

        if (r !== a || n !== a) {
          if (r === a ? r = t * this.width / this.height : n === a && (n = e * this.height / this.width), this.elt instanceof HTMLCanvasElement) {
            var o,
                i = {},
                s = this.elt.getContext("2d");

            for (o in s) i[o] = s[o];

            for (o in this.elt.setAttribute("width", r * this._pInst._pixelDensity), this.elt.setAttribute("height", n * this._pInst._pixelDensity), this.elt.style.width = r + "px", this.elt.style.height = n + "px", this._pInst.scale(this._pInst._pixelDensity, this._pInst._pixelDensity), i) this.elt.getContext("2d")[o] = i[o];
          } else this.elt.style.width = r + "px", this.elt.style.height = n + "px", this.elt.width = r, this.elt.height = n;

          this.width = this.elt.offsetWidth, this.height = this.elt.offsetHeight, this._pInst && this._pInst._curElement && this._pInst._curElement.elt === this.elt && (this._pInst._setProperty("width", this.elt.offsetWidth), this._pInst._setProperty("height", this.elt.offsetHeight));
        }

        return this;
      }, d.default.Element.prototype.remove = function () {
        this instanceof d.default.MediaElement && this.elt.srcObject.getTracks().forEach(function (e) {
          e.stop();
        });

        var e = this._pInst._elements.indexOf(this);

        for (var t in -1 !== e && this._pInst._elements.splice(e, 1), this._events) this.elt.removeEventListener(t, this._events[t]);

        this.elt && this.elt.parentNode && this.elt.parentNode.removeChild(this.elt);
      }, d.default.Element.prototype.drop = function (a, o) {
        if (window.File && window.FileReader && window.FileList && window.Blob) {
          if (!this._dragDisabled) {
            this._dragDisabled = !0;

            var e = function (e) {
              e.preventDefault();
            };

            this.elt.addEventListener("dragover", e), this.elt.addEventListener("dragleave", e);
          }

          d.default.Element._attachListener("drop", function (e) {
            e.preventDefault(), "function" == typeof o && o.call(this, e);

            for (var t = e.dataTransfer.files, r = 0; r < t.length; r++) {
              var n = t[r];

              d.default.File._load(n, a);
            }
          }, this);
        } else console.log("The File APIs are not fully supported in this browser.");

        return this;
      }, d.default.MediaElement = function (n, e) {
        d.default.Element.call(this, n, e);
        var a = this;
        this.elt.crossOrigin = "anonymous", this._prevTime = 0, this._cueIDCounter = 0, this._cues = [], (this._pixelsState = this)._pixelDensity = 1, this._modified = !1, Object.defineProperty(a, "src", {
          get: function () {
            var e = a.elt.children[0].src,
                t = a.elt.src === window.location.href ? "" : a.elt.src;
            return e === window.location.href ? t : e;
          },
          set: function (e) {
            for (var t = 0; t < a.elt.children.length; t++) a.elt.removeChild(a.elt.children[t]);

            var r = document.createElement("source");
            r.src = e, n.appendChild(r), a.elt.src = e, a.modified = !0;
          }
        }), a._onended = function () {}, a.elt.onended = function () {
          a._onended(a);
        };
      }, d.default.MediaElement.prototype = Object.create(d.default.Element.prototype), d.default.MediaElement.prototype.play = function () {
        var e;
        return this.elt.currentTime === this.elt.duration && (this.elt.currentTime = 0), (e = (1 < this.elt.readyState || this.elt.load(), this.elt.play())) && e.catch && e.catch(function (e) {
          "NotAllowedError" === e.name ? d.default._friendlyAutoplayError(this.src) : console.error("Media play method encountered an unexpected error", e);
        }), this;
      }, d.default.MediaElement.prototype.stop = function () {
        return this.elt.pause(), this.elt.currentTime = 0, this;
      }, d.default.MediaElement.prototype.pause = function () {
        return this.elt.pause(), this;
      }, d.default.MediaElement.prototype.loop = function () {
        return this.elt.setAttribute("loop", !0), this.play(), this;
      }, d.default.MediaElement.prototype.noLoop = function () {
        return this.elt.removeAttribute("loop"), this;
      }, d.default.MediaElement.prototype._setupAutoplayFailDetection = function () {
        var e = this,
            t = setTimeout(function () {
          return d.default._friendlyAutoplayError(e.src);
        }, 500);
        this.elt.addEventListener("play", function () {
          return clearTimeout(t);
        }, {
          passive: !0,
          once: !0
        });
      }, d.default.MediaElement.prototype.autoplay = function (e) {
        var t = this,
            r = this.elt.getAttribute("autoplay");

        if (this.elt.setAttribute("autoplay", e), e && !r) {
          var n = function () {
            return t._setupAutoplayFailDetection();
          };

          4 === this.elt.readyState ? n() : this.elt.addEventListener("canplay", n, {
            passive: !0,
            once: !0
          });
        }

        return this;
      }, d.default.MediaElement.prototype.volume = function (e) {
        if (void 0 === e) return this.elt.volume;
        this.elt.volume = e;
      }, d.default.MediaElement.prototype.speed = function (e) {
        if (void 0 === e) return this.presetPlaybackRate || this.elt.playbackRate;
        this.loadedmetadata ? this.elt.playbackRate = e : this.presetPlaybackRate = e;
      }, d.default.MediaElement.prototype.time = function (e) {
        return void 0 === e ? this.elt.currentTime : (this.elt.currentTime = e, this);
      }, d.default.MediaElement.prototype.duration = function () {
        return this.elt.duration;
      }, d.default.MediaElement.prototype.pixels = [], d.default.MediaElement.prototype._ensureCanvas = function () {
        this.canvas || (this.canvas = document.createElement("canvas"), this.drawingContext = this.canvas.getContext("2d"), this.setModified(!0)), this.loadedmetadata && (this.canvas.width !== this.elt.width && (this.canvas.width = this.elt.width, this.canvas.height = this.elt.height, this.width = this.canvas.width, this.height = this.canvas.height), this.drawingContext.drawImage(this.elt, 0, 0, this.canvas.width, this.canvas.height), this.setModified(!0));
      }, d.default.MediaElement.prototype.loadPixels = function () {
        return this._ensureCanvas(), d.default.Renderer2D.prototype.loadPixels.apply(this, arguments);
      }, d.default.MediaElement.prototype.updatePixels = function (e, t, r, n) {
        return this.loadedmetadata && (this._ensureCanvas(), d.default.Renderer2D.prototype.updatePixels.call(this, e, t, r, n)), this.setModified(!0), this;
      }, d.default.MediaElement.prototype.get = function () {
        return this._ensureCanvas(), d.default.Renderer2D.prototype.get.apply(this, arguments);
      }, d.default.MediaElement.prototype._getPixel = function () {
        return this.loadPixels(), d.default.Renderer2D.prototype._getPixel.apply(this, arguments);
      }, d.default.MediaElement.prototype.set = function (e, t, r) {
        this.loadedmetadata && (this._ensureCanvas(), d.default.Renderer2D.prototype.set.call(this, e, t, r), this.setModified(!0));
      }, d.default.MediaElement.prototype.copy = function () {
        this._ensureCanvas(), d.default.prototype.copy.apply(this, arguments);
      }, d.default.MediaElement.prototype.mask = function () {
        this.loadPixels(), this.setModified(!0), d.default.Image.prototype.mask.apply(this, arguments);
      }, d.default.MediaElement.prototype.isModified = function () {
        return this._modified;
      }, d.default.MediaElement.prototype.setModified = function (e) {
        this._modified = e;
      }, d.default.MediaElement.prototype.onended = function (e) {
        return this._onended = e, this;
      }, d.default.MediaElement.prototype.connect = function (e) {
        var t, r;
        if ("function" == typeof d.default.prototype.getAudioContext) t = d.default.prototype.getAudioContext(), r = d.default.soundOut.input;else try {
          r = (t = e.context).destination;
        } catch (e) {
          throw "connect() is meant to be used with Web Audio API or p5.sound.js";
        }
        this.audioSourceNode || (this.audioSourceNode = t.createMediaElementSource(this.elt), this.audioSourceNode.connect(r)), e ? e.input ? this.audioSourceNode.connect(e.input) : this.audioSourceNode.connect(e) : this.audioSourceNode.connect(r);
      }, d.default.MediaElement.prototype.disconnect = function () {
        if (!this.audioSourceNode) throw "nothing to disconnect";
        this.audioSourceNode.disconnect();
      }, d.default.MediaElement.prototype.showControls = function () {
        this.elt.style["text-align"] = "inherit", this.elt.controls = !0;
      }, d.default.MediaElement.prototype.hideControls = function () {
        this.elt.controls = !1;
      };

      function o(e, t, r, n) {
        this.callback = e, this.time = t, this.id = r, this.val = n;
      }

      d.default.MediaElement.prototype.addCue = function (e, t, r) {
        var n = this._cueIDCounter++,
            a = new o(t, e, n, r);
        return this._cues.push(a), this.elt.ontimeupdate || (this.elt.ontimeupdate = this._onTimeUpdate.bind(this)), n;
      }, d.default.MediaElement.prototype.removeCue = function (e) {
        for (var t = 0; t < this._cues.length; t++) this._cues[t].id === e && (console.log(e), this._cues.splice(t, 1));

        0 === this._cues.length && (this.elt.ontimeupdate = null);
      }, d.default.MediaElement.prototype.clearCues = function () {
        this._cues = [], this.elt.ontimeupdate = null;
      }, d.default.MediaElement.prototype._onTimeUpdate = function () {
        for (var e = this.time(), t = 0; t < this._cues.length; t++) {
          var r = this._cues[t].time,
              n = this._cues[t].val;
          this._prevTime < r && r <= e && this._cues[t].callback(n);
        }

        this._prevTime = e;
      }, d.default.File = function (e, t) {
        this.file = e, this._pInst = t;
        var r = e.type.split("/");
        this.type = r[0], this.subtype = r[1], this.name = e.name, this.size = e.size, this.data = void 0;
      }, d.default.File._createLoader = function (n, a) {
        var e = new FileReader();
        return e.onload = function (e) {
          var t = new d.default.File(n);
          if ("application/json" === t.file.type) t.data = JSON.parse(e.target.result);else if ("text/xml" === t.file.type) {
            var r = new DOMParser().parseFromString(e.target.result, "text/xml");
            t.data = new d.default.XML(r.documentElement);
          } else t.data = e.target.result;
          a(t);
        }, e;
      }, d.default.File._load = function (e, t) {
        if (/^text\//.test(e.type) || "application/json" === e.type) d.default.File._createLoader(e, t).readAsText(e);else if (/^(video|audio)\//.test(e.type)) {
          var r = new d.default.File(e);
          r.data = URL.createObjectURL(e), t(r);
        } else d.default.File._createLoader(e, t).readAsDataURL(e);
      };
      var i = d.default;
      r.default = i;
    }, {
      "../core/main": 32
    }],
    49: [function (e, t, r) {
      "use strict";

      function i(e) {
        return (i = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (e) {
          return typeof e;
        } : function (e) {
          return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e;
        })(e);
      }

      Object.defineProperty(r, "__esModule", {
        value: !0
      }), r.default = void 0;

      var n,
          a = (n = e("../core/main")) && n.__esModule ? n : {
        default: n
      },
          o = function (e) {
        if (e && e.__esModule) return e;
        if (null === e || "object" !== i(e) && "function" != typeof e) return {
          default: e
        };
        var t = s();
        if (t && t.has(e)) return t.get(e);
        var r = {},
            n = Object.defineProperty && Object.getOwnPropertyDescriptor;

        for (var a in e) if (Object.prototype.hasOwnProperty.call(e, a)) {
          var o = n ? Object.getOwnPropertyDescriptor(e, a) : null;
          o && (o.get || o.set) ? Object.defineProperty(r, a, o) : r[a] = e[a];
        }

        r.default = e, t && t.set(e, r);
        return r;
      }(e("../core/constants"));

      function s() {
        if ("function" != typeof WeakMap) return null;
        var e = new WeakMap();
        return s = function () {
          return e;
        }, e;
      }

      a.default.prototype.deviceOrientation = 1 < window.innerWidth / window.innerHeight ? "landscape" : "portrait", a.default.prototype.accelerationX = 0, a.default.prototype.accelerationY = 0, a.default.prototype.accelerationZ = 0, a.default.prototype.pAccelerationX = 0, a.default.prototype.pAccelerationY = 0, a.default.prototype.pAccelerationZ = 0, a.default.prototype._updatePAccelerations = function () {
        this._setProperty("pAccelerationX", this.accelerationX), this._setProperty("pAccelerationY", this.accelerationY), this._setProperty("pAccelerationZ", this.accelerationZ);
      }, a.default.prototype.rotationX = 0, a.default.prototype.rotationY = 0, a.default.prototype.rotationZ = 0, a.default.prototype.pRotationX = 0, a.default.prototype.pRotationY = 0;
      var c = a.default.prototype.pRotationZ = 0,
          d = 0,
          h = 0,
          m = "clockwise",
          f = "clockwise",
          y = "clockwise";
      a.default.prototype.pRotateDirectionX = void 0, a.default.prototype.pRotateDirectionY = void 0, a.default.prototype.pRotateDirectionZ = void 0, a.default.prototype._updatePRotations = function () {
        this._setProperty("pRotationX", this.rotationX), this._setProperty("pRotationY", this.rotationY), this._setProperty("pRotationZ", this.rotationZ);
      }, a.default.prototype.turnAxis = void 0;
      var g = .5,
          v = 30;
      a.default.prototype.setMoveThreshold = function (e) {
        a.default._validateParameters("setMoveThreshold", arguments), g = e;
      }, a.default.prototype.setShakeThreshold = function (e) {
        a.default._validateParameters("setShakeThreshold", arguments), v = e;
      }, a.default.prototype._ondeviceorientation = function (e) {
        this._updatePRotations(), this._angleMode === o.radians && (e.beta = e.beta * (_PI / 180), e.gamma = e.gamma * (_PI / 180), e.alpha = e.alpha * (_PI / 180)), this._setProperty("rotationX", e.beta), this._setProperty("rotationY", e.gamma), this._setProperty("rotationZ", e.alpha), this._handleMotion();
      }, a.default.prototype._ondevicemotion = function (e) {
        this._updatePAccelerations(), this._setProperty("accelerationX", 2 * e.acceleration.x), this._setProperty("accelerationY", 2 * e.acceleration.y), this._setProperty("accelerationZ", 2 * e.acceleration.z), this._handleMotion();
      }, a.default.prototype._handleMotion = function () {
        90 === window.orientation || -90 === window.orientation ? this._setProperty("deviceOrientation", "landscape") : 0 === window.orientation ? this._setProperty("deviceOrientation", "portrait") : void 0 === window.orientation && this._setProperty("deviceOrientation", "undefined");
        var e = this.deviceMoved || window.deviceMoved;
        "function" == typeof e && (Math.abs(this.accelerationX - this.pAccelerationX) > g || Math.abs(this.accelerationY - this.pAccelerationY) > g || Math.abs(this.accelerationZ - this.pAccelerationZ) > g) && e();
        var t = this.deviceTurned || window.deviceTurned;

        if ("function" == typeof t) {
          var r = this.rotationX + 180,
              n = this.pRotationX + 180,
              a = c + 180;
          0 < r - n && r - n < 270 || r - n < -270 ? m = "clockwise" : (r - n < 0 || 270 < r - n) && (m = "counter-clockwise"), m !== this.pRotateDirectionX && (a = r), 90 < Math.abs(r - a) && Math.abs(r - a) < 270 && (a = r, this._setProperty("turnAxis", "X"), t()), this.pRotateDirectionX = m, c = a - 180;
          var o = this.rotationY + 180,
              i = this.pRotationY + 180,
              s = d + 180;
          0 < o - i && o - i < 270 || o - i < -270 ? f = "clockwise" : (o - i < 0 || 270 < o - this.pRotationY) && (f = "counter-clockwise"), f !== this.pRotateDirectionY && (s = o), 90 < Math.abs(o - s) && Math.abs(o - s) < 270 && (s = o, this._setProperty("turnAxis", "Y"), t()), this.pRotateDirectionY = f, d = s - 180, 0 < this.rotationZ - this.pRotationZ && this.rotationZ - this.pRotationZ < 270 || this.rotationZ - this.pRotationZ < -270 ? y = "clockwise" : (this.rotationZ - this.pRotationZ < 0 || 270 < this.rotationZ - this.pRotationZ) && (y = "counter-clockwise"), y !== this.pRotateDirectionZ && (h = this.rotationZ), 90 < Math.abs(this.rotationZ - h) && Math.abs(this.rotationZ - h) < 270 && (h = this.rotationZ, this._setProperty("turnAxis", "Z"), t()), this.pRotateDirectionZ = y, this._setProperty("turnAxis", void 0);
        }

        var l,
            p,
            u = this.deviceShaken || window.deviceShaken;
        "function" == typeof u && (null !== this.pAccelerationX && (l = Math.abs(this.accelerationX - this.pAccelerationX), p = Math.abs(this.accelerationY - this.pAccelerationY)), v < l + p && u());
      };
      var l = a.default;
      r.default = l;
    }, {
      "../core/constants": 22,
      "../core/main": 32
    }],
    50: [function (e, t, r) {
      "use strict";

      Object.defineProperty(r, "__esModule", {
        value: !0
      }), r.default = void 0;
      var n,
          a = (n = e("../core/main")) && n.__esModule ? n : {
        default: n
      };
      a.default.prototype.isKeyPressed = !1, a.default.prototype.keyIsPressed = !1, a.default.prototype.key = "", a.default.prototype.keyCode = 0, a.default.prototype._onkeydown = function (e) {
        if (!this._downKeys[e.which]) {
          this._setProperty("isKeyPressed", !0), this._setProperty("keyIsPressed", !0), this._setProperty("keyCode", e.which), this._downKeys[e.which] = !0, this._setProperty("key", e.key || String.fromCharCode(e.which) || e.which);
          var t = this.keyPressed || window.keyPressed;
          if ("function" == typeof t && !e.charCode) !1 === t(e) && e.preventDefault();
        }
      }, a.default.prototype._onkeyup = function (e) {
        var t = this.keyReleased || window.keyReleased;
        this._downKeys[e.which] = !1, this._areDownKeys() || (this._setProperty("isKeyPressed", !1), this._setProperty("keyIsPressed", !1)), this._setProperty("_lastKeyCodeTyped", null), this._setProperty("key", e.key || String.fromCharCode(e.which) || e.which), this._setProperty("keyCode", e.which), "function" != typeof t || !1 === t(e) && e.preventDefault();
      }, a.default.prototype._onkeypress = function (e) {
        if (e.which !== this._lastKeyCodeTyped) {
          this._setProperty("_lastKeyCodeTyped", e.which), this._setProperty("key", String.fromCharCode(e.which));
          var t = this.keyTyped || window.keyTyped;
          if ("function" == typeof t) !1 === t(e) && e.preventDefault();
        }
      }, a.default.prototype._onblur = function (e) {
        this._downKeys = {};
      }, a.default.prototype.keyIsDown = function (e) {
        return a.default._validateParameters("keyIsDown", arguments), this._downKeys[e] || !1;
      }, a.default.prototype._areDownKeys = function () {
        for (var e in this._downKeys) if (this._downKeys.hasOwnProperty(e) && !0 === this._downKeys[e]) return !0;

        return !1;
      };
      var o = a.default;
      r.default = o;
    }, {
      "../core/main": 32
    }],
    51: [function (e, t, r) {
      "use strict";

      function i(e) {
        return (i = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (e) {
          return typeof e;
        } : function (e) {
          return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e;
        })(e);
      }

      Object.defineProperty(r, "__esModule", {
        value: !0
      }), r.default = void 0;

      var n,
          a = (n = e("../core/main")) && n.__esModule ? n : {
        default: n
      },
          o = function (e) {
        if (e && e.__esModule) return e;
        if (null === e || "object" !== i(e) && "function" != typeof e) return {
          default: e
        };
        var t = s();
        if (t && t.has(e)) return t.get(e);
        var r = {},
            n = Object.defineProperty && Object.getOwnPropertyDescriptor;

        for (var a in e) if (Object.prototype.hasOwnProperty.call(e, a)) {
          var o = n ? Object.getOwnPropertyDescriptor(e, a) : null;
          o && (o.get || o.set) ? Object.defineProperty(r, a, o) : r[a] = e[a];
        }

        r.default = e, t && t.set(e, r);
        return r;
      }(e("../core/constants"));

      function s() {
        if ("function" != typeof WeakMap) return null;
        var e = new WeakMap();
        return s = function () {
          return e;
        }, e;
      }

      a.default.prototype.movedX = 0, a.default.prototype.movedY = 0, a.default.prototype._hasMouseInteracted = !1, a.default.prototype.mouseX = 0, a.default.prototype.mouseY = 0, a.default.prototype.pmouseX = 0, a.default.prototype.pmouseY = 0, a.default.prototype.winMouseX = 0, a.default.prototype.winMouseY = 0, a.default.prototype.pwinMouseX = 0, a.default.prototype.pwinMouseY = 0, a.default.prototype.mouseButton = 0, a.default.prototype.mouseIsPressed = !1, a.default.prototype._updateNextMouseCoords = function (e) {
        if (null !== this._curElement && (!e.touches || 0 < e.touches.length)) {
          var t = function (e, t, r, n) {
            n && !n.clientX && (n.touches ? n = n.touches[0] : n.changedTouches && (n = n.changedTouches[0]));
            var a = e.getBoundingClientRect(),
                o = e.scrollWidth / t || 1,
                i = e.scrollHeight / r || 1;
            return {
              x: (n.clientX - a.left) / o,
              y: (n.clientY - a.top) / i,
              winX: n.clientX,
              winY: n.clientY,
              id: n.identifier
            };
          }(this._curElement.elt, this.width, this.height, e);

          this._setProperty("movedX", e.movementX), this._setProperty("movedY", e.movementY), this._setProperty("mouseX", t.x), this._setProperty("mouseY", t.y), this._setProperty("winMouseX", t.winX), this._setProperty("winMouseY", t.winY);
        }

        this._hasMouseInteracted || (this._updateMouseCoords(), this._setProperty("_hasMouseInteracted", !0));
      }, a.default.prototype._updateMouseCoords = function () {
        this._setProperty("pmouseX", this.mouseX), this._setProperty("pmouseY", this.mouseY), this._setProperty("pwinMouseX", this.winMouseX), this._setProperty("pwinMouseY", this.winMouseY), this._setProperty("_pmouseWheelDeltaY", this._mouseWheelDeltaY);
      }, a.default.prototype._setMouseButton = function (e) {
        1 === e.button ? this._setProperty("mouseButton", o.CENTER) : 2 === e.button ? this._setProperty("mouseButton", o.RIGHT) : this._setProperty("mouseButton", o.LEFT);
      }, a.default.prototype._onmousemove = function (e) {
        var t = this._isGlobal ? window : this;
        this._updateNextMouseCoords(e), this.mouseIsPressed ? "function" == typeof t.mouseDragged ? !1 === t.mouseDragged(e) && e.preventDefault() : "function" == typeof t.touchMoved && !1 === t.touchMoved(e) && e.preventDefault() : "function" == typeof t.mouseMoved && !1 === t.mouseMoved(e) && e.preventDefault();
      }, a.default.prototype._onmousedown = function (e) {
        var t = this._isGlobal ? window : this;
        this._setProperty("mouseIsPressed", !0), this._setMouseButton(e), this._updateNextMouseCoords(e), "function" == typeof t.mousePressed ? !1 === t.mousePressed(e) && e.preventDefault() : navigator.userAgent.toLowerCase().includes("safari") && "function" == typeof t.touchStarted && !1 === t.touchStarted(e) && e.preventDefault();
      }, a.default.prototype._onmouseup = function (e) {
        var t = this._isGlobal ? window : this;
        this._setProperty("mouseIsPressed", !1), "function" == typeof t.mouseReleased ? !1 === t.mouseReleased(e) && e.preventDefault() : "function" == typeof t.touchEnded && !1 === t.touchEnded(e) && e.preventDefault();
      }, a.default.prototype._ondragend = a.default.prototype._onmouseup, a.default.prototype._ondragover = a.default.prototype._onmousemove, a.default.prototype._onclick = function (e) {
        var t = this._isGlobal ? window : this;
        "function" == typeof t.mouseClicked && !1 === t.mouseClicked(e) && e.preventDefault();
      }, a.default.prototype._ondblclick = function (e) {
        var t = this._isGlobal ? window : this;
        "function" == typeof t.doubleClicked && !1 === t.doubleClicked(e) && e.preventDefault();
      }, a.default.prototype._mouseWheelDeltaY = 0, a.default.prototype._pmouseWheelDeltaY = 0, a.default.prototype._onwheel = function (e) {
        var t = this._isGlobal ? window : this;
        this._setProperty("_mouseWheelDeltaY", e.deltaY), "function" == typeof t.mouseWheel && (e.delta = e.deltaY, !1 === t.mouseWheel(e) && e.preventDefault());
      }, a.default.prototype.requestPointerLock = function () {
        var e = this._curElement.elt;
        return e.requestPointerLock = e.requestPointerLock || e.mozRequestPointerLock, e.requestPointerLock ? (e.requestPointerLock(), !0) : (console.log("requestPointerLock is not implemented in this browser"), !1);
      }, a.default.prototype.exitPointerLock = function () {
        document.exitPointerLock();
      };
      var l = a.default;
      r.default = l;
    }, {
      "../core/constants": 22,
      "../core/main": 32
    }],
    52: [function (e, t, r) {
      "use strict";

      Object.defineProperty(r, "__esModule", {
        value: !0
      }), r.default = void 0;
      var n,
          a = (n = e("../core/main")) && n.__esModule ? n : {
        default: n
      };

      function o(e, t, r, n, a) {
        var o = 4 < arguments.length && void 0 !== a ? a : 0,
            i = e.getBoundingClientRect(),
            s = e.scrollWidth / t || 1,
            l = e.scrollHeight / r || 1,
            p = n.touches[o] || n.changedTouches[o];
        return {
          x: (p.clientX - i.left) / s,
          y: (p.clientY - i.top) / l,
          winX: p.clientX,
          winY: p.clientY,
          id: p.identifier
        };
      }

      a.default.prototype.touches = [], a.default.prototype._updateTouchCoords = function (e) {
        if (null !== this._curElement) {
          for (var t = [], r = 0; r < e.touches.length; r++) t[r] = o(this._curElement.elt, this.width, this.height, e, r);

          this._setProperty("touches", t);
        }
      }, a.default.prototype._ontouchstart = function (e) {
        var t = this._isGlobal ? window : this;
        this._setProperty("mouseIsPressed", !0), this._updateTouchCoords(e), this._updateNextMouseCoords(e), this._updateMouseCoords(), "function" == typeof t.touchStarted ? !1 === t.touchStarted(e) && e.preventDefault() : navigator.userAgent.toLowerCase().includes("safari") && "function" == typeof t.mousePressed && !1 === t.mousePressed(e) && e.preventDefault();
      }, a.default.prototype._ontouchmove = function (e) {
        var t = this._isGlobal ? window : this;
        this._updateTouchCoords(e), this._updateNextMouseCoords(e), "function" == typeof t.touchMoved ? !1 === t.touchMoved(e) && e.preventDefault() : "function" == typeof t.mouseDragged && !1 === t.mouseDragged(e) && e.preventDefault();
      }, a.default.prototype._ontouchend = function (e) {
        this._setProperty("mouseIsPressed", !1), this._updateTouchCoords(e), this._updateNextMouseCoords(e);
        var t = this._isGlobal ? window : this;
        "function" == typeof t.touchEnded ? !1 === t.touchEnded(e) && e.preventDefault() : "function" == typeof t.mouseReleased && !1 === t.mouseReleased(e) && e.preventDefault();
      };
      var i = a.default;
      r.default = i;
    }, {
      "../core/main": 32
    }],
    53: [function (e, t, r) {
      "use strict";

      Object.defineProperty(r, "__esModule", {
        value: !0
      }), r.default = void 0;
      var N,
          O,
          L,
          I,
          P = {};

      function n(e, t) {
        for (var r, n, a, o, i, s, l, p, u, c, d = P._toPixels(e), h = e.width, m = e.height, f = h * m, y = new Int32Array(f), g = 0; g < f; g++) y[g] = P._getARGB(d, g);

        var v,
            b,
            _,
            x,
            S = new Int32Array(f),
            w = new Int32Array(f),
            M = new Int32Array(f),
            E = new Int32Array(f),
            T = 0;

        for (!function (e) {
          var t = 3.5 * e | 0;

          if (N !== (t = t < 1 ? 1 : t < 248 ? t : 248)) {
            O = 1 + (N = t) << 1, L = new Int32Array(O), I = new Array(O);

            for (var r = 0; r < O; r++) I[r] = new Int32Array(256);

            for (var n, a, o, i, s = 1, l = t - 1; s < t; s++) {
              L[t + s] = L[l] = a = l * l, o = I[t + s], i = I[l--];

              for (var p = 0; p < 256; p++) o[p] = i[p] = a * p;
            }

            n = L[t] = t * t, o = I[t];

            for (var u = 0; u < 256; u++) o[u] = n * u;
          }
        }(t), b = 0; b < m; b++) {
          for (v = 0; v < h; v++) {
            if (o = a = n = i = r = 0, (s = v - N) < 0) c = -s, s = 0;else {
              if (h <= s) break;
              c = 0;
            }

            for (_ = c; _ < O && !(h <= s); _++) {
              var C = y[s + T];
              i += (x = I[_])[(-16777216 & C) >>> 24], n += x[(16711680 & C) >> 16], a += x[(65280 & C) >> 8], o += x[255 & C], r += L[_], s++;
            }

            S[l = T + v] = i / r, w[l] = n / r, M[l] = a / r, E[l] = o / r;
          }

          T += h;
        }

        for (u = (p = -N) * h, b = T = 0; b < m; b++) {
          for (v = 0; v < h; v++) {
            if (o = a = n = i = r = 0, p < 0) c = l = -p, s = v;else {
              if (m <= p) break;
              c = 0, l = p, s = v + u;
            }

            for (_ = c; _ < O && !(m <= l); _++) i += (x = I[_])[S[s]], n += x[w[s]], a += x[M[s]], o += x[E[s]], r += L[_], l++, s += h;

            y[v + T] = i / r << 24 | n / r << 16 | a / r << 8 | o / r;
          }

          T += h, u += h, p++;
        }

        P._setPixels(d, y);
      }

      P._toPixels = function (e) {
        return e instanceof ImageData ? e.data : e.getContext("2d").getImageData(0, 0, e.width, e.height).data;
      }, P._getARGB = function (e, t) {
        var r = 4 * t;
        return e[3 + r] << 24 & 4278190080 | e[r] << 16 & 16711680 | e[1 + r] << 8 & 65280 | 255 & e[2 + r];
      }, P._setPixels = function (e, t) {
        for (var r = 0, n = 0, a = e.length; n < a; n++) e[(r = 4 * n) + 0] = (16711680 & t[n]) >>> 16, e[r + 1] = (65280 & t[n]) >>> 8, e[r + 2] = 255 & t[n], e[r + 3] = (4278190080 & t[n]) >>> 24;
      }, P._toImageData = function (e) {
        return e instanceof ImageData ? e : e.getContext("2d").getImageData(0, 0, e.width, e.height);
      }, P._createImageData = function (e, t) {
        return P._tmpCanvas = document.createElement("canvas"), P._tmpCtx = P._tmpCanvas.getContext("2d"), this._tmpCtx.createImageData(e, t);
      }, P.apply = function (e, t, r) {
        var n = e.getContext("2d"),
            a = n.getImageData(0, 0, e.width, e.height),
            o = t(a, r);
        o instanceof ImageData ? n.putImageData(o, 0, 0, 0, 0, e.width, e.height) : n.putImageData(a, 0, 0, 0, 0, e.width, e.height);
      }, P.threshold = function (e, t) {
        var r = P._toPixels(e);

        void 0 === t && (t = .5);

        for (var n = Math.floor(255 * t), a = 0; a < r.length; a += 4) {
          var o = void 0;
          o = n <= .2126 * r[a] + .7152 * r[a + 1] + .0722 * r[a + 2] ? 255 : 0, r[a] = r[a + 1] = r[a + 2] = o;
        }
      }, P.gray = function (e) {
        for (var t = P._toPixels(e), r = 0; r < t.length; r += 4) {
          var n = .2126 * t[r] + .7152 * t[r + 1] + .0722 * t[r + 2];
          t[r] = t[r + 1] = t[r + 2] = n;
        }
      }, P.opaque = function (e) {
        for (var t = P._toPixels(e), r = 0; r < t.length; r += 4) t[r + 3] = 255;

        return t;
      }, P.invert = function (e) {
        for (var t = P._toPixels(e), r = 0; r < t.length; r += 4) t[r] = 255 - t[r], t[r + 1] = 255 - t[r + 1], t[r + 2] = 255 - t[r + 2];
      }, P.posterize = function (e, t) {
        var r = P._toPixels(e);

        if (t < 2 || 255 < t) throw new Error("Level must be greater than 2 and less than 255 for posterize");

        for (var n = t - 1, a = 0; a < r.length; a += 4) {
          var o = r[a],
              i = r[a + 1],
              s = r[a + 2];
          r[a] = 255 * (o * t >> 8) / n, r[a + 1] = 255 * (i * t >> 8) / n, r[a + 2] = 255 * (s * t >> 8) / n;
        }
      }, P.dilate = function (e) {
        for (var t, r, n, a, o, i, s, l, p, u, c, d, h, m, f, y, g, v = P._toPixels(e), b = 0, _ = v.length ? v.length / 4 : 0, x = new Int32Array(_); b < _;) for (r = (t = b) + e.width; b < r;) n = a = P._getARGB(v, b), (s = b - 1) < t && (s = b), r <= (i = b + 1) && (i = b), (l = b - e.width) < 0 && (l = 0), _ <= (p = b + e.width) && (p = b), d = P._getARGB(v, l), c = P._getARGB(v, s), h = P._getARGB(v, p), (o = 77 * (n >> 16 & 255) + 151 * (n >> 8 & 255) + 28 * (255 & n)) < (f = 77 * (c >> 16 & 255) + 151 * (c >> 8 & 255) + 28 * (255 & c)) && (a = c, o = f), o < (m = 77 * ((u = P._getARGB(v, i)) >> 16 & 255) + 151 * (u >> 8 & 255) + 28 * (255 & u)) && (a = u, o = m), o < (y = 77 * (d >> 16 & 255) + 151 * (d >> 8 & 255) + 28 * (255 & d)) && (a = d, o = y), o < (g = 77 * (h >> 16 & 255) + 151 * (h >> 8 & 255) + 28 * (255 & h)) && (a = h, o = g), x[b++] = a;

        P._setPixels(v, x);
      }, P.erode = function (e) {
        for (var t, r, n, a, o, i, s, l, p, u, c, d, h, m, f, y, g, v = P._toPixels(e), b = 0, _ = v.length ? v.length / 4 : 0, x = new Int32Array(_); b < _;) for (r = (t = b) + e.width; b < r;) n = a = P._getARGB(v, b), (s = b - 1) < t && (s = b), r <= (i = b + 1) && (i = b), (l = b - e.width) < 0 && (l = 0), _ <= (p = b + e.width) && (p = b), d = P._getARGB(v, l), c = P._getARGB(v, s), h = P._getARGB(v, p), (f = 77 * (c >> 16 & 255) + 151 * (c >> 8 & 255) + 28 * (255 & c)) < (o = 77 * (n >> 16 & 255) + 151 * (n >> 8 & 255) + 28 * (255 & n)) && (a = c, o = f), (m = 77 * ((u = P._getARGB(v, i)) >> 16 & 255) + 151 * (u >> 8 & 255) + 28 * (255 & u)) < o && (a = u, o = m), (y = 77 * (d >> 16 & 255) + 151 * (d >> 8 & 255) + 28 * (255 & d)) < o && (a = d, o = y), (g = 77 * (h >> 16 & 255) + 151 * (h >> 8 & 255) + 28 * (255 & h)) < o && (a = h, o = g), x[b++] = a;

        P._setPixels(v, x);
      }, P.blur = function (e, t) {
        n(e, t);
      };
      var a = P;
      r.default = a;
    }, {}],
    54: [function (e, t, r) {
      "use strict";

      Object.defineProperty(r, "__esModule", {
        value: !0
      }), r.default = void 0;
      var P = n(e("../core/main")),
          R = n(e("omggif"));

      function n(e) {
        return e && e.__esModule ? e : {
          default: e
        };
      }

      function D(e) {
        return function (e) {
          if (Array.isArray(e)) {
            for (var t = 0, r = new Array(e.length); t < e.length; t++) r[t] = e[t];

            return r;
          }
        }(e) || function (e) {
          if (Symbol.iterator in Object(e) || "[object Arguments]" === Object.prototype.toString.call(e)) return Array.from(e);
        }(e) || function () {
          throw new TypeError("Invalid attempt to spread non-iterable instance");
        }();
      }

      P.default.prototype.createImage = function (e, t) {
        return P.default._validateParameters("createImage", arguments), new P.default.Image(e, t);
      }, P.default.prototype.saveCanvas = function () {
        P.default._validateParameters("saveCanvas", arguments);

        var e,
            t,
            r,
            n,
            a = [].slice.call(arguments);

        switch (arguments[0] instanceof HTMLCanvasElement ? (e = arguments[0], a.shift()) : arguments[0] instanceof P.default.Element ? (e = arguments[0].elt, a.shift()) : e = this._curElement && this._curElement.elt, 1 <= a.length && (t = a[0]), 2 <= a.length && (r = a[1]), r = r || P.default.prototype._checkFileExtension(t, r)[1] || "png") {
          default:
            n = "image/png";
            break;

          case "jpeg":
          case "jpg":
            n = "image/jpeg";
        }

        e.toBlob(function (e) {
          P.default.prototype.downloadFile(e, t, r);
        }, n);
      }, P.default.prototype.saveGif = function (m, e) {
        var f = m.gifProperties,
            t = f.loopLimit;
        1 === t ? t = null : null === t && (t = 0);

        for (var r = new Uint8Array(m.width * m.height * f.numFrames), y = [], n = {}, a = 0; a < f.numFrames; a++) {
          for (var o = new Set(), i = f.frames[a].image.data, s = i.length, l = new Uint32Array(m.width * m.height), p = 0, u = 0; p < s; p += 4, u++) {
            var c = i[p + 0] << 16 | i[p + 1] << 8 | i[p + 2] << 0;
            o.add(c), l[u] = c;
          }

          var d = D(o).sort().toString();
          void 0 === n[d] ? n[d] = {
            freq: 1,
            frames: [a]
          } : (n[d].freq += 1, n[d].frames.push(a)), y.push(l);
        }

        var g = [],
            h = Object.keys(n).sort(function (e, t) {
          return n[t].freq - n[e].freq;
        }),
            v = h[0].split(",").map(function (e) {
          return parseInt(e);
        });
        g = g.concat(n[v].frames);

        for (var b = new Set(v), _ = 1; _ < h.length; _++) {
          var x = h[_].split(",").map(function (e) {
            return parseInt(e);
          }).filter(function (e) {
            return !b.has(e);
          });

          if (v.length + x.length <= 256) {
            for (var S = 0; S < x.length; S++) v.push(x[S]), b.add(x[S]);

            g = g.concat(n[h[_]].frames);
          }
        }

        g = new Set(g);

        for (var w = {}, M = 0; M < v.length; M++) w[v[M]] || (w[v[M]] = M);

        for (var E = 1; E < v.length;) E <<= 1;

        v.length = E;

        for (var T = {
          loop: t,
          palette: new Uint32Array(v)
        }, C = new R.default.GifWriter(r, m.width, m.height, T), N = {}, O = function (e) {
          for (var t = !g.has(e), r = t ? [] : v, n = new Uint8Array(m.width * m.height), a = {}, o = new Set(), i = 0; i < y[e].length; i++) {
            var s = y[e][i];
            t ? (void 0 === a[s] && (a[s] = r.length, r.push(s)), n[i] = a[s]) : n[i] = w[s], 0 < e && y[e - 1][i] !== s && o.add(s);
          }

          var l = {},
              p = r.filter(function (e) {
            return !o.has(e);
          });

          if (0 < p.length) {
            var u = p[0],
                c = t ? a[u] : w[u];

            if (0 < e) {
              for (var d = 0; d < y[e].length; d++) y[e - 1][d] === y[e][d] && (n[d] = c);

              l.transparent = c, N.frameOpts.disposal = 1;
            }
          }

          if (l.delay = f.frames[e].delay / 10, t) {
            for (var h = 1; h < r.length;) h <<= 1;

            r.length = h, l.palette = new Uint32Array(r);
          }

          0 < e && C.addFrame(0, 0, m.width, m.height, N.pixelPaletteIndex, N.frameOpts), N = {
            pixelPaletteIndex: n,
            frameOpts: l
          };
        }, L = 0; L < f.numFrames; L++) O(L);

        N.frameOpts.disposal = 1, C.addFrame(0, 0, m.width, m.height, N.pixelPaletteIndex, N.frameOpts);
        var I = new Blob([r.slice(0, C.end())], {
          type: "image/gif"
        });
        P.default.prototype.downloadFile(I, e, "gif");
      }, P.default.prototype.saveFrames = function (e, t, r, n, i) {
        P.default._validateParameters("saveFrames", arguments);

        var a = r || 3;
        a = P.default.prototype.constrain(a, 0, 15), a *= 1e3;
        var o = n || 15;
        o = P.default.prototype.constrain(o, 0, 22);
        var s = 0,
            l = P.default.prototype._makeFrame,
            p = this._curElement.elt,
            u = [],
            c = setInterval(function () {
          u.push(l(e + s, t, p)), s++;
        }, 1e3 / o);
        setTimeout(function () {
          if (clearInterval(c), i) i(u);else {
            var e = !0,
                t = !1,
                r = void 0;

            try {
              for (var n, a = u[Symbol.iterator](); !(e = (n = a.next()).done); e = !0) {
                var o = n.value;
                P.default.prototype.downloadFile(o.imageData, o.filename, o.ext);
              }
            } catch (e) {
              t = !0, r = e;
            } finally {
              try {
                e || null == a.return || a.return();
              } finally {
                if (t) throw r;
              }
            }
          }
          u = [];
        }, a + .01);
      }, P.default.prototype._makeFrame = function (e, t, r) {
        var n, a;
        if (n = this ? this._curElement.elt : r, t) switch (t.toLowerCase()) {
          case "png":
            a = "image/png";
            break;

          case "jpeg":
          case "jpg":
            a = "image/jpeg";
            break;

          default:
            a = "image/png";
        } else t = "png", a = "image/png";
        var o = n.toDataURL(a);
        o = o.replace(a, "image/octet-stream");
        var i = {};
        return i.imageData = o, i.filename = e, i.ext = t, i;
      };
      var a = P.default;
      r.default = a;
    }, {
      "../core/main": 32,
      omggif: 12
    }],
    55: [function (e, t, r) {
      "use strict";

      function i(e) {
        return (i = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (e) {
          return typeof e;
        } : function (e) {
          return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e;
        })(e);
      }

      Object.defineProperty(r, "__esModule", {
        value: !0
      }), r.default = void 0;

      var x = a(e("../core/main")),
          c = a(e("./filters")),
          S = a(e("../core/helpers")),
          n = function (e) {
        if (e && e.__esModule) return e;
        if (null === e || "object" !== i(e) && "function" != typeof e) return {
          default: e
        };
        var t = s();
        if (t && t.has(e)) return t.get(e);
        var r = {},
            n = Object.defineProperty && Object.getOwnPropertyDescriptor;

        for (var a in e) if (Object.prototype.hasOwnProperty.call(e, a)) {
          var o = n ? Object.getOwnPropertyDescriptor(e, a) : null;
          o && (o.get || o.set) ? Object.defineProperty(r, a, o) : r[a] = e[a];
        }

        r.default = e, t && t.set(e, r);
        return r;
      }(e("../core/constants")),
          m = a(e("omggif"));

      function s() {
        if ("function" != typeof WeakMap) return null;
        var e = new WeakMap();
        return s = function () {
          return e;
        }, e;
      }

      function a(e) {
        return e && e.__esModule ? e : {
          default: e
        };
      }

      function w(e, t) {
        return 0 < e && e < t ? e : t;
      }

      e("../core/friendly_errors/validate_params"), e("../core/friendly_errors/file_errors"), e("../core/friendly_errors/fes_core"), x.default.prototype.loadImage = function (n, a, o) {
        x.default._validateParameters("loadImage", arguments);

        var i = new x.default.Image(1, 1, this),
            s = this,
            e = new Request(n, {
          method: "GET",
          mode: "cors"
        });
        return fetch(n, e).then(function (e) {
          var t = e.headers.get("content-type");
          if (null === t && console.warn("The image you loaded does not have a Content-Type header. If you are using the online editor consider reuploading the asset."), t && t.includes("image/gif")) e.arrayBuffer().then(function (e) {
            e && function (e, r, t, n, a) {
              var o = new m.default.GifReader(e);
              r.width = r.canvas.width = o.width, r.height = r.canvas.height = o.height;
              var i = [],
                  s = o.numFrames(),
                  l = new Uint8ClampedArray(r.width * r.height * 4);

              if (1 < s) {
                for (var p = function (e, t) {
                  try {
                    t.decodeAndBlitFrameRGBA(e, l);
                  } catch (e) {
                    x.default._friendlyFileLoadError(8, r.src), "function" == typeof n ? n(e) : console.error(e);
                  }
                }, u = 0; u < s; u++) {
                  var c = o.frameInfo(u);
                  1 === o.frameInfo(u).disposal && 0 < u ? r.drawingContext.putImageData(i[u - 1].image, 0, 0) : (r.drawingContext.clearRect(0, 0, r.width, r.height), l = new Uint8ClampedArray(r.width * r.height * 4)), p(u, o);
                  var d = new ImageData(l, r.width, r.height);
                  r.drawingContext.putImageData(d, 0, 0), i.push({
                    image: r.drawingContext.getImageData(0, 0, r.width, r.height),
                    delay: 10 * c.delay
                  });
                }

                var h = o.loopCount();
                null === h ? h = 1 : 0 === h && (h = null), r.gifProperties = {
                  displayIndex: 0,
                  loopLimit: h,
                  loopCount: 0,
                  frames: i,
                  numFrames: s,
                  playing: !0,
                  timeDisplayed: 0
                };
              }

              "function" == typeof t && t(r);
              a();
            }(new Uint8Array(e), i, a, o, function (e) {
              s._decrementPreload();
            }.bind(s));
          }, function (e) {
            "function" == typeof o ? o(e) : console.error(e);
          });else {
            var r = new Image();
            r.onload = function () {
              i.width = i.canvas.width = r.width, i.height = i.canvas.height = r.height, i.drawingContext.drawImage(r, 0, 0), i.modified = !0, "function" == typeof a && a(i), s._decrementPreload();
            }, r.onerror = function (e) {
              x.default._friendlyFileLoadError(0, r.src), "function" == typeof o ? o(e) : console.error(e);
            }, 0 !== n.indexOf("data:image/") && (r.crossOrigin = "Anonymous"), r.src = n;
          }
          i.modified = !0;
        }), i;
      }, x.default.prototype.image = function (e, t, r, n, a, o, i, s, l) {
        x.default._validateParameters("image", arguments);

        var p = e.width,
            u = e.height;
        e.elt && e.elt.videoWidth && !e.canvas && (p = e.elt.videoWidth, u = e.elt.videoHeight);
        var c = t,
            d = r,
            h = n || p,
            m = a || u,
            f = o || 0,
            y = i || 0,
            g = s || p,
            v = l || u;
        g = w(g, p), v = w(v, u);
        var b = 1;
        e.elt && !e.canvas && e.elt.style.width && (b = e.elt.videoWidth && !n ? e.elt.videoWidth : e.elt.width, b /= parseInt(e.elt.style.width, 10)), f *= b, y *= b, v *= b, g *= b;

        var _ = S.default.modeAdjust(c, d, h, m, this._renderer._imageMode);

        this._renderer.image(e, f, y, g, v, _.x, _.y, _.w, _.h);
      }, x.default.prototype.tint = function () {
        for (var e = arguments.length, t = new Array(e), r = 0; r < e; r++) t[r] = arguments[r];

        x.default._validateParameters("tint", t);

        var n = this.color.apply(this, t);
        this._renderer._tint = n.levels;
      }, x.default.prototype.noTint = function () {
        this._renderer._tint = null;
      }, x.default.prototype._getTintedImageCanvas = function (e) {
        if (!e.canvas) return e;

        var t = c.default._toPixels(e.canvas),
            r = document.createElement("canvas");

        r.width = e.canvas.width, r.height = e.canvas.height;

        for (var n = r.getContext("2d"), a = n.createImageData(e.canvas.width, e.canvas.height), o = a.data, i = 0; i < t.length; i += 4) {
          var s = t[i],
              l = t[i + 1],
              p = t[i + 2],
              u = t[i + 3];
          o[i] = s * this._renderer._tint[0] / 255, o[i + 1] = l * this._renderer._tint[1] / 255, o[i + 2] = p * this._renderer._tint[2] / 255, o[i + 3] = u * this._renderer._tint[3] / 255;
        }

        return n.putImageData(a, 0, 0), r;
      }, x.default.prototype.imageMode = function (e) {
        x.default._validateParameters("imageMode", arguments), e !== n.CORNER && e !== n.CORNERS && e !== n.CENTER || (this._renderer._imageMode = e);
      };
      var o = x.default;
      r.default = o;
    }, {
      "../core/constants": 22,
      "../core/friendly_errors/fes_core": 24,
      "../core/friendly_errors/file_errors": 25,
      "../core/friendly_errors/validate_params": 27,
      "../core/helpers": 28,
      "../core/main": 32,
      "./filters": 53,
      omggif: 12
    }],
    56: [function (e, t, r) {
      "use strict";

      Object.defineProperty(r, "__esModule", {
        value: !0
      }), r.default = void 0;
      var a = o(e("../core/main")),
          n = o(e("./filters"));

      function o(e) {
        return e && e.__esModule ? e : {
          default: e
        };
      }

      a.default.Image = function (e, t) {
        this.width = e, this.height = t, this.canvas = document.createElement("canvas"), this.canvas.width = this.width, this.canvas.height = this.height, this.drawingContext = this.canvas.getContext("2d"), (this._pixelsState = this)._pixelDensity = 1, this.gifProperties = null, this._modified = !1, this.pixels = [];
      }, a.default.Image.prototype._animateGif = function (e) {
        var t = this.gifProperties;

        if (t.playing) {
          t.timeDisplayed += e.deltaTime;
          var r = t.frames[t.displayIndex].delay;

          if (t.timeDisplayed >= r) {
            var n = Math.floor(t.timeDisplayed / r);
            if (t.timeDisplayed = 0, t.displayIndex += n, t.loopCount = Math.floor(t.displayIndex / t.numFrames), null !== t.loopLimit && t.loopCount >= t.loopLimit) t.playing = !1;else {
              var a = t.displayIndex % t.numFrames;
              this.drawingContext.putImageData(t.frames[a].image, 0, 0), t.displayIndex = a, this.setModified(!0);
            }
          }
        }
      }, a.default.Image.prototype._setProperty = function (e, t) {
        this[e] = t, this.setModified(!0);
      }, a.default.Image.prototype.loadPixels = function () {
        a.default.Renderer2D.prototype.loadPixels.call(this), this.setModified(!0);
      }, a.default.Image.prototype.updatePixels = function (e, t, r, n) {
        a.default.Renderer2D.prototype.updatePixels.call(this, e, t, r, n), this.setModified(!0);
      }, a.default.Image.prototype.get = function (e, t, r, n) {
        return a.default._validateParameters("p5.Image.get", arguments), a.default.Renderer2D.prototype.get.apply(this, arguments);
      }, a.default.Image.prototype._getPixel = a.default.Renderer2D.prototype._getPixel, a.default.Image.prototype.set = function (e, t, r) {
        a.default.Renderer2D.prototype.set.call(this, e, t, r), this.setModified(!0);
      }, a.default.Image.prototype.resize = function (e, t) {
        0 === e && 0 === t ? (e = this.canvas.width, t = this.canvas.height) : 0 === e ? e = this.canvas.width * t / this.canvas.height : 0 === t && (t = this.canvas.height * e / this.canvas.width), e = Math.floor(e), t = Math.floor(t);
        var r = document.createElement("canvas");
        if (r.width = e, r.height = t, this.gifProperties) for (var n = this.gifProperties, a = function (e, t) {
          for (var r = 0, n = 0; n < t.height; n++) for (var a = 0; a < t.width; a++) {
            var o = Math.floor(a * e.width / t.width),
                i = 4 * (Math.floor(n * e.height / t.height) * e.width + o);
            t.data[r++] = e.data[i++], t.data[r++] = e.data[i++], t.data[r++] = e.data[i++], t.data[r++] = e.data[i++];
          }
        }, o = 0; o < n.numFrames; o++) {
          var i = this.drawingContext.createImageData(e, t);
          a(n.frames[o].image, i), n.frames[o].image = i;
        }
        r.getContext("2d").drawImage(this.canvas, 0, 0, this.canvas.width, this.canvas.height, 0, 0, r.width, r.height), this.canvas.width = this.width = e, this.canvas.height = this.height = t, this.drawingContext.drawImage(r, 0, 0, e, t, 0, 0, e, t), 0 < this.pixels.length && this.loadPixels(), this.setModified(!0);
      }, a.default.Image.prototype.copy = function () {
        for (var e = arguments.length, t = new Array(e), r = 0; r < e; r++) t[r] = arguments[r];

        a.default.prototype.copy.apply(this, t);
      }, a.default.Image.prototype.mask = function (e) {
        void 0 === e && (e = this);
        var t = this.drawingContext.globalCompositeOperation,
            r = 1;
        e instanceof a.default.Renderer && (r = e._pInst._pixelDensity);
        var n = [e, 0, 0, r * e.width, r * e.height, 0, 0, this.width, this.height];
        this.drawingContext.globalCompositeOperation = "destination-in", a.default.Image.prototype.copy.apply(this, n), this.drawingContext.globalCompositeOperation = t, this.setModified(!0);
      }, a.default.Image.prototype.filter = function (e, t) {
        n.default.apply(this.canvas, n.default[e], t), this.setModified(!0);
      }, a.default.Image.prototype.blend = function () {
        for (var e = arguments.length, t = new Array(e), r = 0; r < e; r++) t[r] = arguments[r];

        a.default._validateParameters("p5.Image.blend", arguments), a.default.prototype.blend.apply(this, t), this.setModified(!0);
      }, a.default.Image.prototype.setModified = function (e) {
        this._modified = e;
      }, a.default.Image.prototype.isModified = function () {
        return this._modified;
      }, a.default.Image.prototype.save = function (e, t) {
        this.gifProperties ? a.default.prototype.saveGif(this, e) : a.default.prototype.saveCanvas(this.canvas, e, t);
      }, a.default.Image.prototype.reset = function () {
        if (this.gifProperties) {
          var e = this.gifProperties;
          e.playing = !0, e.timeSinceStart = 0, e.timeDisplayed = 0, e.loopCount = 0, e.displayIndex = 0, this.drawingContext.putImageData(e.frames[0].image, 0, 0);
        }
      }, a.default.Image.prototype.getCurrentFrame = function () {
        if (this.gifProperties) {
          var e = this.gifProperties;
          return e.displayIndex % e.numFrames;
        }
      }, a.default.Image.prototype.setFrame = function (e) {
        if (this.gifProperties) {
          var t = this.gifProperties;
          e < t.numFrames && 0 <= e ? (t.timeDisplayed = 0, t.displayIndex = e, this.drawingContext.putImageData(t.frames[e].image, 0, 0)) : console.log("Cannot set GIF to a frame number that is higher than total number of frames or below zero.");
        }
      }, a.default.Image.prototype.numFrames = function () {
        if (this.gifProperties) return this.gifProperties.numFrames;
      }, a.default.Image.prototype.play = function () {
        this.gifProperties && (this.gifProperties.playing = !0);
      }, a.default.Image.prototype.pause = function () {
        this.gifProperties && (this.gifProperties.playing = !1);
      }, a.default.Image.prototype.delay = function (e, t) {
        if (this.gifProperties) {
          var r = this.gifProperties;
          if (t < r.numFrames && 0 <= t) r.frames[t].delay = e;else {
            var n = !0,
                a = !1,
                o = void 0;

            try {
              for (var i, s = r.frames[Symbol.iterator](); !(n = (i = s.next()).done); n = !0) {
                i.value.delay = e;
              }
            } catch (e) {
              a = !0, o = e;
            } finally {
              try {
                n || null == s.return || s.return();
              } finally {
                if (a) throw o;
              }
            }
          }
        }
      };
      var i = a.default.Image;
      r.default = i;
    }, {
      "../core/main": 32,
      "./filters": 53
    }],
    57: [function (e, t, r) {
      "use strict";

      Object.defineProperty(r, "__esModule", {
        value: !0
      }), r.default = void 0;
      var h = a(e("../core/main")),
          n = a(e("./filters"));

      function a(e) {
        return e && e.__esModule ? e : {
          default: e
        };
      }

      e("../color/p5.Color"), h.default.prototype.pixels = [], h.default.prototype.blend = function () {
        for (var e = arguments.length, t = new Array(e), r = 0; r < e; r++) t[r] = arguments[r];

        var n;
        (h.default._validateParameters("blend", t), this._renderer) ? (n = this._renderer).blend.apply(n, t) : h.default.Renderer2D.prototype.blend.apply(this, t);
      }, h.default.prototype.copy = function () {
        for (var e = arguments.length, t = new Array(e), r = 0; r < e; r++) t[r] = arguments[r];

        var n, a, o, i, s, l, p, u, c;
        if (h.default._validateParameters("copy", t), 9 === t.length) n = t[0], a = t[1], o = t[2], i = t[3], s = t[4], l = t[5], p = t[6], u = t[7], c = t[8];else {
          if (8 !== t.length) throw new Error("Signature not supported");
          n = this, a = t[0], o = t[1], i = t[2], s = t[3], l = t[4], p = t[5], u = t[6], c = t[7];
        }

        h.default.prototype._copyHelper(this, n, a, o, i, s, l, p, u, c);
      }, h.default.prototype._copyHelper = function (e, t, r, n, a, o, i, s, l, p) {
        t.loadPixels();
        var u = t.canvas.width / t.width,
            c = 0,
            d = 0;
        t._renderer && t._renderer.isP3D && (c = t.width / 2, d = t.height / 2), e._renderer && e._renderer.isP3D ? h.default.RendererGL.prototype.image.call(e._renderer, t, r + c, n + d, a, o, i, s, l, p) : e.drawingContext.drawImage(t.canvas, u * (r + c), u * (n + d), u * a, u * o, i, s, l, p);
      }, h.default.prototype.filter = function (e, t) {
        h.default._validateParameters("filter", arguments), void 0 !== this.canvas ? n.default.apply(this.canvas, n.default[e], t) : n.default.apply(this.elt, n.default[e], t);
      }, h.default.prototype.get = function (e, t, r, n) {
        var a;
        return h.default._validateParameters("get", arguments), (a = this._renderer).get.apply(a, arguments);
      }, h.default.prototype.loadPixels = function () {
        for (var e = arguments.length, t = new Array(e), r = 0; r < e; r++) t[r] = arguments[r];

        h.default._validateParameters("loadPixels", t), this._renderer.loadPixels();
      }, h.default.prototype.set = function (e, t, r) {
        this._renderer.set(e, t, r);
      }, h.default.prototype.updatePixels = function (e, t, r, n) {
        h.default._validateParameters("updatePixels", arguments), 0 !== this.pixels.length && this._renderer.updatePixels(e, t, r, n);
      };
      var o = h.default;
      r.default = o;
    }, {
      "../color/p5.Color": 20,
      "../core/main": 32,
      "./filters": 53
    }],
    58: [function (e, t, r) {
      "use strict";

      Object.defineProperty(r, "__esModule", {
        value: !0
      }), r.default = void 0;
      var g = n(e("../core/main"));
      e("whatwg-fetch"), e("es6-promise/auto");
      var y = n(e("fetch-jsonp")),
          s = n(e("file-saver"));

      function n(e) {
        return e && e.__esModule ? e : {
          default: e
        };
      }

      function v(e) {
        return (v = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (e) {
          return typeof e;
        } : function (e) {
          return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e;
        })(e);
      }

      function b(e, t) {
        var r = {};
        if (void 0 === (t = t || [])) for (var n = 0; n < e.length; n++) t[n.toString()] = n;

        for (var a = 0; a < t.length; a++) {
          var o = t[a],
              i = e[a];
          r[o] = i;
        }

        return r;
      }

      function f(e) {
        return e.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;").replace(/'/g, "&#039;");
      }

      function l(e, t) {
        t && !0 !== t && "true" !== t || (t = "");
        var r = "";
        return (e = e || "untitled") && e.includes(".") && (r = e.split(".").pop()), t && r !== t && (r = t, e = "".concat(e, ".").concat(r)), [e, r];
      }

      e("../core/friendly_errors/validate_params"), e("../core/friendly_errors/file_errors"), e("../core/friendly_errors/fes_core"), g.default.prototype.loadJSON = function () {
        for (var e = arguments.length, t = new Array(e), r = 0; r < e; r++) t[r] = arguments[r];

        g.default._validateParameters("loadJSON", t);

        for (var n, a, o, i = t[0], s = {}, l = "json", p = 1; p < t.length; p++) {
          var u = t[p];
          "string" == typeof u ? "jsonp" !== u && "json" !== u || (l = u) : "function" == typeof u ? n ? a = u : n = u : "object" === v(u) && (u.hasOwnProperty("jsonpCallback") || u.hasOwnProperty("jsonpCallbackFunction")) && (l = "jsonp", o = u);
        }

        var c = this;
        return this.httpDo(i, "GET", o, l, function (e) {
          for (var t in e) s[t] = e[t];

          void 0 !== n && n(e), c._decrementPreload();
        }, function (e) {
          if (g.default._friendlyFileLoadError(5, i), !a) throw e;
          a(e);
        }), s;
      }, g.default.prototype.loadStrings = function () {
        for (var e = arguments.length, t = new Array(e), r = 0; r < e; r++) t[r] = arguments[r];

        g.default._validateParameters("loadStrings", t);

        for (var n, a, o = [], i = 1; i < t.length; i++) {
          var s = t[i];
          "function" == typeof s && (void 0 === n ? n = s : void 0 === a && (a = s));
        }

        var l = this;
        return g.default.prototype.httpDo.call(this, t[0], "GET", "text", function (e) {
          var t = e.replace(/\r\n/g, "\r").replace(/\n/g, "\r").split(/\r/);
          Array.prototype.push.apply(o, t), void 0 !== n && n(o), l._decrementPreload();
        }, function (e) {
          if (g.default._friendlyFileLoadError(3, e), !a) throw e;
          a(e);
        }), o;
      }, g.default.prototype.loadTable = function (t) {
        var d,
            r,
            h,
            e = [],
            m = !1,
            n = t.substring(t.lastIndexOf(".") + 1, t.length);
        "csv" === n ? h = "," : "ssv" === n ? h = ";" : "tsv" === n && (h = "\t");

        for (var a = 1; a < arguments.length; a++) "function" == typeof arguments[a] ? void 0 === d ? d = arguments[a] : void 0 === r && (r = arguments[a]) : "string" == typeof arguments[a] && (e.push(arguments[a]), "header" === arguments[a] && (m = !0), "csv" === arguments[a] ? h = "," : "ssv" === arguments[a] ? h = ";" : "tsv" === arguments[a] && (h = "\t"));

        console.log("SEP IS " + h);
        var f = new g.default.Table(),
            y = this;
        return this.httpDo(t, "GET", "table", function (e) {
          for (var t, r, n = {}, a = [], o = 0, i = null, s = function () {
            n.currentState = 0, n.token = "";
          }, l = function () {
            i.push(n.token), s();
          }, p = function () {
            n.currentState = 4, a.push(i), i = null;
          };;) {
            if (null == (t = e[o++])) {
              if (n.escaped) throw new Error("Unclosed quote in file.");

              if (i) {
                l(), p();
                break;
              }
            }

            if (null === i && (n.escaped = !1, i = [], s()), 0 === n.currentState) {
              if ('"' === t) {
                n.escaped = !0, n.currentState = 1;
                continue;
              }

              n.currentState = 1;
            }

            if (1 === n.currentState && n.escaped) {
              if ('"' === t) '"' === e[o] ? (n.token += '"', o++) : (n.escaped = !1, n.currentState = 2);else {
                if ("\r" === t) continue;
                n.token += t;
              }
            } else "\r" === t ? ("\n" === e[o] && o++, l(), p()) : "\n" === t ? (l(), p()) : t === h ? l() : 1 === n.currentState && (n.token += t);
          }

          if (m) f.columns = a.shift();else for (var u = 0; u < a[0].length; u++) f.columns[u] = "null";

          for (var c = 0; c < a.length; c++) (1 !== a[c].length || "undefined" !== a[c][0] && "" !== a[c][0]) && ((r = new g.default.TableRow()).arr = a[c], r.obj = b(a[c], f.columns), f.addRow(r));

          "function" == typeof d && d(f), y._decrementPreload();
        }, function (e) {
          g.default._friendlyFileLoadError(2, t), r ? r(e) : console.error(e);
        }), f;
      }, g.default.prototype.loadXML = function () {
        for (var e = arguments.length, t = new Array(e), r = 0; r < e; r++) t[r] = arguments[r];

        for (var n, a, o = new g.default.XML(), i = 1; i < t.length; i++) {
          var s = t[i];
          "function" == typeof s && (void 0 === n ? n = s : void 0 === a && (a = s));
        }

        var l = this;
        return this.httpDo(t[0], "GET", "xml", function (e) {
          for (var t in e) o[t] = e[t];

          void 0 !== n && n(o), l._decrementPreload();
        }, function (e) {
          if (g.default._friendlyFileLoadError(1, e), !a) throw e;
          a(e);
        }), o;
      }, g.default.prototype.loadBytes = function (t, r, n) {
        var a = {},
            o = this;
        return this.httpDo(t, "GET", "arrayBuffer", function (e) {
          a.bytes = new Uint8Array(e), "function" == typeof r && r(a), o._decrementPreload();
        }, function (e) {
          if (g.default._friendlyFileLoadError(6, t), !n) throw e;
          n(e);
        }), a;
      }, g.default.prototype.httpGet = function () {
        g.default._validateParameters("httpGet", arguments);

        var e = Array.prototype.slice.call(arguments);
        return e.splice(1, 0, "GET"), g.default.prototype.httpDo.apply(this, e);
      }, g.default.prototype.httpPost = function () {
        g.default._validateParameters("httpPost", arguments);

        var e = Array.prototype.slice.call(arguments);
        return e.splice(1, 0, "POST"), g.default.prototype.httpDo.apply(this, e);
      }, g.default.prototype.httpDo = function () {
        for (var n, e, t, r, a, o = {}, i = 0, s = "text/plain", l = arguments.length - 1; 0 < l && "function" == typeof (l < 0 || arguments.length <= l ? void 0 : arguments[l]); l--) i++;

        var p = arguments.length <= 0 ? void 0 : arguments[0];
        if (2 == arguments.length - i && "string" == typeof p && "object" === v(arguments.length <= 1 ? void 0 : arguments[1])) r = new Request(p, arguments.length <= 1 ? void 0 : arguments[1]), e = arguments.length <= 2 ? void 0 : arguments[2], t = arguments.length <= 3 ? void 0 : arguments[3];else {
          for (var u, c = "GET", d = 1; d < arguments.length; d++) {
            var h = d < 0 || arguments.length <= d ? void 0 : arguments[d];
            if ("string" == typeof h) "GET" === h || "POST" === h || "PUT" === h || "DELETE" === h ? c = h : "json" === h || "jsonp" === h || "binary" === h || "arrayBuffer" === h || "xml" === h || "text" === h || "table" === h ? n = h : u = h;else if ("number" == typeof h) u = h.toString();else if ("object" === v(h)) {
              if (h.hasOwnProperty("jsonpCallback") || h.hasOwnProperty("jsonpCallbackFunction")) for (var m in h) o[m] = h[m];else s = h instanceof g.default.XML ? (u = h.serialize(), "application/xml") : (u = JSON.stringify(h), "application/json");
            } else "function" == typeof h && (e ? t = h : e = h);
          }

          var f = "GET" === c ? new Headers() : new Headers({
            "Content-Type": s
          });
          r = new Request(p, {
            method: c,
            mode: "cors",
            body: u,
            headers: f
          });
        }
        return (a = (a = "jsonp" === (n = n || (p.includes("json") ? "json" : p.includes("xml") ? "xml" : "text")) ? (0, y.default)(p, o) : fetch(r)).then(function (e) {
          if (!e.ok) {
            var t = new Error(e.body);
            throw t.status = e.status, t.ok = !1, t;
          }

          var r = 0;

          switch ("jsonp" !== n && (r = e.headers.get("content-length")), r && 64e6 < r && g.default._friendlyFileLoadError(7, p), n) {
            case "json":
            case "jsonp":
              return e.json();

            case "binary":
              return e.blob();

            case "arrayBuffer":
              return e.arrayBuffer();

            case "xml":
              return e.text().then(function (e) {
                var t = new DOMParser().parseFromString(e, "text/xml");
                return new g.default.XML(t.documentElement);
              });

            default:
              return e.text();
          }
        })).then(e || function () {}), a.catch(t || console.error), a;
      }, window.URL = window.URL || window.webkitURL, g.default.prototype._pWriters = [], g.default.prototype.createWriter = function (e, t) {
        var r;

        for (var n in g.default.prototype._pWriters) if (g.default.prototype._pWriters[n].name === e) return r = new g.default.PrintWriter(e + this.millis(), t), g.default.prototype._pWriters.push(r), r;

        return r = new g.default.PrintWriter(e, t), g.default.prototype._pWriters.push(r), r;
      }, g.default.PrintWriter = function (r, n) {
        var a = this;
        this.name = r, this.content = "", this.write = function (e) {
          this.content += e;
        }, this.print = function (e) {
          this.content += "".concat(e, "\n");
        }, this.clear = function () {
          this.content = "";
        }, this.close = function () {
          var e = [];

          for (var t in e.push(this.content), g.default.prototype.writeFile(e, r, n), g.default.prototype._pWriters) g.default.prototype._pWriters[t].name === this.name && g.default.prototype._pWriters.splice(t, 1);

          a.clear(), a = {};
        };
      }, g.default.prototype.save = function (e, t, r) {
        var n = arguments,
            a = this._curElement ? this._curElement.elt : this.elt;
        if (0 !== n.length) {
          if (n[0] instanceof g.default.Renderer || n[0] instanceof g.default.Graphics) g.default.prototype.saveCanvas(n[0].elt, n[1], n[2]);else if (1 === n.length && "string" == typeof n[0]) g.default.prototype.saveCanvas(a, n[0]);else switch (l(n[1], n[2])[1]) {
            case "json":
              return void g.default.prototype.saveJSON(n[0], n[1], n[2]);

            case "txt":
              return void g.default.prototype.saveStrings(n[0], n[1], n[2]);

            default:
              n[0] instanceof Array ? g.default.prototype.saveStrings(n[0], n[1], n[2]) : n[0] instanceof g.default.Table ? g.default.prototype.saveTable(n[0], n[1], n[2]) : n[0] instanceof g.default.Image ? g.default.prototype.saveCanvas(n[0].canvas, n[1]) : n[0] instanceof g.default.SoundFile && g.default.prototype.saveSound(n[0], n[1], n[2], n[3]);
          }
        } else g.default.prototype.saveCanvas(a);
      }, g.default.prototype.saveJSON = function (e, t, r) {
        var n;
        g.default._validateParameters("saveJSON", arguments), n = r ? JSON.stringify(e) : JSON.stringify(e, void 0, 2), this.saveStrings(n.split("\n"), t, "json");
      }, g.default.prototype.saveJSONObject = g.default.prototype.saveJSON, g.default.prototype.saveJSONArray = g.default.prototype.saveJSON, g.default.prototype.saveStrings = function (e, t, r, n) {
        g.default._validateParameters("saveStrings", arguments);

        for (var a = r || "txt", o = this.createWriter(t, a), i = 0; i < e.length; i++) n ? o.write(e[i] + "\r\n") : o.write(e[i] + "\n");

        o.close(), o.clear();
      }, g.default.prototype.saveTable = function (e, t, r) {
        var n;
        g.default._validateParameters("saveTable", arguments), n = void 0 === r ? t.substring(t.lastIndexOf(".") + 1, t.length) : r;
        var a = this.createWriter(t, n),
            o = e.columns,
            i = ",";

        if ("tsv" === n && (i = "\t"), "html" !== n) {
          if ("0" !== o[0]) {
            for (var s = 0; s < o.length; s++) s < o.length - 1 ? a.write(o[s] + i) : a.write(o[s]);

            a.write("\n");
          }

          for (var l = 0; l < e.rows.length; l++) {
            var p = void 0;

            for (p = 0; p < e.rows[l].arr.length; p++) p < e.rows[l].arr.length - 1 ? a.write(e.rows[l].arr[p] + i) : (e.rows.length, a.write(e.rows[l].arr[p]));

            a.write("\n");
          }
        } else {
          a.print("<html>"), a.print("<head>");

          if (a.print('  <meta http-equiv="content-type" content="text/html;charset=utf-8" />'), a.print("</head>"), a.print("<body>"), a.print("  <table>"), "0" !== o[0]) {
            a.print("    <tr>");

            for (var u = 0; u < o.length; u++) {
              var c = f(o[u]);
              a.print("      <td>".concat(c)), a.print("      </td>");
            }

            a.print("    </tr>");
          }

          for (var d = 0; d < e.rows.length; d++) {
            a.print("    <tr>");

            for (var h = 0; h < e.columns.length; h++) {
              var m = f(e.rows[d].getString(h));
              a.print("      <td>".concat(m)), a.print("      </td>");
            }

            a.print("    </tr>");
          }

          a.print("  </table>"), a.print("</body>"), a.print("</html>");
        }

        a.close(), a.clear();
      }, g.default.prototype.writeFile = function (e, t, r) {
        var n = "application/octet-stream";
        g.default.prototype._isSafari() && (n = "text/plain");
        var a = new Blob(e, {
          type: n
        });
        g.default.prototype.downloadFile(a, t, r);
      }, g.default.prototype.downloadFile = function (e, t, r) {
        var n = l(t, r),
            a = n[0];
        if (e instanceof Blob) s.default.saveAs(e, a);else {
          var o = document.createElement("a");

          if (o.href = e, o.download = a, o.onclick = function (e) {
            var t;
            t = e, document.body.removeChild(t.target), e.stopPropagation();
          }, o.style.display = "none", document.body.appendChild(o), g.default.prototype._isSafari()) {
            var i = "Hello, Safari user! To download this file...\n";
            i += "1. Go to File --\x3e Save As.\n", i += '2. Choose "Page Source" as the Format.\n', i += '3. Name it with this extension: ."'.concat(n[1], '"'), alert(i);
          }

          o.click();
        }
      }, g.default.prototype._checkFileExtension = l, g.default.prototype._isSafari = function () {
        return 0 < Object.prototype.toString.call(window.HTMLElement).indexOf("Constructor");
      };
      var a = g.default;
      r.default = a;
    }, {
      "../core/friendly_errors/fes_core": 24,
      "../core/friendly_errors/file_errors": 25,
      "../core/friendly_errors/validate_params": 27,
      "../core/main": 32,
      "es6-promise/auto": 6,
      "fetch-jsonp": 8,
      "file-saver": 9,
      "whatwg-fetch": 16
    }],
    59: [function (e, t, r) {
      "use strict";

      Object.defineProperty(r, "__esModule", {
        value: !0
      }), r.default = void 0;
      var n,
          a = (n = e("../core/main")) && n.__esModule ? n : {
        default: n
      };
      a.default.Table = function (e) {
        this.columns = [], this.rows = [];
      }, a.default.Table.prototype.addRow = function (e) {
        var t = e || new a.default.TableRow();
        if (void 0 === t.arr || void 0 === t.obj) throw new Error("invalid TableRow: ".concat(t));
        return (t.table = this).rows.push(t), t;
      }, a.default.Table.prototype.removeRow = function (e) {
        this.rows[e].table = null;
        var t = this.rows.splice(e + 1, this.rows.length);
        this.rows.pop(), this.rows = this.rows.concat(t);
      }, a.default.Table.prototype.getRow = function (e) {
        return this.rows[e];
      }, a.default.Table.prototype.getRows = function () {
        return this.rows;
      }, a.default.Table.prototype.findRow = function (e, t) {
        if ("string" == typeof t) {
          for (var r = 0; r < this.rows.length; r++) if (this.rows[r].obj[t] === e) return this.rows[r];
        } else for (var n = 0; n < this.rows.length; n++) if (this.rows[n].arr[t] === e) return this.rows[n];

        return null;
      }, a.default.Table.prototype.findRows = function (e, t) {
        var r = [];
        if ("string" == typeof t) for (var n = 0; n < this.rows.length; n++) this.rows[n].obj[t] === e && r.push(this.rows[n]);else for (var a = 0; a < this.rows.length; a++) this.rows[a].arr[t] === e && r.push(this.rows[a]);
        return r;
      }, a.default.Table.prototype.matchRow = function (e, t) {
        if ("number" == typeof t) {
          for (var r = 0; r < this.rows.length; r++) if (this.rows[r].arr[t].match(e)) return this.rows[r];
        } else for (var n = 0; n < this.rows.length; n++) if (this.rows[n].obj[t].match(e)) return this.rows[n];

        return null;
      }, a.default.Table.prototype.matchRows = function (e, t) {
        var r = [];
        if ("number" == typeof t) for (var n = 0; n < this.rows.length; n++) this.rows[n].arr[t].match(e) && r.push(this.rows[n]);else for (var a = 0; a < this.rows.length; a++) this.rows[a].obj[t].match(e) && r.push(this.rows[a]);
        return r;
      }, a.default.Table.prototype.getColumn = function (e) {
        var t = [];
        if ("string" == typeof e) for (var r = 0; r < this.rows.length; r++) t.push(this.rows[r].obj[e]);else for (var n = 0; n < this.rows.length; n++) t.push(this.rows[n].arr[e]);
        return t;
      }, a.default.Table.prototype.clearRows = function () {
        delete this.rows, this.rows = [];
      }, a.default.Table.prototype.addColumn = function (e) {
        var t = e || null;
        this.columns.push(t);
      }, a.default.Table.prototype.getColumnCount = function () {
        return this.columns.length;
      }, a.default.Table.prototype.getRowCount = function () {
        return this.rows.length;
      }, a.default.Table.prototype.removeTokens = function (e, t) {
        for (var r = [], n = 0; n < e.length; n++) r.push(e.charAt(n).replace(/[-/\\^$*+?.()|[\]{}]/g, "\\$&"));

        var a = new RegExp(r.join("|"), "g");
        if (void 0 === t) for (var o = 0; o < this.columns.length; o++) for (var i = 0; i < this.rows.length; i++) {
          var s = this.rows[i].arr[o];
          s = s.replace(a, ""), this.rows[i].arr[o] = s, this.rows[i].obj[this.columns[o]] = s;
        } else if ("string" == typeof t) for (var l = 0; l < this.rows.length; l++) {
          var p = this.rows[l].obj[t];
          p = p.replace(a, ""), this.rows[l].obj[t] = p;
          var u = this.columns.indexOf(t);
          this.rows[l].arr[u] = p;
        } else for (var c = 0; c < this.rows.length; c++) {
          var d = this.rows[c].arr[t];
          d = d.replace(a, ""), this.rows[c].arr[t] = d, this.rows[c].obj[this.columns[t]] = d;
        }
      }, a.default.Table.prototype.trim = function (e) {
        var t = new RegExp(" ", "g");
        if (void 0 === e) for (var r = 0; r < this.columns.length; r++) for (var n = 0; n < this.rows.length; n++) {
          var a = this.rows[n].arr[r];
          a = a.replace(t, ""), this.rows[n].arr[r] = a, this.rows[n].obj[this.columns[r]] = a;
        } else if ("string" == typeof e) for (var o = 0; o < this.rows.length; o++) {
          var i = this.rows[o].obj[e];
          i = i.replace(t, ""), this.rows[o].obj[e] = i;
          var s = this.columns.indexOf(e);
          this.rows[o].arr[s] = i;
        } else for (var l = 0; l < this.rows.length; l++) {
          var p = this.rows[l].arr[e];
          p = p.replace(t, ""), this.rows[l].arr[e] = p, this.rows[l].obj[this.columns[e]] = p;
        }
      }, a.default.Table.prototype.removeColumn = function (e) {
        var t, r;
        "string" == typeof e ? (t = e, r = this.columns.indexOf(e)) : (r = e, t = this.columns[e]);
        var n = this.columns.splice(r + 1, this.columns.length);
        this.columns.pop(), this.columns = this.columns.concat(n);

        for (var a = 0; a < this.rows.length; a++) {
          var o = this.rows[a].arr,
              i = o.splice(r + 1, o.length);
          o.pop(), this.rows[a].arr = o.concat(i), delete this.rows[a].obj[t];
        }
      }, a.default.Table.prototype.set = function (e, t, r) {
        this.rows[e].set(t, r);
      }, a.default.Table.prototype.setNum = function (e, t, r) {
        this.rows[e].setNum(t, r);
      }, a.default.Table.prototype.setString = function (e, t, r) {
        this.rows[e].setString(t, r);
      }, a.default.Table.prototype.get = function (e, t) {
        return this.rows[e].get(t);
      }, a.default.Table.prototype.getNum = function (e, t) {
        return this.rows[e].getNum(t);
      }, a.default.Table.prototype.getString = function (e, t) {
        return this.rows[e].getString(t);
      }, a.default.Table.prototype.getObject = function (e) {
        for (var t, r = {}, n = 0; n < this.rows.length; n++) if (t = this.rows[n].obj, "string" == typeof e) {
          if (!(0 <= this.columns.indexOf(e))) throw new Error('This table has no column named "'.concat(e, '"'));
          r[t[e]] = t;
        } else r[n] = this.rows[n].obj;

        return r;
      }, a.default.Table.prototype.getArray = function () {
        for (var e = [], t = 0; t < this.rows.length; t++) e.push(this.rows[t].arr);

        return e;
      };
      var o = a.default;
      r.default = o;
    }, {
      "../core/main": 32
    }],
    60: [function (e, t, r) {
      "use strict";

      Object.defineProperty(r, "__esModule", {
        value: !0
      }), r.default = void 0;
      var n,
          a = (n = e("../core/main")) && n.__esModule ? n : {
        default: n
      };
      a.default.TableRow = function (e, t) {
        var r = [],
            n = {};
        e && (t = t || ",", r = e.split(t));

        for (var a = 0; a < r.length; a++) {
          var o = a,
              i = r[a];
          n[o] = i;
        }

        this.arr = r, this.obj = n, this.table = null;
      }, a.default.TableRow.prototype.set = function (e, t) {
        if ("string" == typeof e) {
          var r = this.table.columns.indexOf(e);
          if (!(0 <= r)) throw new Error('This table has no column named "'.concat(e, '"'));
          this.obj[e] = t, this.arr[r] = t;
        } else {
          if (!(e < this.table.columns.length)) throw new Error("Column #".concat(e, " is out of the range of this table"));
          this.arr[e] = t;
          var n = this.table.columns[e];
          this.obj[n] = t;
        }
      }, a.default.TableRow.prototype.setNum = function (e, t) {
        var r = parseFloat(t);
        this.set(e, r);
      }, a.default.TableRow.prototype.setString = function (e, t) {
        var r = t.toString();
        this.set(e, r);
      }, a.default.TableRow.prototype.get = function (e) {
        return "string" == typeof e ? this.obj[e] : this.arr[e];
      }, a.default.TableRow.prototype.getNum = function (e) {
        var t;
        if ("NaN" === (t = "string" == typeof e ? parseFloat(this.obj[e]) : parseFloat(this.arr[e])).toString()) throw "Error: ".concat(this.obj[e], " is NaN (Not a Number)");
        return t;
      }, a.default.TableRow.prototype.getString = function (e) {
        return "string" == typeof e ? this.obj[e].toString() : this.arr[e].toString();
      };
      var o = a.default;
      r.default = o;
    }, {
      "../core/main": 32
    }],
    61: [function (e, t, r) {
      "use strict";

      Object.defineProperty(r, "__esModule", {
        value: !0
      }), r.default = void 0;
      var n,
          s = (n = e("../core/main")) && n.__esModule ? n : {
        default: n
      };

      function a(e) {
        for (var t = [], r = 0; r < e.length; r++) t.push(new s.default.XML(e[r]));

        return t;
      }

      s.default.XML = function (e) {
        if (e) this.DOM = e;else {
          var t = document.implementation.createDocument(null, "doc");
          this.DOM = t.createElement("root");
        }
      }, s.default.XML.prototype.getParent = function () {
        return new s.default.XML(this.DOM.parentElement);
      }, s.default.XML.prototype.getName = function () {
        return this.DOM.tagName;
      }, s.default.XML.prototype.setName = function (e) {
        var t = this.DOM.innerHTML,
            r = this.DOM.attributes,
            n = document.implementation.createDocument(null, "default").createElement(e);
        n.innerHTML = t;

        for (var a = 0; a < r.length; a++) n.setAttribute(r[a].nodeName, r.nodeValue);

        this.DOM = n;
      }, s.default.XML.prototype.hasChildren = function () {
        return 0 < this.DOM.children.length;
      }, s.default.XML.prototype.listChildren = function () {
        for (var e = [], t = 0; t < this.DOM.childNodes.length; t++) e.push(this.DOM.childNodes[t].nodeName);

        return e;
      }, s.default.XML.prototype.getChildren = function (e) {
        return a(e ? this.DOM.getElementsByTagName(e) : this.DOM.children);
      }, s.default.XML.prototype.getChild = function (e) {
        if ("string" != typeof e) return new s.default.XML(this.DOM.children[e]);
        var t = !0,
            r = !1,
            n = void 0;

        try {
          for (var a, o = this.DOM.children[Symbol.iterator](); !(t = (a = o.next()).done); t = !0) {
            var i = a.value;
            if (i.tagName === e) return new s.default.XML(i);
          }
        } catch (e) {
          r = !0, n = e;
        } finally {
          try {
            t || null == o.return || o.return();
          } finally {
            if (r) throw n;
          }
        }
      }, s.default.XML.prototype.addChild = function (e) {
        e instanceof s.default.XML && this.DOM.appendChild(e.DOM);
      }, s.default.XML.prototype.removeChild = function (e) {
        var t = -1;

        if ("string" == typeof e) {
          for (var r = 0; r < this.DOM.children.length; r++) if (this.DOM.children[r].tagName === e) {
            t = r;
            break;
          }
        } else t = e;

        -1 !== t && this.DOM.removeChild(this.DOM.children[t]);
      }, s.default.XML.prototype.getAttributeCount = function () {
        return this.DOM.attributes.length;
      }, s.default.XML.prototype.listAttributes = function () {
        var e = [],
            t = !0,
            r = !1,
            n = void 0;

        try {
          for (var a, o = this.DOM.attributes[Symbol.iterator](); !(t = (a = o.next()).done); t = !0) {
            var i = a.value;
            e.push(i.nodeName);
          }
        } catch (e) {
          r = !0, n = e;
        } finally {
          try {
            t || null == o.return || o.return();
          } finally {
            if (r) throw n;
          }
        }

        return e;
      }, s.default.XML.prototype.hasAttribute = function (e) {
        var t = {},
            r = !0,
            n = !1,
            a = void 0;

        try {
          for (var o, i = this.DOM.attributes[Symbol.iterator](); !(r = (o = i.next()).done); r = !0) {
            var s = o.value;
            t[s.nodeName] = s.nodeValue;
          }
        } catch (e) {
          n = !0, a = e;
        } finally {
          try {
            r || null == i.return || i.return();
          } finally {
            if (n) throw a;
          }
        }

        return !!t[e];
      }, s.default.XML.prototype.getNum = function (e, t) {
        var r = {},
            n = !0,
            a = !1,
            o = void 0;

        try {
          for (var i, s = this.DOM.attributes[Symbol.iterator](); !(n = (i = s.next()).done); n = !0) {
            var l = i.value;
            r[l.nodeName] = l.nodeValue;
          }
        } catch (e) {
          a = !0, o = e;
        } finally {
          try {
            n || null == s.return || s.return();
          } finally {
            if (a) throw o;
          }
        }

        return Number(r[e]) || t || 0;
      }, s.default.XML.prototype.getString = function (e, t) {
        var r = {},
            n = !0,
            a = !1,
            o = void 0;

        try {
          for (var i, s = this.DOM.attributes[Symbol.iterator](); !(n = (i = s.next()).done); n = !0) {
            var l = i.value;
            r[l.nodeName] = l.nodeValue;
          }
        } catch (e) {
          a = !0, o = e;
        } finally {
          try {
            n || null == s.return || s.return();
          } finally {
            if (a) throw o;
          }
        }

        return r[e] ? String(r[e]) : t || null;
      }, s.default.XML.prototype.setAttribute = function (e, t) {
        this.DOM.setAttribute(e, t);
      }, s.default.XML.prototype.getContent = function (e) {
        return this.DOM.textContent.replace(/\s\s+/g, ",") || e || null;
      }, s.default.XML.prototype.setContent = function (e) {
        this.DOM.children.length || (this.DOM.textContent = e);
      }, s.default.XML.prototype.serialize = function () {
        return new XMLSerializer().serializeToString(this.DOM);
      };
      var o = s.default;
      r.default = o;
    }, {
      "../core/main": 32
    }],
    62: [function (e, t, r) {
      "use strict";

      Object.defineProperty(r, "__esModule", {
        value: !0
      }), r.default = void 0;
      var n,
          s = (n = e("../core/main")) && n.__esModule ? n : {
        default: n
      };

      function a() {
        if ("function" == typeof Math.hypot) return Math.hypot.apply(null, arguments);

        for (var e = arguments.length, t = [], r = 0, n = 0; n < e; n++) {
          var a = arguments[n];
          if ((a = +a) === 1 / 0 || a === -1 / 0) return 1 / 0;
          r < (a = Math.abs(a)) && (r = a), t[n] = a;
        }

        0 === r && (r = 1);

        for (var o = 0, i = 0, s = 0; s < e; s++) {
          var l = t[s] / r,
              p = l * l - i,
              u = o + p;
          i = u - o - p, o = u;
        }

        return Math.sqrt(o) * r;
      }

      s.default.prototype.abs = Math.abs, s.default.prototype.ceil = Math.ceil, s.default.prototype.constrain = function (e, t, r) {
        return s.default._validateParameters("constrain", arguments), Math.max(Math.min(e, r), t);
      }, s.default.prototype.dist = function () {
        for (var e = arguments.length, t = new Array(e), r = 0; r < e; r++) t[r] = arguments[r];

        return s.default._validateParameters("dist", t), 4 === t.length ? a(t[2] - t[0], t[3] - t[1]) : 6 === t.length ? a(t[3] - t[0], t[4] - t[1], t[5] - t[2]) : void 0;
      }, s.default.prototype.exp = Math.exp, s.default.prototype.floor = Math.floor, s.default.prototype.lerp = function (e, t, r) {
        return s.default._validateParameters("lerp", arguments), r * (t - e) + e;
      }, s.default.prototype.log = Math.log, s.default.prototype.mag = function (e, t) {
        return s.default._validateParameters("mag", arguments), a(e, t);
      }, s.default.prototype.map = function (e, t, r, n, a, o) {
        s.default._validateParameters("map", arguments);

        var i = (e - t) / (r - t) * (a - n) + n;
        return o ? n < a ? this.constrain(i, n, a) : this.constrain(i, a, n) : i;
      }, s.default.prototype.max = function () {
        for (var e = arguments.length, t = new Array(e), r = 0; r < e; r++) t[r] = arguments[r];

        return s.default._validateParameters("max", t), t[0] instanceof Array ? Math.max.apply(null, t[0]) : Math.max.apply(null, t);
      }, s.default.prototype.min = function () {
        for (var e = arguments.length, t = new Array(e), r = 0; r < e; r++) t[r] = arguments[r];

        return s.default._validateParameters("min", t), t[0] instanceof Array ? Math.min.apply(null, t[0]) : Math.min.apply(null, t);
      }, s.default.prototype.norm = function (e, t, r) {
        return s.default._validateParameters("norm", arguments), this.map(e, t, r, 0, 1);
      }, s.default.prototype.pow = Math.pow, s.default.prototype.round = function (e, t) {
        return t ? Number(Math.round(e + "e" + t) + "e-" + t) : Math.round(e);
      }, s.default.prototype.sq = function (e) {
        return e * e;
      }, s.default.prototype.sqrt = Math.sqrt, s.default.prototype.fract = function (e) {
        s.default._validateParameters("fract", arguments);

        var t = 0,
            r = Number(e);
        if (isNaN(r) || Math.abs(r) === 1 / 0) return r;
        if (r < 0 && (r = -r, t = 1), !String(r).includes(".") || String(r).includes("e")) return r < 1 ? Math.abs(t - r) : 0;
        var n = String(r);
        return n = Number("0" + n.slice(n.indexOf("."))), Math.abs(t - n);
      };
      var o = s.default;
      r.default = o;
    }, {
      "../core/main": 32
    }],
    63: [function (e, t, r) {
      "use strict";

      Object.defineProperty(r, "__esModule", {
        value: !0
      }), r.default = void 0;
      var n,
          a = (n = e("../core/main")) && n.__esModule ? n : {
        default: n
      };

      a.default.prototype.createVector = function (e, t, r) {
        return this instanceof a.default ? new a.default.Vector(this, arguments) : new a.default.Vector(e, t, r);
      };

      var o = a.default;
      r.default = o;
    }, {
      "../core/main": 32
    }],
    64: [function (e, t, r) {
      "use strict";

      Object.defineProperty(r, "__esModule", {
        value: !0
      }), r.default = void 0;
      var n,
          a = (n = e("../core/main")) && n.__esModule ? n : {
        default: n
      };

      function b(e) {
        return .5 * (1 - Math.cos(e * Math.PI));
      }

      var _,
          x = 4095,
          S = 4,
          w = .5;

      a.default.prototype.noise = function (e) {
        var t = 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : 0,
            r = 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : 0;

        if (null == _) {
          _ = new Array(4096);

          for (var n = 0; n < 4096; n++) _[n] = Math.random();
        }

        e < 0 && (e = -e), t < 0 && (t = -t), r < 0 && (r = -r);

        for (var a, o, i, s, l, p = Math.floor(e), u = Math.floor(t), c = Math.floor(r), d = e - p, h = t - u, m = r - c, f = 0, y = .5, g = 0; g < S; g++) {
          var v = p + (u << 4) + (c << 8);
          a = b(d), o = b(h), i = _[v & x], i += a * (_[v + 1 & x] - i), s = _[v + 16 & x], i += o * ((s += a * (_[v + 16 + 1 & x] - s)) - i), s = _[(v += 256) & x], s += a * (_[v + 1 & x] - s), l = _[v + 16 & x], s += o * ((l += a * (_[v + 16 + 1 & x] - l)) - s), f += (i += b(m) * (s - i)) * y, y *= w, p <<= 1, u <<= 1, c <<= 1, 1 <= (d *= 2) && (p++, d--), 1 <= (h *= 2) && (u++, h--), 1 <= (m *= 2) && (c++, m--);
        }

        return f;
      }, a.default.prototype.noiseDetail = function (e, t) {
        0 < e && (S = e), 0 < t && (w = t);
      }, a.default.prototype.noiseSeed = function (e) {
        var t,
            r,
            n,
            a = (n = 4294967296, {
          setSeed: function (e) {
            r = t = (null == e ? Math.random() * n : e) >>> 0;
          },
          getSeed: function () {
            return t;
          },
          rand: function () {
            return (r = (1664525 * r + 1013904223) % n) / n;
          }
        });
        a.setSeed(e), _ = new Array(4096);

        for (var o = 0; o < 4096; o++) _[o] = a.rand();
      };
      var o = a.default;
      r.default = o;
    }, {
      "../core/main": 32
    }],
    65: [function (e, t, r) {
      "use strict";

      function i(e) {
        return (i = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (e) {
          return typeof e;
        } : function (e) {
          return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e;
        })(e);
      }

      Object.defineProperty(r, "__esModule", {
        value: !0
      }), r.default = void 0;

      var n,
          l = (n = e("../core/main")) && n.__esModule ? n : {
        default: n
      },
          o = function (e) {
        if (e && e.__esModule) return e;
        if (null === e || "object" !== i(e) && "function" != typeof e) return {
          default: e
        };
        var t = s();
        if (t && t.has(e)) return t.get(e);
        var r = {},
            n = Object.defineProperty && Object.getOwnPropertyDescriptor;

        for (var a in e) if (Object.prototype.hasOwnProperty.call(e, a)) {
          var o = n ? Object.getOwnPropertyDescriptor(e, a) : null;
          o && (o.get || o.set) ? Object.defineProperty(r, a, o) : r[a] = e[a];
        }

        r.default = e, t && t.set(e, r);
        return r;
      }(e("../core/constants"));

      function s() {
        if ("function" != typeof WeakMap) return null;
        var e = new WeakMap();
        return s = function () {
          return e;
        }, e;
      }

      l.default.Vector = function (e, t, r) {
        var n, a, o;
        o = e instanceof l.default ? (this.p5 = e, n = t[0] || 0, a = t[1] || 0, t[2] || 0) : (n = e || 0, a = t || 0, r || 0), this.x = n, this.y = a, this.z = o;
      }, l.default.Vector.prototype.toString = function () {
        return "p5.Vector Object : [".concat(this.x, ", ").concat(this.y, ", ").concat(this.z, "]");
      }, l.default.Vector.prototype.set = function (e, t, r) {
        return e instanceof l.default.Vector ? (this.x = e.x || 0, this.y = e.y || 0, this.z = e.z || 0) : e instanceof Array ? (this.x = e[0] || 0, this.y = e[1] || 0, this.z = e[2] || 0) : (this.x = e || 0, this.y = t || 0, this.z = r || 0), this;
      }, l.default.Vector.prototype.copy = function () {
        return this.p5 ? new l.default.Vector(this.p5, [this.x, this.y, this.z]) : new l.default.Vector(this.x, this.y, this.z);
      }, l.default.Vector.prototype.add = function (e, t, r) {
        return e instanceof l.default.Vector ? (this.x += e.x || 0, this.y += e.y || 0, this.z += e.z || 0) : e instanceof Array ? (this.x += e[0] || 0, this.y += e[1] || 0, this.z += e[2] || 0) : (this.x += e || 0, this.y += t || 0, this.z += r || 0), this;
      };

      function p(e, t) {
        return 0 !== e && (this.x = this.x % e), 0 !== t && (this.y = this.y % t), this;
      }

      function u(e, t, r) {
        return 0 !== e && (this.x = this.x % e), 0 !== t && (this.y = this.y % t), 0 !== r && (this.z = this.z % r), this;
      }

      l.default.Vector.prototype.rem = function (e, t, r) {
        if (e instanceof l.default.Vector) {
          if (Number.isFinite(e.x) && Number.isFinite(e.y) && Number.isFinite(e.z)) {
            var n = parseFloat(e.x),
                a = parseFloat(e.y),
                o = parseFloat(e.z);
            u.call(this, n, a, o);
          }
        } else if (e instanceof Array) e.every(function (e) {
          return Number.isFinite(e);
        }) && (2 === e.length && p.call(this, e[0], e[1]), 3 === e.length && u.call(this, e[0], e[1], e[2]));else if (1 === arguments.length) {
          if (Number.isFinite(e) && 0 !== e) return this.x = this.x % e, this.y = this.y % e, this.z = this.z % e, this;
        } else if (2 === arguments.length) {
          var i = Array.prototype.slice.call(arguments);
          i.every(function (e) {
            return Number.isFinite(e);
          }) && 2 === i.length && p.call(this, i[0], i[1]);
        } else if (3 === arguments.length) {
          var s = Array.prototype.slice.call(arguments);
          s.every(function (e) {
            return Number.isFinite(e);
          }) && 3 === s.length && u.call(this, s[0], s[1], s[2]);
        }
      }, l.default.Vector.prototype.sub = function (e, t, r) {
        return e instanceof l.default.Vector ? (this.x -= e.x || 0, this.y -= e.y || 0, this.z -= e.z || 0) : e instanceof Array ? (this.x -= e[0] || 0, this.y -= e[1] || 0, this.z -= e[2] || 0) : (this.x -= e || 0, this.y -= t || 0, this.z -= r || 0), this;
      }, l.default.Vector.prototype.mult = function (e, t, r) {
        if (e instanceof l.default.Vector) return Number.isFinite(e.x) && Number.isFinite(e.y) && Number.isFinite(e.z) && "number" == typeof e.x && "number" == typeof e.y && "number" == typeof e.z ? (this.x *= e.x, this.y *= e.y, this.z *= e.z) : console.warn("p5.Vector.prototype.mult:", "x contains components that are either undefined or not finite numbers"), this;
        if (e instanceof Array) return e.every(function (e) {
          return Number.isFinite(e);
        }) && e.every(function (e) {
          return "number" == typeof e;
        }) ? 1 === e.length ? (this.x *= e[0], this.y *= e[0], this.z *= e[0]) : 2 === e.length ? (this.x *= e[0], this.y *= e[1]) : 3 === e.length && (this.x *= e[0], this.y *= e[1], this.z *= e[2]) : console.warn("p5.Vector.prototype.mult:", "x contains elements that are either undefined or not finite numbers"), this;
        var n = Array.prototype.slice.call(arguments);
        return n.every(function (e) {
          return Number.isFinite(e);
        }) && n.every(function (e) {
          return "number" == typeof e;
        }) ? (1 === arguments.length && (this.x *= e, this.y *= e, this.z *= e), 2 === arguments.length && (this.x *= e, this.y *= t), 3 === arguments.length && (this.x *= e, this.y *= t, this.z *= r)) : console.warn("p5.Vector.prototype.mult:", "x, y, or z arguments are either undefined or not a finite number"), this;
      }, l.default.Vector.prototype.div = function (e, t, r) {
        if (e instanceof l.default.Vector) {
          if (Number.isFinite(e.x) && Number.isFinite(e.y) && Number.isFinite(e.z) && "number" == typeof e.x && "number" == typeof e.y && "number" == typeof e.z) {
            if (0 === e.x || 0 === e.y || 0 === e.z) return console.warn("p5.Vector.prototype.div:", "divide by 0"), this;
            this.x /= e.x, this.y /= e.y, this.z /= e.z;
          } else console.warn("p5.Vector.prototype.div:", "x contains components that are either undefined or not finite numbers");

          return this;
        }

        if (e instanceof Array) {
          if (e.every(function (e) {
            return Number.isFinite(e);
          }) && e.every(function (e) {
            return "number" == typeof e;
          })) {
            if (e.some(function (e) {
              return 0 === e;
            })) return console.warn("p5.Vector.prototype.div:", "divide by 0"), this;
            1 === e.length ? (this.x /= e[0], this.y /= e[0], this.z /= e[0]) : 2 === e.length ? (this.x /= e[0], this.y /= e[1]) : 3 === e.length && (this.x /= e[0], this.y /= e[1], this.z /= e[2]);
          } else console.warn("p5.Vector.prototype.div:", "x contains components that are either undefined or not finite numbers");

          return this;
        }

        var n = Array.prototype.slice.call(arguments);

        if (n.every(function (e) {
          return Number.isFinite(e);
        }) && n.every(function (e) {
          return "number" == typeof e;
        })) {
          if (n.some(function (e) {
            return 0 === e;
          })) return console.warn("p5.Vector.prototype.div:", "divide by 0"), this;
          1 === arguments.length && (this.x /= e, this.y /= e, this.z /= e), 2 === arguments.length && (this.x /= e, this.y /= t), 3 === arguments.length && (this.x /= e, this.y /= t, this.z /= r);
        } else console.warn("p5.Vector.prototype.div:", "x, y, or z arguments are either undefined or not a finite number");

        return this;
      }, l.default.Vector.prototype.mag = function () {
        return Math.sqrt(this.magSq());
      }, l.default.Vector.prototype.magSq = function () {
        var e = this.x,
            t = this.y,
            r = this.z;
        return e * e + t * t + r * r;
      }, l.default.Vector.prototype.dot = function (e, t, r) {
        return e instanceof l.default.Vector ? this.dot(e.x, e.y, e.z) : this.x * (e || 0) + this.y * (t || 0) + this.z * (r || 0);
      }, l.default.Vector.prototype.cross = function (e) {
        var t = this.y * e.z - this.z * e.y,
            r = this.z * e.x - this.x * e.z,
            n = this.x * e.y - this.y * e.x;
        return this.p5 ? new l.default.Vector(this.p5, [t, r, n]) : new l.default.Vector(t, r, n);
      }, l.default.Vector.prototype.dist = function (e) {
        return e.copy().sub(this).mag();
      }, l.default.Vector.prototype.normalize = function () {
        var e = this.mag();
        return 0 !== e && this.mult(1 / e), this;
      }, l.default.Vector.prototype.limit = function (e) {
        var t = this.magSq();
        return e * e < t && this.div(Math.sqrt(t)).mult(e), this;
      }, l.default.Vector.prototype.setMag = function (e) {
        return this.normalize().mult(e);
      }, l.default.Vector.prototype.heading = function () {
        var e = Math.atan2(this.y, this.x);
        return this.p5 ? this.p5._fromRadians(e) : e;
      }, l.default.Vector.prototype.rotate = function (e) {
        var t = this.heading() + e;
        this.p5 && (t = this.p5._toRadians(t));
        var r = this.mag();
        return this.x = Math.cos(t) * r, this.y = Math.sin(t) * r, this;
      }, l.default.Vector.prototype.angleBetween = function (e) {
        var t,
            r = this.dot(e) / (this.mag() * e.mag());
        return t = Math.acos(Math.min(1, Math.max(-1, r))), t *= Math.sign(this.cross(e).z || 1), this.p5 && (t = this.p5._fromRadians(t)), t;
      }, l.default.Vector.prototype.lerp = function (e, t, r, n) {
        return e instanceof l.default.Vector ? this.lerp(e.x, e.y, e.z, t) : (this.x += (e - this.x) * n || 0, this.y += (t - this.y) * n || 0, this.z += (r - this.z) * n || 0, this);
      }, l.default.Vector.prototype.reflect = function (e) {
        return e.normalize(), this.sub(e.mult(2 * this.dot(e)));
      }, l.default.Vector.prototype.array = function () {
        return [this.x || 0, this.y || 0, this.z || 0];
      }, l.default.Vector.prototype.equals = function (e, t, r) {
        var n, a, o;
        return o = e instanceof l.default.Vector ? (n = e.x || 0, a = e.y || 0, e.z || 0) : e instanceof Array ? (n = e[0] || 0, a = e[1] || 0, e[2] || 0) : (n = e || 0, a = t || 0, r || 0), this.x === n && this.y === a && this.z === o;
      }, l.default.Vector.fromAngle = function (e, t) {
        return void 0 === t && (t = 1), new l.default.Vector(t * Math.cos(e), t * Math.sin(e), 0);
      }, l.default.Vector.fromAngles = function (e, t, r) {
        void 0 === r && (r = 1);
        var n = Math.cos(t),
            a = Math.sin(t),
            o = Math.cos(e),
            i = Math.sin(e);
        return new l.default.Vector(r * i * a, -r * o, r * i * n);
      }, l.default.Vector.random2D = function () {
        return this.fromAngle(Math.random() * o.TWO_PI);
      }, l.default.Vector.random3D = function () {
        var e = Math.random() * o.TWO_PI,
            t = 2 * Math.random() - 1,
            r = Math.sqrt(1 - t * t),
            n = r * Math.cos(e),
            a = r * Math.sin(e);
        return new l.default.Vector(n, a, t);
      }, l.default.Vector.add = function (e, t, r) {
        return r ? r.set(e) : (r = e.copy(), 3 === arguments.length && l.default._friendlyError("The target parameter is undefined, it should be of type p5.Vector", "p5.Vector.add")), r.add(t), r;
      }, l.default.Vector.rem = function (e, t) {
        if (e instanceof l.default.Vector && t instanceof l.default.Vector) {
          var r = e.copy();
          return r.rem(t), r;
        }
      }, l.default.Vector.sub = function (e, t, r) {
        return r ? r.set(e) : (r = e.copy(), 3 === arguments.length && l.default._friendlyError("The target parameter is undefined, it should be of type p5.Vector", "p5.Vector.sub")), r.sub(t), r;
      }, l.default.Vector.mult = function (e, t, r) {
        return r ? r.set(e) : (r = e.copy(), 3 === arguments.length && l.default._friendlyError("The target parameter is undefined, it should be of type p5.Vector", "p5.Vector.mult")), r.mult(t), r;
      }, l.default.Vector.div = function (e, t, r) {
        return r ? r.set(e) : (r = e.copy(), 3 === arguments.length && l.default._friendlyError("The target parameter is undefined, it should be of type p5.Vector", "p5.Vector.div")), r.div(t), r;
      }, l.default.Vector.dot = function (e, t) {
        return e.dot(t);
      }, l.default.Vector.cross = function (e, t) {
        return e.cross(t);
      }, l.default.Vector.dist = function (e, t) {
        return e.dist(t);
      }, l.default.Vector.lerp = function (e, t, r, n) {
        return n ? n.set(e) : (n = e.copy(), 4 === arguments.length && l.default._friendlyError("The target parameter is undefined, it should be of type p5.Vector", "p5.Vector.lerp")), n.lerp(t, r), n;
      }, l.default.Vector.mag = function (e) {
        var t = e.x,
            r = e.y,
            n = e.z,
            a = t * t + r * r + n * n;
        return Math.sqrt(a);
      };
      var a = l.default.Vector;
      r.default = a;
    }, {
      "../core/constants": 22,
      "../core/main": 32
    }],
    66: [function (e, t, r) {
      "use strict";

      Object.defineProperty(r, "__esModule", {
        value: !0
      }), r.default = void 0;
      var n,
          a = (n = e("../core/main")) && n.__esModule ? n : {
        default: n
      };
      var o = "_lcg_random_state",
          i = 4294967296,
          s = 0;
      a.default.prototype._lcg = function (e) {
        return this[e] = (1664525 * this[e] + 1013904223) % i, this[e] / i;
      }, a.default.prototype._lcgSetSeed = function (e, t) {
        this[e] = (null == t ? Math.random() * i : t) >>> 0;
      }, a.default.prototype.randomSeed = function (e) {
        this._lcgSetSeed(o, e), this._gaussian_previous = !1;
      }, a.default.prototype.random = function (e, t) {
        var r;
        if (a.default._validateParameters("random", arguments), r = null != this[o] ? this._lcg(o) : Math.random(), void 0 === e) return r;
        if (void 0 === t) return e instanceof Array ? e[Math.floor(r * e.length)] : r * e;

        if (t < e) {
          var n = e;
          e = t, t = n;
        }

        return r * (t - e) + e;
      }, a.default.prototype.randomGaussian = function (e, t) {
        var r, n, a, o;
        if (this._gaussian_previous) r = s, this._gaussian_previous = !1;else {
          for (; 1 <= (o = (n = this.random(2) - 1) * n + (a = this.random(2) - 1) * a););

          r = n * (o = Math.sqrt(-2 * Math.log(o) / o)), s = a * o, this._gaussian_previous = !0;
        }
        return r * (t || 1) + (e || 0);
      };
      var l = a.default;
      r.default = l;
    }, {
      "../core/main": 32
    }],
    67: [function (e, t, r) {
      "use strict";

      function i(e) {
        return (i = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (e) {
          return typeof e;
        } : function (e) {
          return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e;
        })(e);
      }

      Object.defineProperty(r, "__esModule", {
        value: !0
      }), r.default = void 0;

      var n,
          a = (n = e("../core/main")) && n.__esModule ? n : {
        default: n
      },
          o = function (e) {
        if (e && e.__esModule) return e;
        if (null === e || "object" !== i(e) && "function" != typeof e) return {
          default: e
        };
        var t = s();
        if (t && t.has(e)) return t.get(e);
        var r = {},
            n = Object.defineProperty && Object.getOwnPropertyDescriptor;

        for (var a in e) if (Object.prototype.hasOwnProperty.call(e, a)) {
          var o = n ? Object.getOwnPropertyDescriptor(e, a) : null;
          o && (o.get || o.set) ? Object.defineProperty(r, a, o) : r[a] = e[a];
        }

        r.default = e, t && t.set(e, r);
        return r;
      }(e("../core/constants"));

      function s() {
        if ("function" != typeof WeakMap) return null;
        var e = new WeakMap();
        return s = function () {
          return e;
        }, e;
      }

      a.default.prototype._angleMode = o.RADIANS, a.default.prototype.acos = function (e) {
        return this._fromRadians(Math.acos(e));
      }, a.default.prototype.asin = function (e) {
        return this._fromRadians(Math.asin(e));
      }, a.default.prototype.atan = function (e) {
        return this._fromRadians(Math.atan(e));
      }, a.default.prototype.atan2 = function (e, t) {
        return this._fromRadians(Math.atan2(e, t));
      }, a.default.prototype.cos = function (e) {
        return Math.cos(this._toRadians(e));
      }, a.default.prototype.sin = function (e) {
        return Math.sin(this._toRadians(e));
      }, a.default.prototype.tan = function (e) {
        return Math.tan(this._toRadians(e));
      }, a.default.prototype.degrees = function (e) {
        return e * o.RAD_TO_DEG;
      }, a.default.prototype.radians = function (e) {
        return e * o.DEG_TO_RAD;
      }, a.default.prototype.angleMode = function (e) {
        e !== o.DEGREES && e !== o.RADIANS || (this._angleMode = e);
      }, a.default.prototype._toRadians = function (e) {
        return this._angleMode === o.DEGREES ? e * o.DEG_TO_RAD : e;
      }, a.default.prototype._toDegrees = function (e) {
        return this._angleMode === o.RADIANS ? e * o.RAD_TO_DEG : e;
      }, a.default.prototype._fromRadians = function (e) {
        return this._angleMode === o.DEGREES ? e * o.RAD_TO_DEG : e;
      };
      var l = a.default;
      r.default = l;
    }, {
      "../core/constants": 22,
      "../core/main": 32
    }],
    68: [function (e, t, r) {
      "use strict";

      Object.defineProperty(r, "__esModule", {
        value: !0
      }), r.default = void 0;
      var n,
          a = (n = e("../core/main")) && n.__esModule ? n : {
        default: n
      };
      a.default.prototype.textAlign = function (e, t) {
        var r;
        return a.default._validateParameters("textAlign", arguments), (r = this._renderer).textAlign.apply(r, arguments);
      }, a.default.prototype.textLeading = function (e) {
        var t;
        return a.default._validateParameters("textLeading", arguments), (t = this._renderer).textLeading.apply(t, arguments);
      }, a.default.prototype.textSize = function (e) {
        var t;
        return a.default._validateParameters("textSize", arguments), (t = this._renderer).textSize.apply(t, arguments);
      }, a.default.prototype.textStyle = function (e) {
        var t;
        return a.default._validateParameters("textStyle", arguments), (t = this._renderer).textStyle.apply(t, arguments);
      }, a.default.prototype.textWidth = function () {
        for (var e, t = arguments.length, r = new Array(t), n = 0; n < t; n++) r[n] = arguments[n];

        return r[0] += "", a.default._validateParameters("textWidth", r), 0 === r[0].length ? 0 : (e = this._renderer).textWidth.apply(e, r);
      }, a.default.prototype.textAscent = function () {
        for (var e = arguments.length, t = new Array(e), r = 0; r < e; r++) t[r] = arguments[r];

        return a.default._validateParameters("textAscent", t), this._renderer.textAscent();
      }, a.default.prototype.textDescent = function () {
        for (var e = arguments.length, t = new Array(e), r = 0; r < e; r++) t[r] = arguments[r];

        return a.default._validateParameters("textDescent", t), this._renderer.textDescent();
      }, a.default.prototype._updateTextMetrics = function () {
        return this._renderer._updateTextMetrics();
      };
      var o = a.default;
      r.default = o;
    }, {
      "../core/main": 32
    }],
    69: [function (e, t, r) {
      "use strict";

      function i(e) {
        return (i = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (e) {
          return typeof e;
        } : function (e) {
          return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e;
        })(e);
      }

      Object.defineProperty(r, "__esModule", {
        value: !0
      }), r.default = void 0;
      var n,
          d = (n = e("../core/main")) && n.__esModule ? n : {
        default: n
      },
          a = l(e("../core/constants")),
          o = l(e("opentype.js"));

      function s() {
        if ("function" != typeof WeakMap) return null;
        var e = new WeakMap();
        return s = function () {
          return e;
        }, e;
      }

      function l(e) {
        if (e && e.__esModule) return e;
        if (null === e || "object" !== i(e) && "function" != typeof e) return {
          default: e
        };
        var t = s();
        if (t && t.has(e)) return t.get(e);
        var r = {},
            n = Object.defineProperty && Object.getOwnPropertyDescriptor;

        for (var a in e) if (Object.prototype.hasOwnProperty.call(e, a)) {
          var o = n ? Object.getOwnPropertyDescriptor(e, a) : null;
          o && (o.get || o.set) ? Object.defineProperty(r, a, o) : r[a] = e[a];
        }

        return r.default = e, t && t.set(e, r), r;
      }

      e("../core/friendly_errors/validate_params"), e("../core/friendly_errors/file_errors"), e("../core/friendly_errors/fes_core"), d.default.prototype.loadFont = function (s, l, p) {
        d.default._validateParameters("loadFont", arguments);

        var u = new d.default.Font(this),
            c = this;
        return o.load(s, function (e, t) {
          if (e) return d.default._friendlyFileLoadError(4, s), void 0 !== p ? p(e) : void console.error(e, s);
          u.font = t, void 0 !== l && l(u), c._decrementPreload();
          var r,
              n,
              a = s.split("\\").pop().split("/").pop(),
              o = a.lastIndexOf("."),
              i = o < 1 ? null : a.substr(o + 1);
          ["ttf", "otf", "woff", "woff2"].includes(i) && (r = a.substr(0, o), (n = document.createElement("style")).appendChild(document.createTextNode("\n@font-face {\nfont-family: ".concat(r, ";\nsrc: url(").concat(s, ");\n}\n"))), document.head.appendChild(n));
        }), u;
      }, d.default.prototype.text = function (e, t, r, n, a) {
        var o;
        return d.default._validateParameters("text", arguments), this._renderer._doFill || this._renderer._doStroke ? (o = this._renderer).text.apply(o, arguments) : this;
      }, d.default.prototype.textFont = function (e, t) {
        if (d.default._validateParameters("textFont", arguments), arguments.length) {
          if (!e) throw new Error("null font passed to textFont");
          return this._renderer._setProperty("_textFont", e), t && (this._renderer._setProperty("_textSize", t), this._renderer._setProperty("_textLeading", t * a._DEFAULT_LEADMULT)), this._renderer._applyTextProperties();
        }

        return this._renderer._textFont;
      };
      var p = d.default;
      r.default = p;
    }, {
      "../core/constants": 22,
      "../core/friendly_errors/fes_core": 24,
      "../core/friendly_errors/file_errors": 25,
      "../core/friendly_errors/validate_params": 27,
      "../core/main": 32,
      "opentype.js": 13
    }],
    70: [function (e, t, r) {
      "use strict";

      Object.defineProperty(r, "__esModule", {
        value: !0
      }), r.default = void 0;

      var n,
          a = (n = e("../core/main")) && n.__esModule ? n : {
        default: n
      },
          x = function (e) {
        if (e && e.__esModule) return e;
        if (null === e || "object" !== h(e) && "function" != typeof e) return {
          default: e
        };
        var t = i();
        if (t && t.has(e)) return t.get(e);
        var r = {},
            n = Object.defineProperty && Object.getOwnPropertyDescriptor;

        for (var a in e) if (Object.prototype.hasOwnProperty.call(e, a)) {
          var o = n ? Object.getOwnPropertyDescriptor(e, a) : null;
          o && (o.get || o.set) ? Object.defineProperty(r, a, o) : r[a] = e[a];
        }

        r.default = e, t && t.set(e, r);
        return r;
      }(e("../core/constants"));

      function i() {
        if ("function" != typeof WeakMap) return null;
        var e = new WeakMap();
        return i = function () {
          return e;
        }, e;
      }

      function h(e) {
        return (h = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (e) {
          return typeof e;
        } : function (e) {
          return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e;
        })(e);
      }

      function m(e, t) {
        for (var r = function (e, t) {
          if ("object" !== h(e)) e = t;else for (var r in t) void 0 === e[r] && (e[r] = t[r]);
          return e;
        }(t, {
          sampleFactor: .1,
          simplifyThreshold: 0
        }), n = l(e, 0, 1), a = n / (n * r.sampleFactor), o = [], i = 0; i < n; i += a) o.push(l(e, i));

        return r.simplifyThreshold && function (e) {
          for (var t = 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : 0, r = 0, n = e.length - 1; 3 < e.length && 0 <= n; --n) d(s(e, n - 1), s(e, n), s(e, n + 1), t) && (e.splice(n % e.length, 1), r++);
        }(o, r.simplifyThreshold), o;
      }

      function f(e) {
        for (var t, r = [], n = 0; n < e.length; n++) "M" === e[n].type && (t && r.push(t), t = []), t.push(o(e[n]));

        return r.push(t), r;
      }

      function o(e) {
        var t = [e.type];
        return "M" === e.type || "L" === e.type ? t.push(e.x, e.y) : "C" === e.type ? t.push(e.x1, e.y1, e.x2, e.y2, e.x, e.y) : "Q" === e.type && t.push(e.x1, e.y1, e.x, e.y), t;
      }

      function s(e, t) {
        var r = e.length;
        return e[t < 0 ? t % r + r : t % r];
      }

      function d(e, t, r, n) {
        if (!n) return 0 == (a = e, i = r, ((o = t)[0] - a[0]) * (i[1] - a[1]) - (i[0] - a[0]) * (o[1] - a[1]));
        var a, o, i;
        void 0 === d.tmpPoint1 && (d.tmpPoint1 = [], d.tmpPoint2 = []);
        var s = d.tmpPoint1,
            l = d.tmpPoint2;
        s.x = t.x - e.x, s.y = t.y - e.y, l.x = r.x - t.x, l.y = r.y - t.y;
        var p = s.x * l.x + s.y * l.y,
            u = Math.sqrt(s.x * s.x + s.y * s.y),
            c = Math.sqrt(l.x * l.x + l.y * l.y);
        return Math.acos(p / (u * c)) < n;
      }

      function c(e, t, r, n, a, o, i, s, l) {
        var p = 1 - l,
            u = Math.pow(p, 3),
            c = Math.pow(p, 2),
            d = l * l,
            h = d * l,
            m = u * e + 3 * c * l * r + 3 * p * l * l * a + h * i,
            f = u * t + 3 * c * l * n + 3 * p * l * l * o + h * s,
            y = e + 2 * l * (r - e) + d * (a - 2 * r + e),
            g = t + 2 * l * (n - t) + d * (o - 2 * n + t),
            v = r + 2 * l * (a - r) + d * (i - 2 * a + r),
            b = n + 2 * l * (o - n) + d * (s - 2 * o + n),
            _ = p * e + l * r,
            x = p * t + l * n,
            S = p * a + l * i,
            w = p * o + l * s,
            M = 90 - 180 * Math.atan2(y - v, g - b) / Math.PI;

        return (v < y || g < b) && (M += 180), {
          x: m,
          y: f,
          m: {
            x: y,
            y: g
          },
          n: {
            x: v,
            y: b
          },
          start: {
            x: _,
            y: x
          },
          end: {
            x: S,
            y: w
          },
          alpha: M
        };
      }

      function y(e, t, r, n, a, o, i, s, l) {
        return null == l ? g(e, t, r, n, a, o, i, s) : c(e, t, r, n, a, o, i, s, function (e, t, r, n, a, o, i, s, l) {
          if (l < 0 || g(e, t, r, n, a, o, i, s) < l) return;
          var p,
              u = .5,
              c = 1 - u;
          p = g(e, t, r, n, a, o, i, s, c);

          for (; .01 < Math.abs(p - l);) p = g(e, t, r, n, a, o, i, s, c += (p < l ? 1 : -1) * (u /= 2));

          return c;
        }(e, t, r, n, a, o, i, s, l));
      }

      function l(e, t, r) {
        for (var n, a, o, i, s, l = 0, p = 0, u = (e = function (e, t) {
          function r(e, t, r) {
            var n, a;
            if (!e) return ["C", t.x, t.y, t.x, t.y, t.x, t.y];

            switch ((e[0] in {
              T: 1,
              Q: 1
            }) || (t.qx = t.qy = null), e[0]) {
              case "M":
                t.X = e[1], t.Y = e[2];
                break;

              case "A":
                e = ["C"].concat(function e(t, r, n, a, o, i, s, l, p, u) {
                  var c = Math.PI;
                  var d = 120 * c / 180;
                  var h;
                  var m;
                  var f;
                  var y;
                  var g = c / 180 * (+o || 0);
                  var v = [];
                  var b;

                  var _ = function (e, t, r) {
                    var n = e * Math.cos(r) - t * Math.sin(r),
                        a = e * Math.sin(r) + t * Math.cos(r);
                    return {
                      x: n,
                      y: a
                    };
                  };

                  if (u) h = u[0], m = u[1], f = u[2], y = u[3];else {
                    b = _(t, r, -g), t = b.x, r = b.y, b = _(l, p, -g), l = b.x, p = b.y;
                    var x = (t - l) / 2,
                        S = (r - p) / 2,
                        w = x * x / (n * n) + S * S / (a * a);
                    1 < w && (w = Math.sqrt(w), n *= w, a *= w);
                    var M = n * n,
                        E = a * a,
                        T = (i === s ? -1 : 1) * Math.sqrt(Math.abs((M * E - M * S * S - E * x * x) / (M * S * S + E * x * x)));
                    f = T * n * S / a + (t + l) / 2, y = T * -a * x / n + (r + p) / 2, h = Math.asin(((r - y) / a).toFixed(9)), m = Math.asin(((p - y) / a).toFixed(9)), (h = t < f ? c - h : h) < 0 && (h = 2 * c + h), (m = l < f ? c - m : m) < 0 && (m = 2 * c + m), s && m < h && (h -= 2 * c), !s && h < m && (m -= 2 * c);
                  }
                  var C = m - h;

                  if (Math.abs(C) > d) {
                    var N = m,
                        O = l,
                        L = p;
                    m = h + d * (s && h < m ? 1 : -1), l = f + n * Math.cos(m), p = y + a * Math.sin(m), v = e(l, p, n, a, o, 0, s, O, L, [m, N, f, y]);
                  }

                  C = m - h;
                  var I = Math.cos(h),
                      P = Math.sin(h),
                      R = Math.cos(m),
                      D = Math.sin(m),
                      A = Math.tan(C / 4),
                      k = 4 / 3 * n * A,
                      F = 4 / 3 * a * A,
                      U = [t, r],
                      B = [t + k * P, r - F * I],
                      G = [l + k * D, p - F * R],
                      j = [l, p];
                  B[0] = 2 * U[0] - B[0];
                  B[1] = 2 * U[1] - B[1];
                  {
                    if (u) return [B, G, j].concat(v);
                    v = [B, G, j].concat(v).join().split(",");

                    for (var V = [], z = 0, H = v.length; z < H; z++) V[z] = z % 2 ? _(v[z - 1], v[z], g).y : _(v[z], v[z + 1], g).x;

                    return V;
                  }
                }.apply(0, [t.x, t.y].concat(e.slice(1))));
                break;

              case "S":
                a = "C" === r || "S" === r ? (n = 2 * t.x - t.bx, 2 * t.y - t.by) : (n = t.x, t.y), e = ["C", n, a].concat(e.slice(1));
                break;

              case "T":
                "Q" === r || "T" === r ? (t.qx = 2 * t.x - t.qx, t.qy = 2 * t.y - t.qy) : (t.qx = t.x, t.qy = t.y), e = ["C"].concat(w(t.x, t.y, t.qx, t.qy, e[1], e[2]));
                break;

              case "Q":
                t.qx = e[1], t.qy = e[2], e = ["C"].concat(w(t.x, t.y, e[1], e[2], e[3], e[4]));
                break;

              case "L":
                e = ["C"].concat(S(t.x, t.y, e[1], e[2]));
                break;

              case "H":
                e = ["C"].concat(S(t.x, t.y, e[1], t.y));
                break;

              case "V":
                e = ["C"].concat(S(t.x, t.y, t.x, e[1]));
                break;

              case "Z":
                e = ["C"].concat(S(t.x, t.y, t.X, t.Y));
            }

            return e;
          }

          function n(e, t) {
            if (7 < e[t].length) {
              e[t].shift();

              for (var r = e[t]; r.length;) u[t] = "A", s && (c[t] = "A"), e.splice(t++, 0, ["C"].concat(r.splice(0, 6)));

              e.splice(t, 1), o = Math.max(i.length, s && s.length || 0);
            }
          }

          function a(e, t, r, n, a) {
            e && t && "M" === e[a][0] && "M" !== t[a][0] && (t.splice(a, 0, ["M", n.x, n.y]), r.bx = 0, r.by = 0, r.x = e[a][1], r.y = e[a][2], o = Math.max(i.length, s && s.length || 0));
          }

          var o,
              i = b(e),
              s = t && b(t),
              l = {
            x: 0,
            y: 0,
            bx: 0,
            by: 0,
            X: 0,
            Y: 0,
            qx: null,
            qy: null
          },
              p = {
            x: 0,
            y: 0,
            bx: 0,
            by: 0,
            X: 0,
            Y: 0,
            qx: null,
            qy: null
          },
              u = [],
              c = [],
              d = "",
              h = "";
          o = Math.max(i.length, s && s.length || 0);

          for (var m = 0; m < o; m++) {
            i[m] && (d = i[m][0]), "C" !== d && (u[m] = d, m && (h = u[m - 1])), i[m] = r(i[m], l, h), "A" !== u[m] && "C" === d && (u[m] = "C"), n(i, m), s && (s[m] && (d = s[m][0]), "C" !== d && (c[m] = d, m && (h = c[m - 1])), s[m] = r(s[m], p, h), "A" !== c[m] && "C" === d && (c[m] = "C"), n(s, m)), a(i, s, l, p, m), a(s, i, p, l, m);
            var f = i[m],
                y = s && s[m],
                g = f.length,
                v = s && y.length;
            l.x = f[g - 2], l.y = f[g - 1], l.bx = parseFloat(f[g - 4]) || l.x, l.by = parseFloat(f[g - 3]) || l.y, p.bx = s && (parseFloat(y[v - 4]) || p.x), p.by = s && (parseFloat(y[v - 3]) || p.y), p.x = s && y[v - 2], p.y = s && y[v - 1];
          }

          return s ? [i, s] : i;
        }(e)).length; p < u; p++) {
          if ("M" === (o = e[p])[0]) n = +o[1], a = +o[2];else {
            if (t < l + (i = y(n, a, o[1], o[2], o[3], o[4], o[5], o[6])) && !r) return {
              x: (s = y(n, a, o[1], o[2], o[3], o[4], o[5], o[6], t - l)).x,
              y: s.y,
              alpha: s.alpha
            };
            l += i, n = +o[5], a = +o[6];
          }
          o.shift() + o;
        }

        return (s = r ? l : c(n, a, o[0], o[1], o[2], o[3], o[4], o[5], 1)).alpha && (s = {
          x: s.x,
          y: s.y,
          alpha: s.alpha
        }), s;
      }

      function b(e) {
        var t,
            r = [],
            n = 0,
            a = 0,
            o = 0,
            i = 0,
            s = 0;
        if (!e) return r;
        "M" === e[0][0] && (o = n = +e[0][1], i = a = +e[0][2], s++, r[0] = ["M", n, a]);

        for (var l, p, u = 3 === e.length && "M" === e[0][0] && "R" === e[1][0].toUpperCase() && "Z" === e[2][0].toUpperCase(), c = s, d = e.length; c < d; c++) {
          if (r.push(l = []), (p = e[c])[0] !== String.prototype.toUpperCase.call(p[0])) switch (l[0] = String.prototype.toUpperCase.call(p[0]), l[0]) {
            case "A":
              l[1] = p[1], l[2] = p[2], l[3] = p[3], l[4] = p[4], l[5] = p[5], l[6] = +(p[6] + n), l[7] = +(p[7] + a);
              break;

            case "V":
              l[1] = +p[1] + a;
              break;

            case "H":
              l[1] = +p[1] + n;
              break;

            case "R":
              for (var h = 2, m = (t = [n, a].concat(p.slice(1))).length; h < m; h++) t[h] = +t[h] + n, t[++h] = +t[h] + a;

              r.pop(), r = r.concat(_(t, u));
              break;

            case "M":
              o = +p[1] + n, i = +p[2] + a;
              break;

            default:
              for (var f = 1, y = p.length; f < y; f++) l[f] = +p[f] + (f % 2 ? n : a);

          } else if ("R" === p[0]) t = [n, a].concat(p.slice(1)), r.pop(), r = r.concat(_(t, u)), l = ["R"].concat(p.slice(-2));else for (var g = 0, v = p.length; g < v; g++) l[g] = p[g];

          switch (l[0]) {
            case "Z":
              n = o, a = i;
              break;

            case "H":
              n = l[1];
              break;

            case "V":
              a = l[1];
              break;

            case "M":
              o = l[l.length - 2], i = l[l.length - 1];
              break;

            default:
              n = l[l.length - 2], a = l[l.length - 1];
          }
        }

        return r;
      }

      function _(e, t) {
        for (var r = [], n = 0, a = e.length; n < a - 2 * !t; n += 2) {
          var o = [{
            x: +e[n - 2],
            y: +e[n - 1]
          }, {
            x: +e[n],
            y: +e[n + 1]
          }, {
            x: +e[n + 2],
            y: +e[n + 3]
          }, {
            x: +e[n + 4],
            y: +e[n + 5]
          }];
          t ? n ? a - 4 === n ? o[3] = {
            x: +e[0],
            y: +e[1]
          } : a - 2 === n && (o[2] = {
            x: +e[0],
            y: +e[1]
          }, o[3] = {
            x: +e[2],
            y: +e[3]
          }) : o[0] = {
            x: +e[a - 2],
            y: +e[a - 1]
          } : a - 4 === n ? o[3] = o[2] : n || (o[0] = {
            x: +e[n],
            y: +e[n + 1]
          }), r.push(["C", (-o[0].x + 6 * o[1].x + o[2].x) / 6, (-o[0].y + 6 * o[1].y + o[2].y) / 6, (o[1].x + 6 * o[2].x - o[3].x) / 6, (o[1].y + 6 * o[2].y - o[3].y) / 6, o[2].x, o[2].y]);
        }

        return r;
      }

      function S(e, t, r, n) {
        return [e, t, r, n, r, n];
      }

      function w(e, t, r, n, a, o) {
        return [1 / 3 * e + 2 / 3 * r, 1 / 3 * t + 2 / 3 * n, 1 / 3 * a + 2 / 3 * r, 1 / 3 * o + 2 / 3 * n, a, o];
      }

      function g(e, t, r, n, a, o, i, s, l) {
        null == l && (l = 1);

        for (var p = (l = 1 < l ? 1 : l < 0 ? 0 : l) / 2, u = [-.1252, .1252, -.3678, .3678, -.5873, .5873, -.7699, .7699, -.9041, .9041, -.9816, .9816], c = 0, d = [.2491, .2491, .2335, .2335, .2032, .2032, .1601, .1601, .1069, .1069, .0472, .0472], h = 0; h < 12; h++) {
          var m = p * u[h] + p,
              f = v(m, e, r, a, i),
              y = v(m, t, n, o, s),
              g = f * f + y * y;
          c += d[h] * Math.sqrt(g);
        }

        return p * c;
      }

      function v(e, t, r, n, a) {
        return e * (e * (-3 * t + 9 * r - 9 * n + 3 * a) + 6 * t - 12 * r + 6 * n) - 3 * t + 3 * r;
      }

      a.default.Font = function (e) {
        this.parent = e, this.cache = {}, this.font = void 0;
      }, a.default.Font.prototype.textBounds = function (e) {
        var t,
            r = 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : 0,
            n = 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : 0,
            a = 3 < arguments.length ? arguments[3] : void 0,
            o = 4 < arguments.length ? arguments[4] : void 0,
            i = o && o.renderer && o.renderer._pInst || this.parent,
            s = i._renderer.drawingContext;
        s.textAlign || x.LEFT, s.textBaseline || x.BASELINE;

        if (a = a || i._renderer._textSize, !t) {
          var l,
              p,
              u = [],
              c = [],
              d = [];
          d[0] = [];

          var h = [],
              m = this._scale(a),
              f = i._renderer.textLeading(),
              y = 0;

          this.font.forEachGlyph(e, r, n, a, o, function (e, t, r, n) {
            var a = e.getMetrics();
            0 === e.index || 10 === e.index ? d[y += 1] = [] : (d[y].push(t + a.xMin * m), d[y].push(t + a.xMax * m), h.push(r + y * f + -a.yMin * m), h.push(r + y * f + -a.yMax * m));
          }), 0 < d[y].length && (u[y] = Math.min.apply(null, d[y]), c[y] = Math.max.apply(null, d[y]));

          for (var g = 0, v = 0; v <= y; v++) {
            u[v] = Math.min.apply(null, d[v]), c[v] = Math.max.apply(null, d[v]);
            var b = c[v] - u[v];
            g < b && (g = b);
          }

          var _ = Math.min.apply(null, u);

          t = {
            x: _,
            y: l = Math.min.apply(null, h),
            h: Math.max.apply(null, h) - l,
            w: g,
            advance: _ - r
          }, p = this._handleAlignment(i._renderer, e, t.x, t.y, t.w + t.advance), t.x = p.x, t.y = p.y;
        }

        return t;
      }, a.default.Font.prototype.textToPoints = function (e, t, r, n, a) {
        var o,
            i = 0,
            s = [],
            l = this._getGlyphs(e);

        n = n || this.parent._renderer._textSize;

        for (var p = 0; p < l.length; p++) {
          if (!(l[o = p].name && "space" === l[o].name || e.length === l.length && " " === e[o] || l[o].index && 3 === l[o].index)) for (var u = f(l[p].getPath(t, r, n).commands), c = 0; c < u.length; c++) for (var d = m(u[c], a), h = 0; h < d.length; h++) d[h].x += i, s.push(d[h]);
          i += l[p].advanceWidth * this._scale(n);
        }

        return s;
      }, a.default.Font.prototype._getGlyphs = function (e) {
        return this.font.stringToGlyphs(e);
      }, a.default.Font.prototype._getPath = function (e, t, r, n) {
        var a = (n && n.renderer && n.renderer._pInst || this.parent)._renderer,
            o = this._handleAlignment(a, e, t, r);

        return this.font.getPath(e, o.x, o.y, a._textSize, n);
      }, a.default.Font.prototype._getPathData = function (e, t, r, n) {
        var a = 3;
        return "string" == typeof e && 2 < arguments.length ? e = this._getPath(e, t, r, n) : "object" === h(t) && (n = t), n && "number" == typeof n.decimals && (a = n.decimals), e.toPathData(a);
      }, a.default.Font.prototype._getSVG = function (e, t, r, n) {
        var a = 3;
        return "string" == typeof e && 2 < arguments.length ? e = this._getPath(e, t, r, n) : "object" === h(t) && (n = t), n && ("number" == typeof n.decimals && (a = n.decimals), "number" == typeof n.strokeWidth && (e.strokeWidth = n.strokeWidth), void 0 !== n.fill && (e.fill = n.fill), void 0 !== n.stroke && (e.stroke = n.stroke)), e.toSVG(a);
      }, a.default.Font.prototype._renderPath = function (e, t, r, n) {
        var a,
            o = n && n.renderer || this.parent._renderer,
            i = o.drawingContext;
        a = "object" === h(e) && e.commands ? e.commands : this._getPath(e, t, r, n).commands, i.beginPath();
        var s = !0,
            l = !1,
            p = void 0;

        try {
          for (var u, c = a[Symbol.iterator](); !(s = (u = c.next()).done); s = !0) {
            var d = u.value;
            "M" === d.type ? i.moveTo(d.x, d.y) : "L" === d.type ? i.lineTo(d.x, d.y) : "C" === d.type ? i.bezierCurveTo(d.x1, d.y1, d.x2, d.y2, d.x, d.y) : "Q" === d.type ? i.quadraticCurveTo(d.x1, d.y1, d.x, d.y) : "Z" === d.type && i.closePath();
          }
        } catch (e) {
          l = !0, p = e;
        } finally {
          try {
            s || null == c.return || c.return();
          } finally {
            if (l) throw p;
          }
        }

        return o._doStroke && o._strokeSet && i.stroke(), o._doFill && (o._fillSet || o._setFill(x._DEFAULT_TEXT_FILL), i.fill()), this;
      }, a.default.Font.prototype._textWidth = function (e, t) {
        return this.font.getAdvanceWidth(e, t);
      }, a.default.Font.prototype._textAscent = function (e) {
        return this.font.ascender * this._scale(e);
      }, a.default.Font.prototype._textDescent = function (e) {
        return -this.font.descender * this._scale(e);
      }, a.default.Font.prototype._scale = function (e) {
        return 1 / this.font.unitsPerEm * (e || this.parent._renderer._textSize);
      }, a.default.Font.prototype._handleAlignment = function (e, t, r, n, a) {
        var o = e._textSize;

        switch (void 0 === a && (a = this._textWidth(t, o)), e._textAlign) {
          case x.CENTER:
            r -= a / 2;
            break;

          case x.RIGHT:
            r -= a;
        }

        switch (e._textBaseline) {
          case x.TOP:
            n += this._textAscent(o);
            break;

          case x.CENTER:
            n += this._textAscent(o) / 2;
            break;

          case x.BOTTOM:
            n -= this._textDescent(o);
        }

        return {
          x: r,
          y: n
        };
      };
      var p = a.default;
      r.default = p;
    }, {
      "../core/constants": 22,
      "../core/main": 32
    }],
    71: [function (e, t, r) {
      "use strict";

      Object.defineProperty(r, "__esModule", {
        value: !0
      }), r.default = void 0;
      var n,
          a = (n = e("../core/main")) && n.__esModule ? n : {
        default: n
      };
      a.default.prototype.append = function (e, t) {
        return e.push(t), e;
      }, a.default.prototype.arrayCopy = function (e, t, r, n, a) {
        var o, i;
        e = void 0 !== a ? (i = Math.min(a, e.length), o = n, e.slice(t, i + t)) : (i = void 0 !== r ? (i = r, Math.min(i, e.length)) : e.length, o = 0, r = t, e.slice(0, i)), Array.prototype.splice.apply(r, [o, i].concat(e));
      }, a.default.prototype.concat = function (e, t) {
        return e.concat(t);
      }, a.default.prototype.reverse = function (e) {
        return e.reverse();
      }, a.default.prototype.shorten = function (e) {
        return e.pop(), e;
      }, a.default.prototype.shuffle = function (e, t) {
        for (var r, n, a = ArrayBuffer && ArrayBuffer.isView && ArrayBuffer.isView(e), o = (e = t || a ? e : e.slice()).length; 1 < o;) r = this.random(0, 1) * o | 0, n = e[--o], e[o] = e[r], e[r] = n;

        return e;
      }, a.default.prototype.sort = function (e, t) {
        var r = t ? e.slice(0, Math.min(t, e.length)) : e,
            n = t ? e.slice(Math.min(t, e.length)) : [];
        return (r = "string" == typeof r[0] ? r.sort() : r.sort(function (e, t) {
          return e - t;
        })).concat(n);
      }, a.default.prototype.splice = function (e, t, r) {
        return Array.prototype.splice.apply(e, [r, 0].concat(t)), e;
      }, a.default.prototype.subset = function (e, t, r) {
        return void 0 !== r ? e.slice(t, t + r) : e.slice(t, e.length);
      };
      var o = a.default;
      r.default = o;
    }, {
      "../core/main": 32
    }],
    72: [function (e, t, r) {
      "use strict";

      Object.defineProperty(r, "__esModule", {
        value: !0
      }), r.default = void 0;
      var n,
          a = (n = e("../core/main")) && n.__esModule ? n : {
        default: n
      };
      a.default.prototype.float = function (e) {
        return e instanceof Array ? e.map(parseFloat) : parseFloat(e);
      }, a.default.prototype.int = function (e) {
        var t = 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : 10;
        return e === 1 / 0 || "Infinity" === e ? 1 / 0 : e === -1 / 0 || "-Infinity" === e ? -1 / 0 : "string" == typeof e ? parseInt(e, t) : "number" == typeof e ? 0 | e : "boolean" == typeof e ? e ? 1 : 0 : e instanceof Array ? e.map(function (e) {
          return a.default.prototype.int(e, t);
        }) : void 0;
      }, a.default.prototype.str = function (e) {
        return e instanceof Array ? e.map(a.default.prototype.str) : String(e);
      }, a.default.prototype.boolean = function (e) {
        return "number" == typeof e ? 0 !== e : "string" == typeof e ? "true" === e.toLowerCase() : "boolean" == typeof e ? e : e instanceof Array ? e.map(a.default.prototype.boolean) : void 0;
      }, a.default.prototype.byte = function (e) {
        var t = a.default.prototype.int(e, 10);
        return "number" == typeof t ? (t + 128) % 256 - 128 : t instanceof Array ? t.map(a.default.prototype.byte) : void 0;
      }, a.default.prototype.char = function (e) {
        return "number" != typeof e || isNaN(e) ? e instanceof Array ? e.map(a.default.prototype.char) : "string" == typeof e ? a.default.prototype.char(parseInt(e, 10)) : void 0 : String.fromCharCode(e);
      }, a.default.prototype.unchar = function (e) {
        return "string" == typeof e && 1 === e.length ? e.charCodeAt(0) : e instanceof Array ? e.map(a.default.prototype.unchar) : void 0;
      }, a.default.prototype.hex = function (e, t) {
        if (t = null == t ? t = 8 : t, e instanceof Array) return e.map(function (e) {
          return a.default.prototype.hex(e, t);
        });
        if (e === 1 / 0 || e === -1 / 0) return (e === 1 / 0 ? "F" : "0").repeat(t);

        if ("number" == typeof e) {
          e < 0 && (e = 4294967295 + e + 1);

          for (var r = Number(e).toString(16).toUpperCase(); r.length < t;) r = "0".concat(r);

          return r.length >= t && (r = r.substring(r.length - t, r.length)), r;
        }
      }, a.default.prototype.unhex = function (e) {
        return e instanceof Array ? e.map(a.default.prototype.unhex) : parseInt("0x".concat(e), 16);
      };
      var o = a.default;
      r.default = o;
    }, {
      "../core/main": 32
    }],
    73: [function (e, t, r) {
      "use strict";

      Object.defineProperty(r, "__esModule", {
        value: !0
      }), r.default = void 0;
      var n,
          i = (n = e("../core/main")) && n.__esModule ? n : {
        default: n
      };

      function a(e, t, r) {
        var n = e < 0,
            a = n ? e.toString().substring(1) : e.toString(),
            o = a.indexOf("."),
            i = -1 !== o ? a.substring(0, o) : a,
            s = -1 !== o ? a.substring(o + 1) : "",
            l = n ? "-" : "";

        if (void 0 !== r) {
          var p = "";
          (-1 !== o || 0 < r - s.length) && (p = "."), s.length > r && (s = s.substring(0, r));

          for (var u = 0; u < t - i.length; u++) l += "0";

          l += i, l += p, l += s;

          for (var c = 0; c < r - s.length; c++) l += "0";

          return l;
        }

        for (var d = 0; d < Math.max(t - i.length, 0); d++) l += "0";

        return l += a;
      }

      function o(e, t) {
        var r = (e = e.toString()).indexOf("."),
            n = -1 !== r ? e.substring(r) : "",
            a = -1 !== r ? e.substring(0, r) : e;
        if (a = a.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ","), 0 === t) n = "";else if (void 0 !== t) if (t > n.length) for (var o = t - (n += -1 === r ? "." : "").length + 1, i = 0; i < o; i++) n += "0";else n = n.substring(0, t + 1);
        return a + n;
      }

      function s(e) {
        return 0 < parseFloat(e) ? "+".concat(e.toString()) : e.toString();
      }

      function l(e) {
        return 0 <= parseFloat(e) ? " ".concat(e.toString()) : e.toString();
      }

      e("../core/friendly_errors/validate_params"), e("../core/friendly_errors/file_errors"), e("../core/friendly_errors/fes_core"), i.default.prototype.join = function (e, t) {
        return i.default._validateParameters("join", arguments), e.join(t);
      }, i.default.prototype.match = function (e, t) {
        return i.default._validateParameters("match", arguments), e.match(t);
      }, i.default.prototype.matchAll = function (e, t) {
        i.default._validateParameters("matchAll", arguments);

        for (var r = new RegExp(t, "g"), n = r.exec(e), a = []; null !== n;) a.push(n), n = r.exec(e);

        return a;
      }, i.default.prototype.nf = function (e, t, r) {
        return i.default._validateParameters("nf", arguments), e instanceof Array ? e.map(function (e) {
          return a(e, t, r);
        }) : "[object Arguments]" === Object.prototype.toString.call(e) ? 3 === e.length ? this.nf(e[0], e[1], e[2]) : 2 === e.length ? this.nf(e[0], e[1]) : this.nf(e[0]) : a(e, t, r);
      }, i.default.prototype.nfc = function (e, t) {
        return i.default._validateParameters("nfc", arguments), e instanceof Array ? e.map(function (e) {
          return o(e, t);
        }) : o(e, t);
      }, i.default.prototype.nfp = function () {
        for (var e = arguments.length, t = new Array(e), r = 0; r < e; r++) t[r] = arguments[r];

        i.default._validateParameters("nfp", t);

        var n = i.default.prototype.nf.apply(this, t);
        return n instanceof Array ? n.map(s) : s(n);
      }, i.default.prototype.nfs = function () {
        for (var e = arguments.length, t = new Array(e), r = 0; r < e; r++) t[r] = arguments[r];

        i.default._validateParameters("nfs", t);

        var n = i.default.prototype.nf.apply(this, t);
        return n instanceof Array ? n.map(l) : l(n);
      }, i.default.prototype.split = function (e, t) {
        return i.default._validateParameters("split", arguments), e.split(t);
      }, i.default.prototype.splitTokens = function (e, t) {
        var r;

        if (i.default._validateParameters("splitTokens", arguments), void 0 !== t) {
          var n = t,
              a = /\]/g.exec(n),
              o = /\[/g.exec(n);
          r = o && a ? (n = n.slice(0, a.index) + n.slice(a.index + 1), o = /\[/g.exec(n), n = n.slice(0, o.index) + n.slice(o.index + 1), new RegExp("[\\[".concat(n, "\\]]"), "g")) : a ? (n = n.slice(0, a.index) + n.slice(a.index + 1), new RegExp("[".concat(n, "\\]]"), "g")) : o ? (n = n.slice(0, o.index) + n.slice(o.index + 1), new RegExp("[".concat(n, "\\[]"), "g")) : new RegExp("[".concat(n, "]"), "g");
        } else r = /\s/g;

        return e.split(r).filter(function (e) {
          return e;
        });
      }, i.default.prototype.trim = function (e) {
        return i.default._validateParameters("trim", arguments), e instanceof Array ? e.map(this.trim) : e.trim();
      };
      var p = i.default;
      r.default = p;
    }, {
      "../core/friendly_errors/fes_core": 24,
      "../core/friendly_errors/file_errors": 25,
      "../core/friendly_errors/validate_params": 27,
      "../core/main": 32
    }],
    74: [function (e, t, r) {
      "use strict";

      Object.defineProperty(r, "__esModule", {
        value: !0
      }), r.default = void 0;
      var n,
          a = (n = e("../core/main")) && n.__esModule ? n : {
        default: n
      };
      a.default.prototype.day = function () {
        return new Date().getDate();
      }, a.default.prototype.hour = function () {
        return new Date().getHours();
      }, a.default.prototype.minute = function () {
        return new Date().getMinutes();
      }, a.default.prototype.millis = function () {
        return -1 === this._millisStart ? 0 : window.performance.now() - this._millisStart;
      }, a.default.prototype.month = function () {
        return new Date().getMonth() + 1;
      }, a.default.prototype.second = function () {
        return new Date().getSeconds();
      }, a.default.prototype.year = function () {
        return new Date().getFullYear();
      };
      var o = a.default;
      r.default = o;
    }, {
      "../core/main": 32
    }],
    75: [function (e, t, r) {
      "use strict";

      function i(e) {
        return (i = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (e) {
          return typeof e;
        } : function (e) {
          return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e;
        })(e);
      }

      Object.defineProperty(r, "__esModule", {
        value: !0
      }), r.default = void 0;
      var n,
          T = (n = e("../core/main")) && n.__esModule ? n : {
        default: n
      };
      e("./p5.Geometry");

      var h = function (e) {
        if (e && e.__esModule) return e;
        if (null === e || "object" !== i(e) && "function" != typeof e) return {
          default: e
        };
        var t = s();
        if (t && t.has(e)) return t.get(e);
        var r = {},
            n = Object.defineProperty && Object.getOwnPropertyDescriptor;

        for (var a in e) if (Object.prototype.hasOwnProperty.call(e, a)) {
          var o = n ? Object.getOwnPropertyDescriptor(e, a) : null;
          o && (o.get || o.set) ? Object.defineProperty(r, a, o) : r[a] = e[a];
        }

        r.default = e, t && t.set(e, r);
        return r;
      }(e("../core/constants"));

      function s() {
        if ("function" != typeof WeakMap) return null;
        var e = new WeakMap();
        return s = function () {
          return e;
        }, e;
      }

      T.default.prototype.plane = function (e, t, r, n) {
        this._assert3d("plane"), T.default._validateParameters("plane", arguments), void 0 === e && (e = 50), void 0 === t && (t = e), void 0 === r && (r = 1), void 0 === n && (n = 1);
        var a = "plane|".concat(r, "|").concat(n);

        if (!this._renderer.geometryInHash(a)) {
          var o = new T.default.Geometry(r, n, function () {
            for (var e, t, r, n = 0; n <= this.detailY; n++) {
              t = n / this.detailY;

              for (var a = 0; a <= this.detailX; a++) e = a / this.detailX, r = new T.default.Vector(e - .5, t - .5, 0), this.vertices.push(r), this.uvs.push(e, t);
            }
          });
          o.computeFaces().computeNormals(), r <= 1 && n <= 1 ? o._makeTriangleEdges()._edgesToVertices() : this._renderer._doStroke && console.log("Cannot draw stroke on plane objects with more than 1 detailX or 1 detailY"), this._renderer.createBuffers(a, o);
        }

        return this._renderer.drawBuffersScaled(a, e, t, 1), this;
      }, T.default.prototype.box = function (e, t, r, n, a) {
        this._assert3d("box"), T.default._validateParameters("box", arguments), void 0 === e && (e = 50), void 0 === t && (t = e), void 0 === r && (r = t);
        var o = this._renderer.attributes && this._renderer.attributes.perPixelLighting;
        void 0 === n && (n = o ? 1 : 4), void 0 === a && (a = o ? 1 : 4);
        var i = "box|".concat(n, "|").concat(a);

        if (!this._renderer.geometryInHash(i)) {
          var s = new T.default.Geometry(n, a, function () {
            var e = [[0, 4, 2, 6], [1, 3, 5, 7], [0, 1, 4, 5], [2, 6, 3, 7], [0, 2, 1, 3], [4, 5, 6, 7]];
            this.strokeIndices = [[0, 1], [1, 3], [3, 2], [6, 7], [8, 9], [9, 11], [14, 15], [16, 17], [17, 19], [18, 19], [20, 21], [22, 23]];

            for (var t = 0; t < e.length; t++) {
              for (var r = e[t], n = 4 * t, a = 0; a < 4; a++) {
                var o = r[a],
                    i = new T.default.Vector((2 * (1 & o) - 1) / 2, ((2 & o) - 1) / 2, ((4 & o) / 2 - 1) / 2);
                this.vertices.push(i), this.uvs.push(1 & a, (2 & a) / 2);
              }

              this.faces.push([n, 1 + n, 2 + n]), this.faces.push([2 + n, 1 + n, 3 + n]);
            }
          });
          s.computeNormals(), n <= 4 && a <= 4 ? s._makeTriangleEdges()._edgesToVertices() : this._renderer._doStroke && console.log("Cannot draw stroke on box objects with more than 4 detailX or 4 detailY"), this._renderer.createBuffers(i, s);
        }

        return this._renderer.drawBuffersScaled(i, e, t, r), this;
      }, T.default.prototype.sphere = function (e, t, r) {
        return this._assert3d("sphere"), T.default._validateParameters("sphere", arguments), void 0 === e && (e = 50), void 0 === t && (t = 24), void 0 === r && (r = 16), this.ellipsoid(e, e, e, t, r), this;
      };

      function l(e, t, r, n, a, o, i) {
        e = e <= 0 ? 1 : e, t = t < 0 ? 0 : t, r = r <= 0 ? e : r, n = n < 3 ? 3 : n;
        var s,
            l,
            p,
            u = (o = void 0 === o || o) ? -2 : 0,
            c = (a = a < 1 ? 1 : a) + ((i = void 0 === i ? 0 !== t : i) ? 2 : 0),
            d = Math.atan2(e - t, r),
            h = Math.sin(d),
            m = Math.cos(d);

        for (s = u; s <= c; ++s) {
          var f = s / a,
              y = r * f,
              g = void 0;

          for (g = s < 0 ? (f = y = 0, e) : a < s ? (y = r, f = 1, t) : e + (t - e) * f, -2 !== s && s !== a + 2 || (g = 0), y -= r / 2, l = 0; l < n; ++l) {
            var v = l / (n - 1),
                b = 2 * Math.PI * v,
                _ = Math.sin(b),
                x = Math.cos(b);

            this.vertices.push(new T.default.Vector(_ * g, y, x * g));
            var S = void 0;
            S = s < 0 ? new T.default.Vector(0, -1, 0) : a < s && t ? new T.default.Vector(0, 1, 0) : new T.default.Vector(_ * m, h, x * m), this.vertexNormals.push(S), this.uvs.push(v, f);
          }
        }

        var w = 0;

        if (o) {
          for (p = 0; p < n; ++p) {
            var M = (p + 1) % n;
            this.faces.push([w + p, w + n + M, w + n + p]);
          }

          w += 2 * n;
        }

        for (s = 0; s < a; ++s) {
          for (l = 0; l < n; ++l) {
            var E = (l + 1) % n;
            this.faces.push([w + l, w + E, w + n + E]), this.faces.push([w + l, w + n + E, w + n + l]);
          }

          w += n;
        }

        if (i) for (w += n, l = 0; l < n; ++l) this.faces.push([w + l, w + (l + 1) % n, w + n]);
      }

      T.default.prototype.cylinder = function (e, t, r, n, a, o) {
        this._assert3d("cylinder"), T.default._validateParameters("cylinder", arguments), void 0 === e && (e = 50), void 0 === t && (t = e), void 0 === r && (r = 24), void 0 === n && (n = 1), void 0 === o && (o = !0), void 0 === a && (a = !0);
        var i = "cylinder|".concat(r, "|").concat(n, "|").concat(a, "|").concat(o);

        if (!this._renderer.geometryInHash(i)) {
          var s = new T.default.Geometry(r, n);
          l.call(s, 1, 1, 1, r, n, a, o), r <= 24 && n <= 16 ? s._makeTriangleEdges()._edgesToVertices() : this._renderer._doStroke && console.log("Cannot draw stroke on cylinder objects with more than 24 detailX or 16 detailY"), this._renderer.createBuffers(i, s);
        }

        return this._renderer.drawBuffersScaled(i, e, t, e), this;
      }, T.default.prototype.cone = function (e, t, r, n, a) {
        this._assert3d("cone"), T.default._validateParameters("cone", arguments), void 0 === e && (e = 50), void 0 === t && (t = e), void 0 === r && (r = 24), void 0 === n && (n = 1), void 0 === a && (a = !0);
        var o = "cone|".concat(r, "|").concat(n, "|").concat(a);

        if (!this._renderer.geometryInHash(o)) {
          var i = new T.default.Geometry(r, n);
          l.call(i, 1, 0, 1, r, n, a, !1), r <= 24 && n <= 16 ? i._makeTriangleEdges()._edgesToVertices() : this._renderer._doStroke && console.log("Cannot draw stroke on cone objects with more than 24 detailX or 16 detailY"), this._renderer.createBuffers(o, i);
        }

        return this._renderer.drawBuffersScaled(o, e, t, e), this;
      }, T.default.prototype.ellipsoid = function (e, t, r, n, a) {
        this._assert3d("ellipsoid"), T.default._validateParameters("ellipsoid", arguments), void 0 === e && (e = 50), void 0 === t && (t = e), void 0 === r && (r = e), void 0 === n && (n = 24), void 0 === a && (a = 16);
        var o = "ellipsoid|".concat(n, "|").concat(a);

        if (!this._renderer.geometryInHash(o)) {
          var i = new T.default.Geometry(n, a, function () {
            for (var e = 0; e <= this.detailY; e++) for (var t = e / this.detailY, r = Math.PI * t - Math.PI / 2, n = Math.cos(r), a = Math.sin(r), o = 0; o <= this.detailX; o++) {
              var i = o / this.detailX,
                  s = 2 * Math.PI * i,
                  l = Math.cos(s),
                  p = Math.sin(s),
                  u = new T.default.Vector(n * p, a, n * l);
              this.vertices.push(u), this.vertexNormals.push(u), this.uvs.push(i, t);
            }
          });
          i.computeFaces(), n <= 24 && a <= 24 ? i._makeTriangleEdges()._edgesToVertices() : this._renderer._doStroke && console.log("Cannot draw stroke on ellipsoids with more than 24 detailX or 24 detailY"), this._renderer.createBuffers(o, i);
        }

        return this._renderer.drawBuffersScaled(o, e, t, r), this;
      }, T.default.prototype.torus = function (e, t, r, n) {
        if (this._assert3d("torus"), T.default._validateParameters("torus", arguments), void 0 === e) e = 50;else if (!e) return;
        if (void 0 === t) t = 10;else if (!t) return;
        void 0 === r && (r = 24), void 0 === n && (n = 16);
        var h = (t / e).toPrecision(4),
            a = "torus|".concat(h, "|").concat(r, "|").concat(n);

        if (!this._renderer.geometryInHash(a)) {
          var o = new T.default.Geometry(r, n, function () {
            for (var e = 0; e <= this.detailY; e++) for (var t = e / this.detailY, r = 2 * Math.PI * t, n = Math.cos(r), a = Math.sin(r), o = 1 + h * n, i = 0; i <= this.detailX; i++) {
              var s = i / this.detailX,
                  l = 2 * Math.PI * s,
                  p = Math.cos(l),
                  u = Math.sin(l),
                  c = new T.default.Vector(o * p, o * u, h * a),
                  d = new T.default.Vector(n * p, n * u, a);
              this.vertices.push(c), this.vertexNormals.push(d), this.uvs.push(s, t);
            }
          });
          o.computeFaces(), r <= 24 && n <= 16 ? o._makeTriangleEdges()._edgesToVertices() : this._renderer._doStroke && console.log("Cannot draw strokes on torus object with more than 24 detailX or 16 detailY"), this._renderer.createBuffers(a, o);
        }

        return this._renderer.drawBuffersScaled(a, e, e, e), this;
      }, T.default.RendererGL.prototype.point = function (e, t, r) {
        void 0 === r && (r = 0);
        var n = [];
        return n.push(new T.default.Vector(e, t, r)), this._drawPoints(n, this.immediateMode.buffers.point), this;
      }, T.default.RendererGL.prototype.triangle = function (e) {
        var t = e[0],
            r = e[1],
            n = e[2],
            a = e[3],
            o = e[4],
            i = e[5];

        if (!this.geometryInHash("tri")) {
          var s = new T.default.Geometry(1, 1, function () {
            var e = [];
            e.push(new T.default.Vector(0, 0, 0)), e.push(new T.default.Vector(0, 1, 0)), e.push(new T.default.Vector(1, 0, 0)), this.strokeIndices = [[0, 1], [1, 2], [2, 0]], this.vertices = e, this.faces = [[0, 1, 2]], this.uvs = [0, 0, 0, 1, 1, 1];
          });
          s._makeTriangleEdges()._edgesToVertices(), s.computeNormals(), this.createBuffers("tri", s);
        }

        var l = this.uMVMatrix.copy();

        try {
          var p = new T.default.Matrix([n - t, a - r, 0, 0, o - t, i - r, 0, 0, 0, 0, 1, 0, t, r, 0, 1]).mult(this.uMVMatrix);
          this.uMVMatrix = p, this.drawBuffers("tri");
        } finally {
          this.uMVMatrix = l;
        }

        return this;
      }, T.default.RendererGL.prototype.ellipse = function (e) {
        this.arc(e[0], e[1], e[2], e[3], 0, h.TWO_PI, h.OPEN, e[4]);
      }, T.default.RendererGL.prototype.arc = function (e) {
        var t,
            r = e,
            n = arguments[1],
            a = arguments[2],
            o = arguments[3],
            i = arguments[4],
            s = arguments[5],
            l = arguments[6],
            p = arguments[7] || 25;

        if (t = Math.abs(s - i) >= h.TWO_PI ? "".concat("ellipse", "|").concat(p, "|") : "".concat("arc", "|").concat(i, "|").concat(s, "|").concat(l, "|").concat(p, "|"), !this.geometryInHash(t)) {
          var u = new T.default.Geometry(p, 1, function () {
            if (this.strokeIndices = [], i.toFixed(10) !== s.toFixed(10)) {
              l !== h.PIE && void 0 !== l || (this.vertices.push(new T.default.Vector(.5, .5, 0)), this.uvs.push([.5, .5]));

              for (var e = 0; e <= p; e++) {
                var t = (s - i) * (e / p) + i,
                    r = .5 + Math.cos(t) / 2,
                    n = .5 + Math.sin(t) / 2;
                this.vertices.push(new T.default.Vector(r, n, 0)), this.uvs.push([r, n]), e < p - 1 && (this.faces.push([0, e + 1, e + 2]), this.strokeIndices.push([e + 1, e + 2]));
              }

              switch (l) {
                case h.PIE:
                  this.faces.push([0, this.vertices.length - 2, this.vertices.length - 1]), this.strokeIndices.push([0, 1]), this.strokeIndices.push([this.vertices.length - 2, this.vertices.length - 1]), this.strokeIndices.push([0, this.vertices.length - 1]);
                  break;

                case h.CHORD:
                  this.strokeIndices.push([0, 1]), this.strokeIndices.push([0, this.vertices.length - 1]);
                  break;

                case h.OPEN:
                  this.strokeIndices.push([0, 1]);
                  break;

                default:
                  this.faces.push([0, this.vertices.length - 2, this.vertices.length - 1]), this.strokeIndices.push([this.vertices.length - 2, this.vertices.length - 1]);
              }
            }
          });
          u.computeNormals(), p <= 50 ? u._makeTriangleEdges()._edgesToVertices(u) : this._renderer._doStroke && console.log("Cannot stroke ${shape} with more than 50 detail"), this.createBuffers(t, u);
        }

        var c = this.uMVMatrix.copy();

        try {
          this.uMVMatrix.translate([r, n, 0]), this.uMVMatrix.scale(a, o, 1), this.drawBuffers(t);
        } finally {
          this.uMVMatrix = c;
        }

        return this;
      }, T.default.RendererGL.prototype.rect = function (e) {
        var t = this._pInst._glAttributes.perPixelLighting,
            r = e[0],
            n = e[1],
            a = e[2],
            o = e[3],
            i = e[4] || (t ? 1 : 24),
            s = e[5] || (t ? 1 : 16),
            l = "rect|".concat(i, "|").concat(s);

        if (!this.geometryInHash(l)) {
          var p = new T.default.Geometry(i, s, function () {
            for (var e = 0; e <= this.detailY; e++) for (var t = e / this.detailY, r = 0; r <= this.detailX; r++) {
              var n = r / this.detailX,
                  a = new T.default.Vector(n, t, 0);
              this.vertices.push(a), this.uvs.push(n, t);
            }

            0 < i && 0 < s && (this.strokeIndices = [[0, i], [i, (i + 1) * (s + 1) - 1], [(i + 1) * (s + 1) - 1, (i + 1) * s], [(i + 1) * s, 0]]);
          });
          p.computeFaces().computeNormals()._makeTriangleEdges()._edgesToVertices(), this.createBuffers(l, p);
        }

        var u = this.uMVMatrix.copy();

        try {
          this.uMVMatrix.translate([r, n, 0]), this.uMVMatrix.scale(a, o, 1), this.drawBuffers(l);
        } finally {
          this.uMVMatrix = u;
        }

        return this;
      }, T.default.RendererGL.prototype.quad = function (e, t, r, n, a, o, i, s, l, p, u, c) {
        var d = "quad|".concat(e, "|").concat(t, "|").concat(r, "|").concat(n, "|").concat(a, "|").concat(o, "|").concat(i, "|").concat(s, "|").concat(l, "|").concat(p, "|").concat(u, "|").concat(c);

        if (!this.geometryInHash(d)) {
          var h = new T.default.Geometry(2, 2, function () {
            this.vertices.push(new T.default.Vector(e, t, r)), this.vertices.push(new T.default.Vector(n, a, o)), this.vertices.push(new T.default.Vector(i, s, l)), this.vertices.push(new T.default.Vector(p, u, c)), this.uvs.push(0, 0, 1, 0, 1, 1, 0, 1), this.strokeIndices = [[0, 1], [1, 2], [2, 3], [3, 0]];
          });
          h.computeNormals()._makeTriangleEdges()._edgesToVertices(), h.faces = [[0, 1, 2], [2, 3, 0]], this.createBuffers(d, h);
        }

        return this.drawBuffers(d), this;
      }, T.default.RendererGL.prototype.bezier = function (e, t, r, n, a, o, i, s, l, p, u, c) {
        8 === arguments.length && (u = s, p = i, s = o, i = a, a = n, n = r, r = o = l = c = 0);
        var d = this._pInst._bezierDetail || 20;
        this.beginShape();

        for (var h = 0; h <= d; h++) {
          var m = Math.pow(1 - h / d, 3),
              f = h / d * 3 * Math.pow(1 - h / d, 2),
              y = 3 * Math.pow(h / d, 2) * (1 - h / d),
              g = Math.pow(h / d, 3);
          this.vertex(e * m + n * f + i * y + p * g, t * m + a * f + s * y + u * g, r * m + o * f + l * y + c * g);
        }

        return this.endShape(), this;
      }, T.default.RendererGL.prototype.curve = function (e, t, r, n, a, o, i, s, l, p, u, c) {
        8 === arguments.length && (p = i, u = s, i = a, s = n, a = n = r, r = o = l = c = 0);
        var d = this._pInst._curveDetail;
        this.beginShape();

        for (var h = 0; h <= d; h++) {
          var m = .5 * Math.pow(h / d, 3),
              f = .5 * Math.pow(h / d, 2),
              y = h / d * .5,
              g = m * (3 * n - e - 3 * i + p) + f * (2 * e - 5 * n + 4 * i - p) + y * (-e + i) + 2 * n * .5,
              v = m * (3 * a - t - 3 * s + u) + f * (2 * t - 5 * a + 4 * s - u) + y * (-t + s) + 2 * a * .5,
              b = m * (3 * o - r - 3 * l + c) + f * (2 * r - 5 * o + 4 * l - c) + y * (-r + l) + 2 * o * .5;
          this.vertex(g, v, b);
        }

        return this.endShape(), this;
      }, T.default.RendererGL.prototype.line = function () {
        return 6 === arguments.length ? (this.beginShape(h.LINES), this.vertex(arguments.length <= 0 ? void 0 : arguments[0], arguments.length <= 1 ? void 0 : arguments[1], arguments.length <= 2 ? void 0 : arguments[2]), this.vertex(arguments.length <= 3 ? void 0 : arguments[3], arguments.length <= 4 ? void 0 : arguments[4], arguments.length <= 5 ? void 0 : arguments[5]), this.endShape()) : 4 === arguments.length && (this.beginShape(h.LINES), this.vertex(arguments.length <= 0 ? void 0 : arguments[0], arguments.length <= 1 ? void 0 : arguments[1], 0), this.vertex(arguments.length <= 2 ? void 0 : arguments[2], arguments.length <= 3 ? void 0 : arguments[3], 0), this.endShape()), this;
      }, T.default.RendererGL.prototype.bezierVertex = function () {
        if (0 === this.immediateMode._bezierVertex.length) throw Error("vertex() must be used once before calling bezierVertex()");
        var e,
            t,
            r,
            n,
            a,
            o = [],
            i = [],
            s = [],
            l = arguments.length;

        if ((e = 0) === this._lookUpTableBezier.length || this._lutBezierDetail !== this._pInst._curveDetail) {
          this._lookUpTableBezier = [], this._lutBezierDetail = this._pInst._curveDetail;

          for (var p = 1 / this._lutBezierDetail, u = 0, c = 1, d = 0; u < 1;) {
            if (e = parseFloat(u.toFixed(6)), this._lookUpTableBezier[d] = this._bezierCoefficients(e), c.toFixed(6) === p.toFixed(6)) {
              e = parseFloat(c.toFixed(6)) + parseFloat(u.toFixed(6)), ++d, this._lookUpTableBezier[d] = this._bezierCoefficients(e);
              break;
            }

            u += p, c -= p, ++d;
          }
        }

        var h = this._lookUpTableBezier.length;

        if (6 === l) {
          for (this.isBezier = !0, o = [this.immediateMode._bezierVertex[0], arguments.length <= 0 ? void 0 : arguments[0], arguments.length <= 2 ? void 0 : arguments[2], arguments.length <= 4 ? void 0 : arguments[4]], i = [this.immediateMode._bezierVertex[1], arguments.length <= 1 ? void 0 : arguments[1], arguments.length <= 3 ? void 0 : arguments[3], arguments.length <= 5 ? void 0 : arguments[5]], a = 0; a < h; a++) t = o[0] * this._lookUpTableBezier[a][0] + o[1] * this._lookUpTableBezier[a][1] + o[2] * this._lookUpTableBezier[a][2] + o[3] * this._lookUpTableBezier[a][3], r = i[0] * this._lookUpTableBezier[a][0] + i[1] * this._lookUpTableBezier[a][1] + i[2] * this._lookUpTableBezier[a][2] + i[3] * this._lookUpTableBezier[a][3], this.vertex(t, r);

          this.immediateMode._bezierVertex[0] = arguments.length <= 4 ? void 0 : arguments[4], this.immediateMode._bezierVertex[1] = arguments.length <= 5 ? void 0 : arguments[5];
        } else if (9 === l) {
          for (this.isBezier = !0, o = [this.immediateMode._bezierVertex[0], arguments.length <= 0 ? void 0 : arguments[0], arguments.length <= 3 ? void 0 : arguments[3], arguments.length <= 6 ? void 0 : arguments[6]], i = [this.immediateMode._bezierVertex[1], arguments.length <= 1 ? void 0 : arguments[1], arguments.length <= 4 ? void 0 : arguments[4], arguments.length <= 7 ? void 0 : arguments[7]], s = [this.immediateMode._bezierVertex[2], arguments.length <= 2 ? void 0 : arguments[2], arguments.length <= 5 ? void 0 : arguments[5], arguments.length <= 8 ? void 0 : arguments[8]], a = 0; a < h; a++) t = o[0] * this._lookUpTableBezier[a][0] + o[1] * this._lookUpTableBezier[a][1] + o[2] * this._lookUpTableBezier[a][2] + o[3] * this._lookUpTableBezier[a][3], r = i[0] * this._lookUpTableBezier[a][0] + i[1] * this._lookUpTableBezier[a][1] + i[2] * this._lookUpTableBezier[a][2] + i[3] * this._lookUpTableBezier[a][3], n = s[0] * this._lookUpTableBezier[a][0] + s[1] * this._lookUpTableBezier[a][1] + s[2] * this._lookUpTableBezier[a][2] + s[3] * this._lookUpTableBezier[a][3], this.vertex(t, r, n);

          this.immediateMode._bezierVertex[0] = arguments.length <= 6 ? void 0 : arguments[6], this.immediateMode._bezierVertex[1] = arguments.length <= 7 ? void 0 : arguments[7], this.immediateMode._bezierVertex[2] = arguments.length <= 8 ? void 0 : arguments[8];
        }
      }, T.default.RendererGL.prototype.quadraticVertex = function () {
        if (0 === this.immediateMode._quadraticVertex.length) throw Error("vertex() must be used once before calling quadraticVertex()");
        var e,
            t,
            r,
            n,
            a,
            o = [],
            i = [],
            s = [],
            l = arguments.length;

        if ((e = 0) === this._lookUpTableQuadratic.length || this._lutQuadraticDetail !== this._pInst._curveDetail) {
          this._lookUpTableQuadratic = [], this._lutQuadraticDetail = this._pInst._curveDetail;

          for (var p = 1 / this._lutQuadraticDetail, u = 0, c = 1, d = 0; u < 1;) {
            if (e = parseFloat(u.toFixed(6)), this._lookUpTableQuadratic[d] = this._quadraticCoefficients(e), c.toFixed(6) === p.toFixed(6)) {
              e = parseFloat(c.toFixed(6)) + parseFloat(u.toFixed(6)), ++d, this._lookUpTableQuadratic[d] = this._quadraticCoefficients(e);
              break;
            }

            u += p, c -= p, ++d;
          }
        }

        var h = this._lookUpTableQuadratic.length;

        if (4 === l) {
          for (this.isQuadratic = !0, o = [this.immediateMode._quadraticVertex[0], arguments.length <= 0 ? void 0 : arguments[0], arguments.length <= 2 ? void 0 : arguments[2]], i = [this.immediateMode._quadraticVertex[1], arguments.length <= 1 ? void 0 : arguments[1], arguments.length <= 3 ? void 0 : arguments[3]], a = 0; a < h; a++) t = o[0] * this._lookUpTableQuadratic[a][0] + o[1] * this._lookUpTableQuadratic[a][1] + o[2] * this._lookUpTableQuadratic[a][2], r = i[0] * this._lookUpTableQuadratic[a][0] + i[1] * this._lookUpTableQuadratic[a][1] + i[2] * this._lookUpTableQuadratic[a][2], this.vertex(t, r);

          this.immediateMode._quadraticVertex[0] = arguments.length <= 2 ? void 0 : arguments[2], this.immediateMode._quadraticVertex[1] = arguments.length <= 3 ? void 0 : arguments[3];
        } else if (6 === l) {
          for (this.isQuadratic = !0, o = [this.immediateMode._quadraticVertex[0], arguments.length <= 0 ? void 0 : arguments[0], arguments.length <= 3 ? void 0 : arguments[3]], i = [this.immediateMode._quadraticVertex[1], arguments.length <= 1 ? void 0 : arguments[1], arguments.length <= 4 ? void 0 : arguments[4]], s = [this.immediateMode._quadraticVertex[2], arguments.length <= 2 ? void 0 : arguments[2], arguments.length <= 5 ? void 0 : arguments[5]], a = 0; a < h; a++) t = o[0] * this._lookUpTableQuadratic[a][0] + o[1] * this._lookUpTableQuadratic[a][1] + o[2] * this._lookUpTableQuadratic[a][2], r = i[0] * this._lookUpTableQuadratic[a][0] + i[1] * this._lookUpTableQuadratic[a][1] + i[2] * this._lookUpTableQuadratic[a][2], n = s[0] * this._lookUpTableQuadratic[a][0] + s[1] * this._lookUpTableQuadratic[a][1] + s[2] * this._lookUpTableQuadratic[a][2], this.vertex(t, r, n);

          this.immediateMode._quadraticVertex[0] = arguments.length <= 3 ? void 0 : arguments[3], this.immediateMode._quadraticVertex[1] = arguments.length <= 4 ? void 0 : arguments[4], this.immediateMode._quadraticVertex[2] = arguments.length <= 5 ? void 0 : arguments[5];
        }
      }, T.default.RendererGL.prototype.curveVertex = function () {
        var e,
            t,
            r,
            n,
            a,
            o = [],
            i = [],
            s = [],
            l = arguments.length;

        if ((e = 0) === this._lookUpTableBezier.length || this._lutBezierDetail !== this._pInst._curveDetail) {
          this._lookUpTableBezier = [], this._lutBezierDetail = this._pInst._curveDetail;

          for (var p = 1 / this._lutBezierDetail, u = 0, c = 1, d = 0; u < 1;) {
            if (e = parseFloat(u.toFixed(6)), this._lookUpTableBezier[d] = this._bezierCoefficients(e), c.toFixed(6) === p.toFixed(6)) {
              e = parseFloat(c.toFixed(6)) + parseFloat(u.toFixed(6)), ++d, this._lookUpTableBezier[d] = this._bezierCoefficients(e);
              break;
            }

            u += p, c -= p, ++d;
          }
        }

        var h = this._lookUpTableBezier.length;

        if (2 === l) {
          if (this.immediateMode._curveVertex.push(arguments.length <= 0 ? void 0 : arguments[0]), this.immediateMode._curveVertex.push(arguments.length <= 1 ? void 0 : arguments[1]), 8 === this.immediateMode._curveVertex.length) {
            for (this.isCurve = !0, o = this._bezierToCatmull([this.immediateMode._curveVertex[0], this.immediateMode._curveVertex[2], this.immediateMode._curveVertex[4], this.immediateMode._curveVertex[6]]), i = this._bezierToCatmull([this.immediateMode._curveVertex[1], this.immediateMode._curveVertex[3], this.immediateMode._curveVertex[5], this.immediateMode._curveVertex[7]]), a = 0; a < h; a++) t = o[0] * this._lookUpTableBezier[a][0] + o[1] * this._lookUpTableBezier[a][1] + o[2] * this._lookUpTableBezier[a][2] + o[3] * this._lookUpTableBezier[a][3], r = i[0] * this._lookUpTableBezier[a][0] + i[1] * this._lookUpTableBezier[a][1] + i[2] * this._lookUpTableBezier[a][2] + i[3] * this._lookUpTableBezier[a][3], this.vertex(t, r);

            for (a = 0; a < l; a++) this.immediateMode._curveVertex.shift();
          }
        } else if (3 === l && (this.immediateMode._curveVertex.push(arguments.length <= 0 ? void 0 : arguments[0]), this.immediateMode._curveVertex.push(arguments.length <= 1 ? void 0 : arguments[1]), this.immediateMode._curveVertex.push(arguments.length <= 2 ? void 0 : arguments[2]), 12 === this.immediateMode._curveVertex.length)) {
          for (this.isCurve = !0, o = this._bezierToCatmull([this.immediateMode._curveVertex[0], this.immediateMode._curveVertex[3], this.immediateMode._curveVertex[6], this.immediateMode._curveVertex[9]]), i = this._bezierToCatmull([this.immediateMode._curveVertex[1], this.immediateMode._curveVertex[4], this.immediateMode._curveVertex[7], this.immediateMode._curveVertex[10]]), s = this._bezierToCatmull([this.immediateMode._curveVertex[2], this.immediateMode._curveVertex[5], this.immediateMode._curveVertex[8], this.immediateMode._curveVertex[11]]), a = 0; a < h; a++) t = o[0] * this._lookUpTableBezier[a][0] + o[1] * this._lookUpTableBezier[a][1] + o[2] * this._lookUpTableBezier[a][2] + o[3] * this._lookUpTableBezier[a][3], r = i[0] * this._lookUpTableBezier[a][0] + i[1] * this._lookUpTableBezier[a][1] + i[2] * this._lookUpTableBezier[a][2] + i[3] * this._lookUpTableBezier[a][3], n = s[0] * this._lookUpTableBezier[a][0] + s[1] * this._lookUpTableBezier[a][1] + s[2] * this._lookUpTableBezier[a][2] + s[3] * this._lookUpTableBezier[a][3], this.vertex(t, r, n);

          for (a = 0; a < l; a++) this.immediateMode._curveVertex.shift();
        }
      }, T.default.RendererGL.prototype.image = function (e, t, r, n, a, o, i, s, l) {
        this._isErasing && this.blendMode(this._cachedBlendMode), this._pInst.push(), this._pInst.noLights(), this._pInst.texture(e), this._pInst.textureMode(h.NORMAL);
        var p = 0;
        t <= e.width && (p = t / e.width);
        var u = 1;
        t + n <= e.width && (u = (t + n) / e.width);
        var c = 0;
        r <= e.height && (c = r / e.height);
        var d = 1;
        r + a <= e.height && (d = (r + a) / e.height), this.beginShape(), this.vertex(o, i, 0, p, c), this.vertex(o + s, i, 0, u, c), this.vertex(o + s, i + l, 0, u, d), this.vertex(o, i + l, 0, p, d), this.endShape(h.CLOSE), this._pInst.pop(), this._isErasing && this.blendMode(h.REMOVE);
      };
      var a = T.default;
      r.default = a;
    }, {
      "../core/constants": 22,
      "../core/main": 32,
      "./p5.Geometry": 81
    }],
    76: [function (e, t, r) {
      "use strict";

      function i(e) {
        return (i = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (e) {
          return typeof e;
        } : function (e) {
          return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e;
        })(e);
      }

      Object.defineProperty(r, "__esModule", {
        value: !0
      }), r.default = void 0;

      var n,
          d = (n = e("../core/main")) && n.__esModule ? n : {
        default: n
      },
          a = function (e) {
        if (e && e.__esModule) return e;
        if (null === e || "object" !== i(e) && "function" != typeof e) return {
          default: e
        };
        var t = s();
        if (t && t.has(e)) return t.get(e);
        var r = {},
            n = Object.defineProperty && Object.getOwnPropertyDescriptor;

        for (var a in e) if (Object.prototype.hasOwnProperty.call(e, a)) {
          var o = n ? Object.getOwnPropertyDescriptor(e, a) : null;
          o && (o.get || o.set) ? Object.defineProperty(r, a, o) : r[a] = e[a];
        }

        r.default = e, t && t.set(e, r);
        return r;
      }(e("../core/constants"));

      function s() {
        if ("function" != typeof WeakMap) return null;
        var e = new WeakMap();
        return s = function () {
          return e;
        }, e;
      }

      d.default.prototype.orbitControl = function (e, t, r) {
        if (this._assert3d("orbitControl"), d.default._validateParameters("orbitControl", arguments), this.mouseX < this.width && 0 < this.mouseX && this.mouseY < this.height && 0 < this.mouseY) {
          var n = this._renderer._curCamera;
          void 0 === e && (e = 1), void 0 === t && (t = e), void 0 === r && (r = .5), !0 !== this.contextMenuDisabled && (this.canvas.oncontextmenu = function () {
            return !1;
          }, this._setProperty("contextMenuDisabled", !0)), !0 !== this.wheelDefaultDisabled && (this.canvas.onwheel = function () {
            return !1;
          }, this._setProperty("wheelDefaultDisabled", !0));
          var a = this.height < this.width ? this.height : this.width;
          if (this._mouseWheelDeltaY !== this._pmouseWheelDeltaY && (0 < this._mouseWheelDeltaY ? this._renderer._curCamera._orbit(0, 0, r * a) : this._renderer._curCamera._orbit(0, 0, -r * a)), this.mouseIsPressed) if (this.mouseButton === this.LEFT) {
            var o = -e * (this.mouseX - this.pmouseX) / a,
                i = t * (this.mouseY - this.pmouseY) / a;

            this._renderer._curCamera._orbit(o, i, 0);
          } else if (this.mouseButton === this.RIGHT) {
            var s = n._getLocalAxes(),
                l = Math.sqrt(s.x[0] * s.x[0] + s.x[2] * s.x[2]);

            0 !== l && (s.x[0] /= l, s.x[2] /= l);
            var p = Math.sqrt(s.y[0] * s.y[0] + s.y[2] * s.y[2]);
            0 !== p && (s.y[0] /= p, s.y[2] /= p);
            var u = -1 * e * (this.mouseX - this.pmouseX),
                c = -1 * t * (this.mouseY - this.pmouseY);
            n.setPosition(n.eyeX + u * s.x[0] + c * s.z[0], n.eyeY, n.eyeZ + u * s.x[2] + c * s.z[2]);
          }
          return this;
        }
      }, d.default.prototype.debugMode = function () {
        this._assert3d("debugMode");

        for (var e = arguments.length, t = new Array(e), r = 0; r < e; r++) t[r] = arguments[r];

        d.default._validateParameters("debugMode", t);

        for (var n = this._registeredMethods.post.length - 1; 0 <= n; n--) this._registeredMethods.post[n].toString() !== this._grid().toString() && this._registeredMethods.post[n].toString() !== this._axesIcon().toString() || this._registeredMethods.post.splice(n, 1);

        t[0] === a.GRID ? this.registerMethod("post", this._grid.call(this, t[1], t[2], t[3], t[4], t[5])) : t[0] === a.AXES ? this.registerMethod("post", this._axesIcon.call(this, t[1], t[2], t[3], t[4])) : (this.registerMethod("post", this._grid.call(this, t[0], t[1], t[2], t[3], t[4])), this.registerMethod("post", this._axesIcon.call(this, t[5], t[6], t[7], t[8])));
      }, d.default.prototype.noDebugMode = function () {
        this._assert3d("noDebugMode");

        for (var e = this._registeredMethods.post.length - 1; 0 <= e; e--) this._registeredMethods.post[e].toString() !== this._grid().toString() && this._registeredMethods.post[e].toString() !== this._axesIcon().toString() || this._registeredMethods.post.splice(e, 1);
      }, d.default.prototype._grid = function (e, r, n, a, o) {
        void 0 === e && (e = this.width / 2), void 0 === r && (r = Math.round(e / 30) < 4 ? 4 : Math.round(e / 30)), void 0 === n && (n = 0), void 0 === a && (a = 0), void 0 === o && (o = 0);
        var i = e / r,
            s = e / 2;
        return function () {
          this.push(), this.stroke(255 * this._renderer.curStrokeColor[0], 255 * this._renderer.curStrokeColor[1], 255 * this._renderer.curStrokeColor[2]), this._renderer.uMVMatrix.set(this._renderer._curCamera.cameraMatrix.mat4[0], this._renderer._curCamera.cameraMatrix.mat4[1], this._renderer._curCamera.cameraMatrix.mat4[2], this._renderer._curCamera.cameraMatrix.mat4[3], this._renderer._curCamera.cameraMatrix.mat4[4], this._renderer._curCamera.cameraMatrix.mat4[5], this._renderer._curCamera.cameraMatrix.mat4[6], this._renderer._curCamera.cameraMatrix.mat4[7], this._renderer._curCamera.cameraMatrix.mat4[8], this._renderer._curCamera.cameraMatrix.mat4[9], this._renderer._curCamera.cameraMatrix.mat4[10], this._renderer._curCamera.cameraMatrix.mat4[11], this._renderer._curCamera.cameraMatrix.mat4[12], this._renderer._curCamera.cameraMatrix.mat4[13], this._renderer._curCamera.cameraMatrix.mat4[14], this._renderer._curCamera.cameraMatrix.mat4[15]);

          for (var e = 0; e <= r; e++) this.beginShape(this.LINES), this.vertex(-s + n, a, e * i - s + o), this.vertex(+s + n, a, e * i - s + o), this.endShape();

          for (var t = 0; t <= r; t++) this.beginShape(this.LINES), this.vertex(t * i - s + n, a, -s + o), this.vertex(t * i - s + n, a, +s + o), this.endShape();

          this.pop();
        };
      }, d.default.prototype._axesIcon = function (e, t, r, n) {
        return void 0 === e && (e = 40 < this.width / 20 ? this.width / 20 : 40), void 0 === t && (t = -this.width / 4), void 0 === r && (r = t), void 0 === n && (n = t), function () {
          this.push(), this._renderer.uMVMatrix.set(this._renderer._curCamera.cameraMatrix.mat4[0], this._renderer._curCamera.cameraMatrix.mat4[1], this._renderer._curCamera.cameraMatrix.mat4[2], this._renderer._curCamera.cameraMatrix.mat4[3], this._renderer._curCamera.cameraMatrix.mat4[4], this._renderer._curCamera.cameraMatrix.mat4[5], this._renderer._curCamera.cameraMatrix.mat4[6], this._renderer._curCamera.cameraMatrix.mat4[7], this._renderer._curCamera.cameraMatrix.mat4[8], this._renderer._curCamera.cameraMatrix.mat4[9], this._renderer._curCamera.cameraMatrix.mat4[10], this._renderer._curCamera.cameraMatrix.mat4[11], this._renderer._curCamera.cameraMatrix.mat4[12], this._renderer._curCamera.cameraMatrix.mat4[13], this._renderer._curCamera.cameraMatrix.mat4[14], this._renderer._curCamera.cameraMatrix.mat4[15]), this.strokeWeight(2), this.stroke(255, 0, 0), this.beginShape(this.LINES), this.vertex(t, r, n), this.vertex(t + e, r, n), this.endShape(), this.stroke(0, 255, 0), this.beginShape(this.LINES), this.vertex(t, r, n), this.vertex(t, r + e, n), this.endShape(), this.stroke(0, 0, 255), this.beginShape(this.LINES), this.vertex(t, r, n), this.vertex(t, r, n + e), this.endShape(), this.pop();
        };
      };
      var o = d.default;
      r.default = o;
    }, {
      "../core/constants": 22,
      "../core/main": 32
    }],
    77: [function (e, t, r) {
      "use strict";

      Object.defineProperty(r, "__esModule", {
        value: !0
      }), r.default = void 0;
      var n,
          f = (n = e("../core/main")) && n.__esModule ? n : {
        default: n
      };
      f.default.prototype.ambientLight = function (e, t, r, n) {
        this._assert3d("ambientLight"), f.default._validateParameters("ambientLight", arguments);
        var a = this.color.apply(this, arguments);
        return this._renderer.ambientLightColors.push(a._array[0], a._array[1], a._array[2]), this._renderer._enableLighting = !0, this;
      }, f.default.prototype.specularColor = function (e, t, r) {
        this._assert3d("specularColor"), f.default._validateParameters("specularColor", arguments);
        var n = this.color.apply(this, arguments);
        return this._renderer.specularColors = [n._array[0], n._array[1], n._array[2]], this;
      }, f.default.prototype.directionalLight = function (e, t, r, n, a, o) {
        var i, s, l, p;
        this._assert3d("directionalLight"), f.default._validateParameters("directionalLight", arguments), i = e instanceof f.default.Color ? e : this.color(e, t, r);
        var u = arguments[arguments.length - 1];
        p = "number" == typeof u ? (s = arguments[arguments.length - 3], l = arguments[arguments.length - 2], arguments[arguments.length - 1]) : (s = u.x, l = u.y, u.z);
        var c = Math.sqrt(s * s + l * l + p * p);
        return this._renderer.directionalLightDirections.push(s / c, l / c, p / c), this._renderer.directionalLightDiffuseColors.push(i._array[0], i._array[1], i._array[2]), Array.prototype.push.apply(this._renderer.directionalLightSpecularColors, this._renderer.specularColors), this._renderer._enableLighting = !0, this;
      }, f.default.prototype.pointLight = function (e, t, r, n, a, o) {
        var i, s, l, p;
        this._assert3d("pointLight"), f.default._validateParameters("pointLight", arguments), i = e instanceof f.default.Color ? e : this.color(e, t, r);
        var u = arguments[arguments.length - 1];
        return p = "number" == typeof u ? (s = arguments[arguments.length - 3], l = arguments[arguments.length - 2], arguments[arguments.length - 1]) : (s = u.x, l = u.y, u.z), this._renderer.pointLightPositions.push(s, l, p), this._renderer.pointLightDiffuseColors.push(i._array[0], i._array[1], i._array[2]), Array.prototype.push.apply(this._renderer.pointLightSpecularColors, this._renderer.specularColors), this._renderer._enableLighting = !0, this;
      }, f.default.prototype.lights = function () {
        return this._assert3d("lights"), this.ambientLight(128, 128, 128), this.directionalLight(128, 128, 128, 0, 0, -1), this;
      }, f.default.prototype.lightFalloff = function (e, t, r) {
        return this._assert3d("lightFalloff"), f.default._validateParameters("lightFalloff", arguments), e < 0 && (e = 0, console.warn("Value of constant argument in lightFalloff() should be never be negative. Set to 0.")), t < 0 && (t = 0, console.warn("Value of linear argument in lightFalloff() should be never be negative. Set to 0.")), r < 0 && (r = 0, console.warn("Value of quadratic argument in lightFalloff() should be never be negative. Set to 0.")), 0 === e && 0 === t && 0 === r && (e = 1, console.warn("Either one of the three arguments in lightFalloff() should be greater than zero. Set constant argument to 1.")), this._renderer.constantAttenuation = e, this._renderer.linearAttenuation = t, this._renderer.quadraticAttenuation = r, this;
      }, f.default.prototype.spotLight = function (e, t, r, n, a, o, i, s, l, p, u) {
        var c, d, h;
        this._assert3d("spotLight"), f.default._validateParameters("spotLight", arguments);
        var m = arguments.length;

        switch (m) {
          case 11:
          case 10:
            c = this.color(e, t, r), d = new f.default.Vector(n, a, o), h = new f.default.Vector(i, s, l);
            break;

          case 9:
            e instanceof f.default.Color ? (c = e, d = new f.default.Vector(t, r, n), h = new f.default.Vector(a, o, i), p = s, u = l) : n instanceof f.default.Vector ? (c = this.color(e, t, r), d = n, h = new f.default.Vector(a, o, i), p = s, u = l) : i instanceof f.default.Vector ? (c = this.color(e, t, r), d = new f.default.Vector(n, a, o), h = i, p = s, u = l) : (c = this.color(e, t, r), d = new f.default.Vector(n, a, o), h = new f.default.Vector(i, s, l));
            break;

          case 8:
            p = (h = e instanceof f.default.Color ? (c = e, d = new f.default.Vector(t, r, n), new f.default.Vector(a, o, i)) : n instanceof f.default.Vector ? (c = this.color(e, t, r), d = n, new f.default.Vector(a, o, i)) : (c = this.color(e, t, r), d = new f.default.Vector(n, a, o), i), s);
            break;

          case 7:
            e instanceof f.default.Color && t instanceof f.default.Vector ? (c = e, d = t, h = new f.default.Vector(r, n, a), p = o, u = i) : e instanceof f.default.Color && a instanceof f.default.Vector ? (c = e, d = new f.default.Vector(t, r, n), h = a, p = o, u = i) : n instanceof f.default.Vector && a instanceof f.default.Vector ? (c = this.color(e, t, r), d = n, h = a, p = o, u = i) : h = e instanceof f.default.Color ? (c = e, d = new f.default.Vector(t, r, n), new f.default.Vector(a, o, i)) : n instanceof f.default.Vector ? (c = this.color(e, t, r), d = n, new f.default.Vector(a, o, i)) : (c = this.color(e, t, r), d = new f.default.Vector(n, a, o), i);
            break;

          case 6:
            n instanceof f.default.Vector && a instanceof f.default.Vector ? (c = this.color(e, t, r), d = n, h = a, p = o) : e instanceof f.default.Color && a instanceof f.default.Vector ? (c = e, d = new f.default.Vector(t, r, n), h = a, p = o) : e instanceof f.default.Color && t instanceof f.default.Vector && (c = e, d = t, h = new f.default.Vector(r, n, a), p = o);
            break;

          case 5:
            e instanceof f.default.Color && t instanceof f.default.Vector && r instanceof f.default.Vector ? (c = e, d = t, h = r, p = n, u = a) : n instanceof f.default.Vector && a instanceof f.default.Vector ? (c = this.color(e, t, r), d = n, h = a) : e instanceof f.default.Color && a instanceof f.default.Vector ? (c = e, d = new f.default.Vector(t, r, n), h = a) : e instanceof f.default.Color && t instanceof f.default.Vector && (c = e, d = t, h = new f.default.Vector(r, n, a));
            break;

          case 4:
            c = e, d = t, h = r, p = n;
            break;

          case 3:
            c = e, d = t, h = r;
            break;

          default:
            return console.warn("Sorry, input for spotlight() is not in prescribed format. Too ".concat(m < 3 ? "few" : "many", " arguments were provided")), this;
        }

        return this._renderer.spotLightDiffuseColors.push(c._array[0], c._array[1], c._array[2]), Array.prototype.push.apply(this._renderer.spotLightSpecularColors, this._renderer.specularColors), this._renderer.spotLightPositions.push(d.x, d.y, d.z), h.normalize(), this._renderer.spotLightDirections.push(h.x, h.y, h.z), void 0 === p && (p = Math.PI / 3), void 0 !== u && u < 1 ? (u = 1, console.warn("Value of concentration needs to be greater than 1. Setting it to 1")) : void 0 === u && (u = 100), p = this._renderer._pInst._toRadians(p), this._renderer.spotLightAngle.push(Math.cos(p)), this._renderer.spotLightConc.push(u), this._renderer._enableLighting = !0, this;
      }, f.default.prototype.noLights = function () {
        return this._assert3d("noLights"), f.default._validateParameters("noLights", arguments), this._renderer._enableLighting = !1, this._renderer.ambientLightColors.length = 0, this._renderer.specularColors = [1, 1, 1], this._renderer.directionalLightDirections.length = 0, this._renderer.directionalLightDiffuseColors.length = 0, this._renderer.directionalLightSpecularColors.length = 0, this._renderer.pointLightPositions.length = 0, this._renderer.pointLightDiffuseColors.length = 0, this._renderer.pointLightSpecularColors.length = 0, this._renderer.spotLightPositions.length = 0, this._renderer.spotLightDirections.length = 0, this._renderer.spotLightDiffuseColors.length = 0, this._renderer.spotLightSpecularColors.length = 0, this._renderer.spotLightAngle.length = 0, this._renderer.spotLightConc.length = 0, this._renderer.constantAttenuation = 1, this._renderer.linearAttenuation = 0, this._renderer.quadraticAttenuation = 0, this._renderer._useShininess = 1, this;
      };
      var a = f.default;
      r.default = a;
    }, {
      "../core/main": 32
    }],
    78: [function (e, t, r) {
      "use strict";

      Object.defineProperty(r, "__esModule", {
        value: !0
      }), r.default = void 0;
      var n,
          w = (n = e("../core/main")) && n.__esModule ? n : {
        default: n
      };

      function s(e, t, r) {
        for (var n = 0, a = e.length; n < a; n++) if (e[n] !== t.getUint8(r + n, !1)) return !1;

        return !0;
      }

      e("./p5.Geometry"), w.default.prototype.loadModel = function (e) {
        var t, r, n;

        w.default._validateParameters("loadModel", arguments);

        var a = e.slice(-4);
        "boolean" == typeof arguments[1] ? (t = arguments[1], r = arguments[2], n = arguments[3], void 0 !== arguments[4] && (a = arguments[4])) : (t = !1, r = arguments[1], n = arguments[2], void 0 !== arguments[3] && (a = arguments[3]));
        var o = new w.default.Geometry();
        o.gid = "".concat(e, "|").concat(t);
        var i = this;
        return a.match(/\.stl$/i) ? this.httpDo(e, "GET", "arrayBuffer", function (e) {
          !function (e, t) {
            if (function (e) {
              for (var t = new DataView(e), r = [115, 111, 108, 105, 100], n = 0; n < 5; n++) if (s(r, t, n)) return !1;

              return !0;
            }(t)) !function (e, t) {
              for (var r, n, a, o, i, s, l, p = new DataView(t), u = p.getUint32(80, !0), c = !1, d = 0; d < 70; d++) 1129270351 === p.getUint32(d, !1) && 82 === p.getUint8(d + 4) && 61 === p.getUint8(d + 5) && (c = !0, o = [], i = p.getUint8(d + 6) / 255, s = p.getUint8(d + 7) / 255, l = p.getUint8(d + 8) / 255);

              for (var h = 0; h < u; h++) {
                var m = 84 + 50 * h,
                    f = p.getFloat32(m, !0),
                    y = p.getFloat32(4 + m, !0),
                    g = p.getFloat32(8 + m, !0);

                if (c) {
                  var v = p.getUint16(48 + m, !0);
                  a = 0 == (32768 & v) ? (r = (31 & v) / 31, n = (v >> 5 & 31) / 31, (v >> 10 & 31) / 31) : (r = i, n = s, l);
                }

                for (var b = new w.default.Vector(f, y, g), _ = 1; _ <= 3; _++) {
                  var x = m + 12 * _,
                      S = new w.default.Vector(p.getFloat32(x, !0), p.getFloat32(4 + x, !0), p.getFloat32(8 + x, !0));
                  e.vertices.push(S), e.vertexNormals.push(b), c && o.push(r, n, a);
                }

                e.faces.push([3 * h, 3 * h + 1, 3 * h + 2]), e.uvs.push([0, 0], [0, 0], [0, 0]);
              }
            }(e, t);else {
              var r = new DataView(t);
              if (!("TextDecoder" in window)) return console.warn("Sorry, ASCII STL loading only works in browsers that support TextDecoder (https://caniuse.com/#feat=textencoder)");
              var n = new TextDecoder("utf-8").decode(r).split("\n");
              !function (e, t) {
                for (var r, n, a = "", o = [], i = 0; i < t.length; ++i) {
                  for (var s = t[i].trim(), l = s.split(" "), p = 0; p < l.length; ++p) "" === l[p] && l.splice(p, 1);

                  if (0 !== l.length) switch (a) {
                    case "":
                      if ("solid" !== l[0]) return console.error(s), console.error('Invalid state "'.concat(l[0], '", should be "solid"'));
                      a = "solid";
                      break;

                    case "solid":
                      if ("facet" !== l[0] || "normal" !== l[1]) return console.error(s), console.error('Invalid state "'.concat(l[0], '", should be "facet normal"'));
                      r = new w.default.Vector(parseFloat(l[2]), parseFloat(l[3]), parseFloat(l[4])), e.vertexNormals.push(r, r, r), a = "facet normal";
                      break;

                    case "facet normal":
                      if ("outer" !== l[0] || "loop" !== l[1]) return console.error(s), console.error('Invalid state "'.concat(l[0], '", should be "outer loop"'));
                      a = "vertex";
                      break;

                    case "vertex":
                      if ("vertex" === l[0]) n = new w.default.Vector(parseFloat(l[1]), parseFloat(l[2]), parseFloat(l[3])), e.vertices.push(n), e.uvs.push([0, 0]), o.push(e.vertices.indexOf(n));else {
                        if ("endloop" !== l[0]) return console.error(s), console.error('Invalid state "'.concat(l[0], '", should be "vertex" or "endloop"'));
                        e.faces.push(o), o = [], a = "endloop";
                      }
                      break;

                    case "endloop":
                      if ("endfacet" !== l[0]) return console.error(s), console.error('Invalid state "'.concat(l[0], '", should be "endfacet"'));
                      a = "endfacet";
                      break;

                    case "endfacet":
                      if ("endsolid" !== l[0]) {
                        if ("facet" !== l[0] || "normal" !== l[1]) return console.error(s), console.error('Invalid state "'.concat(l[0], '", should be "endsolid" or "facet normal"'));
                        r = new w.default.Vector(parseFloat(l[2]), parseFloat(l[3]), parseFloat(l[4])), e.vertexNormals.push(r, r, r), a = "facet normal";
                      }

                      break;

                    default:
                      console.error('Invalid state "'.concat(a, '"'));
                  }
                }
              }(e, n);
            }
          }(o, e), t && o.normalize(), i._decrementPreload(), "function" == typeof r && r(o);
        }, n) : a.match(/\.obj$/i) ? this.loadStrings(e, function (e) {
          !function (e, t) {
            for (var r = {
              v: [],
              vt: [],
              vn: []
            }, n = {}, a = 0; a < t.length; ++a) {
              var o = t[a].trim().split(/\b\s+/);
              if (0 < o.length) if ("v" === o[0] || "vn" === o[0]) {
                var i = new w.default.Vector(parseFloat(o[1]), parseFloat(o[2]), parseFloat(o[3]));
                r[o[0]].push(i);
              } else if ("vt" === o[0]) {
                var s = [parseFloat(o[1]), parseFloat(o[2])];
                r[o[0]].push(s);
              } else if ("f" === o[0]) for (var l = 3; l < o.length; ++l) {
                for (var p = [], u = [1, l - 1, l], c = 0; c < u.length; ++c) {
                  var d = o[u[c]],
                      h = 0;
                  if (void 0 !== n[d]) h = n[d];else {
                    for (var m = d.split("/"), f = 0; f < m.length; f++) m[f] = parseInt(m[f]) - 1;

                    h = n[d] = e.vertices.length, e.vertices.push(r.v[m[0]].copy()), r.vt[m[1]] ? e.uvs.push(r.vt[m[1]].slice()) : e.uvs.push([0, 0]), r.vn[m[2]] && e.vertexNormals.push(r.vn[m[2]].copy());
                  }
                  p.push(h);
                }

                p[0] !== p[1] && p[0] !== p[2] && p[1] !== p[2] && e.faces.push(p);
              }
            }

            0 === e.vertexNormals.length && e.computeNormals();
          }(o, e), t && o.normalize(), i._decrementPreload(), "function" == typeof r && r(o);
        }, n) : (w.default._friendlyFileLoadError(3, e), n ? n() : console.error("Sorry, the file type is invalid. Only OBJ and STL files are supported.")), o;
      }, w.default.prototype.model = function (e) {
        this._assert3d("model"), w.default._validateParameters("model", arguments), 0 < e.vertices.length && (this._renderer.geometryInHash(e.gid) || (e._makeTriangleEdges()._edgesToVertices(), this._renderer.createBuffers(e.gid, e)), this._renderer.drawBuffers(e.gid));
      };
      var a = w.default;
      r.default = a;
    }, {
      "../core/main": 32,
      "./p5.Geometry": 81
    }],
    79: [function (e, t, r) {
      "use strict";

      function i(e) {
        return (i = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (e) {
          return typeof e;
        } : function (e) {
          return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e;
        })(e);
      }

      Object.defineProperty(r, "__esModule", {
        value: !0
      }), r.default = void 0;

      var n,
          p = (n = e("../core/main")) && n.__esModule ? n : {
        default: n
      },
          a = function (e) {
        if (e && e.__esModule) return e;
        if (null === e || "object" !== i(e) && "function" != typeof e) return {
          default: e
        };
        var t = s();
        if (t && t.has(e)) return t.get(e);
        var r = {},
            n = Object.defineProperty && Object.getOwnPropertyDescriptor;

        for (var a in e) if (Object.prototype.hasOwnProperty.call(e, a)) {
          var o = n ? Object.getOwnPropertyDescriptor(e, a) : null;
          o && (o.get || o.set) ? Object.defineProperty(r, a, o) : r[a] = e[a];
        }

        r.default = e, t && t.set(e, r);
        return r;
      }(e("../core/constants"));

      function s() {
        if ("function" != typeof WeakMap) return null;
        var e = new WeakMap();
        return s = function () {
          return e;
        }, e;
      }

      e("./p5.Texture"), p.default.prototype.loadShader = function (e, t, r, n) {
        p.default._validateParameters("loadShader", arguments), n = n || console.error;

        function a() {
          i._decrementPreload(), r && r(o);
        }

        var o = new p.default.Shader(),
            i = this,
            s = !1,
            l = !1;
        return this.loadStrings(e, function (e) {
          o._vertSrc = e.join("\n"), l = !0, s && a();
        }, n), this.loadStrings(t, function (e) {
          o._fragSrc = e.join("\n"), s = !0, l && a();
        }, n), o;
      }, p.default.prototype.createShader = function (e, t) {
        return this._assert3d("createShader"), p.default._validateParameters("createShader", arguments), new p.default.Shader(this._renderer, e, t);
      }, p.default.prototype.shader = function (e) {
        return this._assert3d("shader"), p.default._validateParameters("shader", arguments), void 0 === e._renderer && (e._renderer = this._renderer), e.isStrokeShader() ? this._renderer.userStrokeShader = e : (this._renderer.userFillShader = e, this._renderer._useNormalMaterial = !1), e.init(), this;
      }, p.default.prototype.resetShader = function () {
        return this._renderer.userFillShader = this._renderer.userStrokeShader = null, this;
      }, p.default.prototype.normalMaterial = function () {
        this._assert3d("normalMaterial");

        for (var e = arguments.length, t = new Array(e), r = 0; r < e; r++) t[r] = arguments[r];

        return p.default._validateParameters("normalMaterial", t), this._renderer.drawMode = a.FILL, this._renderer._useSpecularMaterial = !1, this._renderer._useEmissiveMaterial = !1, this._renderer._useNormalMaterial = !0, this._renderer.curFillColor = [1, 1, 1, 1], this._renderer._setProperty("_doFill", !0), this.noStroke(), this;
      }, p.default.prototype.texture = function (e) {
        return this._assert3d("texture"), p.default._validateParameters("texture", arguments), e.gifProperties && e._animateGif(this), this._renderer.drawMode = a.TEXTURE, this._renderer._useSpecularMaterial = !1, this._renderer._useEmissiveMaterial = !1, this._renderer._useNormalMaterial = !1, this._renderer._tex = e, this._renderer._setProperty("_doFill", !0), this;
      }, p.default.prototype.textureMode = function (e) {
        e !== a.IMAGE && e !== a.NORMAL ? console.warn("You tried to set ".concat(e, " textureMode only supports IMAGE & NORMAL ")) : this._renderer.textureMode = e;
      }, p.default.prototype.textureWrap = function (e) {
        var t = 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : e;
        this._renderer.textureWrapX = e, this._renderer.textureWrapY = t;

        for (var r = this._renderer.textures, n = 0; n < r.length; n++) r[n].setWrapMode(e, t);
      }, p.default.prototype.ambientMaterial = function (e, t, r) {
        this._assert3d("ambientMaterial"), p.default._validateParameters("ambientMaterial", arguments);
        var n = p.default.prototype.color.apply(this, arguments);
        return this._renderer.curFillColor = n._array, this._renderer._useSpecularMaterial = !1, this._renderer._useEmissiveMaterial = !1, this._renderer._useNormalMaterial = !1, this._renderer._enableLighting = !0, this._renderer._tex = null, this;
      }, p.default.prototype.emissiveMaterial = function (e, t, r, n) {
        this._assert3d("emissiveMaterial"), p.default._validateParameters("emissiveMaterial", arguments);
        var a = p.default.prototype.color.apply(this, arguments);
        return this._renderer.curFillColor = a._array, this._renderer._useSpecularMaterial = !1, this._renderer._useEmissiveMaterial = !0, this._renderer._useNormalMaterial = !1, this._renderer._enableLighting = !0, this._renderer._tex = null, this;
      }, p.default.prototype.specularMaterial = function (e, t, r, n) {
        this._assert3d("specularMaterial"), p.default._validateParameters("specularMaterial", arguments);
        var a = p.default.prototype.color.apply(this, arguments);
        return this._renderer.curFillColor = a._array, this._renderer._useSpecularMaterial = !0, this._renderer._useEmissiveMaterial = !1, this._renderer._useNormalMaterial = !1, this._renderer._enableLighting = !0, this._renderer._tex = null, this;
      }, p.default.prototype.shininess = function (e) {
        return this._assert3d("shininess"), p.default._validateParameters("shininess", arguments), e < 1 && (e = 1), this._renderer._useShininess = e, this;
      }, p.default.RendererGL.prototype._applyColorBlend = function (e) {
        var t = this.GL,
            r = this.drawMode === a.TEXTURE || e[e.length - 1] < 1 || this._isErasing;
        return r !== this._isBlending && (r || this.curBlendMode !== a.BLEND && this.curBlendMode !== a.ADD ? t.enable(t.BLEND) : t.disable(t.BLEND), t.depthMask(!0), this._isBlending = r), this._applyBlendMode(), e;
      }, p.default.RendererGL.prototype._applyBlendMode = function () {
        if (this._cachedBlendMode !== this.curBlendMode) {
          var e = this.GL;

          switch (this.curBlendMode) {
            case a.BLEND:
            case a.ADD:
              e.blendEquation(e.FUNC_ADD), e.blendFunc(e.SRC_ALPHA, e.ONE_MINUS_SRC_ALPHA);
              break;

            case a.REMOVE:
              e.blendEquation(e.FUNC_REVERSE_SUBTRACT), e.blendFunc(e.SRC_ALPHA, e.DST_ALPHA);
              break;

            case a.MULTIPLY:
              e.blendEquationSeparate(e.FUNC_ADD, e.FUNC_ADD), e.blendFuncSeparate(e.ZERO, e.SRC_COLOR, e.ONE, e.ONE);
              break;

            case a.SCREEN:
              e.blendEquationSeparate(e.FUNC_ADD, e.FUNC_ADD), e.blendFuncSeparate(e.ONE_MINUS_DST_COLOR, e.ONE, e.ONE, e.ONE);
              break;

            case a.EXCLUSION:
              e.blendEquationSeparate(e.FUNC_ADD, e.FUNC_ADD), e.blendFuncSeparate(e.ONE_MINUS_DST_COLOR, e.ONE_MINUS_SRC_COLOR, e.ONE, e.ONE);
              break;

            case a.REPLACE:
              e.blendEquation(e.FUNC_ADD), e.blendFunc(e.ONE, e.ZERO);
              break;

            case a.SUBTRACT:
              e.blendEquationSeparate(e.FUNC_REVERSE_SUBTRACT, e.FUNC_ADD), e.blendFuncSeparate(e.SRC_ALPHA, e.ONE, e.ONE, e.ONE);
              break;

            case a.DARKEST:
              this.blendExt ? (e.blendEquationSeparate(this.blendExt.MIN_EXT, e.FUNC_ADD), e.blendFuncSeparate(e.ONE, e.ONE, e.ONE, e.ONE)) : console.warn("blendMode(DARKEST) does not work in your browser in WEBGL mode.");
              break;

            case a.LIGHTEST:
              this.blendExt ? (e.blendEquationSeparate(this.blendExt.MAX_EXT, e.FUNC_ADD), e.blendFuncSeparate(e.ONE, e.ONE, e.ONE, e.ONE)) : console.warn("blendMode(LIGHTEST) does not work in your browser in WEBGL mode.");
              break;

            default:
              console.error("Oops! Somehow RendererGL set curBlendMode to an unsupported mode.");
          }

          this._isErasing || (this._cachedBlendMode = this.curBlendMode);
        }
      };
      var o = p.default;
      r.default = o;
    }, {
      "../core/constants": 22,
      "../core/main": 32,
      "./p5.Texture": 88
    }],
    80: [function (e, t, r) {
      "use strict";

      Object.defineProperty(r, "__esModule", {
        value: !0
      }), r.default = void 0;
      var n,
          f = (n = e("../core/main")) && n.__esModule ? n : {
        default: n
      };
      f.default.prototype.camera = function () {
        var e;

        this._assert3d("camera");

        for (var t = arguments.length, r = new Array(t), n = 0; n < t; n++) r[n] = arguments[n];

        return f.default._validateParameters("camera", r), (e = this._renderer._curCamera).camera.apply(e, r), this;
      }, f.default.prototype.perspective = function () {
        var e;

        this._assert3d("perspective");

        for (var t = arguments.length, r = new Array(t), n = 0; n < t; n++) r[n] = arguments[n];

        return f.default._validateParameters("perspective", r), (e = this._renderer._curCamera).perspective.apply(e, r), this;
      }, f.default.prototype.ortho = function () {
        var e;

        this._assert3d("ortho");

        for (var t = arguments.length, r = new Array(t), n = 0; n < t; n++) r[n] = arguments[n];

        return f.default._validateParameters("ortho", r), (e = this._renderer._curCamera).ortho.apply(e, r), this;
      }, f.default.prototype.frustum = function () {
        var e;

        this._assert3d("frustum");

        for (var t = arguments.length, r = new Array(t), n = 0; n < t; n++) r[n] = arguments[n];

        return f.default._validateParameters("frustum", r), (e = this._renderer._curCamera).frustum.apply(e, r), this;
      }, f.default.prototype.createCamera = function () {
        this._assert3d("createCamera");

        var e = new f.default.Camera(this._renderer);
        return e._computeCameraDefaultSettings(), e._setDefaultCamera(), this._renderer._curCamera = e;
      }, f.default.Camera = function (e) {
        this._renderer = e, this.cameraType = "default", this.cameraMatrix = new f.default.Matrix(), this.projMatrix = new f.default.Matrix();
      }, f.default.Camera.prototype.perspective = function (e, t, r, n) {
        this.cameraType = 0 < arguments.length ? "custom" : "default", void 0 === e ? (e = this.defaultCameraFOV, this.cameraFOV = e) : this.cameraFOV = this._renderer._pInst._toRadians(e), void 0 === t && (t = this.defaultAspectRatio), void 0 === r && (r = this.defaultCameraNear), void 0 === n && (n = this.defaultCameraFar), r <= 1e-4 && (r = .01, console.log("Avoid perspective near plane values close to or below 0. Setting value to 0.01.")), n < r && console.log("Perspective far plane value is less than near plane value. Nothing will be shown."), this.aspectRatio = t, this.cameraNear = r, this.cameraFar = n, this.projMatrix = f.default.Matrix.identity();
        var a = 1 / Math.tan(this.cameraFOV / 2),
            o = 1 / (this.cameraNear - this.cameraFar);
        this.projMatrix.set(a / t, 0, 0, 0, 0, -a, 0, 0, 0, 0, (n + r) * o, -1, 0, 0, 2 * n * r * o, 0), this._isActive() && this._renderer.uPMatrix.set(this.projMatrix.mat4[0], this.projMatrix.mat4[1], this.projMatrix.mat4[2], this.projMatrix.mat4[3], this.projMatrix.mat4[4], this.projMatrix.mat4[5], this.projMatrix.mat4[6], this.projMatrix.mat4[7], this.projMatrix.mat4[8], this.projMatrix.mat4[9], this.projMatrix.mat4[10], this.projMatrix.mat4[11], this.projMatrix.mat4[12], this.projMatrix.mat4[13], this.projMatrix.mat4[14], this.projMatrix.mat4[15]);
      }, f.default.Camera.prototype.ortho = function (e, t, r, n, a, o) {
        void 0 === e && (e = -this._renderer.width / 2), void 0 === t && (t = this._renderer.width / 2), void 0 === r && (r = -this._renderer.height / 2), void 0 === n && (n = this._renderer.height / 2), void 0 === a && (a = 0), void 0 === o && (o = Math.max(this._renderer.width, this._renderer.height));
        var i = t - e,
            s = n - r,
            l = o - a,
            p = 2 / i,
            u = 2 / s,
            c = -2 / l,
            d = -(t + e) / i,
            h = -(n + r) / s,
            m = -(o + a) / l;
        this.projMatrix = f.default.Matrix.identity(), this.projMatrix.set(p, 0, 0, 0, 0, -u, 0, 0, 0, 0, c, 0, d, h, m, 1), this._isActive() && this._renderer.uPMatrix.set(this.projMatrix.mat4[0], this.projMatrix.mat4[1], this.projMatrix.mat4[2], this.projMatrix.mat4[3], this.projMatrix.mat4[4], this.projMatrix.mat4[5], this.projMatrix.mat4[6], this.projMatrix.mat4[7], this.projMatrix.mat4[8], this.projMatrix.mat4[9], this.projMatrix.mat4[10], this.projMatrix.mat4[11], this.projMatrix.mat4[12], this.projMatrix.mat4[13], this.projMatrix.mat4[14], this.projMatrix.mat4[15]), this.cameraType = "custom";
      }, f.default.Camera.prototype.frustum = function (e, t, r, n, a, o) {
        void 0 === e && (e = -this._renderer.width / 2), void 0 === t && (t = this._renderer.width / 2), void 0 === r && (r = -this._renderer.height / 2), void 0 === n && (n = this._renderer.height / 2), void 0 === a && (a = 0), void 0 === o && (o = Math.max(this._renderer.width, this._renderer.height));
        var i = t - e,
            s = n - r,
            l = o - a,
            p = 2 * a / i,
            u = 2 * a / s,
            c = -2 * o * a / l,
            d = (t + e) / i,
            h = (n + r) / s,
            m = -(o + a) / l;
        this.projMatrix = f.default.Matrix.identity(), this.projMatrix.set(p, 0, 0, 0, 0, u, 0, 0, d, h, m, -1, 0, 0, c, 0), this._isActive() && this._renderer.uPMatrix.set(this.projMatrix.mat4[0], this.projMatrix.mat4[1], this.projMatrix.mat4[2], this.projMatrix.mat4[3], this.projMatrix.mat4[4], this.projMatrix.mat4[5], this.projMatrix.mat4[6], this.projMatrix.mat4[7], this.projMatrix.mat4[8], this.projMatrix.mat4[9], this.projMatrix.mat4[10], this.projMatrix.mat4[11], this.projMatrix.mat4[12], this.projMatrix.mat4[13], this.projMatrix.mat4[14], this.projMatrix.mat4[15]), this.cameraType = "custom";
      }, f.default.Camera.prototype._rotateView = function (e, t, r, n) {
        var a = this.centerX,
            o = this.centerY,
            i = this.centerZ;
        a -= this.eyeX, o -= this.eyeY, i -= this.eyeZ;
        var s = f.default.Matrix.identity(this._renderer._pInst);
        s.rotate(this._renderer._pInst._toRadians(e), t, r, n);
        var l = [a * s.mat4[0] + o * s.mat4[4] + i * s.mat4[8], a * s.mat4[1] + o * s.mat4[5] + i * s.mat4[9], a * s.mat4[2] + o * s.mat4[6] + i * s.mat4[10]];
        l[0] += this.eyeX, l[1] += this.eyeY, l[2] += this.eyeZ, this.camera(this.eyeX, this.eyeY, this.eyeZ, l[0], l[1], l[2], this.upX, this.upY, this.upZ);
      }, f.default.Camera.prototype.pan = function (e) {
        var t = this._getLocalAxes();

        this._rotateView(e, t.y[0], t.y[1], t.y[2]);
      }, f.default.Camera.prototype.tilt = function (e) {
        var t = this._getLocalAxes();

        this._rotateView(e, t.x[0], t.x[1], t.x[2]);
      }, f.default.Camera.prototype.lookAt = function (e, t, r) {
        this.camera(this.eyeX, this.eyeY, this.eyeZ, e, t, r, this.upX, this.upY, this.upZ);
      }, f.default.Camera.prototype.camera = function (e, t, r, n, a, o, i, s, l) {
        void 0 === e && (e = this.defaultEyeX, t = this.defaultEyeY, r = this.defaultEyeZ, n = e, a = t, s = 1, l = i = o = 0), this.eyeX = e, this.eyeY = t, this.eyeZ = r, this.centerX = n, this.centerY = a, this.centerZ = o, this.upX = i, this.upY = s, this.upZ = l;

        var p = this._getLocalAxes();

        this.cameraMatrix.set(p.x[0], p.y[0], p.z[0], 0, p.x[1], p.y[1], p.z[1], 0, p.x[2], p.y[2], p.z[2], 0, 0, 0, 0, 1);
        var u = -e,
            c = -t,
            d = -r;
        return this.cameraMatrix.translate([u, c, d]), this._isActive() && this._renderer.uMVMatrix.set(this.cameraMatrix.mat4[0], this.cameraMatrix.mat4[1], this.cameraMatrix.mat4[2], this.cameraMatrix.mat4[3], this.cameraMatrix.mat4[4], this.cameraMatrix.mat4[5], this.cameraMatrix.mat4[6], this.cameraMatrix.mat4[7], this.cameraMatrix.mat4[8], this.cameraMatrix.mat4[9], this.cameraMatrix.mat4[10], this.cameraMatrix.mat4[11], this.cameraMatrix.mat4[12], this.cameraMatrix.mat4[13], this.cameraMatrix.mat4[14], this.cameraMatrix.mat4[15]), this;
      }, f.default.Camera.prototype.move = function (e, t, r) {
        var n = this._getLocalAxes(),
            a = [n.x[0] * e, n.x[1] * e, n.x[2] * e],
            o = [n.y[0] * t, n.y[1] * t, n.y[2] * t],
            i = [n.z[0] * r, n.z[1] * r, n.z[2] * r];

        this.camera(this.eyeX + a[0] + o[0] + i[0], this.eyeY + a[1] + o[1] + i[1], this.eyeZ + a[2] + o[2] + i[2], this.centerX + a[0] + o[0] + i[0], this.centerY + a[1] + o[1] + i[1], this.centerZ + a[2] + o[2] + i[2], 0, 1, 0);
      }, f.default.Camera.prototype.setPosition = function (e, t, r) {
        var n = e - this.eyeX,
            a = t - this.eyeY,
            o = r - this.eyeZ;
        this.camera(e, t, r, this.centerX + n, this.centerY + a, this.centerZ + o, 0, 1, 0);
      }, f.default.Camera.prototype._computeCameraDefaultSettings = function () {
        this.defaultCameraFOV = 60 / 180 * Math.PI, this.defaultAspectRatio = this._renderer.width / this._renderer.height, this.defaultEyeX = 0, this.defaultEyeY = 0, this.defaultEyeZ = this._renderer.height / 2 / Math.tan(this.defaultCameraFOV / 2), this.defaultCenterX = 0, this.defaultCenterY = 0, this.defaultCenterZ = 0, this.defaultCameraNear = .1 * this.defaultEyeZ, this.defaultCameraFar = 10 * this.defaultEyeZ;
      }, f.default.Camera.prototype._setDefaultCamera = function () {
        this.cameraFOV = this.defaultCameraFOV, this.aspectRatio = this.defaultAspectRatio, this.eyeX = this.defaultEyeX, this.eyeY = this.defaultEyeY, this.eyeZ = this.defaultEyeZ, this.centerX = this.defaultCenterX, this.centerY = this.defaultCenterY, this.centerZ = this.defaultCenterZ, this.upX = 0, this.upY = 1, this.upZ = 0, this.cameraNear = this.defaultCameraNear, this.cameraFar = this.defaultCameraFar, this.perspective(), this.camera(), this.cameraType = "default";
      }, f.default.Camera.prototype._resize = function () {
        "default" === this.cameraType ? (this._computeCameraDefaultSettings(), this._setDefaultCamera()) : this.perspective(this.cameraFOV, this._renderer.width / this._renderer.height);
      }, f.default.Camera.prototype.copy = function () {
        var e = new f.default.Camera(this._renderer);
        return e.cameraFOV = this.cameraFOV, e.aspectRatio = this.aspectRatio, e.eyeX = this.eyeX, e.eyeY = this.eyeY, e.eyeZ = this.eyeZ, e.centerX = this.centerX, e.centerY = this.centerY, e.centerZ = this.centerZ, e.cameraNear = this.cameraNear, e.cameraFar = this.cameraFar, e.cameraType = this.cameraType, e.cameraMatrix = this.cameraMatrix.copy(), e.projMatrix = this.projMatrix.copy(), e;
      }, f.default.Camera.prototype._getLocalAxes = function () {
        var e = this.eyeX - this.centerX,
            t = this.eyeY - this.centerY,
            r = this.eyeZ - this.centerZ,
            n = Math.sqrt(e * e + t * t + r * r);
        0 !== n && (e /= n, t /= n, r /= n);
        var a = this.upX,
            o = this.upY,
            i = this.upZ,
            s = o * r - i * t,
            l = -a * r + i * e,
            p = a * t - o * e;
        a = t * p - r * l, o = -e * p + r * s, i = e * l - t * s;
        var u = Math.sqrt(s * s + l * l + p * p);
        0 !== u && (s /= u, l /= u, p /= u);
        var c = Math.sqrt(a * a + o * o + i * i);
        return 0 !== c && (a /= c, o /= c, i /= c), {
          x: [s, l, p],
          y: [a, o, i],
          z: [e, t, r]
        };
      }, f.default.Camera.prototype._orbit = function (e, t, r) {
        var n = this.eyeX - this.centerX,
            a = this.eyeY - this.centerY,
            o = this.eyeZ - this.centerZ,
            i = Math.sqrt(n * n + a * a + o * o),
            s = Math.atan2(n, o),
            l = Math.acos(Math.max(-1, Math.min(1, a / i)));
        s += e, (i += r) < 0 && (i = .1), (l += t) > Math.PI ? l = Math.PI : l <= 0 && (l = .001);
        var p = Math.sin(l) * i * Math.sin(s),
            u = Math.cos(l) * i,
            c = Math.sin(l) * i * Math.cos(s);
        this.camera(p + this.centerX, u + this.centerY, c + this.centerZ, this.centerX, this.centerY, this.centerZ, 0, 1, 0);
      }, f.default.Camera.prototype._isActive = function () {
        return this === this._renderer._curCamera;
      }, f.default.prototype.setCamera = function (e) {
        this._renderer._curCamera = e, this._renderer.uPMatrix.set(e.projMatrix.mat4[0], e.projMatrix.mat4[1], e.projMatrix.mat4[2], e.projMatrix.mat4[3], e.projMatrix.mat4[4], e.projMatrix.mat4[5], e.projMatrix.mat4[6], e.projMatrix.mat4[7], e.projMatrix.mat4[8], e.projMatrix.mat4[9], e.projMatrix.mat4[10], e.projMatrix.mat4[11], e.projMatrix.mat4[12], e.projMatrix.mat4[13], e.projMatrix.mat4[14], e.projMatrix.mat4[15]);
      };
      var a = f.default.Camera;
      r.default = a;
    }, {
      "../core/main": 32
    }],
    81: [function (e, t, r) {
      "use strict";

      Object.defineProperty(r, "__esModule", {
        value: !0
      }), r.default = void 0;
      var n,
          u = (n = e("../core/main")) && n.__esModule ? n : {
        default: n
      };
      u.default.Geometry = function (e, t, r) {
        return this.vertices = [], this.lineVertices = [], this.lineNormals = [], this.vertexNormals = [], this.faces = [], this.uvs = [], this.edges = [], this.vertexColors = [], this.detailX = void 0 !== e ? e : 1, this.detailY = void 0 !== t ? t : 1, this.dirtyFlags = {}, r instanceof Function && r.call(this), this;
      }, u.default.Geometry.prototype.reset = function () {
        this.lineVertices.length = 0, this.lineNormals.length = 0, this.vertices.length = 0, this.edges.length = 0, this.vertexColors.length = 0, this.vertexNormals.length = 0, this.uvs.length = 0, this.dirtyFlags = {};
      }, u.default.Geometry.prototype.computeFaces = function () {
        this.faces.length = 0;

        for (var e, t, r, n, a = this.detailX + 1, o = 0; o < this.detailY; o++) for (var i = 0; i < this.detailX; i++) t = (e = o * a + i) + 1, r = (o + 1) * a + i + 1, n = (o + 1) * a + i, this.faces.push([e, t, n]), this.faces.push([n, t, r]);

        return this;
      }, u.default.Geometry.prototype._getFaceNormal = function (e) {
        var t = this.faces[e],
            r = this.vertices[t[0]],
            n = this.vertices[t[1]],
            a = this.vertices[t[2]],
            o = u.default.Vector.sub(n, r),
            i = u.default.Vector.sub(a, r),
            s = u.default.Vector.cross(o, i),
            l = u.default.Vector.mag(s),
            p = l / (u.default.Vector.mag(o) * u.default.Vector.mag(i));
        return 0 === p || isNaN(p) ? (console.warn("p5.Geometry.prototype._getFaceNormal:", "face has colinear sides or a repeated vertex"), s) : (1 < p && (p = 1), s.mult(Math.asin(p) / l));
      }, u.default.Geometry.prototype.computeNormals = function () {
        var e,
            t = this.vertexNormals,
            r = this.vertices,
            n = this.faces;

        for (e = t.length = 0; e < r.length; ++e) t.push(new u.default.Vector());

        for (var a = 0; a < n.length; ++a) for (var o = n[a], i = this._getFaceNormal(a), s = 0; s < 3; ++s) {
          t[o[s]].add(i);
        }

        for (e = 0; e < r.length; ++e) t[e].normalize();

        return this;
      }, u.default.Geometry.prototype.averageNormals = function () {
        for (var e = 0; e <= this.detailY; e++) {
          var t = this.detailX + 1,
              r = u.default.Vector.add(this.vertexNormals[e * t], this.vertexNormals[e * t + this.detailX]);
          r = u.default.Vector.div(r, 2), this.vertexNormals[e * t] = r, this.vertexNormals[e * t + this.detailX] = r;
        }

        return this;
      }, u.default.Geometry.prototype.averagePoleNormals = function () {
        for (var e = new u.default.Vector(0, 0, 0), t = 0; t < this.detailX; t++) e.add(this.vertexNormals[t]);

        e = u.default.Vector.div(e, this.detailX);

        for (var r = 0; r < this.detailX; r++) this.vertexNormals[r] = e;

        e = new u.default.Vector(0, 0, 0);

        for (var n = this.vertices.length - 1; n > this.vertices.length - 1 - this.detailX; n--) e.add(this.vertexNormals[n]);

        e = u.default.Vector.div(e, this.detailX);

        for (var a = this.vertices.length - 1; a > this.vertices.length - 1 - this.detailX; a--) this.vertexNormals[a] = e;

        return this;
      }, u.default.Geometry.prototype._makeTriangleEdges = function () {
        if (this.edges.length = 0, Array.isArray(this.strokeIndices)) for (var e = 0, t = this.strokeIndices.length; e < t; e++) this.edges.push(this.strokeIndices[e]);else for (var r = 0; r < this.faces.length; r++) this.edges.push([this.faces[r][0], this.faces[r][1]]), this.edges.push([this.faces[r][1], this.faces[r][2]]), this.edges.push([this.faces[r][2], this.faces[r][0]]);
        return this;
      }, u.default.Geometry.prototype._edgesToVertices = function () {
        this.lineVertices.length = 0;

        for (var e = this.lineNormals.length = 0; e < this.edges.length; e++) {
          var t = this.vertices[this.edges[e][0]],
              r = this.vertices[this.edges[e][1]],
              n = r.copy().sub(t).normalize(),
              a = t.array(),
              o = t.array(),
              i = r.array(),
              s = r.array(),
              l = n.array(),
              p = n.array();
          l.push(1), p.push(-1), this.lineNormals.push(l, p, l, l, p, p), this.lineVertices.push(a, o, i, i, o, s);
        }

        return this;
      }, u.default.Geometry.prototype.normalize = function () {
        if (0 < this.vertices.length) {
          for (var e = this.vertices[0].copy(), t = this.vertices[0].copy(), r = 0; r < this.vertices.length; r++) e.x = Math.max(e.x, this.vertices[r].x), t.x = Math.min(t.x, this.vertices[r].x), e.y = Math.max(e.y, this.vertices[r].y), t.y = Math.min(t.y, this.vertices[r].y), e.z = Math.max(e.z, this.vertices[r].z), t.z = Math.min(t.z, this.vertices[r].z);

          for (var n = u.default.Vector.lerp(e, t, .5), a = u.default.Vector.sub(e, t), o = 200 / Math.max(Math.max(a.x, a.y), a.z), i = 0; i < this.vertices.length; i++) this.vertices[i].sub(n), this.vertices[i].mult(o);
        }

        return this;
      };
      var a = u.default.Geometry;
      r.default = a;
    }, {
      "../core/main": 32
    }],
    82: [function (e, t, r) {
      "use strict";

      Object.defineProperty(r, "__esModule", {
        value: !0
      }), r.default = void 0;
      var n,
          L = (n = e("../core/main")) && n.__esModule ? n : {
        default: n
      };

      var a = Array,
          I = function (e) {
        return e instanceof Array;
      };

      "undefined" != typeof Float32Array && (a = Float32Array, I = function (e) {
        return e instanceof Array || e instanceof Float32Array;
      }), L.default.Matrix = function () {
        for (var e = new Array(arguments.length), t = 0; t < e.length; ++t) e[t] = arguments[t];

        return e.length && e[e.length - 1] instanceof L.default && (this.p5 = e[e.length - 1]), "mat3" === e[0] ? this.mat3 = Array.isArray(e[1]) ? e[1] : new a([1, 0, 0, 0, 1, 0, 0, 0, 1]) : this.mat4 = Array.isArray(e[0]) ? e[0] : new a([1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]), this;
      }, L.default.Matrix.prototype.set = function (e) {
        return e instanceof L.default.Matrix ? this.mat4 = e.mat4 : I(e) ? this.mat4 = e : 16 === arguments.length && (this.mat4[0] = e, this.mat4[1] = arguments[1], this.mat4[2] = arguments[2], this.mat4[3] = arguments[3], this.mat4[4] = arguments[4], this.mat4[5] = arguments[5], this.mat4[6] = arguments[6], this.mat4[7] = arguments[7], this.mat4[8] = arguments[8], this.mat4[9] = arguments[9], this.mat4[10] = arguments[10], this.mat4[11] = arguments[11], this.mat4[12] = arguments[12], this.mat4[13] = arguments[13], this.mat4[14] = arguments[14], this.mat4[15] = arguments[15]), this;
      }, L.default.Matrix.prototype.get = function () {
        return new L.default.Matrix(this.mat4, this.p5);
      }, L.default.Matrix.prototype.copy = function () {
        var e = new L.default.Matrix(this.p5);
        return e.mat4[0] = this.mat4[0], e.mat4[1] = this.mat4[1], e.mat4[2] = this.mat4[2], e.mat4[3] = this.mat4[3], e.mat4[4] = this.mat4[4], e.mat4[5] = this.mat4[5], e.mat4[6] = this.mat4[6], e.mat4[7] = this.mat4[7], e.mat4[8] = this.mat4[8], e.mat4[9] = this.mat4[9], e.mat4[10] = this.mat4[10], e.mat4[11] = this.mat4[11], e.mat4[12] = this.mat4[12], e.mat4[13] = this.mat4[13], e.mat4[14] = this.mat4[14], e.mat4[15] = this.mat4[15], e;
      }, L.default.Matrix.identity = function (e) {
        return new L.default.Matrix(e);
      }, L.default.Matrix.prototype.transpose = function (e) {
        var t, r, n, a, o, i;
        return e instanceof L.default.Matrix ? (t = e.mat4[1], r = e.mat4[2], n = e.mat4[3], a = e.mat4[6], o = e.mat4[7], i = e.mat4[11], this.mat4[0] = e.mat4[0], this.mat4[1] = e.mat4[4], this.mat4[2] = e.mat4[8], this.mat4[3] = e.mat4[12], this.mat4[4] = t, this.mat4[5] = e.mat4[5], this.mat4[6] = e.mat4[9], this.mat4[7] = e.mat4[13], this.mat4[8] = r, this.mat4[9] = a, this.mat4[10] = e.mat4[10], this.mat4[11] = e.mat4[14], this.mat4[12] = n, this.mat4[13] = o, this.mat4[14] = i, this.mat4[15] = e.mat4[15]) : I(e) && (t = e[1], r = e[2], n = e[3], a = e[6], o = e[7], i = e[11], this.mat4[0] = e[0], this.mat4[1] = e[4], this.mat4[2] = e[8], this.mat4[3] = e[12], this.mat4[4] = t, this.mat4[5] = e[5], this.mat4[6] = e[9], this.mat4[7] = e[13], this.mat4[8] = r, this.mat4[9] = a, this.mat4[10] = e[10], this.mat4[11] = e[14], this.mat4[12] = n, this.mat4[13] = o, this.mat4[14] = i, this.mat4[15] = e[15]), this;
      }, L.default.Matrix.prototype.invert = function (e) {
        var t, r, n, a, o, i, s, l, p, u, c, d, h, m, f, y;
        e instanceof L.default.Matrix ? (t = e.mat4[0], r = e.mat4[1], n = e.mat4[2], a = e.mat4[3], o = e.mat4[4], i = e.mat4[5], s = e.mat4[6], l = e.mat4[7], p = e.mat4[8], u = e.mat4[9], c = e.mat4[10], d = e.mat4[11], h = e.mat4[12], m = e.mat4[13], f = e.mat4[14], y = e.mat4[15]) : I(e) && (t = e[0], r = e[1], n = e[2], a = e[3], o = e[4], i = e[5], s = e[6], l = e[7], p = e[8], u = e[9], c = e[10], d = e[11], h = e[12], m = e[13], f = e[14], y = e[15]);

        var g = t * i - r * o,
            v = t * s - n * o,
            b = t * l - a * o,
            _ = r * s - n * i,
            x = r * l - a * i,
            S = n * l - a * s,
            w = p * m - u * h,
            M = p * f - c * h,
            E = p * y - d * h,
            T = u * f - c * m,
            C = u * y - d * m,
            N = c * y - d * f,
            O = g * N - v * C + b * T + _ * E - x * M + S * w;

        return O ? (O = 1 / O, this.mat4[0] = (i * N - s * C + l * T) * O, this.mat4[1] = (n * C - r * N - a * T) * O, this.mat4[2] = (m * S - f * x + y * _) * O, this.mat4[3] = (c * x - u * S - d * _) * O, this.mat4[4] = (s * E - o * N - l * M) * O, this.mat4[5] = (t * N - n * E + a * M) * O, this.mat4[6] = (f * b - h * S - y * v) * O, this.mat4[7] = (p * S - c * b + d * v) * O, this.mat4[8] = (o * C - i * E + l * w) * O, this.mat4[9] = (r * E - t * C - a * w) * O, this.mat4[10] = (h * x - m * b + y * g) * O, this.mat4[11] = (u * b - p * x - d * g) * O, this.mat4[12] = (i * M - o * T - s * w) * O, this.mat4[13] = (t * T - r * M + n * w) * O, this.mat4[14] = (m * v - h * _ - f * g) * O, this.mat4[15] = (p * _ - u * v + c * g) * O, this) : null;
      }, L.default.Matrix.prototype.invert3x3 = function () {
        var e = this.mat3[0],
            t = this.mat3[1],
            r = this.mat3[2],
            n = this.mat3[3],
            a = this.mat3[4],
            o = this.mat3[5],
            i = this.mat3[6],
            s = this.mat3[7],
            l = this.mat3[8],
            p = l * a - o * s,
            u = -l * n + o * i,
            c = s * n - a * i,
            d = e * p + t * u + r * c;
        return d ? (d = 1 / d, this.mat3[0] = p * d, this.mat3[1] = (-l * t + r * s) * d, this.mat3[2] = (o * t - r * a) * d, this.mat3[3] = u * d, this.mat3[4] = (l * e - r * i) * d, this.mat3[5] = (-o * e + r * n) * d, this.mat3[6] = c * d, this.mat3[7] = (-s * e + t * i) * d, this.mat3[8] = (a * e - t * n) * d, this) : null;
      }, L.default.Matrix.prototype.transpose3x3 = function (e) {
        var t = e[1],
            r = e[2],
            n = e[5];
        return this.mat3[1] = e[3], this.mat3[2] = e[6], this.mat3[3] = t, this.mat3[5] = e[7], this.mat3[6] = r, this.mat3[7] = n, this;
      }, L.default.Matrix.prototype.inverseTranspose = function (e) {
        void 0 === this.mat3 ? console.error("sorry, this function only works with mat3") : (this.mat3[0] = e.mat4[0], this.mat3[1] = e.mat4[1], this.mat3[2] = e.mat4[2], this.mat3[3] = e.mat4[4], this.mat3[4] = e.mat4[5], this.mat3[5] = e.mat4[6], this.mat3[6] = e.mat4[8], this.mat3[7] = e.mat4[9], this.mat3[8] = e.mat4[10]);
        var t = this.invert3x3();
        if (t) t.transpose3x3(this.mat3);else for (var r = 0; r < 9; r++) this.mat3[r] = 0;
        return this;
      }, L.default.Matrix.prototype.determinant = function () {
        var e = this.mat4[0] * this.mat4[5] - this.mat4[1] * this.mat4[4],
            t = this.mat4[0] * this.mat4[6] - this.mat4[2] * this.mat4[4],
            r = this.mat4[0] * this.mat4[7] - this.mat4[3] * this.mat4[4],
            n = this.mat4[1] * this.mat4[6] - this.mat4[2] * this.mat4[5],
            a = this.mat4[1] * this.mat4[7] - this.mat4[3] * this.mat4[5],
            o = this.mat4[2] * this.mat4[7] - this.mat4[3] * this.mat4[6],
            i = this.mat4[8] * this.mat4[13] - this.mat4[9] * this.mat4[12],
            s = this.mat4[8] * this.mat4[14] - this.mat4[10] * this.mat4[12],
            l = this.mat4[8] * this.mat4[15] - this.mat4[11] * this.mat4[12],
            p = this.mat4[9] * this.mat4[14] - this.mat4[10] * this.mat4[13],
            u = this.mat4[9] * this.mat4[15] - this.mat4[11] * this.mat4[13];
        return e * (this.mat4[10] * this.mat4[15] - this.mat4[11] * this.mat4[14]) - t * u + r * p + n * l - a * s + o * i;
      }, L.default.Matrix.prototype.mult = function (e) {
        var t;
        if (e === this || e === this.mat4) t = this.copy().mat4;else if (e instanceof L.default.Matrix) t = e.mat4;else if (I(e)) t = e;else {
          if (16 !== arguments.length) return;
          t = arguments;
        }
        var r = this.mat4[0],
            n = this.mat4[1],
            a = this.mat4[2],
            o = this.mat4[3];
        return this.mat4[0] = r * t[0] + n * t[4] + a * t[8] + o * t[12], this.mat4[1] = r * t[1] + n * t[5] + a * t[9] + o * t[13], this.mat4[2] = r * t[2] + n * t[6] + a * t[10] + o * t[14], this.mat4[3] = r * t[3] + n * t[7] + a * t[11] + o * t[15], r = this.mat4[4], n = this.mat4[5], a = this.mat4[6], o = this.mat4[7], this.mat4[4] = r * t[0] + n * t[4] + a * t[8] + o * t[12], this.mat4[5] = r * t[1] + n * t[5] + a * t[9] + o * t[13], this.mat4[6] = r * t[2] + n * t[6] + a * t[10] + o * t[14], this.mat4[7] = r * t[3] + n * t[7] + a * t[11] + o * t[15], r = this.mat4[8], n = this.mat4[9], a = this.mat4[10], o = this.mat4[11], this.mat4[8] = r * t[0] + n * t[4] + a * t[8] + o * t[12], this.mat4[9] = r * t[1] + n * t[5] + a * t[9] + o * t[13], this.mat4[10] = r * t[2] + n * t[6] + a * t[10] + o * t[14], this.mat4[11] = r * t[3] + n * t[7] + a * t[11] + o * t[15], r = this.mat4[12], n = this.mat4[13], a = this.mat4[14], o = this.mat4[15], this.mat4[12] = r * t[0] + n * t[4] + a * t[8] + o * t[12], this.mat4[13] = r * t[1] + n * t[5] + a * t[9] + o * t[13], this.mat4[14] = r * t[2] + n * t[6] + a * t[10] + o * t[14], this.mat4[15] = r * t[3] + n * t[7] + a * t[11] + o * t[15], this;
      }, L.default.Matrix.prototype.apply = function (e) {
        var t;
        if (e === this || e === this.mat4) t = this.copy().mat4;else if (e instanceof L.default.Matrix) t = e.mat4;else if (I(e)) t = e;else {
          if (16 !== arguments.length) return;
          t = arguments;
        }
        var r = this.mat4,
            n = r[0],
            a = r[4],
            o = r[8],
            i = r[12];
        r[0] = t[0] * n + t[1] * a + t[2] * o + t[3] * i, r[4] = t[4] * n + t[5] * a + t[6] * o + t[7] * i, r[8] = t[8] * n + t[9] * a + t[10] * o + t[11] * i, r[12] = t[12] * n + t[13] * a + t[14] * o + t[15] * i;
        var s = r[1],
            l = r[5],
            p = r[9],
            u = r[13];
        r[1] = t[0] * s + t[1] * l + t[2] * p + t[3] * u, r[5] = t[4] * s + t[5] * l + t[6] * p + t[7] * u, r[9] = t[8] * s + t[9] * l + t[10] * p + t[11] * u, r[13] = t[12] * s + t[13] * l + t[14] * p + t[15] * u;
        var c = r[2],
            d = r[6],
            h = r[10],
            m = r[14];
        r[2] = t[0] * c + t[1] * d + t[2] * h + t[3] * m, r[6] = t[4] * c + t[5] * d + t[6] * h + t[7] * m, r[10] = t[8] * c + t[9] * d + t[10] * h + t[11] * m, r[14] = t[12] * c + t[13] * d + t[14] * h + t[15] * m;
        var f = r[3],
            y = r[7],
            g = r[11],
            v = r[15];
        return r[3] = t[0] * f + t[1] * y + t[2] * g + t[3] * v, r[7] = t[4] * f + t[5] * y + t[6] * g + t[7] * v, r[11] = t[8] * f + t[9] * y + t[10] * g + t[11] * v, r[15] = t[12] * f + t[13] * y + t[14] * g + t[15] * v, this;
      }, L.default.Matrix.prototype.scale = function (e, t, r) {
        return e instanceof L.default.Vector ? (t = e.y, r = e.z, e = e.x) : e instanceof Array && (t = e[1], r = e[2], e = e[0]), this.mat4[0] *= e, this.mat4[1] *= e, this.mat4[2] *= e, this.mat4[3] *= e, this.mat4[4] *= t, this.mat4[5] *= t, this.mat4[6] *= t, this.mat4[7] *= t, this.mat4[8] *= r, this.mat4[9] *= r, this.mat4[10] *= r, this.mat4[11] *= r, this;
      }, L.default.Matrix.prototype.rotate = function (e, t, r, n) {
        t instanceof L.default.Vector ? (r = t.y, n = t.z, t = t.x) : t instanceof Array && (r = t[1], n = t[2], t = t[0]);
        var a = Math.sqrt(t * t + r * r + n * n);
        t *= 1 / a, r *= 1 / a, n *= 1 / a;

        var o = this.mat4[0],
            i = this.mat4[1],
            s = this.mat4[2],
            l = this.mat4[3],
            p = this.mat4[4],
            u = this.mat4[5],
            c = this.mat4[6],
            d = this.mat4[7],
            h = this.mat4[8],
            m = this.mat4[9],
            f = this.mat4[10],
            y = this.mat4[11],
            g = Math.sin(e),
            v = Math.cos(e),
            b = 1 - v,
            _ = t * t * b + v,
            x = r * t * b + n * g,
            S = n * t * b - r * g,
            w = t * r * b - n * g,
            M = r * r * b + v,
            E = n * r * b + t * g,
            T = t * n * b + r * g,
            C = r * n * b - t * g,
            N = n * n * b + v;

        return this.mat4[0] = o * _ + p * x + h * S, this.mat4[1] = i * _ + u * x + m * S, this.mat4[2] = s * _ + c * x + f * S, this.mat4[3] = l * _ + d * x + y * S, this.mat4[4] = o * w + p * M + h * E, this.mat4[5] = i * w + u * M + m * E, this.mat4[6] = s * w + c * M + f * E, this.mat4[7] = l * w + d * M + y * E, this.mat4[8] = o * T + p * C + h * N, this.mat4[9] = i * T + u * C + m * N, this.mat4[10] = s * T + c * C + f * N, this.mat4[11] = l * T + d * C + y * N, this;
      }, L.default.Matrix.prototype.translate = function (e) {
        var t = e[0],
            r = e[1],
            n = e[2] || 0;
        this.mat4[12] += this.mat4[0] * t + this.mat4[4] * r + this.mat4[8] * n, this.mat4[13] += this.mat4[1] * t + this.mat4[5] * r + this.mat4[9] * n, this.mat4[14] += this.mat4[2] * t + this.mat4[6] * r + this.mat4[10] * n, this.mat4[15] += this.mat4[3] * t + this.mat4[7] * r + this.mat4[11] * n;
      }, L.default.Matrix.prototype.rotateX = function (e) {
        this.rotate(e, 1, 0, 0);
      }, L.default.Matrix.prototype.rotateY = function (e) {
        this.rotate(e, 0, 1, 0);
      }, L.default.Matrix.prototype.rotateZ = function (e) {
        this.rotate(e, 0, 0, 1);
      }, L.default.Matrix.prototype.perspective = function (e, t, r, n) {
        var a = 1 / Math.tan(e / 2),
            o = 1 / (r - n);
        return this.mat4[0] = a / t, this.mat4[1] = 0, this.mat4[2] = 0, this.mat4[3] = 0, this.mat4[4] = 0, this.mat4[5] = a, this.mat4[6] = 0, this.mat4[7] = 0, this.mat4[8] = 0, this.mat4[9] = 0, this.mat4[10] = (n + r) * o, this.mat4[11] = -1, this.mat4[12] = 0, this.mat4[13] = 0, this.mat4[14] = 2 * n * r * o, this.mat4[15] = 0, this;
      }, L.default.Matrix.prototype.ortho = function (e, t, r, n, a, o) {
        var i = 1 / (e - t),
            s = 1 / (r - n),
            l = 1 / (a - o);
        return this.mat4[0] = -2 * i, this.mat4[1] = 0, this.mat4[2] = 0, this.mat4[3] = 0, this.mat4[4] = 0, this.mat4[5] = -2 * s, this.mat4[6] = 0, this.mat4[7] = 0, this.mat4[8] = 0, this.mat4[9] = 0, this.mat4[10] = 2 * l, this.mat4[11] = 0, this.mat4[12] = (e + t) * i, this.mat4[13] = (n + r) * s, this.mat4[14] = (o + a) * l, this.mat4[15] = 1, this;
      };
      var o = L.default.Matrix;
      r.default = o;
    }, {
      "../core/main": 32
    }],
    83: [function (e, t, r) {
      "use strict";

      Object.defineProperty(r, "__esModule", {
        value: !0
      }), r.default = void 0;
      var n,
          a = (n = e("../core/main")) && n.__esModule ? n : {
        default: n
      };
      a.default.RenderBuffer = function (e, t, r, n, a, o) {
        this.size = e, this.src = t, this.dst = r, this.attr = n, this._renderer = a, this.map = o;
      }, a.default.RenderBuffer.prototype._prepareBuffer = function (e, t) {
        var r,
            n = t.attributes,
            a = this._renderer.GL;
        r = e.model ? e.model : e;
        var o = n[this.attr];

        if (o) {
          var i = e[this.dst],
              s = r[this.src];

          if (0 < s.length) {
            var l = !i;

            if (l && (e[this.dst] = i = a.createBuffer()), a.bindBuffer(a.ARRAY_BUFFER, i), l || !1 !== r.dirtyFlags[this.src]) {
              var p = this.map,
                  u = p ? p(s) : s;
              this._renderer._bindBuffer(i, a.ARRAY_BUFFER, u), r.dirtyFlags[this.src] = !1;
            }

            t.enableAttrib(o, this.size);
          }
        }
      };
      var o = a.default.RenderBuffer;
      r.default = o;
    }, {
      "../core/main": 32
    }],
    84: [function (e, t, r) {
      "use strict";

      function i(e) {
        return (i = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (e) {
          return typeof e;
        } : function (e) {
          return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e;
        })(e);
      }

      Object.defineProperty(r, "__esModule", {
        value: !0
      }), r.default = void 0;

      var n,
          s = (n = e("../core/main")) && n.__esModule ? n : {
        default: n
      },
          l = function (e) {
        if (e && e.__esModule) return e;
        if (null === e || "object" !== i(e) && "function" != typeof e) return {
          default: e
        };
        var t = p();
        if (t && t.has(e)) return t.get(e);
        var r = {},
            n = Object.defineProperty && Object.getOwnPropertyDescriptor;

        for (var a in e) if (Object.prototype.hasOwnProperty.call(e, a)) {
          var o = n ? Object.getOwnPropertyDescriptor(e, a) : null;
          o && (o.get || o.set) ? Object.defineProperty(r, a, o) : r[a] = e[a];
        }

        r.default = e, t && t.set(e, r);
        return r;
      }(e("../core/constants"));

      function p() {
        if ("function" != typeof WeakMap) return null;
        var e = new WeakMap();
        return p = function () {
          return e;
        }, e;
      }

      e("./p5.RenderBuffer"), s.default.RendererGL.prototype.beginShape = function (e) {
        return this.immediateMode.shapeMode = void 0 !== e ? e : l.TRIANGLE_FAN, this.immediateMode.geometry.reset(), this;
      }, s.default.RendererGL.prototype.vertex = function (e, t) {
        var r, n, a;
        r = n = a = 0, 3 === arguments.length ? r = arguments[2] : 4 === arguments.length ? (n = arguments[2], a = arguments[3]) : 5 === arguments.length && (r = arguments[2], n = arguments[3], a = arguments[4]);
        var o = new s.default.Vector(e, t, r);
        this.immediateMode.geometry.vertices.push(o);
        var i = this.curFillColor || [.5, .5, .5, 1];
        return this.immediateMode.geometry.vertexColors.push(i[0], i[1], i[2], i[3]), this.textureMode === l.IMAGE && (null !== this._tex ? 0 < this._tex.width && 0 < this._tex.height && (n /= this._tex.width, a /= this._tex.height) : null === this._tex && 4 <= arguments.length && console.warn("You must first call texture() before using vertex() with image based u and v coordinates")), this.immediateMode.geometry.uvs.push(n, a), this.immediateMode._bezierVertex[0] = e, this.immediateMode._bezierVertex[1] = t, this.immediateMode._bezierVertex[2] = r, this.immediateMode._quadraticVertex[0] = e, this.immediateMode._quadraticVertex[1] = t, this.immediateMode._quadraticVertex[2] = r, this;
      }, s.default.RendererGL.prototype.endShape = function (e, t, r, n, a, o) {
        return this.immediateMode.shapeMode === l.POINTS ? this._drawPoints(this.immediateMode.geometry.vertices, this.immediateMode.buffers.point) : (this._processVertices.apply(this, arguments), this._doFill && 1 < this.immediateMode.geometry.vertices.length && this._drawImmediateFill(), this._doStroke && 1 < this.immediateMode.geometry.lineVertices.length && this._drawImmediateStroke(), this.isBezier = !1, this.isQuadratic = !1, this.isCurve = !1, this.immediateMode._bezierVertex.length = 0, this.immediateMode._quadraticVertex.length = 0, this.immediateMode._curveVertex.length = 0), this;
      }, s.default.RendererGL.prototype._processVertices = function (e) {
        if (0 !== this.immediateMode.geometry.vertices.length) {
          var t = this._doStroke && this.drawMode !== l.TEXTURE,
              r = e === l.CLOSE;
          t && (this.immediateMode.geometry.edges = this._calculateEdges(this.immediateMode.shapeMode, this.immediateMode.geometry.vertices, r), this.immediateMode.geometry._edgesToVertices());
          var n = this.immediateMode.shapeMode === l.TESS;
          (this.isBezier || this.isQuadratic || this.isCurve || n) && this.immediateMode.shapeMode !== l.LINES && this._tesselateShape();
        }
      }, s.default.RendererGL.prototype._calculateEdges = function (e, t, r) {
        var n = [],
            a = 0;

        switch (e) {
          case l.TRIANGLE_STRIP:
            for (a = 0; a < t.length - 2; a++) n.push([a, a + 1]), n.push([a, a + 2]);

            n.push([a, a + 1]);
            break;

          case l.TRIANGLES:
            for (a = 0; a < t.length - 2; a += 3) n.push([a, a + 1]), n.push([a + 1, a + 2]), n.push([a + 2, a]);

            break;

          case l.LINES:
            for (a = 0; a < t.length - 1; a += 2) n.push([a, a + 1]);

            break;

          default:
            for (a = 0; a < t.length - 1; a++) n.push([a, a + 1]);

        }

        return r && n.push([t.length - 1, 0]), n;
      }, s.default.RendererGL.prototype._tesselateShape = function () {
        this.immediateMode.shapeMode = l.TRIANGLES;

        var e = [new Float32Array(this._vToNArray(this.immediateMode.geometry.vertices))],
            t = this._triangulate(e);

        this.immediateMode.geometry.vertices = [];

        for (var r = 0, n = t.length; r < n; r += 3) this.vertex(t[r], t[r + 1], t[r + 2]);
      }, s.default.RendererGL.prototype._drawImmediateFill = function () {
        var e = this.GL,
            t = this._getImmediateFillShader();

        this._calculateNormals(this.immediateMode.geometry), this._setFillUniforms(t);
        var r = !0,
            n = !1,
            a = void 0;

        try {
          for (var o, i = this.immediateMode.buffers.fill[Symbol.iterator](); !(r = (o = i.next()).done); r = !0) {
            o.value._prepareBuffer(this.immediateMode.geometry, t);
          }
        } catch (e) {
          n = !0, a = e;
        } finally {
          try {
            r || null == i.return || i.return();
          } finally {
            if (n) throw a;
          }
        }

        this.immediateMode.shapeMode !== l.LINE_STRIP && this.immediateMode.shapeMode !== l.LINES || (this.immediateMode.shapeMode = l.TRIANGLE_FAN), this._applyColorBlend(this.curFillColor), e.drawArrays(this.immediateMode.shapeMode, 0, this.immediateMode.geometry.vertices.length), t.unbindShader();
      }, s.default.RendererGL.prototype._drawImmediateStroke = function () {
        var e = this.GL,
            t = this._getImmediateStrokeShader();

        this._setStrokeUniforms(t);

        var r = !0,
            n = !1,
            a = void 0;

        try {
          for (var o, i = this.immediateMode.buffers.stroke[Symbol.iterator](); !(r = (o = i.next()).done); r = !0) {
            o.value._prepareBuffer(this.immediateMode.geometry, t);
          }
        } catch (e) {
          n = !0, a = e;
        } finally {
          try {
            r || null == i.return || i.return();
          } finally {
            if (n) throw a;
          }
        }

        this._applyColorBlend(this.curStrokeColor), e.drawArrays(e.TRIANGLES, 0, this.immediateMode.geometry.lineVertices.length), t.unbindShader();
      }, s.default.RendererGL.prototype._calculateNormals = function (e) {
        e.vertices.forEach(function () {
          e.vertexNormals.push(new s.default.Vector(0, 0, 1));
        });
      };
      var a = s.default.RendererGL;
      r.default = a;
    }, {
      "../core/constants": 22,
      "../core/main": 32,
      "./p5.RenderBuffer": 83
    }],
    85: [function (e, t, r) {
      "use strict";

      Object.defineProperty(r, "__esModule", {
        value: !0
      }), r.default = void 0;
      var n,
          i = (n = e("../core/main")) && n.__esModule ? n : {
        default: n
      };
      e("./p5.RendererGL"), e("./p5.RenderBuffer");
      var a = 0;
      i.default.RendererGL.prototype._initBufferDefaults = function (e) {
        if (this._freeBuffers(e), 1e3 < ++a) {
          var t = Object.keys(this.retainedMode.geometry)[0];
          delete this.retainedMode.geometry[t], a--;
        }

        return this.retainedMode.geometry[e] = {};
      }, i.default.RendererGL.prototype._freeBuffers = function (e) {
        var s = this.retainedMode.geometry[e];

        if (s) {
          delete this.retainedMode.geometry[e], a--;
          var l = this.GL;
          s.indexBuffer && l.deleteBuffer(s.indexBuffer), t(this.retainedMode.buffers.stroke), t(this.retainedMode.buffers.fill);
        }

        function t(e) {
          var t = !0,
              r = !1,
              n = void 0;

          try {
            for (var a, o = e[Symbol.iterator](); !(t = (a = o.next()).done); t = !0) {
              var i = a.value;
              s[i.dst] && (l.deleteBuffer(s[i.dst]), s[i.dst] = null);
            }
          } catch (e) {
            r = !0, n = e;
          } finally {
            try {
              t || null == o.return || o.return();
            } finally {
              if (r) throw n;
            }
          }
        }
      }, i.default.RendererGL.prototype.createBuffers = function (e, t) {
        var r = this.GL,
            n = this._initBufferDefaults(e);

        n.model = t;
        var a = n.indexBuffer;

        if (t.faces.length) {
          a = a || (n.indexBuffer = r.createBuffer());

          var o = i.default.RendererGL.prototype._flatten(t.faces);

          this._bindBuffer(a, r.ELEMENT_ARRAY_BUFFER, o, Uint16Array), n.vertexCount = 3 * t.faces.length;
        } else a && (r.deleteBuffer(a), n.indexBuffer = null), n.vertexCount = t.vertices ? t.vertices.length : 0;

        return n.lineVertexCount = t.lineVertices ? t.lineVertices.length : 0, n;
      }, i.default.RendererGL.prototype.drawBuffers = function (e) {
        var t = this.GL,
            r = this.retainedMode.geometry[e];

        if (this._doStroke && 0 < r.lineVertexCount) {
          var n = this._getRetainedStrokeShader();

          this._setStrokeUniforms(n);

          var a = !0,
              o = !1,
              i = void 0;

          try {
            for (var s, l = this.retainedMode.buffers.stroke[Symbol.iterator](); !(a = (s = l.next()).done); a = !0) {
              s.value._prepareBuffer(r, n);
            }
          } catch (e) {
            o = !0, i = e;
          } finally {
            try {
              a || null == l.return || l.return();
            } finally {
              if (o) throw i;
            }
          }

          this._applyColorBlend(this.curStrokeColor), this._drawArrays(t.TRIANGLES, e), n.unbindShader();
        }

        if (this._doFill) {
          var p = this._getRetainedFillShader();

          this._setFillUniforms(p);

          var u = !0,
              c = !1,
              d = void 0;

          try {
            for (var h, m = this.retainedMode.buffers.fill[Symbol.iterator](); !(u = (h = m.next()).done); u = !0) {
              h.value._prepareBuffer(r, p);
            }
          } catch (e) {
            c = !0, d = e;
          } finally {
            try {
              u || null == m.return || m.return();
            } finally {
              if (c) throw d;
            }
          }

          r.indexBuffer && this._bindBuffer(r.indexBuffer, t.ELEMENT_ARRAY_BUFFER), this._applyColorBlend(this.curFillColor), this._drawElements(t.TRIANGLES, e), p.unbindShader();
        }

        return this;
      }, i.default.RendererGL.prototype.drawBuffersScaled = function (e, t, r, n) {
        var a = this.uMVMatrix.copy();

        try {
          this.uMVMatrix.scale(t, r, n), this.drawBuffers(e);
        } finally {
          this.uMVMatrix = a;
        }
      }, i.default.RendererGL.prototype._drawArrays = function (e, t) {
        return this.GL.drawArrays(e, 0, this.retainedMode.geometry[t].lineVertexCount), this;
      }, i.default.RendererGL.prototype._drawElements = function (e, t) {
        var r = this.retainedMode.geometry[t],
            n = this.GL;
        r.indexBuffer ? n.drawElements(n.TRIANGLES, r.vertexCount, n.UNSIGNED_SHORT, 0) : n.drawArrays(e || n.TRIANGLES, 0, r.vertexCount);
      }, i.default.RendererGL.prototype._drawPoints = function (e, t) {
        var r = this.GL,
            n = this._getImmediatePointShader();

        this._setPointUniforms(n), this._bindBuffer(t, r.ARRAY_BUFFER, this._vToNArray(e), Float32Array, r.STATIC_DRAW), n.enableAttrib(n.attributes.aPosition, 3), r.drawArrays(r.Points, 0, e.length), n.unbindShader();
      };
      var o = i.default.RendererGL;
      r.default = o;
    }, {
      "../core/main": 32,
      "./p5.RenderBuffer": 83,
      "./p5.RendererGL": 86
    }],
    86: [function (e, t, r) {
      "use strict";

      function i(e) {
        return (i = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (e) {
          return typeof e;
        } : function (e) {
          return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e;
        })(e);
      }

      Object.defineProperty(r, "__esModule", {
        value: !0
      }), r.default = void 0;

      var p = a(e("../core/main")),
          o = function (e) {
        if (e && e.__esModule) return e;
        if (null === e || "object" !== i(e) && "function" != typeof e) return {
          default: e
        };
        var t = s();
        if (t && t.has(e)) return t.get(e);
        var r = {},
            n = Object.defineProperty && Object.getOwnPropertyDescriptor;

        for (var a in e) if (Object.prototype.hasOwnProperty.call(e, a)) {
          var o = n ? Object.getOwnPropertyDescriptor(e, a) : null;
          o && (o.get || o.set) ? Object.defineProperty(r, a, o) : r[a] = e[a];
        }

        r.default = e, t && t.set(e, r);
        return r;
      }(e("../core/constants")),
          n = a(e("libtess"));

      e("./p5.Shader"), e("./p5.Camera"), e("../core/p5.Renderer"), e("./p5.Matrix");
      e("path");

      function s() {
        if ("function" != typeof WeakMap) return null;
        var e = new WeakMap();
        return s = function () {
          return e;
        }, e;
      }

      function a(e) {
        return e && e.__esModule ? e : {
          default: e
        };
      }

      function l(e) {
        return function (e) {
          if (Array.isArray(e)) {
            for (var t = 0, r = new Array(e.length); t < e.length; t++) r[t] = e[t];

            return r;
          }
        }(e) || function (e) {
          if (Symbol.iterator in Object(e) || "[object Arguments]" === Object.prototype.toString.call(e)) return Array.from(e);
        }(e) || function () {
          throw new TypeError("Invalid attempt to spread non-iterable instance");
        }();
      }

      var u = "precision highp float;\nprecision highp int;\n\nuniform mat4 uViewMatrix;\n\nuniform bool uUseLighting;\n\nuniform int uAmbientLightCount;\nuniform vec3 uAmbientColor[5];\n\nuniform int uDirectionalLightCount;\nuniform vec3 uLightingDirection[5];\nuniform vec3 uDirectionalDiffuseColors[5];\nuniform vec3 uDirectionalSpecularColors[5];\n\nuniform int uPointLightCount;\nuniform vec3 uPointLightLocation[5];\nuniform vec3 uPointLightDiffuseColors[5];\t\nuniform vec3 uPointLightSpecularColors[5];\n\nuniform int uSpotLightCount;\nuniform float uSpotLightAngle[5];\nuniform float uSpotLightConc[5];\nuniform vec3 uSpotLightDiffuseColors[5];\nuniform vec3 uSpotLightSpecularColors[5];\nuniform vec3 uSpotLightLocation[5];\nuniform vec3 uSpotLightDirection[5];\n\nuniform bool uSpecular;\nuniform float uShininess;\n\nuniform float uConstantAttenuation;\nuniform float uLinearAttenuation;\nuniform float uQuadraticAttenuation;\n\nconst float specularFactor = 2.0;\nconst float diffuseFactor = 0.73;\n\nstruct LightResult {\n  float specular;\n  float diffuse;\n};\n\nfloat _phongSpecular(\n  vec3 lightDirection,\n  vec3 viewDirection,\n  vec3 surfaceNormal,\n  float shininess) {\n\n  vec3 R = reflect(lightDirection, surfaceNormal);\n  return pow(max(0.0, dot(R, viewDirection)), shininess);\n}\n\nfloat _lambertDiffuse(vec3 lightDirection, vec3 surfaceNormal) {\n  return max(0.0, dot(-lightDirection, surfaceNormal));\n}\n\nLightResult _light(vec3 viewDirection, vec3 normal, vec3 lightVector) {\n\n  vec3 lightDir = normalize(lightVector);\n\n  //compute our diffuse & specular terms\n  LightResult lr;\n  if (uSpecular)\n    lr.specular = _phongSpecular(lightDir, viewDirection, normal, uShininess);\n  lr.diffuse = _lambertDiffuse(lightDir, normal);\n  return lr;\n}\n\nvoid totalLight(\n  vec3 modelPosition,\n  vec3 normal,\n  out vec3 totalDiffuse,\n  out vec3 totalSpecular\n) {\n\n  totalSpecular = vec3(0.0);\n\n  if (!uUseLighting) {\n    totalDiffuse = vec3(1.0);\n    return;\n  }\n\n  totalDiffuse = vec3(0.0);\n\n  vec3 viewDirection = normalize(-modelPosition);\n\n  for (int j = 0; j < 5; j++) {\n    if (j < uDirectionalLightCount) {\n      vec3 lightVector = (uViewMatrix * vec4(uLightingDirection[j], 0.0)).xyz;\n      vec3 lightColor = uDirectionalDiffuseColors[j];\n      vec3 specularColor = uDirectionalSpecularColors[j];\n      LightResult result = _light(viewDirection, normal, lightVector);\n      totalDiffuse += result.diffuse * lightColor;\n      totalSpecular += result.specular * lightColor * specularColor;\n    }\n\n    if (j < uPointLightCount) {\n      vec3 lightPosition = (uViewMatrix * vec4(uPointLightLocation[j], 1.0)).xyz;\n      vec3 lightVector = modelPosition - lightPosition;\n    \n      //calculate attenuation\n      float lightDistance = length(lightVector);\n      float lightFalloff = 1.0 / (uConstantAttenuation + lightDistance * uLinearAttenuation + (lightDistance * lightDistance) * uQuadraticAttenuation);\n      vec3 lightColor = lightFalloff * uPointLightDiffuseColors[j];\n      vec3 specularColor = lightFalloff * uPointLightSpecularColors[j];\n\n      LightResult result = _light(viewDirection, normal, lightVector);\n      totalDiffuse += result.diffuse * lightColor;\n      totalSpecular += result.specular * lightColor * specularColor;\n    }\n\n    if(j < uSpotLightCount) {\n      vec3 lightPosition = (uViewMatrix * vec4(uSpotLightLocation[j], 1.0)).xyz;\n      vec3 lightVector = modelPosition - lightPosition;\n    \n      float lightDistance = length(lightVector);\n      float lightFalloff = 1.0 / (uConstantAttenuation + lightDistance * uLinearAttenuation + (lightDistance * lightDistance) * uQuadraticAttenuation);\n\n      vec3 lightDirection = (uViewMatrix * vec4(uSpotLightDirection[j], 0.0)).xyz;\n      float spotDot = dot(normalize(lightVector), normalize(lightDirection));\n      float spotFalloff;\n      if(spotDot < uSpotLightAngle[j]) {\n        spotFalloff = 0.0;\n      }\n      else {\n        spotFalloff = pow(spotDot, uSpotLightConc[j]);\n      }\n      lightFalloff *= spotFalloff;\n\n      vec3 lightColor = uSpotLightDiffuseColors[j];\n      vec3 specularColor = uSpotLightSpecularColors[j];\n     \n      LightResult result = _light(viewDirection, normal, lightVector);\n      \n      totalDiffuse += result.diffuse * lightColor * lightFalloff;\n      totalSpecular += result.specular * lightColor * specularColor * lightFalloff;\n    }\n  }\n\n  totalDiffuse *= diffuseFactor;\n  totalSpecular *= specularFactor;\n}\n",
          c = {
        immediateVert: "attribute vec3 aPosition;\nattribute vec4 aVertexColor;\n\nuniform mat4 uModelViewMatrix;\nuniform mat4 uProjectionMatrix;\nuniform float uResolution;\nuniform float uPointSize;\n\nvarying vec4 vColor;\nvoid main(void) {\n  vec4 positionVec4 = vec4(aPosition, 1.0);\n  gl_Position = uProjectionMatrix * uModelViewMatrix * positionVec4;\n  vColor = aVertexColor;\n  gl_PointSize = uPointSize;\n}\n",
        vertexColorVert: "attribute vec3 aPosition;\nattribute vec4 aVertexColor;\n\nuniform mat4 uModelViewMatrix;\nuniform mat4 uProjectionMatrix;\n\nvarying vec4 vColor;\n\nvoid main(void) {\n  vec4 positionVec4 = vec4(aPosition, 1.0);\n  gl_Position = uProjectionMatrix * uModelViewMatrix * positionVec4;\n  vColor = aVertexColor;\n}\n",
        vertexColorFrag: "precision mediump float;\nvarying vec4 vColor;\nvoid main(void) {\n  gl_FragColor = vColor;\n}",
        normalVert: "attribute vec3 aPosition;\nattribute vec3 aNormal;\nattribute vec2 aTexCoord;\n\nuniform mat4 uModelViewMatrix;\nuniform mat4 uProjectionMatrix;\nuniform mat3 uNormalMatrix;\n\nvarying vec3 vVertexNormal;\nvarying highp vec2 vVertTexCoord;\n\nvoid main(void) {\n  vec4 positionVec4 = vec4(aPosition, 1.0);\n  gl_Position = uProjectionMatrix * uModelViewMatrix * positionVec4;\n  vVertexNormal = normalize(vec3( uNormalMatrix * aNormal ));\n  vVertTexCoord = aTexCoord;\n}\n",
        normalFrag: "precision mediump float;\nvarying vec3 vVertexNormal;\nvoid main(void) {\n  gl_FragColor = vec4(vVertexNormal, 1.0);\n}",
        basicFrag: "precision mediump float;\nuniform vec4 uMaterialColor;\nvoid main(void) {\n  gl_FragColor = uMaterialColor;\n}",
        lightVert: u + "// include lighting.glgl\n\nattribute vec3 aPosition;\nattribute vec3 aNormal;\nattribute vec2 aTexCoord;\n\nuniform mat4 uModelViewMatrix;\nuniform mat4 uProjectionMatrix;\nuniform mat3 uNormalMatrix;\n\nvarying highp vec2 vVertTexCoord;\nvarying vec3 vDiffuseColor;\nvarying vec3 vSpecularColor;\n\nvoid main(void) {\n\n  vec4 viewModelPosition = uModelViewMatrix * vec4(aPosition, 1.0);\n  gl_Position = uProjectionMatrix * viewModelPosition;\n\n  vec3 vertexNormal = normalize(uNormalMatrix * aNormal);\n  vVertTexCoord = aTexCoord;\n\n  totalLight(viewModelPosition.xyz, vertexNormal, vDiffuseColor, vSpecularColor);\n\n  for (int i = 0; i < 8; i++) {\n    if (i < uAmbientLightCount) {\n      vDiffuseColor += uAmbientColor[i];\n    }\n  }\n}\n",
        lightTextureFrag: "precision highp float;\n\nuniform vec4 uMaterialColor;\nuniform vec4 uTint;\nuniform sampler2D uSampler;\nuniform bool isTexture;\nuniform bool uEmissive;\n\nvarying highp vec2 vVertTexCoord;\nvarying vec3 vDiffuseColor;\nvarying vec3 vSpecularColor;\n\nvoid main(void) {\n  if(uEmissive && !isTexture) {\n    gl_FragColor = uMaterialColor;\n  }\n  else {\n    gl_FragColor = isTexture ? texture2D(uSampler, vVertTexCoord) * (uTint / vec4(255, 255, 255, 255)) : uMaterialColor;\n    gl_FragColor.rgb = gl_FragColor.rgb * vDiffuseColor + vSpecularColor;\n  }\n}",
        phongVert: "precision highp float;\nprecision highp int;\n\nattribute vec3 aPosition;\nattribute vec3 aNormal;\nattribute vec2 aTexCoord;\n\nuniform vec3 uAmbientColor[5];\n\nuniform mat4 uModelViewMatrix;\nuniform mat4 uProjectionMatrix;\nuniform mat3 uNormalMatrix;\nuniform int uAmbientLightCount;\n\nvarying vec3 vNormal;\nvarying vec2 vTexCoord;\nvarying vec3 vViewPosition;\nvarying vec3 vAmbientColor;\n\nvoid main(void) {\n\n  vec4 viewModelPosition = uModelViewMatrix * vec4(aPosition, 1.0);\n\n  // Pass varyings to fragment shader\n  vViewPosition = viewModelPosition.xyz;\n  gl_Position = uProjectionMatrix * viewModelPosition;  \n\n  vNormal = uNormalMatrix * aNormal;\n  vTexCoord = aTexCoord;\n\n  // TODO: this should be a uniform\n  vAmbientColor = vec3(0.0);\n  for (int i = 0; i < 5; i++) {\n    if (i < uAmbientLightCount) {\n      vAmbientColor += uAmbientColor[i];\n    }\n  }\n}\n",
        phongFrag: u + "// include lighting.glsl\nprecision highp float;\nprecision highp int;\n\nuniform vec4 uMaterialColor;\nuniform vec4 uTint;\nuniform sampler2D uSampler;\nuniform bool isTexture;\nuniform bool uEmissive;\n\nvarying vec3 vNormal;\nvarying vec2 vTexCoord;\nvarying vec3 vViewPosition;\nvarying vec3 vAmbientColor;\n\nvoid main(void) {\n\n  vec3 diffuse;\n  vec3 specular;\n  totalLight(vViewPosition, normalize(vNormal), diffuse, specular);\n\n  if(uEmissive && !isTexture) {\n    gl_FragColor = uMaterialColor;\n  }\n  else {\n    gl_FragColor = isTexture ? texture2D(uSampler, vTexCoord) * (uTint / vec4(255, 255, 255, 255)) : uMaterialColor;\n    gl_FragColor.rgb = gl_FragColor.rgb * (diffuse + vAmbientColor) + specular;\n  }\n}",
        fontVert: "precision mediump float;\n\nattribute vec3 aPosition;\nattribute vec2 aTexCoord;\nuniform mat4 uModelViewMatrix;\nuniform mat4 uProjectionMatrix;\n\nuniform vec4 uGlyphRect;\nuniform float uGlyphOffset;\n\nvarying vec2 vTexCoord;\nvarying float w;\n\nvoid main() {\n  vec4 positionVec4 = vec4(aPosition, 1.0);\n\n  // scale by the size of the glyph's rectangle\n  positionVec4.xy *= uGlyphRect.zw - uGlyphRect.xy;\n\n  // move to the corner of the glyph\n  positionVec4.xy += uGlyphRect.xy;\n\n  // move to the letter's line offset\n  positionVec4.x += uGlyphOffset;\n  \n  gl_Position = uProjectionMatrix * uModelViewMatrix * positionVec4;\n  vTexCoord = aTexCoord;\n  w = gl_Position.w;\n}\n",
        fontFrag: "#extension GL_OES_standard_derivatives : enable\nprecision mediump float;\n\n#if 0\n  // simulate integer math using floats\n\t#define int float\n\t#define ivec2 vec2\n\t#define INT(x) float(x)\n\n\tint ifloor(float v) { return floor(v); }\n\tivec2 ifloor(vec2 v) { return floor(v); }\n\n#else\n  // use native integer math\n\tprecision highp int;\n\t#define INT(x) x\n\n\tint ifloor(float v) { return int(v); }\n\tint ifloor(int v) { return v; }\n\tivec2 ifloor(vec2 v) { return ivec2(v); }\n\n#endif\n\nuniform sampler2D uSamplerStrokes;\nuniform sampler2D uSamplerRowStrokes;\nuniform sampler2D uSamplerRows;\nuniform sampler2D uSamplerColStrokes;\nuniform sampler2D uSamplerCols;\n\nuniform ivec2 uStrokeImageSize;\nuniform ivec2 uCellsImageSize;\nuniform ivec2 uGridImageSize;\n\nuniform ivec2 uGridOffset;\nuniform ivec2 uGridSize;\nuniform vec4 uMaterialColor;\n\nvarying vec2 vTexCoord;\n\n// some helper functions\nint round(float v) { return ifloor(v + 0.5); }\nivec2 round(vec2 v) { return ifloor(v + 0.5); }\nfloat saturate(float v) { return clamp(v, 0.0, 1.0); }\nvec2 saturate(vec2 v) { return clamp(v, 0.0, 1.0); }\n\nint mul(float v1, int v2) {\n  return ifloor(v1 * float(v2));\n}\n\nivec2 mul(vec2 v1, ivec2 v2) {\n  return ifloor(v1 * vec2(v2) + 0.5);\n}\n\n// unpack a 16-bit integer from a float vec2\nint getInt16(vec2 v) {\n  ivec2 iv = round(v * 255.0);\n  return iv.x * INT(128) + iv.y;\n}\n\nvec2 pixelScale;\nvec2 coverage = vec2(0.0);\nvec2 weight = vec2(0.5);\nconst float minDistance = 1.0/8192.0;\nconst float hardness = 1.05; // amount of antialias\n\n// the maximum number of curves in a glyph\nconst int N = INT(250);\n\n// retrieves an indexed pixel from a sampler\nvec4 getTexel(sampler2D sampler, int pos, ivec2 size) {\n  int width = size.x;\n  int y = ifloor(pos / width);\n  int x = pos - y * width;  // pos % width\n\n  return texture2D(sampler, (vec2(x, y) + 0.5) / vec2(size));\n}\n\nvoid calulateCrossings(vec2 p0, vec2 p1, vec2 p2, out vec2 C1, out vec2 C2) {\n\n  // get the coefficients of the quadratic in t\n  vec2 a = p0 - p1 * 2.0 + p2;\n  vec2 b = p0 - p1;\n  vec2 c = p0 - vTexCoord;\n\n  // found out which values of 't' it crosses the axes\n  vec2 surd = sqrt(max(vec2(0.0), b * b - a * c));\n  vec2 t1 = ((b - surd) / a).yx;\n  vec2 t2 = ((b + surd) / a).yx;\n\n  // approximate straight lines to avoid rounding errors\n  if (abs(a.y) < 0.001)\n    t1.x = t2.x = c.y / (2.0 * b.y);\n\n  if (abs(a.x) < 0.001)\n    t1.y = t2.y = c.x / (2.0 * b.x);\n\n  // plug into quadratic formula to find the corrdinates of the crossings\n  C1 = ((a * t1 - b * 2.0) * t1 + c) * pixelScale;\n  C2 = ((a * t2 - b * 2.0) * t2 + c) * pixelScale;\n}\n\nvoid coverageX(vec2 p0, vec2 p1, vec2 p2) {\n\n  vec2 C1, C2;\n  calulateCrossings(p0, p1, p2, C1, C2);\n\n  // determine on which side of the x-axis the points lie\n  bool y0 = p0.y > vTexCoord.y;\n  bool y1 = p1.y > vTexCoord.y;\n  bool y2 = p2.y > vTexCoord.y;\n\n  // could web be under the curve (after t1)?\n  if (y1 ? !y2 : y0) {\n    // add the coverage for t1\n    coverage.x += saturate(C1.x + 0.5);\n    // calculate the anti-aliasing for t1\n    weight.x = min(weight.x, abs(C1.x));\n  }\n\n  // are we outside the curve (after t2)?\n  if (y1 ? !y0 : y2) {\n    // subtract the coverage for t2\n    coverage.x -= saturate(C2.x + 0.5);\n    // calculate the anti-aliasing for t2\n    weight.x = min(weight.x, abs(C2.x));\n  }\n}\n\n// this is essentially the same as coverageX, but with the axes swapped\nvoid coverageY(vec2 p0, vec2 p1, vec2 p2) {\n\n  vec2 C1, C2;\n  calulateCrossings(p0, p1, p2, C1, C2);\n\n  bool x0 = p0.x > vTexCoord.x;\n  bool x1 = p1.x > vTexCoord.x;\n  bool x2 = p2.x > vTexCoord.x;\n\n  if (x1 ? !x2 : x0) {\n    coverage.y -= saturate(C1.y + 0.5);\n    weight.y = min(weight.y, abs(C1.y));\n  }\n\n  if (x1 ? !x0 : x2) {\n    coverage.y += saturate(C2.y + 0.5);\n    weight.y = min(weight.y, abs(C2.y));\n  }\n}\n\nvoid main() {\n\n  // calculate the pixel scale based on screen-coordinates\n  pixelScale = hardness / fwidth(vTexCoord);\n\n  // which grid cell is this pixel in?\n  ivec2 gridCoord = ifloor(vTexCoord * vec2(uGridSize));\n\n  // intersect curves in this row\n  {\n    // the index into the row info bitmap\n    int rowIndex = gridCoord.y + uGridOffset.y;\n    // fetch the info texel\n    vec4 rowInfo = getTexel(uSamplerRows, rowIndex, uGridImageSize);\n    // unpack the rowInfo\n    int rowStrokeIndex = getInt16(rowInfo.xy);\n    int rowStrokeCount = getInt16(rowInfo.zw);\n\n    for (int iRowStroke = INT(0); iRowStroke < N; iRowStroke++) {\n      if (iRowStroke >= rowStrokeCount)\n        break;\n\n      // each stroke is made up of 3 points: the start and control point\n      // and the start of the next curve.\n      // fetch the indices of this pair of strokes:\n      vec4 strokeIndices = getTexel(uSamplerRowStrokes, rowStrokeIndex++, uCellsImageSize);\n\n      // unpack the stroke index\n      int strokePos = getInt16(strokeIndices.xy);\n\n      // fetch the two strokes\n      vec4 stroke0 = getTexel(uSamplerStrokes, strokePos + INT(0), uStrokeImageSize);\n      vec4 stroke1 = getTexel(uSamplerStrokes, strokePos + INT(1), uStrokeImageSize);\n\n      // calculate the coverage\n      coverageX(stroke0.xy, stroke0.zw, stroke1.xy);\n    }\n  }\n\n  // intersect curves in this column\n  {\n    int colIndex = gridCoord.x + uGridOffset.x;\n    vec4 colInfo = getTexel(uSamplerCols, colIndex, uGridImageSize);\n    int colStrokeIndex = getInt16(colInfo.xy);\n    int colStrokeCount = getInt16(colInfo.zw);\n    \n    for (int iColStroke = INT(0); iColStroke < N; iColStroke++) {\n      if (iColStroke >= colStrokeCount)\n        break;\n\n      vec4 strokeIndices = getTexel(uSamplerColStrokes, colStrokeIndex++, uCellsImageSize);\n\n      int strokePos = getInt16(strokeIndices.xy);\n      vec4 stroke0 = getTexel(uSamplerStrokes, strokePos + INT(0), uStrokeImageSize);\n      vec4 stroke1 = getTexel(uSamplerStrokes, strokePos + INT(1), uStrokeImageSize);\n      coverageY(stroke0.xy, stroke0.zw, stroke1.xy);\n    }\n  }\n\n  weight = saturate(1.0 - weight * 2.0);\n  float distance = max(weight.x + weight.y, minDistance); // manhattan approx.\n  float antialias = abs(dot(coverage, weight) / distance);\n  float cover = min(abs(coverage.x), abs(coverage.y));\n  gl_FragColor = uMaterialColor;\n  gl_FragColor.a *= saturate(max(antialias, cover));\n}",
        lineVert: "/*\n  Part of the Processing project - http://processing.org\n  Copyright (c) 2012-15 The Processing Foundation\n  Copyright (c) 2004-12 Ben Fry and Casey Reas\n  Copyright (c) 2001-04 Massachusetts Institute of Technology\n  This library is free software; you can redistribute it and/or\n  modify it under the terms of the GNU Lesser General Public\n  License as published by the Free Software Foundation, version 2.1.\n  This library is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n  Lesser General Public License for more details.\n  You should have received a copy of the GNU Lesser General\n  Public License along with this library; if not, write to the\n  Free Software Foundation, Inc., 59 Temple Place, Suite 330,\n  Boston, MA  02111-1307  USA\n*/\n\n#define PROCESSING_LINE_SHADER\n\nuniform mat4 uModelViewMatrix;\nuniform mat4 uProjectionMatrix;\nuniform float uStrokeWeight;\n\nuniform vec4 uViewport;\nuniform int uPerspective;\n\nattribute vec4 aPosition;\nattribute vec4 aDirection;\n  \nvoid main() {\n  // using a scale <1 moves the lines towards the camera\n  // in order to prevent popping effects due to half of\n  // the line disappearing behind the geometry faces.\n  vec3 scale = vec3(0.9995);\n\n  vec4 posp = uModelViewMatrix * aPosition;\n  vec4 posq = uModelViewMatrix * (aPosition + vec4(aDirection.xyz, 0));\n\n  // Moving vertices slightly toward the camera\n  // to avoid depth-fighting with the fill triangles.\n  // Discussed here:\n  // http://www.opengl.org/discussion_boards/ubbthreads.php?ubb=showflat&Number=252848  \n  posp.xyz = posp.xyz * scale;\n  posq.xyz = posq.xyz * scale;\n\n  vec4 p = uProjectionMatrix * posp;\n  vec4 q = uProjectionMatrix * posq;\n\n  // formula to convert from clip space (range -1..1) to screen space (range 0..[width or height])\n  // screen_p = (p.xy/p.w + <1,1>) * 0.5 * uViewport.zw\n\n  // prevent division by W by transforming the tangent formula (div by 0 causes\n  // the line to disappear, see https://github.com/processing/processing/issues/5183)\n  // t = screen_q - screen_p\n  //\n  // tangent is normalized and we don't care which aDirection it points to (+-)\n  // t = +- normalize( screen_q - screen_p )\n  // t = +- normalize( (q.xy/q.w+<1,1>)*0.5*uViewport.zw - (p.xy/p.w+<1,1>)*0.5*uViewport.zw )\n  //\n  // extract common factor, <1,1> - <1,1> cancels out\n  // t = +- normalize( (q.xy/q.w - p.xy/p.w) * 0.5 * uViewport.zw )\n  //\n  // convert to common divisor\n  // t = +- normalize( ((q.xy*p.w - p.xy*q.w) / (p.w*q.w)) * 0.5 * uViewport.zw )\n  //\n  // remove the common scalar divisor/factor, not needed due to normalize and +-\n  // (keep uViewport - can't remove because it has different components for x and y\n  //  and corrects for aspect ratio, see https://github.com/processing/processing/issues/5181)\n  // t = +- normalize( (q.xy*p.w - p.xy*q.w) * uViewport.zw )\n\n  vec2 tangent = normalize((q.xy*p.w - p.xy*q.w) * uViewport.zw);\n\n  // flip tangent to normal (it's already normalized)\n  vec2 normal = vec2(-tangent.y, tangent.x);\n\n  float thickness = aDirection.w * uStrokeWeight;\n  vec2 offset = normal * thickness / 2.0;\n\n  vec2 curPerspScale;\n\n  if(uPerspective == 1) {\n    // Perspective ---\n    // convert from world to clip by multiplying with projection scaling factor\n    // to get the right thickness (see https://github.com/processing/processing/issues/5182)\n    // invert Y, projections in Processing invert Y\n    curPerspScale = (uProjectionMatrix * vec4(1, -1, 0, 0)).xy;\n  } else {\n    // No Perspective ---\n    // multiply by W (to cancel out division by W later in the pipeline) and\n    // convert from screen to clip (derived from clip to screen above)\n    curPerspScale = p.w / (0.5 * uViewport.zw);\n  }\n\n  gl_Position.xy = p.xy + offset.xy * curPerspScale;\n  gl_Position.zw = p.zw;\n}\n",
        lineFrag: "precision mediump float;\nprecision mediump int;\n\nuniform vec4 uMaterialColor;\n\nvoid main() {\n  gl_FragColor = uMaterialColor;\n}",
        pointVert: "attribute vec3 aPosition;\nuniform float uPointSize;\nvarying float vStrokeWeight;\nuniform mat4 uModelViewMatrix;\nuniform mat4 uProjectionMatrix;\nvoid main() {\n\tvec4 positionVec4 =  vec4(aPosition, 1.0);\n\tgl_Position = uProjectionMatrix * uModelViewMatrix * positionVec4;\n\tgl_PointSize = uPointSize;\n\tvStrokeWeight = uPointSize;\n}",
        pointFrag: "precision mediump float;\nprecision mediump int;\nuniform vec4 uMaterialColor;\nvarying float vStrokeWeight;\n\nvoid main(){\n\tfloat mask = 0.0;\n\n\t// make a circular mask using the gl_PointCoord (goes from 0 - 1 on a point)\n    // might be able to get a nicer edge on big strokeweights with smoothstep but slightly less performant\n\n\tmask = step(0.98, length(gl_PointCoord * 2.0 - 1.0));\n\n\t// if strokeWeight is 1 or less lets just draw a square\n\t// this prevents weird artifacting from carving circles when our points are really small\n\t// if strokeWeight is larger than 1, we just use it as is\n\n\tmask = mix(0.0, mask, clamp(floor(vStrokeWeight - 0.5),0.0,1.0));\n\n\t// throw away the borders of the mask\n    // otherwise we get weird alpha blending issues\n\n\tif(mask > 0.98){\n      discard;\n  \t}\n\n  \tgl_FragColor = vec4(uMaterialColor.rgb * (1.0 - mask), uMaterialColor.a) ;\n}"
      };
      p.default.RendererGL = function (e, t, r, n) {
        return p.default.Renderer.call(this, e, t, r), this._setAttributeDefaults(t), this._initContext(), this.isP3D = !0, this.GL = this.drawingContext, this._pInst._setProperty("drawingContext", this.drawingContext), this._isErasing = !1, this._enableLighting = !1, this.ambientLightColors = [], this.specularColors = [1, 1, 1], this.directionalLightDirections = [], this.directionalLightDiffuseColors = [], this.directionalLightSpecularColors = [], this.pointLightPositions = [], this.pointLightDiffuseColors = [], this.pointLightSpecularColors = [], this.spotLightPositions = [], this.spotLightDirections = [], this.spotLightDiffuseColors = [], this.spotLightSpecularColors = [], this.spotLightAngle = [], this.spotLightConc = [], this.drawMode = o.FILL, this.curFillColor = this._cachedFillStyle = [1, 1, 1, 1], this.curStrokeColor = this._cachedStrokeStyle = [0, 0, 0, 1], this.curBlendMode = o.BLEND, this._cachedBlendMode = void 0, this.blendExt = this.GL.getExtension("EXT_blend_minmax"), this._isBlending = !1, this._useSpecularMaterial = !1, this._useEmissiveMaterial = !1, this._useNormalMaterial = !1, this._useShininess = 1, this._tint = [255, 255, 255, 255], this.constantAttenuation = 1, this.linearAttenuation = 0, this.quadraticAttenuation = 0, this.uMVMatrix = new p.default.Matrix(), this.uPMatrix = new p.default.Matrix(), this.uNMatrix = new p.default.Matrix("mat3"), this._curCamera = new p.default.Camera(this), this._curCamera._computeCameraDefaultSettings(), this._curCamera._setDefaultCamera(), this._defaultLightShader = void 0, this._defaultImmediateModeShader = void 0, this._defaultNormalShader = void 0, this._defaultColorShader = void 0, this._defaultPointShader = void 0, this.userFillShader = void 0, this.userStrokeShader = void 0, this.userPointShader = void 0, this.retainedMode = {
          geometry: {},
          buffers: {
            stroke: [new p.default.RenderBuffer(3, "lineVertices", "lineVertexBuffer", "aPosition", this, this._flatten), new p.default.RenderBuffer(4, "lineNormals", "lineNormalBuffer", "aDirection", this, this._flatten)],
            fill: [new p.default.RenderBuffer(3, "vertices", "vertexBuffer", "aPosition", this, this._vToNArray), new p.default.RenderBuffer(3, "vertexNormals", "normalBuffer", "aNormal", this, this._vToNArray), new p.default.RenderBuffer(4, "vertexColors", "colorBuffer", "aMaterialColor", this), new p.default.RenderBuffer(3, "vertexAmbients", "ambientBuffer", "aAmbientColor", this), new p.default.RenderBuffer(2, "uvs", "uvBuffer", "aTexCoord", this, this._flatten)],
            text: [new p.default.RenderBuffer(3, "vertices", "vertexBuffer", "aPosition", this, this._vToNArray), new p.default.RenderBuffer(2, "uvs", "uvBuffer", "aTexCoord", this, this._flatten)]
          }
        }, this.immediateMode = {
          geometry: new p.default.Geometry(),
          shapeMode: o.TRIANGLE_FAN,
          _bezierVertex: [],
          _quadraticVertex: [],
          _curveVertex: [],
          buffers: {
            fill: [new p.default.RenderBuffer(3, "vertices", "vertexBuffer", "aPosition", this, this._vToNArray), new p.default.RenderBuffer(3, "vertexNormals", "normalBuffer", "aNormal", this, this._vToNArray), new p.default.RenderBuffer(4, "vertexColors", "colorBuffer", "aVertexColor", this), new p.default.RenderBuffer(3, "vertexAmbients", "ambientBuffer", "aAmbientColor", this), new p.default.RenderBuffer(2, "uvs", "uvBuffer", "aTexCoord", this, this._flatten)],
            stroke: [new p.default.RenderBuffer(3, "lineVertices", "lineVertexBuffer", "aPosition", this, this._flatten), new p.default.RenderBuffer(4, "lineNormals", "lineNormalBuffer", "aDirection", this, this._flatten)],
            point: this.GL.createBuffer()
          }
        }, this.pointSize = 5, this.curStrokeWeight = 1, this.textures = [], this.textureMode = o.IMAGE, this.textureWrapX = o.CLAMP, this.textureWrapY = o.CLAMP, this._tex = null, this._curveTightness = 6, this._lookUpTableBezier = [], this._lookUpTableQuadratic = [], this._lutBezierDetail = 0, this._lutQuadraticDetail = 0, this._tessy = this._initTessy(), this.fontInfos = {}, this._curShader = void 0, this;
      }, p.default.RendererGL.prototype = Object.create(p.default.Renderer.prototype), p.default.RendererGL.prototype._setAttributeDefaults = function (e) {
        var t = {
          alpha: !0,
          depth: !0,
          stencil: !0,
          antialias: navigator.userAgent.toLowerCase().includes("safari"),
          premultipliedAlpha: !1,
          preserveDrawingBuffer: !0,
          perPixelLighting: !0
        };
        null === e._glAttributes ? e._glAttributes = t : e._glAttributes = Object.assign(t, e._glAttributes);
      }, p.default.RendererGL.prototype._initContext = function () {
        try {
          if (this.drawingContext = this.canvas.getContext("webgl", this._pInst._glAttributes) || this.canvas.getContext("experimental-webgl", this._pInst._glAttributes), null === this.drawingContext) throw new Error("Error creating webgl context");
          var e = this.drawingContext;
          e.enable(e.DEPTH_TEST), e.depthFunc(e.LEQUAL), e.viewport(0, 0, e.drawingBufferWidth, e.drawingBufferHeight), this._viewport = this.drawingContext.getParameter(this.drawingContext.VIEWPORT);
        } catch (e) {
          throw e;
        }
      }, p.default.RendererGL.prototype._resetContext = function (e, t) {
        var r = this.width,
            n = this.height,
            a = this.canvas.id,
            o = this._pInst instanceof p.default.Graphics;

        if (o) {
          var i = this._pInst;
          i.canvas.parentNode.removeChild(i.canvas), i.canvas = document.createElement("canvas"), (i._pInst._userNode || document.body).appendChild(i.canvas), p.default.Element.call(i, i.canvas, i._pInst), i.width = r, i.height = n;
        } else {
          var s = this.canvas;
          s && s.parentNode.removeChild(s), (s = document.createElement("canvas")).id = a, this._pInst._userNode ? this._pInst._userNode.appendChild(s) : document.body.appendChild(s), this._pInst.canvas = s;
        }

        var l = new p.default.RendererGL(this._pInst.canvas, this._pInst, !o);
        this._pInst._setProperty("_renderer", l), l.resize(r, n), l._applyDefaults(), o || this._pInst._elements.push(l), "function" == typeof t && setTimeout(function () {
          t.apply(window._renderer, e);
        }, 0);
      }, p.default.prototype.setAttributes = function (e, t) {
        if (void 0 !== this._glAttributes) {
          var r = !0;

          if (void 0 !== t ? (null === this._glAttributes && (this._glAttributes = {}), this._glAttributes[e] !== t && (this._glAttributes[e] = t, r = !1)) : e instanceof Object && this._glAttributes !== e && (this._glAttributes = e, r = !1), this._renderer.isP3D && !r) {
            if (!this._setupDone) for (var n in this._renderer.retainedMode.geometry) if (this._renderer.retainedMode.geometry.hasOwnProperty(n)) return void console.error("Sorry, Could not set the attributes, you need to call setAttributes() before calling the other drawing methods in setup()");
            this.push(), this._renderer._resetContext(), this.pop(), this._renderer._curCamera && (this._renderer._curCamera._renderer = this._renderer);
          }
        } else console.log("You are trying to use setAttributes on a p5.Graphics object that does not use a WEBGL renderer.");
      }, p.default.RendererGL.prototype._update = function () {
        this.uMVMatrix.set(this._curCamera.cameraMatrix.mat4[0], this._curCamera.cameraMatrix.mat4[1], this._curCamera.cameraMatrix.mat4[2], this._curCamera.cameraMatrix.mat4[3], this._curCamera.cameraMatrix.mat4[4], this._curCamera.cameraMatrix.mat4[5], this._curCamera.cameraMatrix.mat4[6], this._curCamera.cameraMatrix.mat4[7], this._curCamera.cameraMatrix.mat4[8], this._curCamera.cameraMatrix.mat4[9], this._curCamera.cameraMatrix.mat4[10], this._curCamera.cameraMatrix.mat4[11], this._curCamera.cameraMatrix.mat4[12], this._curCamera.cameraMatrix.mat4[13], this._curCamera.cameraMatrix.mat4[14], this._curCamera.cameraMatrix.mat4[15]), this.ambientLightColors.length = 0, this.specularColors = [1, 1, 1], this.directionalLightDirections.length = 0, this.directionalLightDiffuseColors.length = 0, this.directionalLightSpecularColors.length = 0, this.pointLightPositions.length = 0, this.pointLightDiffuseColors.length = 0, this.pointLightSpecularColors.length = 0, this.spotLightPositions.length = 0, this.spotLightDirections.length = 0, this.spotLightDiffuseColors.length = 0, this.spotLightSpecularColors.length = 0, this.spotLightAngle.length = 0, this.spotLightConc.length = 0, this._enableLighting = !1, this._tint = [255, 255, 255, 255], this.GL.clear(this.GL.DEPTH_BUFFER_BIT);
      }, p.default.RendererGL.prototype.background = function () {
        var e,
            t = (e = this._pInst).color.apply(e, arguments),
            r = t.levels[0] / 255,
            n = t.levels[1] / 255,
            a = t.levels[2] / 255,
            o = t.levels[3] / 255;

        this.GL.clearColor(r, n, a, o), this.GL.clear(this.GL.COLOR_BUFFER_BIT);
      }, p.default.RendererGL.prototype.fill = function (e, t, r, n) {
        var a = p.default.prototype.color.apply(this._pInst, arguments);
        this.curFillColor = a._array, this.drawMode = o.FILL, this._useNormalMaterial = !1, this._tex = null;
      }, p.default.RendererGL.prototype.stroke = function (e, t, r, n) {
        arguments[3] = 255;
        var a = p.default.prototype.color.apply(this._pInst, arguments);
        this.curStrokeColor = a._array;
      }, p.default.RendererGL.prototype.strokeCap = function (e) {
        console.error("Sorry, strokeCap() is not yet implemented in WEBGL mode");
      }, p.default.RendererGL.prototype.strokeJoin = function (e) {
        console.error("Sorry, strokeJoin() is not yet implemented in WEBGL mode");
      }, p.default.RendererGL.prototype.filter = function (e) {
        console.error("filter() does not work in WEBGL mode");
      }, p.default.RendererGL.prototype.blendMode = function (e) {
        e === o.DARKEST || e === o.LIGHTEST || e === o.ADD || e === o.BLEND || e === o.SUBTRACT || e === o.SCREEN || e === o.EXCLUSION || e === o.REPLACE || e === o.MULTIPLY || e === o.REMOVE ? this.curBlendMode = e : e !== o.BURN && e !== o.OVERLAY && e !== o.HARD_LIGHT && e !== o.SOFT_LIGHT && e !== o.DODGE || console.warn("BURN, OVERLAY, HARD_LIGHT, SOFT_LIGHT, and DODGE only work for blendMode in 2D mode.");
      }, p.default.RendererGL.prototype.erase = function (e, t) {
        this._isErasing || (this._applyBlendMode(o.REMOVE), this._isErasing = !0, this._cachedFillStyle = this.curFillColor.slice(), this.curFillColor = [1, 1, 1, e / 255], this._cachedStrokeStyle = this.curStrokeColor.slice(), this.curStrokeColor = [1, 1, 1, t / 255]);
      }, p.default.RendererGL.prototype.noErase = function () {
        this._isErasing && (this._isErasing = !1, this.curFillColor = this._cachedFillStyle.slice(), this.curStrokeColor = this._cachedStrokeStyle.slice(), this.blendMode(this._cachedBlendMode));
      }, p.default.RendererGL.prototype.strokeWeight = function (e) {
        this.curStrokeWeight !== e && (this.pointSize = e, this.curStrokeWeight = e);
      }, p.default.RendererGL.prototype._getPixel = function (e, t) {
        var r;
        return r = new Uint8Array(4), this.drawingContext.readPixels(e, t, 1, 1, this.drawingContext.RGBA, this.drawingContext.UNSIGNED_BYTE, r), [r[0], r[1], r[2], r[3]];
      }, p.default.RendererGL.prototype.loadPixels = function () {
        var e = this._pixelsState;

        if (!0 === this._pInst._glAttributes.preserveDrawingBuffer) {
          var t = e.pixels,
              r = this.GL.drawingBufferWidth * this.GL.drawingBufferHeight * 4;
          t instanceof Uint8Array && t.length === r || (t = new Uint8Array(r), this._pixelsState._setProperty("pixels", t));
          var n = this._pInst._pixelDensity;
          this.GL.readPixels(0, 0, this.width * n, this.height * n, this.GL.RGBA, this.GL.UNSIGNED_BYTE, t);
        } else console.log("loadPixels only works in WebGL when preserveDrawingBuffer is true.");
      }, p.default.RendererGL.prototype.geometryInHash = function (e) {
        return void 0 !== this.retainedMode.geometry[e];
      }, p.default.RendererGL.prototype.resize = function (e, t) {
        p.default.Renderer.prototype.resize.call(this, e, t), this.GL.viewport(0, 0, this.GL.drawingBufferWidth, this.GL.drawingBufferHeight), this._viewport = this.GL.getParameter(this.GL.VIEWPORT), this._curCamera._resize();
        var r = this._pixelsState;
        void 0 !== r.pixels && r._setProperty("pixels", new Uint8Array(this.GL.drawingBufferWidth * this.GL.drawingBufferHeight * 4));
      }, p.default.RendererGL.prototype.clear = function () {
        var e = (arguments.length <= 0 ? void 0 : arguments[0]) || 0,
            t = (arguments.length <= 1 ? void 0 : arguments[1]) || 0,
            r = (arguments.length <= 2 ? void 0 : arguments[2]) || 0,
            n = (arguments.length <= 3 ? void 0 : arguments[3]) || 0;
        this.GL.clearColor(e, t, r, n), this.GL.clear(this.GL.COLOR_BUFFER_BIT | this.GL.DEPTH_BUFFER_BIT);
      }, p.default.RendererGL.prototype.applyMatrix = function (e, t, r, n, a, o) {
        16 === arguments.length ? p.default.Matrix.prototype.apply.apply(this.uMVMatrix, arguments) : this.uMVMatrix.apply([e, t, 0, 0, r, n, 0, 0, 0, 0, 1, 0, a, o, 0, 1]);
      }, p.default.RendererGL.prototype.translate = function (e, t, r) {
        return e instanceof p.default.Vector && (r = e.z, t = e.y, e = e.x), this.uMVMatrix.translate([e, t, r]), this;
      }, p.default.RendererGL.prototype.scale = function (e, t, r) {
        return this.uMVMatrix.scale(e, t, r), this;
      }, p.default.RendererGL.prototype.rotate = function (e, t) {
        return void 0 === t ? this.rotateZ(e) : (p.default.Matrix.prototype.rotate.apply(this.uMVMatrix, arguments), this);
      }, p.default.RendererGL.prototype.rotateX = function (e) {
        return this.rotate(e, 1, 0, 0), this;
      }, p.default.RendererGL.prototype.rotateY = function (e) {
        return this.rotate(e, 0, 1, 0), this;
      }, p.default.RendererGL.prototype.rotateZ = function (e) {
        return this.rotate(e, 0, 0, 1), this;
      }, p.default.RendererGL.prototype.push = function () {
        var e = p.default.Renderer.prototype.push.apply(this),
            t = e.properties;
        return t.uMVMatrix = this.uMVMatrix.copy(), t.uPMatrix = this.uPMatrix.copy(), t._curCamera = this._curCamera, this._curCamera = this._curCamera.copy(), t.ambientLightColors = this.ambientLightColors.slice(), t.specularColors = this.specularColors.slice(), t.directionalLightDirections = this.directionalLightDirections.slice(), t.directionalLightDiffuseColors = this.directionalLightDiffuseColors.slice(), t.directionalLightSpecularColors = this.directionalLightSpecularColors.slice(), t.pointLightPositions = this.pointLightPositions.slice(), t.pointLightDiffuseColors = this.pointLightDiffuseColors.slice(), t.pointLightSpecularColors = this.pointLightSpecularColors.slice(), t.spotLightPositions = this.spotLightPositions.slice(), t.spotLightDirections = this.spotLightDirections.slice(), t.spotLightDiffuseColors = this.spotLightDiffuseColors.slice(), t.spotLightSpecularColors = this.spotLightSpecularColors.slice(), t.spotLightAngle = this.spotLightAngle.slice(), t.spotLightConc = this.spotLightConc.slice(), t.userFillShader = this.userFillShader, t.userStrokeShader = this.userStrokeShader, t.userPointShader = this.userPointShader, t.pointSize = this.pointSize, t.curStrokeWeight = this.curStrokeWeight, t.curStrokeColor = this.curStrokeColor, t.curFillColor = this.curFillColor, t._useSpecularMaterial = this._useSpecularMaterial, t._useEmissiveMaterial = this._useEmissiveMaterial, t._useShininess = this._useShininess, t.constantAttenuation = this.constantAttenuation, t.linearAttenuation = this.linearAttenuation, t.quadraticAttenuation = this.quadraticAttenuation, t._enableLighting = this._enableLighting, t._useNormalMaterial = this._useNormalMaterial, t._tex = this._tex, t.drawMode = this.drawMode, e;
      }, p.default.RendererGL.prototype.resetMatrix = function () {
        return this.uMVMatrix = p.default.Matrix.identity(this._pInst), this;
      }, p.default.RendererGL.prototype._getImmediateStrokeShader = function () {
        var e = this.userStrokeShader;
        return e && e.isStrokeShader() ? e : this._getLineShader();
      }, p.default.RendererGL.prototype._getRetainedStrokeShader = p.default.RendererGL.prototype._getImmediateStrokeShader, p.default.RendererGL.prototype._getImmediateFillShader = function () {
        var e = this.userFillShader;
        if (this._useNormalMaterial && (!e || !e.isNormalShader())) return this._getNormalShader();

        if (this._enableLighting) {
          if (!e || !e.isLightShader()) return this._getLightShader();
        } else if (this._tex) {
          if (!e || !e.isTextureShader()) return this._getLightShader();
        } else if (!e) return this._getImmediateModeShader();

        return e;
      }, p.default.RendererGL.prototype._getRetainedFillShader = function () {
        if (this._useNormalMaterial) return this._getNormalShader();
        var e = this.userFillShader;

        if (this._enableLighting) {
          if (!e || !e.isLightShader()) return this._getLightShader();
        } else if (this._tex) {
          if (!e || !e.isTextureShader()) return this._getLightShader();
        } else if (!e) return this._getColorShader();

        return e;
      }, p.default.RendererGL.prototype._getImmediatePointShader = function () {
        var e = this.userPointShader;
        return e && e.isPointShader() ? e : this._getPointShader();
      }, p.default.RendererGL.prototype._getRetainedLineShader = p.default.RendererGL.prototype._getImmediateLineShader, p.default.RendererGL.prototype._getLightShader = function () {
        return this._defaultLightShader || (this._pInst._glAttributes.perPixelLighting ? this._defaultLightShader = new p.default.Shader(this, c.phongVert, c.phongFrag) : this._defaultLightShader = new p.default.Shader(this, c.lightVert, c.lightTextureFrag)), this._defaultLightShader;
      }, p.default.RendererGL.prototype._getImmediateModeShader = function () {
        return this._defaultImmediateModeShader || (this._defaultImmediateModeShader = new p.default.Shader(this, c.immediateVert, c.vertexColorFrag)), this._defaultImmediateModeShader;
      }, p.default.RendererGL.prototype._getNormalShader = function () {
        return this._defaultNormalShader || (this._defaultNormalShader = new p.default.Shader(this, c.normalVert, c.normalFrag)), this._defaultNormalShader;
      }, p.default.RendererGL.prototype._getColorShader = function () {
        return this._defaultColorShader || (this._defaultColorShader = new p.default.Shader(this, c.normalVert, c.basicFrag)), this._defaultColorShader;
      }, p.default.RendererGL.prototype._getPointShader = function () {
        return this._defaultPointShader || (this._defaultPointShader = new p.default.Shader(this, c.pointVert, c.pointFrag)), this._defaultPointShader;
      }, p.default.RendererGL.prototype._getLineShader = function () {
        return this._defaultLineShader || (this._defaultLineShader = new p.default.Shader(this, c.lineVert, c.lineFrag)), this._defaultLineShader;
      }, p.default.RendererGL.prototype._getFontShader = function () {
        return this._defaultFontShader || (this.GL.getExtension("OES_standard_derivatives"), this._defaultFontShader = new p.default.Shader(this, c.fontVert, c.fontFrag)), this._defaultFontShader;
      }, p.default.RendererGL.prototype._getEmptyTexture = function () {
        if (!this._emptyTexture) {
          var e = new p.default.Image(1, 1);
          e.set(0, 0, 255), this._emptyTexture = new p.default.Texture(this, e);
        }

        return this._emptyTexture;
      }, p.default.RendererGL.prototype.getTexture = function (e) {
        var t = this.textures,
            r = !0,
            n = !1,
            a = void 0;

        try {
          for (var o, i = t[Symbol.iterator](); !(r = (o = i.next()).done); r = !0) {
            var s = o.value;
            if (s.src === e) return s;
          }
        } catch (e) {
          n = !0, a = e;
        } finally {
          try {
            r || null == i.return || i.return();
          } finally {
            if (n) throw a;
          }
        }

        var l = new p.default.Texture(this, e);
        return t.push(l), l;
      }, p.default.RendererGL.prototype._setStrokeUniforms = function (e) {
        e.bindShader(), e.setUniform("uMaterialColor", this.curStrokeColor), e.setUniform("uStrokeWeight", this.curStrokeWeight);
      }, p.default.RendererGL.prototype._setFillUniforms = function (e) {
        e.bindShader(), e.setUniform("uMaterialColor", this.curFillColor), e.setUniform("isTexture", !!this._tex), this._tex && e.setUniform("uSampler", this._tex), e.setUniform("uTint", this._tint), e.setUniform("uSpecular", this._useSpecularMaterial), e.setUniform("uEmissive", this._useEmissiveMaterial), e.setUniform("uShininess", this._useShininess), e.setUniform("uUseLighting", this._enableLighting);
        var t = this.pointLightDiffuseColors.length / 3;
        e.setUniform("uPointLightCount", t), e.setUniform("uPointLightLocation", this.pointLightPositions), e.setUniform("uPointLightDiffuseColors", this.pointLightDiffuseColors), e.setUniform("uPointLightSpecularColors", this.pointLightSpecularColors);
        var r = this.directionalLightDiffuseColors.length / 3;
        e.setUniform("uDirectionalLightCount", r), e.setUniform("uLightingDirection", this.directionalLightDirections), e.setUniform("uDirectionalDiffuseColors", this.directionalLightDiffuseColors), e.setUniform("uDirectionalSpecularColors", this.directionalLightSpecularColors);
        var n = this.ambientLightColors.length / 3;
        e.setUniform("uAmbientLightCount", n), e.setUniform("uAmbientColor", this.ambientLightColors);
        var a = this.spotLightDiffuseColors.length / 3;
        e.setUniform("uSpotLightCount", a), e.setUniform("uSpotLightAngle", this.spotLightAngle), e.setUniform("uSpotLightConc", this.spotLightConc), e.setUniform("uSpotLightDiffuseColors", this.spotLightDiffuseColors), e.setUniform("uSpotLightSpecularColors", this.spotLightSpecularColors), e.setUniform("uSpotLightLocation", this.spotLightPositions), e.setUniform("uSpotLightDirection", this.spotLightDirections), e.setUniform("uConstantAttenuation", this.constantAttenuation), e.setUniform("uLinearAttenuation", this.linearAttenuation), e.setUniform("uQuadraticAttenuation", this.quadraticAttenuation), e.bindTextures();
      }, p.default.RendererGL.prototype._setPointUniforms = function (e) {
        e.bindShader(), e.setUniform("uMaterialColor", this.curStrokeColor), e.setUniform("uPointSize", this.pointSize);
      }, p.default.RendererGL.prototype._bindBuffer = function (e, t, r, n, a) {
        if (t = t || this.GL.ARRAY_BUFFER, this.GL.bindBuffer(t, e), void 0 !== r) {
          var o = new (n || Float32Array)(r);
          this.GL.bufferData(t, o, a || this.GL.STATIC_DRAW);
        }
      }, p.default.RendererGL.prototype._arraysEqual = function (e, t) {
        var r = e.length;
        if (r !== t.length) return !1;

        for (var n = 0; n < r; n++) if (e[n] !== t[n]) return !1;

        return !0;
      }, p.default.RendererGL.prototype._isTypedArray = function (e) {
        return Float32Array, Float64Array, Int16Array, Uint16Array, e instanceof Uint32Array;
      }, p.default.RendererGL.prototype._flatten = function (e) {
        if (0 === e.length) return [];

        if (2e4 < e.length) {
          var t,
              r = Object.prototype.toString,
              n = [],
              a = e.slice();

          for (t = a.pop(); "[object Array]" === r.call(t) ? a.push.apply(a, l(t)) : n.push(t), a.length && void 0 !== (t = a.pop()););

          return n.reverse(), n;
        }

        var o;
        return (o = []).concat.apply(o, l(e));
      }, p.default.RendererGL.prototype._vToNArray = function (e) {
        var t = [],
            r = !0,
            n = !1,
            a = void 0;

        try {
          for (var o, i = e[Symbol.iterator](); !(r = (o = i.next()).done); r = !0) {
            var s = o.value;
            t.push(s.x, s.y, s.z);
          }
        } catch (e) {
          n = !0, a = e;
        } finally {
          try {
            r || null == i.return || i.return();
          } finally {
            if (n) throw a;
          }
        }

        return t;
      }, p.default.prototype._assert3d = function (e) {
        if (!this._renderer.isP3D) throw new Error("".concat(e, "() is only supported in WEBGL mode. If you'd like to use 3D graphics and WebGL, see  https://p5js.org/examples/form-3d-primitives.html for more information."));
      }, p.default.RendererGL.prototype._initTessy = function () {
        var e = new n.default.GluTesselator();
        return e.gluTessCallback(n.default.gluEnum.GLU_TESS_VERTEX_DATA, function (e, t) {
          t[t.length] = e[0], t[t.length] = e[1], t[t.length] = e[2];
        }), e.gluTessCallback(n.default.gluEnum.GLU_TESS_BEGIN, function (e) {
          e !== n.default.primitiveType.GL_TRIANGLES && console.log("expected TRIANGLES but got type: ".concat(e));
        }), e.gluTessCallback(n.default.gluEnum.GLU_TESS_ERROR, function (e) {
          console.log("error callback"), console.log("error number: ".concat(e));
        }), e.gluTessCallback(n.default.gluEnum.GLU_TESS_COMBINE, function (e, t, r) {
          return [e[0], e[1], e[2]];
        }), e.gluTessCallback(n.default.gluEnum.GLU_TESS_EDGE_FLAG, function (e) {}), e;
      }, p.default.RendererGL.prototype._triangulate = function (e) {
        this._tessy.gluTessNormal(0, 0, 1);

        var t = [];

        this._tessy.gluTessBeginPolygon(t);

        for (var r = 0; r < e.length; r++) {
          this._tessy.gluTessBeginContour();

          for (var n = e[r], a = 0; a < n.length; a += 3) {
            var o = [n[a], n[a + 1], n[a + 2]];

            this._tessy.gluTessVertex(o, o);
          }

          this._tessy.gluTessEndContour();
        }

        return this._tessy.gluTessEndPolygon(), t;
      }, p.default.RendererGL.prototype._bezierCoefficients = function (e) {
        var t = e * e,
            r = 1 - e,
            n = r * r;
        return [n * r, 3 * n * e, 3 * r * t, t * e];
      }, p.default.RendererGL.prototype._quadraticCoefficients = function (e) {
        var t = 1 - e;
        return [t * t, 2 * t * e, e * e];
      }, p.default.RendererGL.prototype._bezierToCatmull = function (e) {
        return [e[1], e[1] + (e[2] - e[0]) / this._curveTightness, e[2] - (e[3] - e[1]) / this._curveTightness, e[2]];
      };
      var d = p.default.RendererGL;
      r.default = d;
    }, {
      "../core/constants": 22,
      "../core/main": 32,
      "../core/p5.Renderer": 35,
      "./p5.Camera": 80,
      "./p5.Matrix": 82,
      "./p5.Shader": 87,
      libtess: 11,
      path: 14
    }],
    87: [function (e, t, r) {
      "use strict";

      Object.defineProperty(r, "__esModule", {
        value: !0
      }), r.default = void 0;
      var n,
          a = (n = e("../core/main")) && n.__esModule ? n : {
        default: n
      };
      a.default.Shader = function (e, t, r) {
        this._renderer = e, this._vertSrc = t, this._fragSrc = r, this._vertShader = -1, this._fragShader = -1, this._glProgram = 0, this._loadedAttributes = !1, this.attributes = {}, this._loadedUniforms = !1, this.uniforms = {}, this._bound = !1, this.samplers = [];
      }, a.default.Shader.prototype.init = function () {
        if (0 === this._glProgram) {
          var e = this._renderer.GL;
          if (this._vertShader = e.createShader(e.VERTEX_SHADER), e.shaderSource(this._vertShader, this._vertSrc), e.compileShader(this._vertShader), !e.getShaderParameter(this._vertShader, e.COMPILE_STATUS)) return console.error("Yikes! An error occurred compiling the vertex shader:".concat(e.getShaderInfoLog(this._vertShader))), null;
          if (this._fragShader = e.createShader(e.FRAGMENT_SHADER), e.shaderSource(this._fragShader, this._fragSrc), e.compileShader(this._fragShader), !e.getShaderParameter(this._fragShader, e.COMPILE_STATUS)) return console.error("Darn! An error occurred compiling the fragment shader:".concat(e.getShaderInfoLog(this._fragShader))), null;
          this._glProgram = e.createProgram(), e.attachShader(this._glProgram, this._vertShader), e.attachShader(this._glProgram, this._fragShader), e.linkProgram(this._glProgram), e.getProgramParameter(this._glProgram, e.LINK_STATUS) || console.error("Snap! Error linking shader program: ".concat(e.getProgramInfoLog(this._glProgram))), this._loadAttributes(), this._loadUniforms();
        }

        return this;
      }, a.default.Shader.prototype._loadAttributes = function () {
        if (!this._loadedAttributes) {
          this.attributes = {};

          for (var e = this._renderer.GL, t = e.getProgramParameter(this._glProgram, e.ACTIVE_ATTRIBUTES), r = 0; r < t; ++r) {
            var n = e.getActiveAttrib(this._glProgram, r),
                a = n.name,
                o = e.getAttribLocation(this._glProgram, a),
                i = {};
            i.name = a, i.location = o, i.index = r, i.type = n.type, i.size = n.size, this.attributes[a] = i;
          }

          this._loadedAttributes = !0;
        }
      }, a.default.Shader.prototype._loadUniforms = function () {
        if (!this._loadedUniforms) {
          for (var e = this._renderer.GL, t = e.getProgramParameter(this._glProgram, e.ACTIVE_UNIFORMS), r = 0, n = 0; n < t; ++n) {
            var a = e.getActiveUniform(this._glProgram, n),
                o = {};
            o.location = e.getUniformLocation(this._glProgram, a.name), o.size = a.size;
            var i = a.name;
            1 < a.size && (i = i.substring(0, i.indexOf("[0]"))), o.name = i, o.type = a.type, o._cachedData = void 0, o.type === e.SAMPLER_2D && (o.samplerIndex = r, r++, this.samplers.push(o)), o.isArray = o.type === e.FLOAT_MAT3 || o.type === e.FLOAT_MAT4 || o.type === e.FLOAT_VEC2 || o.type === e.FLOAT_VEC3 || o.type === e.FLOAT_VEC4 || o.type === e.INT_VEC2 || o.type === e.INT_VEC3 || o.type === e.INT_VEC4, this.uniforms[i] = o;
          }

          this._loadedUniforms = !0;
        }
      }, a.default.Shader.prototype.compile = function () {}, a.default.Shader.prototype.bindShader = function () {
        this.init(), this._bound || (this.useProgram(), this._bound = !0, this._setMatrixUniforms(), this.setUniform("uViewport", this._renderer._viewport));
      }, a.default.Shader.prototype.unbindShader = function () {
        return this._bound && (this.unbindTextures(), this._bound = !1), this;
      }, a.default.Shader.prototype.bindTextures = function () {
        var e = this._renderer.GL,
            t = !0,
            r = !1,
            n = void 0;

        try {
          for (var a, o = this.samplers[Symbol.iterator](); !(t = (a = o.next()).done); t = !0) {
            var i = a.value,
                s = i.texture;
            void 0 === s && (s = this._renderer._getEmptyTexture()), e.activeTexture(e.TEXTURE0 + i.samplerIndex), s.bindTexture(), s.update(), e.uniform1i(i.location, i.samplerIndex);
          }
        } catch (e) {
          r = !0, n = e;
        } finally {
          try {
            t || null == o.return || o.return();
          } finally {
            if (r) throw n;
          }
        }
      }, a.default.Shader.prototype.updateTextures = function () {
        var e = !0,
            t = !1,
            r = void 0;

        try {
          for (var n, a = this.samplers[Symbol.iterator](); !(e = (n = a.next()).done); e = !0) {
            var o = n.value.texture;
            o && o.update();
          }
        } catch (e) {
          t = !0, r = e;
        } finally {
          try {
            e || null == a.return || a.return();
          } finally {
            if (t) throw r;
          }
        }
      }, a.default.Shader.prototype.unbindTextures = function () {}, a.default.Shader.prototype._setMatrixUniforms = function () {
        this.setUniform("uProjectionMatrix", this._renderer.uPMatrix.mat4), this.isStrokeShader() && ("default" === this._renderer._curCamera.cameraType ? this.setUniform("uPerspective", 1) : this.setUniform("uPerspective", 0)), this.setUniform("uModelViewMatrix", this._renderer.uMVMatrix.mat4), this.setUniform("uViewMatrix", this._renderer._curCamera.cameraMatrix.mat4), this.uniforms.uNormalMatrix && (this._renderer.uNMatrix.inverseTranspose(this._renderer.uMVMatrix), this.setUniform("uNormalMatrix", this._renderer.uNMatrix.mat3));
      }, a.default.Shader.prototype.useProgram = function () {
        var e = this._renderer.GL;
        return this._renderer._curShader !== this && (e.useProgram(this._glProgram), this._renderer._curShader = this), this;
      }, a.default.Shader.prototype.setUniform = function (e, t) {
        var r = this.uniforms[e];

        if (r) {
          var n = this._renderer.GL;

          if (r.isArray) {
            if (r._cachedData && this._renderer._arraysEqual(r._cachedData, t)) return;
            r._cachedData = t.slice(0);
          } else {
            if (r._cachedData && r._cachedData === t) return;
            r._cachedData = t;
          }

          var a = r.location;

          switch (this.useProgram(), r.type) {
            case n.BOOL:
              !0 === t ? n.uniform1i(a, 1) : n.uniform1i(a, 0);
              break;

            case n.INT:
              1 < r.size ? t.length && n.uniform1iv(a, t) : n.uniform1i(a, t);
              break;

            case n.FLOAT:
              1 < r.size ? t.length && n.uniform1fv(a, t) : n.uniform1f(a, t);
              break;

            case n.FLOAT_MAT3:
              n.uniformMatrix3fv(a, !1, t);
              break;

            case n.FLOAT_MAT4:
              n.uniformMatrix4fv(a, !1, t);
              break;

            case n.FLOAT_VEC2:
              1 < r.size ? t.length && n.uniform2fv(a, t) : n.uniform2f(a, t[0], t[1]);
              break;

            case n.FLOAT_VEC3:
              1 < r.size ? t.length && n.uniform3fv(a, t) : n.uniform3f(a, t[0], t[1], t[2]);
              break;

            case n.FLOAT_VEC4:
              1 < r.size ? t.length && n.uniform4fv(a, t) : n.uniform4f(a, t[0], t[1], t[2], t[3]);
              break;

            case n.INT_VEC2:
              1 < r.size ? t.length && n.uniform2iv(a, t) : n.uniform2i(a, t[0], t[1]);
              break;

            case n.INT_VEC3:
              1 < r.size ? t.length && n.uniform3iv(a, t) : n.uniform3i(a, t[0], t[1], t[2]);
              break;

            case n.INT_VEC4:
              1 < r.size ? t.length && n.uniform4iv(a, t) : n.uniform4i(a, t[0], t[1], t[2], t[3]);
              break;

            case n.SAMPLER_2D:
              n.activeTexture(n.TEXTURE0 + r.samplerIndex), r.texture = this._renderer.getTexture(t), n.uniform1i(r.location, r.samplerIndex);
          }

          return this;
        }
      }, a.default.Shader.prototype.isLightShader = function () {
        return void 0 !== this.attributes.aNormal || void 0 !== this.uniforms.uUseLighting || void 0 !== this.uniforms.uAmbientLightCount || void 0 !== this.uniforms.uDirectionalLightCount || void 0 !== this.uniforms.uPointLightCount || void 0 !== this.uniforms.uAmbientColor || void 0 !== this.uniforms.uDirectionalDiffuseColors || void 0 !== this.uniforms.uDirectionalSpecularColors || void 0 !== this.uniforms.uPointLightLocation || void 0 !== this.uniforms.uPointLightDiffuseColors || void 0 !== this.uniforms.uPointLightSpecularColors || void 0 !== this.uniforms.uLightingDirection || void 0 !== this.uniforms.uSpecular;
      }, a.default.Shader.prototype.isNormalShader = function () {
        return void 0 !== this.attributes.aNormal;
      }, a.default.Shader.prototype.isTextureShader = function () {
        return 0 < this.samplerIndex;
      }, a.default.Shader.prototype.isColorShader = function () {
        return void 0 !== this.attributes.aVertexColor || void 0 !== this.uniforms.uMaterialColor;
      }, a.default.Shader.prototype.isTexLightShader = function () {
        return this.isLightShader() && this.isTextureShader();
      }, a.default.Shader.prototype.isStrokeShader = function () {
        return void 0 !== this.uniforms.uStrokeWeight;
      }, a.default.Shader.prototype.enableAttrib = function (e, t, r, n, a, o) {
        if (e) {
          0;
          var i = e.location;

          if (-1 !== i) {
            var s = this._renderer.GL;
            e.enabled || (s.enableVertexAttribArray(i), e.enabled = !0), this._renderer.GL.vertexAttribPointer(i, t, r || s.FLOAT, n || !1, a || 0, o || 0);
          }
        }

        return this;
      };
      var o = a.default.Shader;
      r.default = o;
    }, {
      "../core/main": 32
    }],
    88: [function (e, t, r) {
      "use strict";

      function i(e) {
        return (i = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (e) {
          return typeof e;
        } : function (e) {
          return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e;
        })(e);
      }

      Object.defineProperty(r, "__esModule", {
        value: !0
      }), r.default = void 0;

      var n,
          a = (n = e("../core/main")) && n.__esModule ? n : {
        default: n
      },
          s = function (e) {
        if (e && e.__esModule) return e;
        if (null === e || "object" !== i(e) && "function" != typeof e) return {
          default: e
        };
        var t = l();
        if (t && t.has(e)) return t.get(e);
        var r = {},
            n = Object.defineProperty && Object.getOwnPropertyDescriptor;

        for (var a in e) if (Object.prototype.hasOwnProperty.call(e, a)) {
          var o = n ? Object.getOwnPropertyDescriptor(e, a) : null;
          o && (o.get || o.set) ? Object.defineProperty(r, a, o) : r[a] = e[a];
        }

        r.default = e, t && t.set(e, r);
        return r;
      }(e("../core/constants"));

      function l() {
        if ("function" != typeof WeakMap) return null;
        var e = new WeakMap();
        return l = function () {
          return e;
        }, e;
      }

      a.default.Texture = function (e, t) {
        this._renderer = e;
        var r = this._renderer.GL;
        this.src = t, this.glTex = void 0, this.glTarget = r.TEXTURE_2D, this.glFormat = r.RGBA, this.mipmaps = !1, this.glMinFilter = r.LINEAR, this.glMagFilter = r.LINEAR, this.glWrapS = r.CLAMP_TO_EDGE, this.glWrapT = r.CLAMP_TO_EDGE, this.isSrcMediaElement = void 0 !== a.default.MediaElement && t instanceof a.default.MediaElement, this._videoPrevUpdateTime = 0, this.isSrcHTMLElement = void 0 !== a.default.Element && t instanceof a.default.Element && !(t instanceof a.default.Graphics), this.isSrcP5Image = t instanceof a.default.Image, this.isSrcP5Graphics = t instanceof a.default.Graphics, this.isImageData = "undefined" != typeof ImageData && t instanceof ImageData;

        var n = this._getTextureDataFromSource();

        return this.width = n.width, this.height = n.height, this.init(n), this;
      }, a.default.Texture.prototype._getTextureDataFromSource = function () {
        var e;
        return this.isSrcP5Image ? e = this.src.canvas : this.isSrcMediaElement || this.isSrcP5Graphics || this.isSrcHTMLElement ? e = this.src.elt : this.isImageData && (e = this.src), e;
      }, a.default.Texture.prototype.init = function (e) {
        var t = this._renderer.GL;

        if (this.glTex = t.createTexture(), this.glWrapS = this._renderer.textureWrapX, this.glWrapT = this._renderer.textureWrapY, this.setWrapMode(this.glWrapS, this.glWrapT), this.bindTexture(), t.texParameteri(t.TEXTURE_2D, t.TEXTURE_MAG_FILTER, this.glMagFilter), t.texParameteri(t.TEXTURE_2D, t.TEXTURE_MIN_FILTER, this.glMinFilter), 0 === this.width || 0 === this.height || this.isSrcMediaElement && !this.src.loadedmetadata) {
          var r = new Uint8Array([1, 1, 1, 1]);
          t.texImage2D(this.glTarget, 0, t.RGBA, 1, 1, 0, this.glFormat, t.UNSIGNED_BYTE, r);
        } else t.texImage2D(this.glTarget, 0, this.glFormat, this.glFormat, t.UNSIGNED_BYTE, e);
      }, a.default.Texture.prototype.update = function () {
        var e = this.src;
        if (0 === e.width || 0 === e.height) return !1;

        var t = this._getTextureDataFromSource(),
            r = !1,
            n = this._renderer.GL;

        return t.width !== this.width || t.height !== this.height ? (r = !0, this.width = t.width, this.height = t.height, this.isSrcP5Image ? e.setModified(!1) : (this.isSrcMediaElement || this.isSrcHTMLElement) && e.setModified(!0)) : this.isSrcP5Image ? e.isModified() && (r = !0, e.setModified(!1)) : this.isSrcMediaElement ? e.isModified() ? (r = !0, e.setModified(!1)) : e.loadedmetadata && this._videoPrevUpdateTime !== e.time() && (this._videoPrevUpdateTime = e.time(), r = !0) : this.isImageData ? e._dirty && (r = !(e._dirty = !1)) : r = !0, r && (this.bindTexture(), n.texImage2D(this.glTarget, 0, this.glFormat, this.glFormat, n.UNSIGNED_BYTE, t)), r;
      }, a.default.Texture.prototype.bindTexture = function () {
        return this._renderer.GL.bindTexture(this.glTarget, this.glTex), this;
      }, a.default.Texture.prototype.unbindTexture = function () {
        this._renderer.GL.bindTexture(this.glTarget, null);
      }, a.default.Texture.prototype.setInterpolation = function (e, t) {
        var r = this._renderer.GL;
        e === s.NEAREST ? this.glMinFilter = r.NEAREST : this.glMinFilter = r.LINEAR, t === s.NEAREST ? this.glMagFilter = r.NEAREST : this.glMagFilter = r.LINEAR, this.bindTexture(), r.texParameteri(r.TEXTURE_2D, r.TEXTURE_MIN_FILTER, this.glMinFilter), r.texParameteri(r.TEXTURE_2D, r.TEXTURE_MAG_FILTER, this.glMagFilter), this.unbindTexture();
      }, a.default.Texture.prototype.setWrapMode = function (e, t) {
        function r(e) {
          return 0 == (e & e - 1);
        }

        var n = this._renderer.GL,
            a = r(this.width),
            o = r(this.height);
        e === s.REPEAT ? a && o ? this.glWrapS = n.REPEAT : (console.warn("You tried to set the wrap mode to REPEAT but the texture size is not a power of two. Setting to CLAMP instead"), this.glWrapS = n.CLAMP_TO_EDGE) : e === s.MIRROR ? a && o ? this.glWrapS = n.MIRRORED_REPEAT : (console.warn("You tried to set the wrap mode to MIRROR but the texture size is not a power of two. Setting to CLAMP instead"), this.glWrapS = n.CLAMP_TO_EDGE) : this.glWrapS = n.CLAMP_TO_EDGE, t === s.REPEAT ? a && o ? this.glWrapT = n.REPEAT : (console.warn("You tried to set the wrap mode to REPEAT but the texture size is not a power of two. Setting to CLAMP instead"), this.glWrapT = n.CLAMP_TO_EDGE) : t === s.MIRROR ? a && o ? this.glWrapT = n.MIRRORED_REPEAT : (console.warn("You tried to set the wrap mode to MIRROR but the texture size is not a power of two. Setting to CLAMP instead"), this.glWrapT = n.CLAMP_TO_EDGE) : this.glWrapT = n.CLAMP_TO_EDGE, this.bindTexture(), n.texParameteri(n.TEXTURE_2D, n.TEXTURE_WRAP_S, this.glWrapS), n.texParameteri(n.TEXTURE_2D, n.TEXTURE_WRAP_T, this.glWrapT), this.unbindTexture();
      };
      var o = a.default.Texture;
      r.default = o;
    }, {
      "../core/constants": 22,
      "../core/main": 32
    }],
    89: [function (e, t, r) {
      "use strict";

      function i(e) {
        return (i = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (e) {
          return typeof e;
        } : function (e) {
          return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e;
        })(e);
      }

      var n,
          j = (n = e("../core/main")) && n.__esModule ? n : {
        default: n
      },
          R = function (e) {
        if (e && e.__esModule) return e;
        if (null === e || "object" !== i(e) && "function" != typeof e) return {
          default: e
        };
        var t = s();
        if (t && t.has(e)) return t.get(e);
        var r = {},
            n = Object.defineProperty && Object.getOwnPropertyDescriptor;

        for (var a in e) if (Object.prototype.hasOwnProperty.call(e, a)) {
          var o = n ? Object.getOwnPropertyDescriptor(e, a) : null;
          o && (o.get || o.set) ? Object.defineProperty(r, a, o) : r[a] = e[a];
        }

        r.default = e, t && t.set(e, r);
        return r;
      }(e("../core/constants"));

      function s() {
        if ("function" != typeof WeakMap) return null;
        var e = new WeakMap();
        return s = function () {
          return e;
        }, e;
      }

      e("./p5.Shader"), e("./p5.RendererGL.Retained"), j.default.RendererGL.prototype._applyTextProperties = function () {}, j.default.RendererGL.prototype.textWidth = function (e) {
        return this._isOpenType() ? this._textFont._textWidth(e, this._textSize) : 0;
      };

      function a(e, t) {
        this.width = e, this.height = t, this.infos = [], this.findImage = function (e) {
          var t,
              r,
              n = this.width * this.height;
          if (n < e) throw new Error("font is too complex to render in 3D");

          for (var a = this.infos.length - 1; 0 <= a; --a) {
            var o = this.infos[a];

            if (o.index + e < n) {
              r = (t = o).imageData;
              break;
            }
          }

          if (!t) {
            try {
              r = new ImageData(this.width, this.height);
            } catch (e) {
              var i = document.getElementsByTagName("canvas")[0],
                  s = !i;
              i || ((i = document.createElement("canvas")).style.display = "none", document.body.appendChild(i));
              var l = i.getContext("2d");
              l && (r = l.createImageData(this.width, this.height)), s && document.body.removeChild(i);
            }

            t = {
              index: 0,
              imageData: r
            }, this.infos.push(t);
          }

          var p = t.index;
          return t.index += e, r._dirty = !0, {
            imageData: r,
            index: p
          };
        };
      }

      function V(e, t, r, n, a) {
        var o = e.imageData.data,
            i = 4 * e.index++;
        o[i++] = t, o[i++] = r, o[i++] = n, o[i++] = a;
      }

      function D(e) {
        this.font = e, this.strokeImageInfos = new a(64, 64), this.colDimImageInfos = new a(64, 64), this.rowDimImageInfos = new a(64, 64), this.colCellImageInfos = new a(64, 64), this.rowCellImageInfos = new a(64, 64), this.glyphInfos = {}, this.getGlyphInfo = function (e) {
          var t = this.glyphInfos[e.index];
          if (t) return t;
          var r,
              n = e.getBoundingBox(),
              a = n.x1,
              o = n.y1,
              i = n.x2 - a,
              s = n.y2 - o,
              l = e.path.commands;
          if (0 == i || 0 == s || !l.length) return this.glyphInfos[e.index] = {};
          var p,
              u,
              c,
              d,
              h = [],
              m = [],
              f = [];

          for (r = 8; 0 <= r; --r) f.push([]);

          for (r = 8; 0 <= r; --r) m.push([]);

          function y(e, t, r) {
            var n = h.length;

            function a(e, t, r) {
              for (var n = e.length; 0 < n--;) {
                var a = e[n];
                a < t && (t = a), r < a && (r = a);
              }

              return {
                min: t,
                max: r
              };
            }

            h.push(r);

            for (var o = a(e, 1, 0), i = Math.max(Math.floor(9 * o.min), 0), s = Math.min(Math.ceil(9 * o.max), 9), l = i; l < s; ++l) f[l].push(n);

            for (var p = a(t, 1, 0), u = Math.max(Math.floor(9 * p.min), 0), c = Math.min(Math.ceil(9 * p.max), 9), d = u; d < c; ++d) m[d].push(n);
          }

          function g(e) {
            return (t = (n = 255) * e) < (r = 0) ? r : n < t ? n : t;
            var t, r, n;
          }

          function S(e, t, r, n) {
            this.p0 = e, this.c0 = t, this.c1 = r, this.p1 = n, this.toQuadratic = function () {
              return {
                x: this.p0.x,
                y: this.p0.y,
                x1: this.p1.x,
                y1: this.p1.y,
                cx: (3 * (this.c0.x + this.c1.x) - (this.p0.x + this.p1.x)) / 4,
                cy: (3 * (this.c0.y + this.c1.y) - (this.p0.y + this.p1.y)) / 4
              };
            }, this.quadError = function () {
              return j.default.Vector.sub(j.default.Vector.sub(this.p1, this.p0), j.default.Vector.mult(j.default.Vector.sub(this.c1, this.c0), 3)).mag() / 2;
            }, this.split = function (e) {
              var t = j.default.Vector.lerp(this.p0, this.c0, e),
                  r = j.default.Vector.lerp(this.c0, this.c1, e),
                  n = j.default.Vector.lerp(t, r, e);
              this.c1 = j.default.Vector.lerp(this.c1, this.p1, e), this.c0 = j.default.Vector.lerp(r, this.c1, e);
              var a = j.default.Vector.lerp(n, this.c0, e),
                  o = new S(this.p0, t, n, a);
              return this.p0 = a, o;
            }, this.splitInflections = function () {
              var e = j.default.Vector.sub(this.c0, this.p0),
                  t = j.default.Vector.sub(j.default.Vector.sub(this.c1, this.c0), e),
                  r = j.default.Vector.sub(j.default.Vector.sub(j.default.Vector.sub(this.p1, this.c1), e), j.default.Vector.mult(t, 2)),
                  n = [],
                  a = t.x * r.y - t.y * r.x;

              if (0 !== a) {
                var o = e.x * r.y - e.y * r.x,
                    i = e.x * t.y - e.y * t.x,
                    s = o * o - 4 * a * i;

                if (0 <= s) {
                  a < 0 && (a = -a, o = -o, i = -i);
                  var l = Math.sqrt(s),
                      p = (-o - l) / (2 * a),
                      u = (-o + l) / (2 * a);
                  0 < p && p < 1 && (n.push(this.split(p)), u = 1 - (1 - u) / (1 - p)), 0 < u && u < 1 && n.push(this.split(u));
                }
              }

              return n.push(this), n;
            };
          }

          function v(e, t, r, n, a, o, i, s) {
            var l = new S(new j.default.Vector(e, t), new j.default.Vector(r, n), new j.default.Vector(a, o), new j.default.Vector(i, s)).splitInflections(),
                p = [],
                u = 30 / z,
                c = !0,
                d = !1,
                h = void 0;

            try {
              for (var m, f = l[Symbol.iterator](); !(c = (m = f.next()).done); c = !0) {
                for (var y = m.value, g = [], v = void 0; !(.125 <= (v = u / y.quadError()));) {
                  var b = Math.pow(v, 1 / 3),
                      _ = y.split(b),
                      x = y.split(1 - b / (1 - b));

                  p.push(_), g.push(y), y = x;
                }

                v < 1 && p.push(y.split(.5)), p.push(y), Array.prototype.push.apply(p, g.reverse());
              }
            } catch (e) {
              d = !0, h = e;
            } finally {
              try {
                c || null == f.return || f.return();
              } finally {
                if (d) throw h;
              }
            }

            return p;
          }

          function b(e, t, r, n) {
            y([e, r], [t, n], {
              x: e,
              y: t,
              cx: (e + r) / 2,
              cy: (t + n) / 2
            });
          }

          function _(e, t, r, n) {
            return Math.abs(r - e) < 1e-5 && Math.abs(n - t) < 1e-5;
          }

          var x = !0,
              w = !1,
              M = void 0;

          try {
            for (var E, T = l[Symbol.iterator](); !(x = (E = T.next()).done); x = !0) {
              var C = E.value,
                  N = (C.x - a) / i,
                  O = (C.y - o) / s;

              if (!_(p, u, N, O)) {
                switch (C.type) {
                  case "M":
                    c = N, d = O;
                    break;

                  case "L":
                    b(p, u, N, O);
                    break;

                  case "Q":
                    var L = (C.x1 - a) / i,
                        I = (C.y1 - o) / s;
                    y([p, N, L], [u, O, I], {
                      x: p,
                      y: u,
                      cx: L,
                      cy: I
                    });
                    break;

                  case "Z":
                    _(p, u, c, d) ? h.push({
                      x: p,
                      y: u
                    }) : (b(p, u, c, d), h.push({
                      x: c,
                      y: d
                    }));
                    break;

                  case "C":
                    for (var P = v(p, u, (C.x1 - a) / i, (C.y1 - o) / s, (C.x2 - a) / i, (C.y2 - o) / s, N, O), R = 0; R < P.length; R++) {
                      var D = P[R].toQuadratic();
                      y([D.x, D.x1, D.cx], [D.y, D.y1, D.cy], D);
                    }

                    break;

                  default:
                    throw new Error("unknown command type: ".concat(C.type));
                }

                p = N, u = O;
              }
            }
          } catch (e) {
            w = !0, M = e;
          } finally {
            try {
              x || null == T.return || T.return();
            } finally {
              if (w) throw M;
            }
          }

          for (var A = h.length, k = this.strokeImageInfos.findImage(A), F = k.index, U = 0; U < A; ++U) {
            var B = h[U];
            V(k, g(B.x), g(B.y), g(B.cx), g(B.cy));
          }

          function G(e, t, r) {
            for (var n = e.length, a = t.findImage(n), o = a.index, i = 0, s = 0; s < n; ++s) i += e[s].length;

            for (var l = r.findImage(i), p = 0; p < n; ++p) {
              var u = e[p],
                  c = u.length,
                  d = l.index;
              V(a, d >> 7, 127 & d, c >> 7, 127 & c);

              for (var h = 0; h < c; ++h) {
                var m = u[h] + F;
                V(l, m >> 7, 127 & m, 0, 0);
              }
            }

            return {
              cellImageInfo: l,
              dimOffset: o,
              dimImageInfo: a
            };
          }

          return (t = this.glyphInfos[e.index] = {
            glyph: e,
            uGlyphRect: [n.x1, -n.y1, n.x2, -n.y2],
            strokeImageInfo: k,
            strokes: h,
            colInfo: G(f, this.colDimImageInfos, this.colCellImageInfos),
            rowInfo: G(m, this.rowDimImageInfos, this.rowCellImageInfos)
          }).uGridOffset = [t.colInfo.dimOffset, t.rowInfo.dimOffset], t;
        };
      }

      var z = Math.sqrt(3);

      j.default.RendererGL.prototype._renderText = function (e, t, r, n, a) {
        if (this._textFont && "string" != typeof this._textFont) {
          if (!(a <= n) && this._doFill) {
            if (!this._isOpenType()) return console.log("WEBGL: only Opentype (.otf) and Truetype (.ttf) fonts are supported"), e;
            e.push();
            var o = this._doStroke,
                i = this.drawMode;
            this._doStroke = !1, this.drawMode = R.TEXTURE;
            var s = this._textFont.font,
                l = this._textFont._fontInfo;
            l = l || (this._textFont._fontInfo = new D(s));

            var p = this._textFont._handleAlignment(this, t, r, n),
                u = this._textSize / s.unitsPerEm;

            this.translate(p.x, p.y, 0), this.scale(u, u, 1);

            var c = this.GL,
                d = !this._defaultFontShader,
                h = this._getFontShader();

            h.init(), h.bindShader(), d && (h.setUniform("uGridImageSize", [64, 64]), h.setUniform("uCellsImageSize", [64, 64]), h.setUniform("uStrokeImageSize", [64, 64]), h.setUniform("uGridSize", [9, 9])), this._applyColorBlend(this.curFillColor);
            var m = this.retainedMode.geometry.glyph;

            if (!m) {
              var f = this._textGeom = new j.default.Geometry(1, 1, function () {
                for (var e = 0; e <= 1; e++) for (var t = 0; t <= 1; t++) this.vertices.push(new j.default.Vector(t, e, 0)), this.uvs.push(t, e);
              });
              f.computeFaces().computeNormals(), m = this.createBuffers("glyph", f);
            }

            var y = !0,
                g = !1,
                v = void 0;

            try {
              for (var b, _ = this.retainedMode.buffers.text[Symbol.iterator](); !(y = (b = _.next()).done); y = !0) {
                b.value._prepareBuffer(m, h);
              }
            } catch (e) {
              g = !0, v = e;
            } finally {
              try {
                y || null == _.return || _.return();
              } finally {
                if (g) throw v;
              }
            }

            this._bindBuffer(m.indexBuffer, c.ELEMENT_ARRAY_BUFFER), h.setUniform("uMaterialColor", this.curFillColor);

            try {
              var x = 0,
                  S = null,
                  w = s.stringToGlyphs(t),
                  M = !0,
                  E = !1,
                  T = void 0;

              try {
                for (var C, N = w[Symbol.iterator](); !(M = (C = N.next()).done); M = !0) {
                  var O = C.value;
                  S && (x += s.getKerningValue(S, O));
                  var L = l.getGlyphInfo(O);

                  if (L.uGlyphRect) {
                    var I = L.rowInfo,
                        P = L.colInfo;
                    h.setUniform("uSamplerStrokes", L.strokeImageInfo.imageData), h.setUniform("uSamplerRowStrokes", I.cellImageInfo.imageData), h.setUniform("uSamplerRows", I.dimImageInfo.imageData), h.setUniform("uSamplerColStrokes", P.cellImageInfo.imageData), h.setUniform("uSamplerCols", P.dimImageInfo.imageData), h.setUniform("uGridOffset", L.uGridOffset), h.setUniform("uGlyphRect", L.uGlyphRect), h.setUniform("uGlyphOffset", x), h.bindTextures(), c.drawElements(c.TRIANGLES, 6, this.GL.UNSIGNED_SHORT, 0);
                  }

                  x += O.advanceWidth, S = O;
                }
              } catch (e) {
                E = !0, T = e;
              } finally {
                try {
                  M || null == N.return || N.return();
                } finally {
                  if (E) throw T;
                }
              }
            } finally {
              h.unbindShader(), this._doStroke = o, this.drawMode = i, e.pop();
            }

            return e;
          }
        } else console.log("WEBGL: you must load and set a font before drawing text. See `loadFont` and `textFont` for more details.");
      };
    }, {
      "../core/constants": 22,
      "../core/main": 32,
      "./p5.RendererGL.Retained": 85,
      "./p5.Shader": 87
    }]
  }, {}, [17])(17);
});
},{}],"../node_modules/tone/build/esm/version.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.version = void 0;
const version = "14.7.39";
exports.version = version;
},{}],"../node_modules/@babel/runtime/helpers/arrayWithHoles.js":[function(require,module,exports) {
function _arrayWithHoles(arr) {
  if (Array.isArray(arr)) return arr;
}

module.exports = _arrayWithHoles;
},{}],"../node_modules/@babel/runtime/helpers/iterableToArrayLimit.js":[function(require,module,exports) {
function _iterableToArrayLimit(arr, i) {
  if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return;
  var _arr = [];
  var _n = true;
  var _d = false;
  var _e = undefined;

  try {
    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);

      if (i && _arr.length === i) break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null) _i["return"]();
    } finally {
      if (_d) throw _e;
    }
  }

  return _arr;
}

module.exports = _iterableToArrayLimit;
},{}],"../node_modules/@babel/runtime/helpers/arrayLikeToArray.js":[function(require,module,exports) {
function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;

  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }

  return arr2;
}

module.exports = _arrayLikeToArray;
},{}],"../node_modules/@babel/runtime/helpers/unsupportedIterableToArray.js":[function(require,module,exports) {
var arrayLikeToArray = require("./arrayLikeToArray");

function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);
}

module.exports = _unsupportedIterableToArray;
},{"./arrayLikeToArray":"../node_modules/@babel/runtime/helpers/arrayLikeToArray.js"}],"../node_modules/@babel/runtime/helpers/nonIterableRest.js":[function(require,module,exports) {
function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

module.exports = _nonIterableRest;
},{}],"../node_modules/@babel/runtime/helpers/slicedToArray.js":[function(require,module,exports) {
var arrayWithHoles = require("./arrayWithHoles");

var iterableToArrayLimit = require("./iterableToArrayLimit");

var unsupportedIterableToArray = require("./unsupportedIterableToArray");

var nonIterableRest = require("./nonIterableRest");

function _slicedToArray(arr, i) {
  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();
}

module.exports = _slicedToArray;
},{"./arrayWithHoles":"../node_modules/@babel/runtime/helpers/arrayWithHoles.js","./iterableToArrayLimit":"../node_modules/@babel/runtime/helpers/iterableToArrayLimit.js","./unsupportedIterableToArray":"../node_modules/@babel/runtime/helpers/unsupportedIterableToArray.js","./nonIterableRest":"../node_modules/@babel/runtime/helpers/nonIterableRest.js"}],"../node_modules/@babel/runtime/helpers/classCallCheck.js":[function(require,module,exports) {
function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

module.exports = _classCallCheck;
},{}],"../node_modules/@babel/runtime/helpers/createClass.js":[function(require,module,exports) {
function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

module.exports = _createClass;
},{}],"../node_modules/automation-events/build/es5/bundle.js":[function(require,module,exports) {
var define;
var global = arguments[3];
function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

(function (global, factory) {
  (typeof exports === "undefined" ? "undefined" : _typeof(exports)) === 'object' && typeof module !== 'undefined' ? factory(exports, require('@babel/runtime/helpers/slicedToArray'), require('@babel/runtime/helpers/classCallCheck'), require('@babel/runtime/helpers/createClass')) : typeof define === 'function' && define.amd ? define(['exports', '@babel/runtime/helpers/slicedToArray', '@babel/runtime/helpers/classCallCheck', '@babel/runtime/helpers/createClass'], factory) : (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.automationEvents = {}, global._slicedToArray, global._classCallCheck, global._createClass));
})(this, function (exports, _slicedToArray, _classCallCheck, _createClass) {
  'use strict';

  function _interopDefaultLegacy(e) {
    return e && _typeof(e) === 'object' && 'default' in e ? e : {
      'default': e
    };
  }

  var _slicedToArray__default = /*#__PURE__*/_interopDefaultLegacy(_slicedToArray);

  var _classCallCheck__default = /*#__PURE__*/_interopDefaultLegacy(_classCallCheck);

  var _createClass__default = /*#__PURE__*/_interopDefaultLegacy(_createClass);

  var createExtendedExponentialRampToValueAutomationEvent = function createExtendedExponentialRampToValueAutomationEvent(value, endTime, insertTime) {
    return {
      endTime: endTime,
      insertTime: insertTime,
      type: 'exponentialRampToValue',
      value: value
    };
  };

  var createExtendedLinearRampToValueAutomationEvent = function createExtendedLinearRampToValueAutomationEvent(value, endTime, insertTime) {
    return {
      endTime: endTime,
      insertTime: insertTime,
      type: 'linearRampToValue',
      value: value
    };
  };

  var createSetValueAutomationEvent = function createSetValueAutomationEvent(value, startTime) {
    return {
      startTime: startTime,
      type: 'setValue',
      value: value
    };
  };

  var createSetValueCurveAutomationEvent = function createSetValueCurveAutomationEvent(values, startTime, duration) {
    return {
      duration: duration,
      startTime: startTime,
      type: 'setValueCurve',
      values: values
    };
  };

  var getTargetValueAtTime = function getTargetValueAtTime(time, valueAtStartTime, _ref) {
    var startTime = _ref.startTime,
        target = _ref.target,
        timeConstant = _ref.timeConstant;
    return target + (valueAtStartTime - target) * Math.exp((startTime - time) / timeConstant);
  };

  var isExponentialRampToValueAutomationEvent = function isExponentialRampToValueAutomationEvent(automationEvent) {
    return automationEvent.type === 'exponentialRampToValue';
  };

  var isLinearRampToValueAutomationEvent = function isLinearRampToValueAutomationEvent(automationEvent) {
    return automationEvent.type === 'linearRampToValue';
  };

  var isAnyRampToValueAutomationEvent = function isAnyRampToValueAutomationEvent(automationEvent) {
    return isExponentialRampToValueAutomationEvent(automationEvent) || isLinearRampToValueAutomationEvent(automationEvent);
  };

  var isSetValueAutomationEvent = function isSetValueAutomationEvent(automationEvent) {
    return automationEvent.type === 'setValue';
  };

  var isSetValueCurveAutomationEvent = function isSetValueCurveAutomationEvent(automationEvent) {
    return automationEvent.type === 'setValueCurve';
  };

  var getValueOfAutomationEventAtIndexAtTime = function getValueOfAutomationEventAtIndexAtTime(automationEvents, index, time, defaultValue) {
    var automationEvent = automationEvents[index];
    return automationEvent === undefined ? defaultValue : isAnyRampToValueAutomationEvent(automationEvent) || isSetValueAutomationEvent(automationEvent) ? automationEvent.value : isSetValueCurveAutomationEvent(automationEvent) ? automationEvent.values[automationEvent.values.length - 1] : getTargetValueAtTime(time, getValueOfAutomationEventAtIndexAtTime(automationEvents, index - 1, automationEvent.startTime, defaultValue), automationEvent);
  };

  var getEndTimeAndValueOfPreviousAutomationEvent = function getEndTimeAndValueOfPreviousAutomationEvent(automationEvents, index, currentAutomationEvent, nextAutomationEvent, defaultValue) {
    return currentAutomationEvent === undefined ? [nextAutomationEvent.insertTime, defaultValue] : isAnyRampToValueAutomationEvent(currentAutomationEvent) ? [currentAutomationEvent.endTime, currentAutomationEvent.value] : isSetValueAutomationEvent(currentAutomationEvent) ? [currentAutomationEvent.startTime, currentAutomationEvent.value] : isSetValueCurveAutomationEvent(currentAutomationEvent) ? [currentAutomationEvent.startTime + currentAutomationEvent.duration, currentAutomationEvent.values[currentAutomationEvent.values.length - 1]] : [currentAutomationEvent.startTime, getValueOfAutomationEventAtIndexAtTime(automationEvents, index - 1, currentAutomationEvent.startTime, defaultValue)];
  };

  var isCancelAndHoldAutomationEvent = function isCancelAndHoldAutomationEvent(automationEvent) {
    return automationEvent.type === 'cancelAndHold';
  };

  var isCancelScheduledValuesAutomationEvent = function isCancelScheduledValuesAutomationEvent(automationEvent) {
    return automationEvent.type === 'cancelScheduledValues';
  };

  var getEventTime = function getEventTime(automationEvent) {
    if (isCancelAndHoldAutomationEvent(automationEvent) || isCancelScheduledValuesAutomationEvent(automationEvent)) {
      return automationEvent.cancelTime;
    }

    if (isExponentialRampToValueAutomationEvent(automationEvent) || isLinearRampToValueAutomationEvent(automationEvent)) {
      return automationEvent.endTime;
    }

    return automationEvent.startTime;
  };

  var getExponentialRampValueAtTime = function getExponentialRampValueAtTime(time, startTime, valueAtStartTime, _ref) {
    var endTime = _ref.endTime,
        value = _ref.value;

    if (valueAtStartTime === value) {
      return value;
    }

    if (0 < valueAtStartTime && 0 < value || valueAtStartTime < 0 && value < 0) {
      return valueAtStartTime * Math.pow(value / valueAtStartTime, (time - startTime) / (endTime - startTime));
    }

    return 0;
  };

  var getLinearRampValueAtTime = function getLinearRampValueAtTime(time, startTime, valueAtStartTime, _ref) {
    var endTime = _ref.endTime,
        value = _ref.value;
    return valueAtStartTime + (time - startTime) / (endTime - startTime) * (value - valueAtStartTime);
  };

  var interpolateValue = function interpolateValue(values, theoreticIndex) {
    var lowerIndex = Math.floor(theoreticIndex);
    var upperIndex = Math.ceil(theoreticIndex);

    if (lowerIndex === upperIndex) {
      return values[lowerIndex];
    }

    return (1 - (theoreticIndex - lowerIndex)) * values[lowerIndex] + (1 - (upperIndex - theoreticIndex)) * values[upperIndex];
  };

  var getValueCurveValueAtTime = function getValueCurveValueAtTime(time, _ref) {
    var duration = _ref.duration,
        startTime = _ref.startTime,
        values = _ref.values;
    var theoreticIndex = (time - startTime) / duration * (values.length - 1);
    return interpolateValue(values, theoreticIndex);
  };

  var isSetTargetAutomationEvent = function isSetTargetAutomationEvent(automationEvent) {
    return automationEvent.type === 'setTarget';
  };

  var AutomationEventList = /*#__PURE__*/function () {
    function AutomationEventList(defaultValue) {
      _classCallCheck__default['default'](this, AutomationEventList);

      this._automationEvents = [];
      this._currenTime = 0;
      this._defaultValue = defaultValue;
    }

    _createClass__default['default'](AutomationEventList, [{
      key: Symbol.iterator,
      value: function value() {
        return this._automationEvents[Symbol.iterator]();
      }
    }, {
      key: "add",
      value: function add(automationEvent) {
        var eventTime = getEventTime(automationEvent);

        if (isCancelAndHoldAutomationEvent(automationEvent) || isCancelScheduledValuesAutomationEvent(automationEvent)) {
          var index = this._automationEvents.findIndex(function (currentAutomationEvent) {
            return getEventTime(currentAutomationEvent) >= eventTime;
          });

          var removedAutomationEvent = this._automationEvents[index];

          if (index !== -1) {
            this._automationEvents = this._automationEvents.slice(0, index);
          }

          if (isCancelAndHoldAutomationEvent(automationEvent)) {
            var lastAutomationEvent = this._automationEvents[this._automationEvents.length - 1];

            if (removedAutomationEvent !== undefined && isAnyRampToValueAutomationEvent(removedAutomationEvent)) {
              if (isSetTargetAutomationEvent(lastAutomationEvent)) {
                throw new Error('The internal list is malformed.');
              }

              var startTime = isSetValueCurveAutomationEvent(lastAutomationEvent) ? lastAutomationEvent.startTime + lastAutomationEvent.duration : getEventTime(lastAutomationEvent);
              var startValue = isSetValueCurveAutomationEvent(lastAutomationEvent) ? lastAutomationEvent.values[lastAutomationEvent.values.length - 1] : lastAutomationEvent.value;
              var value = isExponentialRampToValueAutomationEvent(removedAutomationEvent) ? getExponentialRampValueAtTime(eventTime, startTime, startValue, removedAutomationEvent) : getLinearRampValueAtTime(eventTime, startTime, startValue, removedAutomationEvent);
              var truncatedAutomationEvent = isExponentialRampToValueAutomationEvent(removedAutomationEvent) ? createExtendedExponentialRampToValueAutomationEvent(value, eventTime, this._currenTime) : createExtendedLinearRampToValueAutomationEvent(value, eventTime, this._currenTime);

              this._automationEvents.push(truncatedAutomationEvent);
            }

            if (lastAutomationEvent !== undefined && isSetTargetAutomationEvent(lastAutomationEvent)) {
              this._automationEvents.push(createSetValueAutomationEvent(this.getValue(eventTime), eventTime));
            }

            if (lastAutomationEvent !== undefined && isSetValueCurveAutomationEvent(lastAutomationEvent) && lastAutomationEvent.startTime + lastAutomationEvent.duration > eventTime) {
              this._automationEvents[this._automationEvents.length - 1] = createSetValueCurveAutomationEvent(new Float32Array([6, 7]), lastAutomationEvent.startTime, eventTime - lastAutomationEvent.startTime);
            }
          }
        } else {
          var _index = this._automationEvents.findIndex(function (currentAutomationEvent) {
            return getEventTime(currentAutomationEvent) > eventTime;
          });

          var previousAutomationEvent = _index === -1 ? this._automationEvents[this._automationEvents.length - 1] : this._automationEvents[_index - 1];

          if (previousAutomationEvent !== undefined && isSetValueCurveAutomationEvent(previousAutomationEvent) && getEventTime(previousAutomationEvent) + previousAutomationEvent.duration > eventTime) {
            return false;
          }

          var persistentAutomationEvent = isExponentialRampToValueAutomationEvent(automationEvent) ? createExtendedExponentialRampToValueAutomationEvent(automationEvent.value, automationEvent.endTime, this._currenTime) : isLinearRampToValueAutomationEvent(automationEvent) ? createExtendedLinearRampToValueAutomationEvent(automationEvent.value, eventTime, this._currenTime) : automationEvent;

          if (_index === -1) {
            this._automationEvents.push(persistentAutomationEvent);
          } else {
            if (isSetValueCurveAutomationEvent(automationEvent) && eventTime + automationEvent.duration > getEventTime(this._automationEvents[_index])) {
              return false;
            }

            this._automationEvents.splice(_index, 0, persistentAutomationEvent);
          }
        }

        return true;
      }
    }, {
      key: "flush",
      value: function flush(time) {
        var index = this._automationEvents.findIndex(function (currentAutomationEvent) {
          return getEventTime(currentAutomationEvent) > time;
        });

        if (index > 1) {
          var remainingAutomationEvents = this._automationEvents.slice(index - 1);

          var firstRemainingAutomationEvent = remainingAutomationEvents[0];

          if (isSetTargetAutomationEvent(firstRemainingAutomationEvent)) {
            remainingAutomationEvents.unshift(createSetValueAutomationEvent(getValueOfAutomationEventAtIndexAtTime(this._automationEvents, index - 2, firstRemainingAutomationEvent.startTime, this._defaultValue), firstRemainingAutomationEvent.startTime));
          }

          this._automationEvents = remainingAutomationEvents;
        }
      }
    }, {
      key: "getValue",
      value: function getValue(time) {
        if (this._automationEvents.length === 0) {
          return this._defaultValue;
        }

        var lastAutomationEvent = this._automationEvents[this._automationEvents.length - 1];

        var index = this._automationEvents.findIndex(function (automationEvent) {
          return getEventTime(automationEvent) > time;
        });

        var nextAutomationEvent = this._automationEvents[index];
        var currentAutomationEvent = getEventTime(lastAutomationEvent) <= time ? lastAutomationEvent : this._automationEvents[index - 1];

        if (currentAutomationEvent !== undefined && isSetTargetAutomationEvent(currentAutomationEvent) && (nextAutomationEvent === undefined || !isAnyRampToValueAutomationEvent(nextAutomationEvent) || nextAutomationEvent.insertTime > time)) {
          return getTargetValueAtTime(time, getValueOfAutomationEventAtIndexAtTime(this._automationEvents, index - 2, currentAutomationEvent.startTime, this._defaultValue), currentAutomationEvent);
        }

        if (currentAutomationEvent !== undefined && isSetValueAutomationEvent(currentAutomationEvent) && (nextAutomationEvent === undefined || !isAnyRampToValueAutomationEvent(nextAutomationEvent))) {
          return currentAutomationEvent.value;
        }

        if (currentAutomationEvent !== undefined && isSetValueCurveAutomationEvent(currentAutomationEvent) && (nextAutomationEvent === undefined || !isAnyRampToValueAutomationEvent(nextAutomationEvent) || currentAutomationEvent.startTime + currentAutomationEvent.duration > time)) {
          if (time < currentAutomationEvent.startTime + currentAutomationEvent.duration) {
            return getValueCurveValueAtTime(time, currentAutomationEvent);
          }

          return currentAutomationEvent.values[currentAutomationEvent.values.length - 1];
        }

        if (currentAutomationEvent !== undefined && isAnyRampToValueAutomationEvent(currentAutomationEvent) && (nextAutomationEvent === undefined || !isAnyRampToValueAutomationEvent(nextAutomationEvent))) {
          return currentAutomationEvent.value;
        }

        if (nextAutomationEvent !== undefined && isExponentialRampToValueAutomationEvent(nextAutomationEvent)) {
          var _getEndTimeAndValueOf = getEndTimeAndValueOfPreviousAutomationEvent(this._automationEvents, index - 1, currentAutomationEvent, nextAutomationEvent, this._defaultValue),
              _getEndTimeAndValueOf2 = _slicedToArray__default['default'](_getEndTimeAndValueOf, 2),
              startTime = _getEndTimeAndValueOf2[0],
              value = _getEndTimeAndValueOf2[1];

          return getExponentialRampValueAtTime(time, startTime, value, nextAutomationEvent);
        }

        if (nextAutomationEvent !== undefined && isLinearRampToValueAutomationEvent(nextAutomationEvent)) {
          var _getEndTimeAndValueOf3 = getEndTimeAndValueOfPreviousAutomationEvent(this._automationEvents, index - 1, currentAutomationEvent, nextAutomationEvent, this._defaultValue),
              _getEndTimeAndValueOf4 = _slicedToArray__default['default'](_getEndTimeAndValueOf3, 2),
              _startTime = _getEndTimeAndValueOf4[0],
              _value = _getEndTimeAndValueOf4[1];

          return getLinearRampValueAtTime(time, _startTime, _value, nextAutomationEvent);
        }

        return this._defaultValue;
      }
    }]);

    return AutomationEventList;
  }();

  var createCancelAndHoldAutomationEvent = function createCancelAndHoldAutomationEvent(cancelTime) {
    return {
      cancelTime: cancelTime,
      type: 'cancelAndHold'
    };
  };

  var createCancelScheduledValuesAutomationEvent = function createCancelScheduledValuesAutomationEvent(cancelTime) {
    return {
      cancelTime: cancelTime,
      type: 'cancelScheduledValues'
    };
  };

  var createExponentialRampToValueAutomationEvent = function createExponentialRampToValueAutomationEvent(value, endTime) {
    return {
      endTime: endTime,
      type: 'exponentialRampToValue',
      value: value
    };
  };

  var createLinearRampToValueAutomationEvent = function createLinearRampToValueAutomationEvent(value, endTime) {
    return {
      endTime: endTime,
      type: 'linearRampToValue',
      value: value
    };
  };

  var createSetTargetAutomationEvent = function createSetTargetAutomationEvent(target, startTime, timeConstant) {
    return {
      startTime: startTime,
      target: target,
      timeConstant: timeConstant,
      type: 'setTarget'
    };
  };

  exports.AutomationEventList = AutomationEventList;
  exports.createCancelAndHoldAutomationEvent = createCancelAndHoldAutomationEvent;
  exports.createCancelScheduledValuesAutomationEvent = createCancelScheduledValuesAutomationEvent;
  exports.createExponentialRampToValueAutomationEvent = createExponentialRampToValueAutomationEvent;
  exports.createLinearRampToValueAutomationEvent = createLinearRampToValueAutomationEvent;
  exports.createSetTargetAutomationEvent = createSetTargetAutomationEvent;
  exports.createSetValueAutomationEvent = createSetValueAutomationEvent;
  exports.createSetValueCurveAutomationEvent = createSetValueCurveAutomationEvent;
  Object.defineProperty(exports, '__esModule', {
    value: true
  });
});
},{"@babel/runtime/helpers/slicedToArray":"../node_modules/@babel/runtime/helpers/slicedToArray.js","@babel/runtime/helpers/classCallCheck":"../node_modules/@babel/runtime/helpers/classCallCheck.js","@babel/runtime/helpers/createClass":"../node_modules/@babel/runtime/helpers/createClass.js"}],"../node_modules/standardized-audio-context/build/es2019/factories/abort-error.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createAbortError = void 0;

const createAbortError = () => {
  try {
    return new DOMException('', 'AbortError');
  } catch (err) {
    // Bug #122: Edge is the only browser that does not yet allow to construct a DOMException.
    err.code = 20;
    err.name = 'AbortError';
    return err;
  }
};

exports.createAbortError = createAbortError;
},{}],"../node_modules/standardized-audio-context/build/es2019/factories/add-audio-node-connections.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createAddAudioNodeConnections = void 0;

const createAddAudioNodeConnections = audioNodeConnectionsStore => {
  return (audioNode, audioNodeRenderer, nativeAudioNode) => {
    const activeInputs = [];

    for (let i = 0; i < nativeAudioNode.numberOfInputs; i += 1) {
      activeInputs.push(new Set());
    }

    audioNodeConnectionsStore.set(audioNode, {
      activeInputs,
      outputs: new Set(),
      passiveInputs: new WeakMap(),
      renderer: audioNodeRenderer
    });
  };
};

exports.createAddAudioNodeConnections = createAddAudioNodeConnections;
},{}],"../node_modules/standardized-audio-context/build/es2019/factories/add-audio-param-connections.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createAddAudioParamConnections = void 0;

const createAddAudioParamConnections = audioParamConnectionsStore => {
  return (audioParam, audioParamRenderer) => {
    audioParamConnectionsStore.set(audioParam, {
      activeInputs: new Set(),
      passiveInputs: new WeakMap(),
      renderer: audioParamRenderer
    });
  };
};

exports.createAddAudioParamConnections = createAddAudioParamConnections;
},{}],"../node_modules/standardized-audio-context/build/es2019/globals.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.NODE_TO_PROCESSOR_MAPS = exports.NODE_NAME_TO_PROCESSOR_CONSTRUCTOR_MAPS = exports.CYCLE_COUNTERS = exports.EVENT_LISTENERS = exports.CONTEXT_STORE = exports.BACKUP_NATIVE_CONTEXT_STORE = exports.AUDIO_PARAM_STORE = exports.AUDIO_PARAM_CONNECTIONS_STORE = exports.AUDIO_NODE_STORE = exports.AUDIO_NODE_CONNECTIONS_STORE = exports.ACTIVE_AUDIO_NODE_STORE = void 0;
const ACTIVE_AUDIO_NODE_STORE = new WeakSet();
exports.ACTIVE_AUDIO_NODE_STORE = ACTIVE_AUDIO_NODE_STORE;
const AUDIO_NODE_CONNECTIONS_STORE = new WeakMap();
exports.AUDIO_NODE_CONNECTIONS_STORE = AUDIO_NODE_CONNECTIONS_STORE;
const AUDIO_NODE_STORE = new WeakMap();
exports.AUDIO_NODE_STORE = AUDIO_NODE_STORE;
const AUDIO_PARAM_CONNECTIONS_STORE = new WeakMap();
exports.AUDIO_PARAM_CONNECTIONS_STORE = AUDIO_PARAM_CONNECTIONS_STORE;
const AUDIO_PARAM_STORE = new WeakMap();
exports.AUDIO_PARAM_STORE = AUDIO_PARAM_STORE;
const BACKUP_NATIVE_CONTEXT_STORE = new WeakMap();
exports.BACKUP_NATIVE_CONTEXT_STORE = BACKUP_NATIVE_CONTEXT_STORE;
const CONTEXT_STORE = new WeakMap();
exports.CONTEXT_STORE = CONTEXT_STORE;
const EVENT_LISTENERS = new WeakMap();
exports.EVENT_LISTENERS = EVENT_LISTENERS;
const CYCLE_COUNTERS = new WeakMap(); // This clunky name is borrowed from the spec. :-)

exports.CYCLE_COUNTERS = CYCLE_COUNTERS;
const NODE_NAME_TO_PROCESSOR_CONSTRUCTOR_MAPS = new WeakMap();
exports.NODE_NAME_TO_PROCESSOR_CONSTRUCTOR_MAPS = NODE_NAME_TO_PROCESSOR_CONSTRUCTOR_MAPS;
const NODE_TO_PROCESSOR_MAPS = new WeakMap();
exports.NODE_TO_PROCESSOR_MAPS = NODE_TO_PROCESSOR_MAPS;
},{}],"../node_modules/standardized-audio-context/build/es2019/helpers/is-constructible.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isConstructible = void 0;
const handler = {
  construct() {
    return handler;
  }

};

const isConstructible = constructible => {
  try {
    const proxy = new Proxy(constructible, handler);
    new proxy(); // tslint:disable-line:no-unused-expression
  } catch {
    return false;
  }

  return true;
};

exports.isConstructible = isConstructible;
},{}],"../node_modules/standardized-audio-context/build/es2019/helpers/split-import-statements.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.splitImportStatements = void 0;

/*
 * This massive regex tries to cover all the following cases.
 *
 * import './path';
 * import defaultImport from './path';
 * import { namedImport } from './path';
 * import { namedImport as renamendImport } from './path';
 * import * as namespaceImport from './path';
 * import defaultImport, { namedImport } from './path';
 * import defaultImport, { namedImport as renamendImport } from './path';
 * import defaultImport, * as namespaceImport from './path';
 */
const IMPORT_STATEMENT_REGEX = /^import(?:(?:[\s]+[\w]+|(?:[\s]+[\w]+[\s]*,)?[\s]*\{[\s]*[\w]+(?:[\s]+as[\s]+[\w]+)?(?:[\s]*,[\s]*[\w]+(?:[\s]+as[\s]+[\w]+)?)*[\s]*}|(?:[\s]+[\w]+[\s]*,)?[\s]*\*[\s]+as[\s]+[\w]+)[\s]+from)?(?:[\s]*)("([^"\\]|\\.)+"|'([^'\\]|\\.)+')(?:[\s]*);?/; // tslint:disable-line:max-line-length

const splitImportStatements = (source, url) => {
  const importStatements = [];
  let sourceWithoutImportStatements = source.replace(/^[\s]+/, '');
  let result = sourceWithoutImportStatements.match(IMPORT_STATEMENT_REGEX);

  while (result !== null) {
    const unresolvedUrl = result[1].slice(1, -1);
    const importStatementWithResolvedUrl = result[0].replace(/([\s]+)?;?$/, '').replace(unresolvedUrl, new URL(unresolvedUrl, url).toString());
    importStatements.push(importStatementWithResolvedUrl);
    sourceWithoutImportStatements = sourceWithoutImportStatements.slice(result[0].length).replace(/^[\s]+/, '');
    result = sourceWithoutImportStatements.match(IMPORT_STATEMENT_REGEX);
  }

  return [importStatements.join(';'), sourceWithoutImportStatements];
};

exports.splitImportStatements = splitImportStatements;
},{}],"../node_modules/standardized-audio-context/build/es2019/factories/add-audio-worklet-module.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createAddAudioWorkletModule = void 0;

var _globals = require("../globals");

var _isConstructible = require("../helpers/is-constructible");

var _splitImportStatements = require("../helpers/split-import-statements");

const verifyParameterDescriptors = parameterDescriptors => {
  if (parameterDescriptors !== undefined && !Array.isArray(parameterDescriptors)) {
    throw new TypeError('The parameterDescriptors property of given value for processorCtor is not an array.');
  }
};

const verifyProcessorCtor = processorCtor => {
  if (!(0, _isConstructible.isConstructible)(processorCtor)) {
    throw new TypeError('The given value for processorCtor should be a constructor.');
  }

  if (processorCtor.prototype === null || typeof processorCtor.prototype !== 'object') {
    throw new TypeError('The given value for processorCtor should have a prototype.');
  }
};

const createAddAudioWorkletModule = (createNotSupportedError, evaluateSource, exposeCurrentFrameAndCurrentTime, fetchSource, getBackupNativeContext, getNativeContext, ongoingRequests, resolvedRequests, window) => {
  return (context, moduleURL, options = {
    credentials: 'omit'
  }) => {
    const nativeContext = getNativeContext(context);
    const absoluteUrl = new URL(moduleURL, window.location.href).toString(); // Bug #59: Only Chrome & Opera do implement the audioWorklet property.

    if (nativeContext.audioWorklet !== undefined) {
      return fetchSource(moduleURL).then(source => {
        const [importStatements, sourceWithoutImportStatements] = (0, _splitImportStatements.splitImportStatements)(source, absoluteUrl);
        /*
         * Bug #170: Chrome and Opera do call process() with an array with empty channelData for each input if no input is
         * connected.
         *
         * This is the unminified version of the code used below:
         *
         * ```js
         * `${ importStatements };
         * ((registerProcessor) => {${ sourceWithoutImportStatements }
         * })((name, processorCtor) => registerProcessor(name, class extends processorCtor {
         *
         *     process (inputs, outputs, parameters) {
         *         return super.process(
         *             (inputs.map((input) => input.some((channelData) => channelData.length === 0)) ? [ ] : input),
         *             outputs,
         *             parameters
         *         );
         *     }
         *
         * }))`
         * ```
         */

        const wrappedSource = `${importStatements};(registerProcessor=>{${sourceWithoutImportStatements}
})((n,p)=>registerProcessor(n,class extends p{process(i,o,p){return super.process(i.map(j=>j.some(k=>k.length===0)?[]:j),o,p)}}))`;
        const blob = new Blob([wrappedSource], {
          type: 'application/javascript; charset=utf-8'
        });
        const url = URL.createObjectURL(blob);
        const backupNativeContext = getBackupNativeContext(nativeContext);
        const nativeContextOrBackupNativeContext = backupNativeContext !== null ? backupNativeContext : nativeContext;
        return nativeContextOrBackupNativeContext.audioWorklet.addModule(url, options).then(() => URL.revokeObjectURL(url)) // @todo This could be written more elegantly when Promise.finally() becomes avalaible.
        .catch(err => {
          URL.revokeObjectURL(url);

          if (err.code === undefined || err.name === 'SyntaxError') {
            err.code = 12;
          }

          throw err;
        });
      });
    }

    const resolvedRequestsOfContext = resolvedRequests.get(context);

    if (resolvedRequestsOfContext !== undefined && resolvedRequestsOfContext.has(moduleURL)) {
      return Promise.resolve();
    }

    const ongoingRequestsOfContext = ongoingRequests.get(context);

    if (ongoingRequestsOfContext !== undefined) {
      const promiseOfOngoingRequest = ongoingRequestsOfContext.get(moduleURL);

      if (promiseOfOngoingRequest !== undefined) {
        return promiseOfOngoingRequest;
      }
    }

    const promise = fetchSource(moduleURL).then(source => {
      const [importStatements, sourceWithoutImportStatements] = (0, _splitImportStatements.splitImportStatements)(source, absoluteUrl);
      /*
       * This is the unminified version of the code used below:
       *
       * ```js
       * ${ importStatements };
       * ((a, b) => {
       *     (a[b] = a[b] || [ ]).push(
       *         (AudioWorkletProcessor, global, registerProcessor, sampleRate, self, window) => {
       *             ${ sourceWithoutImportStatements }
       *         }
       *     );
       * })(window, '_AWGS');
       * ```
       */
      // tslint:disable-next-line:max-line-length

      const wrappedSource = `${importStatements};((a,b)=>{(a[b]=a[b]||[]).push((AudioWorkletProcessor,global,registerProcessor,sampleRate,self,window)=>{${sourceWithoutImportStatements}
})})(window,'_AWGS')`; // @todo Evaluating the given source code is a possible security problem.

      return evaluateSource(wrappedSource);
    }).then(() => {
      const evaluateAudioWorkletGlobalScope = window._AWGS.pop();

      if (evaluateAudioWorkletGlobalScope === undefined) {
        throw new SyntaxError();
      }

      exposeCurrentFrameAndCurrentTime(nativeContext.currentTime, nativeContext.sampleRate, () => evaluateAudioWorkletGlobalScope(class AudioWorkletProcessor {}, undefined, (name, processorCtor) => {
        if (name.trim() === '') {
          throw createNotSupportedError();
        }

        const nodeNameToProcessorConstructorMap = _globals.NODE_NAME_TO_PROCESSOR_CONSTRUCTOR_MAPS.get(nativeContext);

        if (nodeNameToProcessorConstructorMap !== undefined) {
          if (nodeNameToProcessorConstructorMap.has(name)) {
            throw createNotSupportedError();
          }

          verifyProcessorCtor(processorCtor);
          verifyParameterDescriptors(processorCtor.parameterDescriptors);
          nodeNameToProcessorConstructorMap.set(name, processorCtor);
        } else {
          verifyProcessorCtor(processorCtor);
          verifyParameterDescriptors(processorCtor.parameterDescriptors);

          _globals.NODE_NAME_TO_PROCESSOR_CONSTRUCTOR_MAPS.set(nativeContext, new Map([[name, processorCtor]]));
        }
      }, nativeContext.sampleRate, undefined, undefined));
    }).catch(err => {
      if (err.code === undefined || err.name === 'SyntaxError') {
        err.code = 12;
      }

      throw err;
    });

    if (ongoingRequestsOfContext === undefined) {
      ongoingRequests.set(context, new Map([[moduleURL, promise]]));
    } else {
      ongoingRequestsOfContext.set(moduleURL, promise);
    }

    promise.then(() => {
      const rslvdRqstsFCntxt = resolvedRequests.get(context);

      if (rslvdRqstsFCntxt === undefined) {
        resolvedRequests.set(context, new Set([moduleURL]));
      } else {
        rslvdRqstsFCntxt.add(moduleURL);
      }
    }).catch(() => {}) // tslint:disable-line:no-empty
    // @todo Use finally when it becomes available in all supported browsers.
    .then(() => {
      const ngngRqstsFCntxt = ongoingRequests.get(context);

      if (ngngRqstsFCntxt !== undefined) {
        ngngRqstsFCntxt.delete(moduleURL);
      }
    });
    return promise;
  };
};

exports.createAddAudioWorkletModule = createAddAudioWorkletModule;
},{"../globals":"../node_modules/standardized-audio-context/build/es2019/globals.js","../helpers/is-constructible":"../node_modules/standardized-audio-context/build/es2019/helpers/is-constructible.js","../helpers/split-import-statements":"../node_modules/standardized-audio-context/build/es2019/helpers/split-import-statements.js"}],"../node_modules/standardized-audio-context/build/es2019/factories/add-silent-connection.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createAddSilentConnection = void 0;

const createAddSilentConnection = createNativeGainNode => {
  return (nativeContext, nativeAudioScheduledSourceNode) => {
    const nativeGainNode = createNativeGainNode(nativeContext, {
      channelCount: 1,
      channelCountMode: 'explicit',
      channelInterpretation: 'discrete',
      gain: 0
    });
    nativeAudioScheduledSourceNode.connect(nativeGainNode)
    /*
     * Bug #50: Edge does not yet allow to create AudioNodes on a closed AudioContext. Therefore the context property is
     * used here to make sure to connect the right destination.
     */
    .connect(nativeGainNode.context.destination);

    const disconnect = () => {
      nativeAudioScheduledSourceNode.removeEventListener('ended', disconnect);
      nativeAudioScheduledSourceNode.disconnect(nativeGainNode);
      nativeGainNode.disconnect();
    };

    nativeAudioScheduledSourceNode.addEventListener('ended', disconnect);
  };
};

exports.createAddSilentConnection = createAddSilentConnection;
},{}],"../node_modules/standardized-audio-context/build/es2019/factories/add-unrendered-audio-worklet-node.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createAddUnrenderedAudioWorkletNode = void 0;

const createAddUnrenderedAudioWorkletNode = getUnrenderedAudioWorkletNodes => {
  return (nativeContext, audioWorkletNode) => {
    getUnrenderedAudioWorkletNodes(nativeContext).add(audioWorkletNode);
  };
};

exports.createAddUnrenderedAudioWorkletNode = createAddUnrenderedAudioWorkletNode;
},{}],"../node_modules/standardized-audio-context/build/es2019/factories/analyser-node-constructor.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createAnalyserNodeConstructor = void 0;
const DEFAULT_OPTIONS = {
  channelCount: 2,
  channelCountMode: 'max',
  channelInterpretation: 'speakers',
  fftSize: 2048,
  maxDecibels: -30,
  minDecibels: -100,
  smoothingTimeConstant: 0.8
};

const createAnalyserNodeConstructor = (audionNodeConstructor, createAnalyserNodeRenderer, createIndexSizeError, createNativeAnalyserNode, getNativeContext, isNativeOfflineAudioContext) => {
  return class AnalyserNode extends audionNodeConstructor {
    constructor(context, options = DEFAULT_OPTIONS) {
      const nativeContext = getNativeContext(context);
      const mergedOptions = { ...DEFAULT_OPTIONS,
        ...options
      };
      const nativeAnalyserNode = createNativeAnalyserNode(nativeContext, mergedOptions);
      const analyserNodeRenderer = isNativeOfflineAudioContext(nativeContext) ? createAnalyserNodeRenderer() : null;
      super(context, false, nativeAnalyserNode, analyserNodeRenderer);
      this._nativeAnalyserNode = nativeAnalyserNode;
    }

    get fftSize() {
      return this._nativeAnalyserNode.fftSize;
    }

    set fftSize(value) {
      this._nativeAnalyserNode.fftSize = value;
    }

    get frequencyBinCount() {
      return this._nativeAnalyserNode.frequencyBinCount;
    }

    get maxDecibels() {
      return this._nativeAnalyserNode.maxDecibels;
    }

    set maxDecibels(value) {
      // Bug #118: Safari does not throw an error if maxDecibels is not more than minDecibels.
      const maxDecibels = this._nativeAnalyserNode.maxDecibels;
      this._nativeAnalyserNode.maxDecibels = value;

      if (!(value > this._nativeAnalyserNode.minDecibels)) {
        this._nativeAnalyserNode.maxDecibels = maxDecibels;
        throw createIndexSizeError();
      }
    }

    get minDecibels() {
      return this._nativeAnalyserNode.minDecibels;
    }

    set minDecibels(value) {
      // Bug #118: Safari does not throw an error if maxDecibels is not more than minDecibels.
      const minDecibels = this._nativeAnalyserNode.minDecibels;
      this._nativeAnalyserNode.minDecibels = value;

      if (!(this._nativeAnalyserNode.maxDecibels > value)) {
        this._nativeAnalyserNode.minDecibels = minDecibels;
        throw createIndexSizeError();
      }
    }

    get smoothingTimeConstant() {
      return this._nativeAnalyserNode.smoothingTimeConstant;
    }

    set smoothingTimeConstant(value) {
      this._nativeAnalyserNode.smoothingTimeConstant = value;
    }

    getByteFrequencyData(array) {
      this._nativeAnalyserNode.getByteFrequencyData(array);
    }

    getByteTimeDomainData(array) {
      this._nativeAnalyserNode.getByteTimeDomainData(array);
    }

    getFloatFrequencyData(array) {
      this._nativeAnalyserNode.getFloatFrequencyData(array);
    }

    getFloatTimeDomainData(array) {
      this._nativeAnalyserNode.getFloatTimeDomainData(array);
    }

  };
};

exports.createAnalyserNodeConstructor = createAnalyserNodeConstructor;
},{}],"../node_modules/standardized-audio-context/build/es2019/helpers/is-owned-by-context.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isOwnedByContext = void 0;

const isOwnedByContext = (nativeAudioNode, nativeContext) => {
  return nativeAudioNode.context === nativeContext;
};

exports.isOwnedByContext = isOwnedByContext;
},{}],"../node_modules/standardized-audio-context/build/es2019/factories/analyser-node-renderer-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createAnalyserNodeRendererFactory = void 0;

var _isOwnedByContext = require("../helpers/is-owned-by-context");

const createAnalyserNodeRendererFactory = (createNativeAnalyserNode, getNativeAudioNode, renderInputsOfAudioNode) => {
  return () => {
    const renderedNativeAnalyserNodes = new WeakMap();

    const createAnalyserNode = async (proxy, nativeOfflineAudioContext, trace) => {
      let nativeAnalyserNode = getNativeAudioNode(proxy); // If the initially used nativeAnalyserNode was not constructed on the same OfflineAudioContext it needs to be created again.

      const nativeAnalyserNodeIsOwnedByContext = (0, _isOwnedByContext.isOwnedByContext)(nativeAnalyserNode, nativeOfflineAudioContext);

      if (!nativeAnalyserNodeIsOwnedByContext) {
        const options = {
          channelCount: nativeAnalyserNode.channelCount,
          channelCountMode: nativeAnalyserNode.channelCountMode,
          channelInterpretation: nativeAnalyserNode.channelInterpretation,
          fftSize: nativeAnalyserNode.fftSize,
          maxDecibels: nativeAnalyserNode.maxDecibels,
          minDecibels: nativeAnalyserNode.minDecibels,
          smoothingTimeConstant: nativeAnalyserNode.smoothingTimeConstant
        };
        nativeAnalyserNode = createNativeAnalyserNode(nativeOfflineAudioContext, options);
      }

      renderedNativeAnalyserNodes.set(nativeOfflineAudioContext, nativeAnalyserNode);
      await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeAnalyserNode, trace);
      return nativeAnalyserNode;
    };

    return {
      render(proxy, nativeOfflineAudioContext, trace) {
        const renderedNativeAnalyserNode = renderedNativeAnalyserNodes.get(nativeOfflineAudioContext);

        if (renderedNativeAnalyserNode !== undefined) {
          return Promise.resolve(renderedNativeAnalyserNode);
        }

        return createAnalyserNode(proxy, nativeOfflineAudioContext, trace);
      }

    };
  };
};

exports.createAnalyserNodeRendererFactory = createAnalyserNodeRendererFactory;
},{"../helpers/is-owned-by-context":"../node_modules/standardized-audio-context/build/es2019/helpers/is-owned-by-context.js"}],"../node_modules/standardized-audio-context/build/es2019/helpers/test-audio-buffer-copy-channel-methods-out-of-bounds-support.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.testAudioBufferCopyChannelMethodsOutOfBoundsSupport = void 0;

const testAudioBufferCopyChannelMethodsOutOfBoundsSupport = nativeAudioBuffer => {
  try {
    nativeAudioBuffer.copyToChannel(new Float32Array(1), 0, -1);
  } catch {
    return false;
  }

  return true;
};

exports.testAudioBufferCopyChannelMethodsOutOfBoundsSupport = testAudioBufferCopyChannelMethodsOutOfBoundsSupport;
},{}],"../node_modules/standardized-audio-context/build/es2019/factories/index-size-error.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createIndexSizeError = void 0;

const createIndexSizeError = () => {
  try {
    return new DOMException('', 'IndexSizeError');
  } catch (err) {
    // Bug #122: Edge is the only browser that does not yet allow to construct a DOMException.
    err.code = 1;
    err.name = 'IndexSizeError';
    return err;
  }
};

exports.createIndexSizeError = createIndexSizeError;
},{}],"../node_modules/standardized-audio-context/build/es2019/helpers/wrap-audio-buffer-get-channel-data-method.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.wrapAudioBufferGetChannelDataMethod = void 0;

var _indexSizeError = require("../factories/index-size-error");

const wrapAudioBufferGetChannelDataMethod = audioBuffer => {
  audioBuffer.getChannelData = (getChannelData => {
    return channel => {
      try {
        return getChannelData.call(audioBuffer, channel);
      } catch (err) {
        if (err.code === 12) {
          throw (0, _indexSizeError.createIndexSizeError)();
        }

        throw err;
      }
    };
  })(audioBuffer.getChannelData);
};

exports.wrapAudioBufferGetChannelDataMethod = wrapAudioBufferGetChannelDataMethod;
},{"../factories/index-size-error":"../node_modules/standardized-audio-context/build/es2019/factories/index-size-error.js"}],"../node_modules/standardized-audio-context/build/es2019/factories/audio-buffer-constructor.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createAudioBufferConstructor = void 0;

var _testAudioBufferCopyChannelMethodsOutOfBoundsSupport = require("../helpers/test-audio-buffer-copy-channel-methods-out-of-bounds-support");

var _wrapAudioBufferGetChannelDataMethod = require("../helpers/wrap-audio-buffer-get-channel-data-method");

const DEFAULT_OPTIONS = {
  numberOfChannels: 1
};

const createAudioBufferConstructor = (audioBufferStore, cacheTestResult, createNotSupportedError, nativeAudioBufferConstructor, nativeOfflineAudioContextConstructor, testNativeAudioBufferConstructorSupport, wrapAudioBufferCopyChannelMethods, wrapAudioBufferCopyChannelMethodsOutOfBounds) => {
  let nativeOfflineAudioContext = null;
  return class AudioBuffer {
    constructor(options) {
      if (nativeOfflineAudioContextConstructor === null) {
        throw new Error('Missing the native OfflineAudioContext constructor.');
      }

      const {
        length,
        numberOfChannels,
        sampleRate
      } = { ...DEFAULT_OPTIONS,
        ...options
      };

      if (nativeOfflineAudioContext === null) {
        nativeOfflineAudioContext = new nativeOfflineAudioContextConstructor(1, 1, 44100);
      }
      /*
       * Bug #99: Firefox does not throw a NotSupportedError when the numberOfChannels is zero. But it only does it when using the
       * factory function. But since Firefox also supports the constructor everything should be fine.
       */


      const audioBuffer = nativeAudioBufferConstructor !== null && cacheTestResult(testNativeAudioBufferConstructorSupport, testNativeAudioBufferConstructorSupport) ? new nativeAudioBufferConstructor({
        length,
        numberOfChannels,
        sampleRate
      }) : nativeOfflineAudioContext.createBuffer(numberOfChannels, length, sampleRate); // Bug #99: Safari does not throw an error when the numberOfChannels is zero.

      if (audioBuffer.numberOfChannels === 0) {
        throw createNotSupportedError();
      } // Bug #5: Safari does not support copyFromChannel() and copyToChannel().
      // Bug #100: Safari does throw a wrong error when calling getChannelData() with an out-of-bounds value.


      if (typeof audioBuffer.copyFromChannel !== 'function') {
        wrapAudioBufferCopyChannelMethods(audioBuffer);
        (0, _wrapAudioBufferGetChannelDataMethod.wrapAudioBufferGetChannelDataMethod)(audioBuffer); // Bug #157: Only Chrome & Opera do allow the bufferOffset to be out-of-bounds.
      } else if (!cacheTestResult(_testAudioBufferCopyChannelMethodsOutOfBoundsSupport.testAudioBufferCopyChannelMethodsOutOfBoundsSupport, () => (0, _testAudioBufferCopyChannelMethodsOutOfBoundsSupport.testAudioBufferCopyChannelMethodsOutOfBoundsSupport)(audioBuffer))) {
        wrapAudioBufferCopyChannelMethodsOutOfBounds(audioBuffer);
      }

      audioBufferStore.add(audioBuffer);
      /*
       * This does violate all good pratices but it is necessary to allow this AudioBuffer to be used with native
       * (Offline)AudioContexts.
       */

      return audioBuffer;
    }

    static [Symbol.hasInstance](instance) {
      return instance !== null && typeof instance === 'object' && Object.getPrototypeOf(instance) === AudioBuffer.prototype || audioBufferStore.has(instance);
    }

  };
};

exports.createAudioBufferConstructor = createAudioBufferConstructor;
},{"../helpers/test-audio-buffer-copy-channel-methods-out-of-bounds-support":"../node_modules/standardized-audio-context/build/es2019/helpers/test-audio-buffer-copy-channel-methods-out-of-bounds-support.js","../helpers/wrap-audio-buffer-get-channel-data-method":"../node_modules/standardized-audio-context/build/es2019/helpers/wrap-audio-buffer-get-channel-data-method.js"}],"../node_modules/standardized-audio-context/build/es2019/constants.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MOST_POSITIVE_SINGLE_FLOAT = exports.MOST_NEGATIVE_SINGLE_FLOAT = void 0;
const MOST_NEGATIVE_SINGLE_FLOAT = -3.4028234663852886e38;
exports.MOST_NEGATIVE_SINGLE_FLOAT = MOST_NEGATIVE_SINGLE_FLOAT;
const MOST_POSITIVE_SINGLE_FLOAT = -MOST_NEGATIVE_SINGLE_FLOAT;
exports.MOST_POSITIVE_SINGLE_FLOAT = MOST_POSITIVE_SINGLE_FLOAT;
},{}],"../node_modules/standardized-audio-context/build/es2019/helpers/get-value-for-key.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getValueForKey = void 0;

const getValueForKey = (map, key) => {
  const value = map.get(key);

  if (value === undefined) {
    throw new Error('A value with the given key could not be found.');
  }

  return value;
};

exports.getValueForKey = getValueForKey;
},{}],"../node_modules/standardized-audio-context/build/es2019/helpers/get-event-listeners-of-audio-node.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getEventListenersOfAudioNode = void 0;

var _globals = require("../globals");

var _getValueForKey = require("./get-value-for-key");

const getEventListenersOfAudioNode = audioNode => {
  return (0, _getValueForKey.getValueForKey)(_globals.EVENT_LISTENERS, audioNode);
};

exports.getEventListenersOfAudioNode = getEventListenersOfAudioNode;
},{"../globals":"../node_modules/standardized-audio-context/build/es2019/globals.js","./get-value-for-key":"../node_modules/standardized-audio-context/build/es2019/helpers/get-value-for-key.js"}],"../node_modules/standardized-audio-context/build/es2019/helpers/set-internal-state-to-active.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.setInternalStateToActive = void 0;

var _globals = require("../globals");

var _getEventListenersOfAudioNode = require("./get-event-listeners-of-audio-node");

const setInternalStateToActive = audioNode => {
  if (_globals.ACTIVE_AUDIO_NODE_STORE.has(audioNode)) {
    throw new Error('The AudioNode is already stored.');
  }

  _globals.ACTIVE_AUDIO_NODE_STORE.add(audioNode);

  (0, _getEventListenersOfAudioNode.getEventListenersOfAudioNode)(audioNode).forEach(eventListener => eventListener(true));
};

exports.setInternalStateToActive = setInternalStateToActive;
},{"../globals":"../node_modules/standardized-audio-context/build/es2019/globals.js","./get-event-listeners-of-audio-node":"../node_modules/standardized-audio-context/build/es2019/helpers/get-event-listeners-of-audio-node.js"}],"../node_modules/standardized-audio-context/build/es2019/helpers/set-internal-state-to-passive.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.setInternalStateToPassive = void 0;

var _globals = require("../globals");

var _getEventListenersOfAudioNode = require("./get-event-listeners-of-audio-node");

const setInternalStateToPassive = audioNode => {
  if (!_globals.ACTIVE_AUDIO_NODE_STORE.has(audioNode)) {
    throw new Error('The AudioNode is not stored.');
  }

  _globals.ACTIVE_AUDIO_NODE_STORE.delete(audioNode);

  (0, _getEventListenersOfAudioNode.getEventListenersOfAudioNode)(audioNode).forEach(eventListener => eventListener(false));
};

exports.setInternalStateToPassive = setInternalStateToPassive;
},{"../globals":"../node_modules/standardized-audio-context/build/es2019/globals.js","./get-event-listeners-of-audio-node":"../node_modules/standardized-audio-context/build/es2019/helpers/get-event-listeners-of-audio-node.js"}],"../node_modules/standardized-audio-context/build/es2019/factories/audio-buffer-source-node-constructor.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createAudioBufferSourceNodeConstructor = void 0;

var _constants = require("../constants");

var _setInternalStateToActive = require("../helpers/set-internal-state-to-active");

var _setInternalStateToPassive = require("../helpers/set-internal-state-to-passive");

const DEFAULT_OPTIONS = {
  buffer: null,
  channelCount: 2,
  channelCountMode: 'max',
  channelInterpretation: 'speakers',
  // Bug #149: Safari does not yet support the detune AudioParam.
  loop: false,
  loopEnd: 0,
  loopStart: 0,
  playbackRate: 1
};

const createAudioBufferSourceNodeConstructor = (audioNodeConstructor, createAudioBufferSourceNodeRenderer, createAudioParam, createInvalidStateError, createNativeAudioBufferSourceNode, getNativeContext, isNativeOfflineAudioContext, wrapEventListener) => {
  return class AudioBufferSourceNode extends audioNodeConstructor {
    constructor(context, options = DEFAULT_OPTIONS) {
      const nativeContext = getNativeContext(context);
      const mergedOptions = { ...DEFAULT_OPTIONS,
        ...options
      };
      const nativeAudioBufferSourceNode = createNativeAudioBufferSourceNode(nativeContext, mergedOptions);
      const isOffline = isNativeOfflineAudioContext(nativeContext);
      const audioBufferSourceNodeRenderer = isOffline ? createAudioBufferSourceNodeRenderer() : null;
      super(context, false, nativeAudioBufferSourceNode, audioBufferSourceNodeRenderer);
      this._audioBufferSourceNodeRenderer = audioBufferSourceNodeRenderer;
      this._isBufferNullified = false;
      this._isBufferSet = options.buffer !== null && options.buffer !== undefined;
      this._nativeAudioBufferSourceNode = nativeAudioBufferSourceNode;
      this._onended = null; // Bug #73: Edge & Safari do not export the correct values for maxValue and minValue.

      this._playbackRate = createAudioParam(this, isOffline, nativeAudioBufferSourceNode.playbackRate, _constants.MOST_POSITIVE_SINGLE_FLOAT, _constants.MOST_NEGATIVE_SINGLE_FLOAT);
    }

    get buffer() {
      if (this._isBufferNullified) {
        return null;
      }

      return this._nativeAudioBufferSourceNode.buffer;
    }

    set buffer(value) {
      // Bug #71: Edge does not allow to set the buffer to null.
      try {
        this._nativeAudioBufferSourceNode.buffer = value;
      } catch (err) {
        if (value !== null || err.code !== 17) {
          throw err;
        } // This will modify the buffer in place. Luckily that works in Edge and has the same effect as setting the buffer to null.


        if (this._nativeAudioBufferSourceNode.buffer !== null) {
          const buffer = this._nativeAudioBufferSourceNode.buffer;
          const numberOfChannels = buffer.numberOfChannels;

          for (let i = 0; i < numberOfChannels; i += 1) {
            buffer.getChannelData(i).fill(0);
          }

          this._isBufferNullified = true;
        }
      } // Bug #72: Only Chrome, Edge & Opera do not allow to reassign the buffer yet.


      if (value !== null) {
        if (this._isBufferSet) {
          throw createInvalidStateError();
        }

        this._isBufferSet = true;
      }
    }

    get loop() {
      return this._nativeAudioBufferSourceNode.loop;
    }

    set loop(value) {
      this._nativeAudioBufferSourceNode.loop = value;
    }

    get loopEnd() {
      return this._nativeAudioBufferSourceNode.loopEnd;
    }

    set loopEnd(value) {
      this._nativeAudioBufferSourceNode.loopEnd = value;
    }

    get loopStart() {
      return this._nativeAudioBufferSourceNode.loopStart;
    }

    set loopStart(value) {
      this._nativeAudioBufferSourceNode.loopStart = value;
    }

    get onended() {
      return this._onended;
    }

    set onended(value) {
      const wrappedListener = typeof value === 'function' ? wrapEventListener(this, value) : null;
      this._nativeAudioBufferSourceNode.onended = wrappedListener;
      const nativeOnEnded = this._nativeAudioBufferSourceNode.onended;
      this._onended = nativeOnEnded !== null && nativeOnEnded === wrappedListener ? value : nativeOnEnded;
    }

    get playbackRate() {
      return this._playbackRate;
    }

    start(when = 0, offset = 0, duration) {
      this._nativeAudioBufferSourceNode.start(when, offset, duration);

      if (this._audioBufferSourceNodeRenderer !== null) {
        this._audioBufferSourceNodeRenderer.start = duration === undefined ? [when, offset] : [when, offset, duration];
      } else {
        (0, _setInternalStateToActive.setInternalStateToActive)(this);

        const resetInternalStateToPassive = () => {
          this._nativeAudioBufferSourceNode.removeEventListener('ended', resetInternalStateToPassive); // @todo Determine a meaningful delay instead of just using one second.


          setTimeout(() => (0, _setInternalStateToPassive.setInternalStateToPassive)(this), 1000);
        };

        this._nativeAudioBufferSourceNode.addEventListener('ended', resetInternalStateToPassive);
      }
    }

    stop(when = 0) {
      this._nativeAudioBufferSourceNode.stop(when);

      if (this._audioBufferSourceNodeRenderer !== null) {
        this._audioBufferSourceNodeRenderer.stop = when;
      }
    }

  };
};

exports.createAudioBufferSourceNodeConstructor = createAudioBufferSourceNodeConstructor;
},{"../constants":"../node_modules/standardized-audio-context/build/es2019/constants.js","../helpers/set-internal-state-to-active":"../node_modules/standardized-audio-context/build/es2019/helpers/set-internal-state-to-active.js","../helpers/set-internal-state-to-passive":"../node_modules/standardized-audio-context/build/es2019/helpers/set-internal-state-to-passive.js"}],"../node_modules/standardized-audio-context/build/es2019/factories/audio-buffer-source-node-renderer-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createAudioBufferSourceNodeRendererFactory = void 0;

var _isOwnedByContext = require("../helpers/is-owned-by-context");

const createAudioBufferSourceNodeRendererFactory = (connectAudioParam, createNativeAudioBufferSourceNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode) => {
  return () => {
    const renderedNativeAudioBufferSourceNodes = new WeakMap();
    let start = null;
    let stop = null;

    const createAudioBufferSourceNode = async (proxy, nativeOfflineAudioContext, trace) => {
      let nativeAudioBufferSourceNode = getNativeAudioNode(proxy);
      /*
       * If the initially used nativeAudioBufferSourceNode was not constructed on the same OfflineAudioContext it needs to be created
       * again.
       */

      const nativeAudioBufferSourceNodeIsOwnedByContext = (0, _isOwnedByContext.isOwnedByContext)(nativeAudioBufferSourceNode, nativeOfflineAudioContext);

      if (!nativeAudioBufferSourceNodeIsOwnedByContext) {
        const options = {
          buffer: nativeAudioBufferSourceNode.buffer,
          channelCount: nativeAudioBufferSourceNode.channelCount,
          channelCountMode: nativeAudioBufferSourceNode.channelCountMode,
          channelInterpretation: nativeAudioBufferSourceNode.channelInterpretation,
          // Bug #149: Safari does not yet support the detune AudioParam.
          loop: nativeAudioBufferSourceNode.loop,
          loopEnd: nativeAudioBufferSourceNode.loopEnd,
          loopStart: nativeAudioBufferSourceNode.loopStart,
          playbackRate: nativeAudioBufferSourceNode.playbackRate.value
        };
        nativeAudioBufferSourceNode = createNativeAudioBufferSourceNode(nativeOfflineAudioContext, options);

        if (start !== null) {
          nativeAudioBufferSourceNode.start(...start);
        }

        if (stop !== null) {
          nativeAudioBufferSourceNode.stop(stop);
        }
      }

      renderedNativeAudioBufferSourceNodes.set(nativeOfflineAudioContext, nativeAudioBufferSourceNode);

      if (!nativeAudioBufferSourceNodeIsOwnedByContext) {
        // Bug #149: Safari does not yet support the detune AudioParam.
        await renderAutomation(nativeOfflineAudioContext, proxy.playbackRate, nativeAudioBufferSourceNode.playbackRate, trace);
      } else {
        // Bug #149: Safari does not yet support the detune AudioParam.
        await connectAudioParam(nativeOfflineAudioContext, proxy.playbackRate, nativeAudioBufferSourceNode.playbackRate, trace);
      }

      await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeAudioBufferSourceNode, trace);
      return nativeAudioBufferSourceNode;
    };

    return {
      set start(value) {
        start = value;
      },

      set stop(value) {
        stop = value;
      },

      render(proxy, nativeOfflineAudioContext, trace) {
        const renderedNativeAudioBufferSourceNode = renderedNativeAudioBufferSourceNodes.get(nativeOfflineAudioContext);

        if (renderedNativeAudioBufferSourceNode !== undefined) {
          return Promise.resolve(renderedNativeAudioBufferSourceNode);
        }

        return createAudioBufferSourceNode(proxy, nativeOfflineAudioContext, trace);
      }

    };
  };
};

exports.createAudioBufferSourceNodeRendererFactory = createAudioBufferSourceNodeRendererFactory;
},{"../helpers/is-owned-by-context":"../node_modules/standardized-audio-context/build/es2019/helpers/is-owned-by-context.js"}],"../node_modules/standardized-audio-context/build/es2019/helpers/is-valid-latency-hint.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isValidLatencyHint = void 0;

const isValidLatencyHint = latencyHint => {
  return latencyHint === undefined || typeof latencyHint === 'number' || typeof latencyHint === 'string' && (latencyHint === 'balanced' || latencyHint === 'interactive' || latencyHint === 'playback');
};

exports.isValidLatencyHint = isValidLatencyHint;
},{}],"../node_modules/standardized-audio-context/build/es2019/factories/audio-context-constructor.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createAudioContextConstructor = void 0;

var _isValidLatencyHint = require("../helpers/is-valid-latency-hint");

const createAudioContextConstructor = (baseAudioContextConstructor, createInvalidStateError, createNotSupportedError, createUnknownError, mediaElementAudioSourceNodeConstructor, mediaStreamAudioDestinationNodeConstructor, mediaStreamAudioSourceNodeConstructor, mediaStreamTrackAudioSourceNodeConstructor, nativeAudioContextConstructor) => {
  return class AudioContext extends baseAudioContextConstructor {
    constructor(options = {}) {
      if (nativeAudioContextConstructor === null) {
        throw new Error('Missing the native AudioContext constructor.');
      }

      const nativeAudioContext = new nativeAudioContextConstructor(options); // Bug #131 Safari returns null when there are four other AudioContexts running already.

      if (nativeAudioContext === null) {
        throw createUnknownError();
      } // Bug #51 Only Chrome and Opera throw an error if the given latencyHint is invalid.


      if (!(0, _isValidLatencyHint.isValidLatencyHint)(options.latencyHint)) {
        throw new TypeError(`The provided value '${options.latencyHint}' is not a valid enum value of type AudioContextLatencyCategory.`);
      } // Bug #150 Only Chrome, Firefox and Opera support setting the sampleRate.


      if (options.sampleRate !== undefined && nativeAudioContext.sampleRate !== options.sampleRate) {
        throw createNotSupportedError();
      }

      super(nativeAudioContext, 2);
      const {
        latencyHint
      } = options;
      const {
        sampleRate
      } = nativeAudioContext; // @todo The values for 'balanced', 'interactive' and 'playback' are just copied from Chrome's implementation.

      this._baseLatency = typeof nativeAudioContext.baseLatency === 'number' ? nativeAudioContext.baseLatency : latencyHint === 'balanced' ? 512 / sampleRate : latencyHint === 'interactive' || latencyHint === undefined ? 256 / sampleRate : latencyHint === 'playback' ? 1024 / sampleRate :
      /*
       * @todo The min (256) and max (16384) values are taken from the allowed bufferSize values of a
       * ScriptProcessorNode.
       */
      Math.max(2, Math.min(128, Math.round(latencyHint * sampleRate / 128))) * 128 / sampleRate;
      this._nativeAudioContext = nativeAudioContext;
      this._state = null;
      /*
       * Bug #34: Chrome and Opera pretend to be running right away, but fire an onstatechange event when the state actually changes
       * to 'running'.
       */

      if (nativeAudioContext.state === 'running') {
        this._state = 'suspended';

        const revokeState = () => {
          if (this._state === 'suspended') {
            this._state = null;
          }

          nativeAudioContext.removeEventListener('statechange', revokeState);
        };

        nativeAudioContext.addEventListener('statechange', revokeState);
      }
    }

    get baseLatency() {
      return this._baseLatency;
    }

    get state() {
      return this._state !== null ? this._state : this._nativeAudioContext.state;
    }

    close() {
      // Bug #35: Firefox does not throw an error if the AudioContext was closed before.
      if (this.state === 'closed') {
        return this._nativeAudioContext.close().then(() => {
          throw createInvalidStateError();
        });
      } // Bug #34: If the state was set to suspended before it should be revoked now.


      if (this._state === 'suspended') {
        this._state = null;
      }

      return this._nativeAudioContext.close();
      /*
       * Bug #50: Deleting the AudioGraph is currently not possible anymore.
       * ...then(() => deleteAudioGraph(this, this._nativeAudioContext));
       */
    }

    createMediaElementSource(mediaElement) {
      return new mediaElementAudioSourceNodeConstructor(this, {
        mediaElement
      });
    }

    createMediaStreamDestination() {
      return new mediaStreamAudioDestinationNodeConstructor(this);
    }

    createMediaStreamSource(mediaStream) {
      return new mediaStreamAudioSourceNodeConstructor(this, {
        mediaStream
      });
    }

    createMediaStreamTrackSource(mediaStreamTrack) {
      return new mediaStreamTrackAudioSourceNodeConstructor(this, {
        mediaStreamTrack
      });
    }

    resume() {
      if (this._state === 'suspended') {
        return new Promise((resolve, reject) => {
          const resolvePromise = () => {
            this._nativeAudioContext.removeEventListener('statechange', resolvePromise);

            if (this._nativeAudioContext.state === 'running') {
              resolve();
            } else {
              this.resume().then(resolve, reject);
            }
          };

          this._nativeAudioContext.addEventListener('statechange', resolvePromise);
        });
      }

      return this._nativeAudioContext.resume().catch(err => {
        // Bug #55: Chrome, Edge and Opera do throw an InvalidAccessError instead of an InvalidStateError.
        // Bug #56: Safari invokes the catch handler but without an error.
        if (err === undefined || err.code === 15) {
          throw createInvalidStateError();
        }

        throw err;
      });
    }

    suspend() {
      return this._nativeAudioContext.suspend().catch(err => {
        // Bug #56: Safari invokes the catch handler but without an error.
        if (err === undefined) {
          throw createInvalidStateError();
        }

        throw err;
      });
    }

  };
};

exports.createAudioContextConstructor = createAudioContextConstructor;
},{"../helpers/is-valid-latency-hint":"../node_modules/standardized-audio-context/build/es2019/helpers/is-valid-latency-hint.js"}],"../node_modules/standardized-audio-context/build/es2019/factories/audio-destination-node-constructor.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createAudioDestinationNodeConstructor = void 0;

const createAudioDestinationNodeConstructor = (audioNodeConstructor, createAudioDestinationNodeRenderer, createIndexSizeError, createInvalidStateError, createNativeAudioDestinationNode, getNativeContext, isNativeOfflineAudioContext, renderInputsOfAudioNode) => {
  return class AudioDestinationNode extends audioNodeConstructor {
    constructor(context, channelCount) {
      const nativeContext = getNativeContext(context);
      const isOffline = isNativeOfflineAudioContext(nativeContext);
      const nativeAudioDestinationNode = createNativeAudioDestinationNode(nativeContext, channelCount, isOffline);
      const audioDestinationNodeRenderer = isOffline ? createAudioDestinationNodeRenderer(renderInputsOfAudioNode) : null;
      super(context, false, nativeAudioDestinationNode, audioDestinationNodeRenderer);
      this._isNodeOfNativeOfflineAudioContext = isOffline;
      this._nativeAudioDestinationNode = nativeAudioDestinationNode;
    }

    get channelCount() {
      return this._nativeAudioDestinationNode.channelCount;
    }

    set channelCount(value) {
      // Bug #52: Chrome, Edge, Opera & Safari do not throw an exception at all.
      // Bug #54: Firefox does throw an IndexSizeError.
      if (this._isNodeOfNativeOfflineAudioContext) {
        throw createInvalidStateError();
      } // Bug #47: The AudioDestinationNode in Edge and Safari do not initialize the maxChannelCount property correctly.


      if (value > this._nativeAudioDestinationNode.maxChannelCount) {
        throw createIndexSizeError();
      }

      this._nativeAudioDestinationNode.channelCount = value;
    }

    get channelCountMode() {
      return this._nativeAudioDestinationNode.channelCountMode;
    }

    set channelCountMode(value) {
      // Bug #53: No browser does throw an exception yet.
      if (this._isNodeOfNativeOfflineAudioContext) {
        throw createInvalidStateError();
      }

      this._nativeAudioDestinationNode.channelCountMode = value;
    }

    get maxChannelCount() {
      return this._nativeAudioDestinationNode.maxChannelCount;
    }

  };
};

exports.createAudioDestinationNodeConstructor = createAudioDestinationNodeConstructor;
},{}],"../node_modules/standardized-audio-context/build/es2019/factories/audio-destination-node-renderer-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createAudioDestinationNodeRenderer = void 0;

const createAudioDestinationNodeRenderer = renderInputsOfAudioNode => {
  let nativeAudioDestinationNodePromise = null;

  const createAudioDestinationNode = async (proxy, nativeOfflineAudioContext, trace) => {
    const nativeAudioDestinationNode = nativeOfflineAudioContext.destination;
    await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeAudioDestinationNode, trace);
    return nativeAudioDestinationNode;
  };

  return {
    render(proxy, nativeOfflineAudioContext, trace) {
      if (nativeAudioDestinationNodePromise === null) {
        nativeAudioDestinationNodePromise = createAudioDestinationNode(proxy, nativeOfflineAudioContext, trace);
      }

      return nativeAudioDestinationNodePromise;
    }

  };
};

exports.createAudioDestinationNodeRenderer = createAudioDestinationNodeRenderer;
},{}],"../node_modules/standardized-audio-context/build/es2019/factories/audio-listener-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createAudioListenerFactory = void 0;

var _constants = require("../constants");

const createAudioListenerFactory = (createAudioParam, createNativeChannelMergerNode, createNativeConstantSourceNode, createNativeScriptProcessorNode, isNativeOfflineAudioContext) => {
  return (context, nativeContext) => {
    const nativeListener = nativeContext.listener; // Bug #117: Only Chrome & Opera support the new interface already.

    const createFakeAudioParams = () => {
      const channelMergerNode = createNativeChannelMergerNode(nativeContext, {
        channelCount: 1,
        channelCountMode: 'explicit',
        channelInterpretation: 'speakers',
        numberOfInputs: 9
      });
      const isOffline = isNativeOfflineAudioContext(nativeContext);
      const scriptProcessorNode = createNativeScriptProcessorNode(nativeContext, 256, 9, 0);

      const createFakeAudioParam = (input, value) => {
        const constantSourceNode = createNativeConstantSourceNode(nativeContext, {
          channelCount: 1,
          channelCountMode: 'explicit',
          channelInterpretation: 'discrete',
          offset: value
        });
        constantSourceNode.connect(channelMergerNode, 0, input); // @todo This should be stopped when the context is closed.

        constantSourceNode.start();
        Object.defineProperty(constantSourceNode.offset, 'defaultValue', {
          get() {
            return value;
          }

        });
        /*
         * Bug #62 & #74: Edge & Safari do not support ConstantSourceNodes and do not export the correct values for maxValue and
         * minValue for GainNodes.
         */

        return createAudioParam({
          context
        }, isOffline, constantSourceNode.offset, _constants.MOST_POSITIVE_SINGLE_FLOAT, _constants.MOST_NEGATIVE_SINGLE_FLOAT);
      };

      let lastOrientation = [0, 0, -1, 0, 1, 0];
      let lastPosition = [0, 0, 0]; // tslint:disable-next-line:deprecation

      scriptProcessorNode.onaudioprocess = ({
        inputBuffer
      }) => {
        const orientation = [inputBuffer.getChannelData(0)[0], inputBuffer.getChannelData(1)[0], inputBuffer.getChannelData(2)[0], inputBuffer.getChannelData(3)[0], inputBuffer.getChannelData(4)[0], inputBuffer.getChannelData(5)[0]];

        if (orientation.some((value, index) => value !== lastOrientation[index])) {
          nativeListener.setOrientation(...orientation); // tslint:disable-line:deprecation

          lastOrientation = orientation;
        }

        const positon = [inputBuffer.getChannelData(6)[0], inputBuffer.getChannelData(7)[0], inputBuffer.getChannelData(8)[0]];

        if (positon.some((value, index) => value !== lastPosition[index])) {
          nativeListener.setPosition(...positon); // tslint:disable-line:deprecation

          lastPosition = positon;
        }
      };

      channelMergerNode.connect(scriptProcessorNode);
      return {
        forwardX: createFakeAudioParam(0, 0),
        forwardY: createFakeAudioParam(1, 0),
        forwardZ: createFakeAudioParam(2, -1),
        positionX: createFakeAudioParam(6, 0),
        positionY: createFakeAudioParam(7, 0),
        positionZ: createFakeAudioParam(8, 0),
        upX: createFakeAudioParam(3, 0),
        upY: createFakeAudioParam(4, 1),
        upZ: createFakeAudioParam(5, 0)
      };
    };

    const {
      forwardX,
      forwardY,
      forwardZ,
      positionX,
      positionY,
      positionZ,
      upX,
      upY,
      upZ
    } = nativeListener.forwardX === undefined ? createFakeAudioParams() : nativeListener;
    return {
      get forwardX() {
        return forwardX;
      },

      get forwardY() {
        return forwardY;
      },

      get forwardZ() {
        return forwardZ;
      },

      get positionX() {
        return positionX;
      },

      get positionY() {
        return positionY;
      },

      get positionZ() {
        return positionZ;
      },

      get upX() {
        return upX;
      },

      get upY() {
        return upY;
      },

      get upZ() {
        return upZ;
      }

    };
  };
};

exports.createAudioListenerFactory = createAudioListenerFactory;
},{"../constants":"../node_modules/standardized-audio-context/build/es2019/constants.js"}],"../node_modules/standardized-audio-context/build/es2019/guards/audio-node.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isAudioNode = void 0;

const isAudioNode = audioNodeOrAudioParam => {
  return 'context' in audioNodeOrAudioParam;
};

exports.isAudioNode = isAudioNode;
},{}],"../node_modules/standardized-audio-context/build/es2019/guards/audio-node-output-connection.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isAudioNodeOutputConnection = void 0;

var _audioNode = require("./audio-node");

const isAudioNodeOutputConnection = outputConnection => {
  return (0, _audioNode.isAudioNode)(outputConnection[0]);
};

exports.isAudioNodeOutputConnection = isAudioNodeOutputConnection;
},{"./audio-node":"../node_modules/standardized-audio-context/build/es2019/guards/audio-node.js"}],"../node_modules/standardized-audio-context/build/es2019/guards/audio-worklet-node.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isAudioWorkletNode = void 0;

const isAudioWorkletNode = audioNode => {
  return 'port' in audioNode;
};

exports.isAudioWorkletNode = isAudioWorkletNode;
},{}],"../node_modules/standardized-audio-context/build/es2019/guards/native-audio-node-faker.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isNativeAudioNodeFaker = void 0;

const isNativeAudioNodeFaker = nativeAudioNodeOrNativeAudioNodeFaker => {
  return 'inputs' in nativeAudioNodeOrNativeAudioNodeFaker;
};

exports.isNativeAudioNodeFaker = isNativeAudioNodeFaker;
},{}],"../node_modules/standardized-audio-context/build/es2019/helpers/connect-native-audio-node-to-native-audio-node.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.connectNativeAudioNodeToNativeAudioNode = void 0;

var _nativeAudioNodeFaker = require("../guards/native-audio-node-faker");

const connectNativeAudioNodeToNativeAudioNode = (nativeSourceAudioNode, nativeDestinationAudioNode, output, input) => {
  if ((0, _nativeAudioNodeFaker.isNativeAudioNodeFaker)(nativeDestinationAudioNode)) {
    const fakeNativeDestinationAudioNode = nativeDestinationAudioNode.inputs[input];
    nativeSourceAudioNode.connect(fakeNativeDestinationAudioNode, output, 0);
    return [fakeNativeDestinationAudioNode, output, 0];
  }

  nativeSourceAudioNode.connect(nativeDestinationAudioNode, output, input);
  return [nativeDestinationAudioNode, output, input];
};

exports.connectNativeAudioNodeToNativeAudioNode = connectNativeAudioNodeToNativeAudioNode;
},{"../guards/native-audio-node-faker":"../node_modules/standardized-audio-context/build/es2019/guards/native-audio-node-faker.js"}],"../node_modules/standardized-audio-context/build/es2019/helpers/delete-event-listeners-of-audio-node.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.deleteEventListenerOfAudioNode = void 0;

var _getEventListenersOfAudioNode = require("./get-event-listeners-of-audio-node");

const deleteEventListenerOfAudioNode = (audioNode, eventListener) => {
  const eventListeners = (0, _getEventListenersOfAudioNode.getEventListenersOfAudioNode)(audioNode);

  if (!eventListeners.delete(eventListener)) {
    throw new Error('Missing the expected event listener.');
  }
};

exports.deleteEventListenerOfAudioNode = deleteEventListenerOfAudioNode;
},{"./get-event-listeners-of-audio-node":"../node_modules/standardized-audio-context/build/es2019/helpers/get-event-listeners-of-audio-node.js"}],"../node_modules/standardized-audio-context/build/es2019/helpers/disconnect-native-audio-node-from-native-audio-node.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.disconnectNativeAudioNodeFromNativeAudioNode = void 0;

var _nativeAudioNodeFaker = require("../guards/native-audio-node-faker");

const disconnectNativeAudioNodeFromNativeAudioNode = (nativeSourceAudioNode, nativeDestinationAudioNode, output, input) => {
  if ((0, _nativeAudioNodeFaker.isNativeAudioNodeFaker)(nativeDestinationAudioNode)) {
    nativeSourceAudioNode.disconnect(nativeDestinationAudioNode.inputs[input], output, 0);
  } else {
    nativeSourceAudioNode.disconnect(nativeDestinationAudioNode, output, input);
  }
};

exports.disconnectNativeAudioNodeFromNativeAudioNode = disconnectNativeAudioNodeFromNativeAudioNode;
},{"../guards/native-audio-node-faker":"../node_modules/standardized-audio-context/build/es2019/guards/native-audio-node-faker.js"}],"../node_modules/standardized-audio-context/build/es2019/helpers/get-audio-node-connections.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getAudioNodeConnections = void 0;

var _globals = require("../globals");

var _getValueForKey = require("./get-value-for-key");

const getAudioNodeConnections = audioNode => {
  return (0, _getValueForKey.getValueForKey)(_globals.AUDIO_NODE_CONNECTIONS_STORE, audioNode);
};

exports.getAudioNodeConnections = getAudioNodeConnections;
},{"../globals":"../node_modules/standardized-audio-context/build/es2019/globals.js","./get-value-for-key":"../node_modules/standardized-audio-context/build/es2019/helpers/get-value-for-key.js"}],"../node_modules/standardized-audio-context/build/es2019/helpers/get-audio-param-connections.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getAudioParamConnections = void 0;

var _globals = require("../globals");

var _getValueForKey = require("./get-value-for-key");

const getAudioParamConnections = audioParam => {
  return (0, _getValueForKey.getValueForKey)(_globals.AUDIO_PARAM_CONNECTIONS_STORE, audioParam);
};

exports.getAudioParamConnections = getAudioParamConnections;
},{"../globals":"../node_modules/standardized-audio-context/build/es2019/globals.js","./get-value-for-key":"../node_modules/standardized-audio-context/build/es2019/helpers/get-value-for-key.js"}],"../node_modules/standardized-audio-context/build/es2019/helpers/get-native-audio-node.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getNativeAudioNode = void 0;

var _globals = require("../globals");

var _getValueForKey = require("./get-value-for-key");

const getNativeAudioNode = audioNode => {
  return (0, _getValueForKey.getValueForKey)(_globals.AUDIO_NODE_STORE, audioNode);
};

exports.getNativeAudioNode = getNativeAudioNode;
},{"../globals":"../node_modules/standardized-audio-context/build/es2019/globals.js","./get-value-for-key":"../node_modules/standardized-audio-context/build/es2019/helpers/get-value-for-key.js"}],"../node_modules/standardized-audio-context/build/es2019/helpers/get-native-audio-param.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getNativeAudioParam = void 0;

var _globals = require("../globals");

var _getValueForKey = require("./get-value-for-key");

const getNativeAudioParam = audioParam => {
  return (0, _getValueForKey.getValueForKey)(_globals.AUDIO_PARAM_STORE, audioParam);
};

exports.getNativeAudioParam = getNativeAudioParam;
},{"../globals":"../node_modules/standardized-audio-context/build/es2019/globals.js","./get-value-for-key":"../node_modules/standardized-audio-context/build/es2019/helpers/get-value-for-key.js"}],"../node_modules/standardized-audio-context/build/es2019/helpers/insert-element-in-set.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.insertElementInSet = void 0;

const insertElementInSet = (set, element, predicate, ignoreDuplicates) => {
  for (const lmnt of set) {
    if (predicate(lmnt)) {
      if (ignoreDuplicates) {
        return false;
      }

      throw Error('The set contains at least one similar element.');
    }
  }

  set.add(element);
  return true;
};

exports.insertElementInSet = insertElementInSet;
},{}],"../node_modules/standardized-audio-context/build/es2019/helpers/is-active-audio-node.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isActiveAudioNode = void 0;

var _globals = require("../globals");

const isActiveAudioNode = audioNode => _globals.ACTIVE_AUDIO_NODE_STORE.has(audioNode);

exports.isActiveAudioNode = isActiveAudioNode;
},{"../globals":"../node_modules/standardized-audio-context/build/es2019/globals.js"}],"../node_modules/standardized-audio-context/build/es2019/helpers/is-part-of-a-cycle.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isPartOfACycle = void 0;

var _globals = require("../globals");

const isPartOfACycle = audioNode => {
  return _globals.CYCLE_COUNTERS.has(audioNode);
};

exports.isPartOfACycle = isPartOfACycle;
},{"../globals":"../node_modules/standardized-audio-context/build/es2019/globals.js"}],"../node_modules/standardized-audio-context/build/es2019/helpers/is-passive-audio-node.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isPassiveAudioNode = void 0;

var _globals = require("../globals");

const isPassiveAudioNode = audioNode => {
  return !_globals.ACTIVE_AUDIO_NODE_STORE.has(audioNode);
};

exports.isPassiveAudioNode = isPassiveAudioNode;
},{"../globals":"../node_modules/standardized-audio-context/build/es2019/globals.js"}],"../node_modules/standardized-audio-context/build/es2019/helpers/pick-element-from-set.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.pickElementFromSet = void 0;

const pickElementFromSet = (set, predicate) => {
  const matchingElements = Array.from(set).filter(predicate);

  if (matchingElements.length > 1) {
    throw Error('More than one element was found.');
  }

  if (matchingElements.length === 0) {
    throw Error('No element was found.');
  }

  const [matchingElement] = matchingElements;
  set.delete(matchingElement);
  return matchingElement;
};

exports.pickElementFromSet = pickElementFromSet;
},{}],"../node_modules/standardized-audio-context/build/es2019/helpers/set-internal-state-to-passive-when-necessary.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.setInternalStateToPassiveWhenNecessary = void 0;

var _audioWorkletNode = require("../guards/audio-worklet-node");

var _setInternalStateToPassive = require("./set-internal-state-to-passive");

// Set the internalState of the audioNode to 'passive' if it is not an AudioWorkletNode and if it has no 'active' input connections.
const setInternalStateToPassiveWhenNecessary = (audioNode, activeInputs) => {
  if (!(0, _audioWorkletNode.isAudioWorkletNode)(audioNode) && activeInputs.every(connections => connections.size === 0)) {
    (0, _setInternalStateToPassive.setInternalStateToPassive)(audioNode);
  }
};

exports.setInternalStateToPassiveWhenNecessary = setInternalStateToPassiveWhenNecessary;
},{"../guards/audio-worklet-node":"../node_modules/standardized-audio-context/build/es2019/guards/audio-worklet-node.js","./set-internal-state-to-passive":"../node_modules/standardized-audio-context/build/es2019/helpers/set-internal-state-to-passive.js"}],"../node_modules/standardized-audio-context/build/es2019/helpers/test-audio-node-disconnect-method-support.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.testAudioNodeDisconnectMethodSupport = void 0;

const testAudioNodeDisconnectMethodSupport = nativeAudioContext => {
  return new Promise(resolve => {
    const analyzer = nativeAudioContext.createScriptProcessor(256, 1, 1);
    const dummy = nativeAudioContext.createGain(); // Bug #95: Safari does not play one sample buffers.

    const ones = nativeAudioContext.createBuffer(1, 2, 44100);
    const channelData = ones.getChannelData(0);
    channelData[0] = 1;
    channelData[1] = 1;
    const source = nativeAudioContext.createBufferSource();
    source.buffer = ones;
    source.loop = true;
    source.connect(analyzer).connect(nativeAudioContext.destination);
    source.connect(dummy);
    source.disconnect(dummy); // tslint:disable-next-line:deprecation

    analyzer.onaudioprocess = event => {
      const chnnlDt = event.inputBuffer.getChannelData(0);

      if (Array.prototype.some.call(chnnlDt, sample => sample === 1)) {
        resolve(true);
      } else {
        resolve(false);
      }

      source.stop();
      analyzer.onaudioprocess = null; // tslint:disable-line:deprecation

      source.disconnect(analyzer);
      analyzer.disconnect(nativeAudioContext.destination);
    };

    source.start();
  });
};

exports.testAudioNodeDisconnectMethodSupport = testAudioNodeDisconnectMethodSupport;
},{}],"../node_modules/standardized-audio-context/build/es2019/helpers/visit-each-audio-node-once.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.visitEachAudioNodeOnce = void 0;

const visitEachAudioNodeOnce = (cycles, visitor) => {
  const counts = new Map();

  for (const cycle of cycles) {
    for (const audioNode of cycle) {
      const count = counts.get(audioNode);
      counts.set(audioNode, count === undefined ? 1 : count + 1);
    }
  }

  counts.forEach((count, audioNode) => visitor(audioNode, count));
};

exports.visitEachAudioNodeOnce = visitEachAudioNodeOnce;
},{}],"../node_modules/standardized-audio-context/build/es2019/guards/native-audio-node.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isNativeAudioNode = void 0;

const isNativeAudioNode = nativeAudioNodeOrAudioParam => {
  return 'context' in nativeAudioNodeOrAudioParam;
};

exports.isNativeAudioNode = isNativeAudioNode;
},{}],"../node_modules/standardized-audio-context/build/es2019/helpers/wrap-audio-node-disconnect-method.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.wrapAudioNodeDisconnectMethod = void 0;

var _nativeAudioNode = require("../guards/native-audio-node");

const wrapAudioNodeDisconnectMethod = nativeAudioNode => {
  const connections = new Map();

  nativeAudioNode.connect = (connect => {
    // tslint:disable-next-line:invalid-void
    return (destination, output = 0, input = 0) => {
      const returnValue = (0, _nativeAudioNode.isNativeAudioNode)(destination) ? connect(destination, output, input) : connect(destination, output); // Save the new connection only if the calls to connect above didn't throw an error.

      const connectionsToDestination = connections.get(destination);

      if (connectionsToDestination === undefined) {
        connections.set(destination, [{
          input,
          output
        }]);
      } else {
        if (connectionsToDestination.every(connection => connection.input !== input || connection.output !== output)) {
          connectionsToDestination.push({
            input,
            output
          });
        }
      }

      return returnValue;
    };
  })(nativeAudioNode.connect.bind(nativeAudioNode));

  nativeAudioNode.disconnect = (disconnect => {
    return (destinationOrOutput, output, input) => {
      disconnect.apply(nativeAudioNode);

      if (destinationOrOutput === undefined) {
        connections.clear();
      } else if (typeof destinationOrOutput === 'number') {
        for (const [destination, connectionsToDestination] of connections) {
          const filteredConnections = connectionsToDestination.filter(connection => connection.output !== destinationOrOutput);

          if (filteredConnections.length === 0) {
            connections.delete(destination);
          } else {
            connections.set(destination, filteredConnections);
          }
        }
      } else if (connections.has(destinationOrOutput)) {
        if (output === undefined) {
          connections.delete(destinationOrOutput);
        } else {
          const connectionsToDestination = connections.get(destinationOrOutput);

          if (connectionsToDestination !== undefined) {
            const filteredConnections = connectionsToDestination.filter(connection => connection.output !== output && (connection.input !== input || input === undefined));

            if (filteredConnections.length === 0) {
              connections.delete(destinationOrOutput);
            } else {
              connections.set(destinationOrOutput, filteredConnections);
            }
          }
        }
      }

      for (const [destination, connectionsToDestination] of connections) {
        connectionsToDestination.forEach(connection => {
          if ((0, _nativeAudioNode.isNativeAudioNode)(destination)) {
            nativeAudioNode.connect(destination, connection.output, connection.input);
          } else {
            nativeAudioNode.connect(destination, connection.output);
          }
        });
      }
    };
  })(nativeAudioNode.disconnect);
};

exports.wrapAudioNodeDisconnectMethod = wrapAudioNodeDisconnectMethod;
},{"../guards/native-audio-node":"../node_modules/standardized-audio-context/build/es2019/guards/native-audio-node.js"}],"../node_modules/standardized-audio-context/build/es2019/factories/audio-node-constructor.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createAudioNodeConstructor = void 0;

var _globals = require("../globals");

var _audioNode = require("../guards/audio-node");

var _audioNodeOutputConnection = require("../guards/audio-node-output-connection");

var _audioWorkletNode = require("../guards/audio-worklet-node");

var _connectNativeAudioNodeToNativeAudioNode = require("../helpers/connect-native-audio-node-to-native-audio-node");

var _deleteEventListenersOfAudioNode = require("../helpers/delete-event-listeners-of-audio-node");

var _disconnectNativeAudioNodeFromNativeAudioNode = require("../helpers/disconnect-native-audio-node-from-native-audio-node");

var _getAudioNodeConnections = require("../helpers/get-audio-node-connections");

var _getAudioParamConnections = require("../helpers/get-audio-param-connections");

var _getEventListenersOfAudioNode = require("../helpers/get-event-listeners-of-audio-node");

var _getNativeAudioNode = require("../helpers/get-native-audio-node");

var _getNativeAudioParam = require("../helpers/get-native-audio-param");

var _getValueForKey = require("../helpers/get-value-for-key");

var _insertElementInSet = require("../helpers/insert-element-in-set");

var _isActiveAudioNode = require("../helpers/is-active-audio-node");

var _isPartOfACycle = require("../helpers/is-part-of-a-cycle");

var _isPassiveAudioNode = require("../helpers/is-passive-audio-node");

var _pickElementFromSet = require("../helpers/pick-element-from-set");

var _setInternalStateToActive = require("../helpers/set-internal-state-to-active");

var _setInternalStateToPassiveWhenNecessary = require("../helpers/set-internal-state-to-passive-when-necessary");

var _testAudioNodeDisconnectMethodSupport = require("../helpers/test-audio-node-disconnect-method-support");

var _visitEachAudioNodeOnce = require("../helpers/visit-each-audio-node-once");

var _wrapAudioNodeDisconnectMethod = require("../helpers/wrap-audio-node-disconnect-method");

const addActiveInputConnectionToAudioNode = (activeInputs, source, [output, input, eventListener], ignoreDuplicates) => {
  (0, _insertElementInSet.insertElementInSet)(activeInputs[input], [source, output, eventListener], activeInputConnection => activeInputConnection[0] === source && activeInputConnection[1] === output, ignoreDuplicates);
};

const addActiveInputConnectionToAudioParam = (activeInputs, source, [output, eventListener], ignoreDuplicates) => {
  (0, _insertElementInSet.insertElementInSet)(activeInputs, [source, output, eventListener], activeInputConnection => activeInputConnection[0] === source && activeInputConnection[1] === output, ignoreDuplicates);
};

const deleteActiveInputConnectionToAudioNode = (activeInputs, source, output, input) => {
  return (0, _pickElementFromSet.pickElementFromSet)(activeInputs[input], activeInputConnection => activeInputConnection[0] === source && activeInputConnection[1] === output);
};

const deleteActiveInputConnectionToAudioParam = (activeInputs, source, output) => {
  return (0, _pickElementFromSet.pickElementFromSet)(activeInputs, activeInputConnection => activeInputConnection[0] === source && activeInputConnection[1] === output);
};

const addPassiveInputConnectionToAudioNode = (passiveInputs, input, [source, output, eventListener], ignoreDuplicates) => {
  const passiveInputConnections = passiveInputs.get(source);

  if (passiveInputConnections === undefined) {
    passiveInputs.set(source, new Set([[output, input, eventListener]]));
  } else {
    (0, _insertElementInSet.insertElementInSet)(passiveInputConnections, [output, input, eventListener], passiveInputConnection => passiveInputConnection[0] === output && passiveInputConnection[1] === input, ignoreDuplicates);
  }
};

const addPassiveInputConnectionToAudioParam = (passiveInputs, [source, output, eventListener], ignoreDuplicates) => {
  const passiveInputConnections = passiveInputs.get(source);

  if (passiveInputConnections === undefined) {
    passiveInputs.set(source, new Set([[output, eventListener]]));
  } else {
    (0, _insertElementInSet.insertElementInSet)(passiveInputConnections, [output, eventListener], passiveInputConnection => passiveInputConnection[0] === output, ignoreDuplicates);
  }
};

const deletePassiveInputConnectionToAudioNode = (passiveInputs, source, output, input) => {
  const passiveInputConnections = (0, _getValueForKey.getValueForKey)(passiveInputs, source);
  const matchingConnection = (0, _pickElementFromSet.pickElementFromSet)(passiveInputConnections, passiveInputConnection => passiveInputConnection[0] === output && passiveInputConnection[1] === input);

  if (passiveInputConnections.size === 0) {
    passiveInputs.delete(source);
  }

  return matchingConnection;
};

const deletePassiveInputConnectionToAudioParam = (passiveInputs, source, output) => {
  const passiveInputConnections = (0, _getValueForKey.getValueForKey)(passiveInputs, source);
  const matchingConnection = (0, _pickElementFromSet.pickElementFromSet)(passiveInputConnections, passiveInputConnection => passiveInputConnection[0] === output);

  if (passiveInputConnections.size === 0) {
    passiveInputs.delete(source);
  }

  return matchingConnection;
};

const addConnectionToAudioNodeOfAudioContext = (source, destination, output, input) => {
  const {
    activeInputs,
    passiveInputs
  } = (0, _getAudioNodeConnections.getAudioNodeConnections)(destination);
  const {
    outputs
  } = (0, _getAudioNodeConnections.getAudioNodeConnections)(source);
  const eventListeners = (0, _getEventListenersOfAudioNode.getEventListenersOfAudioNode)(source);

  const eventListener = isActive => {
    const nativeDestinationAudioNode = (0, _getNativeAudioNode.getNativeAudioNode)(destination);
    const nativeSourceAudioNode = (0, _getNativeAudioNode.getNativeAudioNode)(source);

    if (isActive) {
      const partialConnection = deletePassiveInputConnectionToAudioNode(passiveInputs, source, output, input);
      addActiveInputConnectionToAudioNode(activeInputs, source, partialConnection, false);

      if (!(0, _isPartOfACycle.isPartOfACycle)(source)) {
        (0, _connectNativeAudioNodeToNativeAudioNode.connectNativeAudioNodeToNativeAudioNode)(nativeSourceAudioNode, nativeDestinationAudioNode, output, input);
      }

      if ((0, _isPassiveAudioNode.isPassiveAudioNode)(destination)) {
        (0, _setInternalStateToActive.setInternalStateToActive)(destination);
      }
    } else {
      const partialConnection = deleteActiveInputConnectionToAudioNode(activeInputs, source, output, input);
      addPassiveInputConnectionToAudioNode(passiveInputs, input, partialConnection, false);

      if (!(0, _isPartOfACycle.isPartOfACycle)(source)) {
        (0, _disconnectNativeAudioNodeFromNativeAudioNode.disconnectNativeAudioNodeFromNativeAudioNode)(nativeSourceAudioNode, nativeDestinationAudioNode, output, input);
      }

      if ((0, _isActiveAudioNode.isActiveAudioNode)(destination)) {
        (0, _setInternalStateToPassiveWhenNecessary.setInternalStateToPassiveWhenNecessary)(destination, activeInputs);
      }
    }
  };

  if ((0, _insertElementInSet.insertElementInSet)(outputs, [destination, output, input], outputConnection => outputConnection[0] === destination && outputConnection[1] === output && outputConnection[2] === input, true)) {
    eventListeners.add(eventListener);

    if ((0, _isActiveAudioNode.isActiveAudioNode)(source)) {
      addActiveInputConnectionToAudioNode(activeInputs, source, [output, input, eventListener], true);
    } else {
      addPassiveInputConnectionToAudioNode(passiveInputs, input, [source, output, eventListener], true);
    }

    return true;
  }

  return false;
};

const addConnectionToAudioNodeOfOfflineAudioContext = (source, destination, output, input) => {
  const {
    outputs
  } = (0, _getAudioNodeConnections.getAudioNodeConnections)(source);

  if ((0, _insertElementInSet.insertElementInSet)(outputs, [destination, output, input], outputConnection => outputConnection[0] === destination && outputConnection[1] === output && outputConnection[2] === input, true)) {
    const {
      activeInputs
    } = (0, _getAudioNodeConnections.getAudioNodeConnections)(destination);
    addActiveInputConnectionToAudioNode(activeInputs, source, [output, input, null], true);
    return true;
  }

  return false;
};

const addConnectionToAudioParamOfAudioContext = (source, destination, output) => {
  const {
    activeInputs,
    passiveInputs
  } = (0, _getAudioParamConnections.getAudioParamConnections)(destination);
  const {
    outputs
  } = (0, _getAudioNodeConnections.getAudioNodeConnections)(source);
  const eventListeners = (0, _getEventListenersOfAudioNode.getEventListenersOfAudioNode)(source);

  const eventListener = isActive => {
    const nativeAudioNode = (0, _getNativeAudioNode.getNativeAudioNode)(source);
    const nativeAudioParam = (0, _getNativeAudioParam.getNativeAudioParam)(destination);

    if (isActive) {
      const partialConnection = deletePassiveInputConnectionToAudioParam(passiveInputs, source, output);
      addActiveInputConnectionToAudioParam(activeInputs, source, partialConnection, false);

      if (!(0, _isPartOfACycle.isPartOfACycle)(source)) {
        nativeAudioNode.connect(nativeAudioParam, output);
      }
    } else {
      const partialConnection = deleteActiveInputConnectionToAudioParam(activeInputs, source, output);
      addPassiveInputConnectionToAudioParam(passiveInputs, partialConnection, false);

      if (!(0, _isPartOfACycle.isPartOfACycle)(source)) {
        nativeAudioNode.disconnect(nativeAudioParam, output);
      }
    }
  };

  if ((0, _insertElementInSet.insertElementInSet)(outputs, [destination, output], outputConnection => outputConnection[0] === destination && outputConnection[1] === output, true)) {
    eventListeners.add(eventListener);

    if ((0, _isActiveAudioNode.isActiveAudioNode)(source)) {
      addActiveInputConnectionToAudioParam(activeInputs, source, [output, eventListener], true);
    } else {
      addPassiveInputConnectionToAudioParam(passiveInputs, [source, output, eventListener], true);
    }

    return true;
  }

  return false;
};

const addConnectionToAudioParamOfOfflineAudioContext = (source, destination, output) => {
  const {
    outputs
  } = (0, _getAudioNodeConnections.getAudioNodeConnections)(source);

  if ((0, _insertElementInSet.insertElementInSet)(outputs, [destination, output], outputConnection => outputConnection[0] === destination && outputConnection[1] === output, true)) {
    const {
      activeInputs
    } = (0, _getAudioParamConnections.getAudioParamConnections)(destination);
    addActiveInputConnectionToAudioParam(activeInputs, source, [output, null], true);
    return true;
  }

  return false;
};

const deleteActiveInputConnection = (activeInputConnections, source, output) => {
  for (const activeInputConnection of activeInputConnections) {
    if (activeInputConnection[0] === source && activeInputConnection[1] === output) {
      activeInputConnections.delete(activeInputConnection);
      return activeInputConnection;
    }
  }

  return null;
};

const deleteInputConnectionOfAudioNode = (source, destination, output, input) => {
  const {
    activeInputs,
    passiveInputs
  } = (0, _getAudioNodeConnections.getAudioNodeConnections)(destination);
  const activeInputConnection = deleteActiveInputConnection(activeInputs[input], source, output);

  if (activeInputConnection === null) {
    const passiveInputConnection = deletePassiveInputConnectionToAudioNode(passiveInputs, source, output, input);
    return [passiveInputConnection[2], false];
  }

  return [activeInputConnection[2], true];
};

const deleteInputConnectionOfAudioParam = (source, destination, output) => {
  const {
    activeInputs,
    passiveInputs
  } = (0, _getAudioParamConnections.getAudioParamConnections)(destination);
  const activeInputConnection = deleteActiveInputConnection(activeInputs, source, output);

  if (activeInputConnection === null) {
    const passiveInputConnection = deletePassiveInputConnectionToAudioParam(passiveInputs, source, output);
    return [passiveInputConnection[1], false];
  }

  return [activeInputConnection[2], true];
};

const deleteInputsOfAudioNode = (source, destination, output, input) => {
  const [listener, isActive] = deleteInputConnectionOfAudioNode(source, destination, output, input);

  if (listener !== null) {
    (0, _deleteEventListenersOfAudioNode.deleteEventListenerOfAudioNode)(source, listener);

    if (isActive && !(0, _isPartOfACycle.isPartOfACycle)(source)) {
      (0, _disconnectNativeAudioNodeFromNativeAudioNode.disconnectNativeAudioNodeFromNativeAudioNode)((0, _getNativeAudioNode.getNativeAudioNode)(source), (0, _getNativeAudioNode.getNativeAudioNode)(destination), output, input);
    }
  }

  if ((0, _isActiveAudioNode.isActiveAudioNode)(destination)) {
    const {
      activeInputs
    } = (0, _getAudioNodeConnections.getAudioNodeConnections)(destination);
    (0, _setInternalStateToPassiveWhenNecessary.setInternalStateToPassiveWhenNecessary)(destination, activeInputs);
  }
};

const deleteInputsOfAudioParam = (source, destination, output) => {
  const [listener, isActive] = deleteInputConnectionOfAudioParam(source, destination, output);

  if (listener !== null) {
    (0, _deleteEventListenersOfAudioNode.deleteEventListenerOfAudioNode)(source, listener);

    if (isActive && !(0, _isPartOfACycle.isPartOfACycle)(source)) {
      (0, _getNativeAudioNode.getNativeAudioNode)(source).disconnect((0, _getNativeAudioParam.getNativeAudioParam)(destination), output);
    }
  }
};

const deleteAnyConnection = source => {
  const audioNodeConnectionsOfSource = (0, _getAudioNodeConnections.getAudioNodeConnections)(source);
  const destinations = [];

  for (const outputConnection of audioNodeConnectionsOfSource.outputs) {
    if ((0, _audioNodeOutputConnection.isAudioNodeOutputConnection)(outputConnection)) {
      deleteInputsOfAudioNode(source, ...outputConnection);
    } else {
      deleteInputsOfAudioParam(source, ...outputConnection);
    }

    destinations.push(outputConnection[0]);
  }

  audioNodeConnectionsOfSource.outputs.clear();
  return destinations;
};

const deleteConnectionAtOutput = (source, output) => {
  const audioNodeConnectionsOfSource = (0, _getAudioNodeConnections.getAudioNodeConnections)(source);
  const destinations = [];

  for (const outputConnection of audioNodeConnectionsOfSource.outputs) {
    if (outputConnection[1] === output) {
      if ((0, _audioNodeOutputConnection.isAudioNodeOutputConnection)(outputConnection)) {
        deleteInputsOfAudioNode(source, ...outputConnection);
      } else {
        deleteInputsOfAudioParam(source, ...outputConnection);
      }

      destinations.push(outputConnection[0]);
      audioNodeConnectionsOfSource.outputs.delete(outputConnection);
    }
  }

  return destinations;
};

const deleteConnectionToDestination = (source, destination, output, input) => {
  const audioNodeConnectionsOfSource = (0, _getAudioNodeConnections.getAudioNodeConnections)(source);
  return Array.from(audioNodeConnectionsOfSource.outputs).filter(outputConnection => outputConnection[0] === destination && (output === undefined || outputConnection[1] === output) && (input === undefined || outputConnection[2] === input)).map(outputConnection => {
    if ((0, _audioNodeOutputConnection.isAudioNodeOutputConnection)(outputConnection)) {
      deleteInputsOfAudioNode(source, ...outputConnection);
    } else {
      deleteInputsOfAudioParam(source, ...outputConnection);
    }

    audioNodeConnectionsOfSource.outputs.delete(outputConnection);
    return outputConnection[0];
  });
};

const createAudioNodeConstructor = (addAudioNodeConnections, auxiliaryGainNodeStore, cacheTestResult, createIncrementCycleCounter, createIndexSizeError, createInvalidAccessError, createNotSupportedError, decrementCycleCounter, detectCycles, eventTargetConstructor, getNativeContext, isNativeAudioContext, isNativeAudioNode, isNativeAudioParam, isNativeOfflineAudioContext) => {
  return class AudioNode extends eventTargetConstructor {
    constructor(context, isActive, nativeAudioNode, audioNodeRenderer) {
      super(nativeAudioNode);
      this._context = context;
      this._nativeAudioNode = nativeAudioNode;
      const nativeContext = getNativeContext(context); // Bug #12: Safari does not support to disconnect a specific destination.

      if (isNativeAudioContext(nativeContext) && true !== cacheTestResult(_testAudioNodeDisconnectMethodSupport.testAudioNodeDisconnectMethodSupport, () => {
        return (0, _testAudioNodeDisconnectMethodSupport.testAudioNodeDisconnectMethodSupport)(nativeContext);
      })) {
        (0, _wrapAudioNodeDisconnectMethod.wrapAudioNodeDisconnectMethod)(nativeAudioNode);
      }

      _globals.AUDIO_NODE_STORE.set(this, nativeAudioNode);

      _globals.EVENT_LISTENERS.set(this, new Set());

      if (isActive) {
        (0, _setInternalStateToActive.setInternalStateToActive)(this);
      }

      addAudioNodeConnections(this, audioNodeRenderer, nativeAudioNode);
    }

    get channelCount() {
      return this._nativeAudioNode.channelCount;
    }

    set channelCount(value) {
      this._nativeAudioNode.channelCount = value;
    }

    get channelCountMode() {
      return this._nativeAudioNode.channelCountMode;
    }

    set channelCountMode(value) {
      this._nativeAudioNode.channelCountMode = value;
    }

    get channelInterpretation() {
      return this._nativeAudioNode.channelInterpretation;
    }

    set channelInterpretation(value) {
      this._nativeAudioNode.channelInterpretation = value;
    }

    get context() {
      return this._context;
    }

    get numberOfInputs() {
      return this._nativeAudioNode.numberOfInputs;
    }

    get numberOfOutputs() {
      return this._nativeAudioNode.numberOfOutputs;
    } // tslint:disable-next-line:invalid-void


    connect(destination, output = 0, input = 0) {
      // Bug #174: Safari does expose a wrong numberOfOutputs for MediaStreamAudioDestinationNodes.
      if (output < 0 || output >= this._nativeAudioNode.numberOfOutputs) {
        throw createIndexSizeError();
      }

      const nativeContext = getNativeContext(this._context);
      const isOffline = isNativeOfflineAudioContext(nativeContext);

      if (isNativeAudioNode(destination) || isNativeAudioParam(destination)) {
        throw createInvalidAccessError();
      }

      if ((0, _audioNode.isAudioNode)(destination)) {
        const nativeDestinationAudioNode = (0, _getNativeAudioNode.getNativeAudioNode)(destination);

        try {
          const connection = (0, _connectNativeAudioNodeToNativeAudioNode.connectNativeAudioNodeToNativeAudioNode)(this._nativeAudioNode, nativeDestinationAudioNode, output, input);

          if (isOffline || (0, _isPassiveAudioNode.isPassiveAudioNode)(this)) {
            this._nativeAudioNode.disconnect(...connection);
          } else if ((0, _isPassiveAudioNode.isPassiveAudioNode)(destination)) {
            (0, _setInternalStateToActive.setInternalStateToActive)(destination);
          } // An AudioWorklet needs a connection because it otherwise may truncate the input array.
          // @todo Count the number of connections which depend on this auxiliary GainNode to know when it can be removed again.


          if ((0, _audioWorkletNode.isAudioWorkletNode)(destination)) {
            const auxiliaryGainNodes = auxiliaryGainNodeStore.get(nativeDestinationAudioNode);

            if (auxiliaryGainNodes === undefined) {
              const nativeGainNode = nativeContext.createGain();
              nativeGainNode.connect(connection[0], 0, connection[2]);
              auxiliaryGainNodeStore.set(nativeDestinationAudioNode, new Map([[input, nativeGainNode]]));
            } else if (auxiliaryGainNodes.get(input) === undefined) {
              const nativeGainNode = nativeContext.createGain();
              nativeGainNode.connect(connection[0], 0, connection[2]);
              auxiliaryGainNodes.set(input, nativeGainNode);
            }
          }
        } catch (err) {
          // Bug #41: Only Chrome, Firefox and Opera throw the correct exception by now.
          if (err.code === 12) {
            throw createInvalidAccessError();
          }

          throw err;
        }

        const isNewConnectionToAudioNode = isOffline ? addConnectionToAudioNodeOfOfflineAudioContext(this, destination, output, input) : addConnectionToAudioNodeOfAudioContext(this, destination, output, input); // Bug #164: Only Firefox detects cycles so far.

        if (isNewConnectionToAudioNode) {
          const cycles = detectCycles([this], destination);
          (0, _visitEachAudioNodeOnce.visitEachAudioNodeOnce)(cycles, createIncrementCycleCounter(isOffline));
        }

        return destination;
      }

      const nativeAudioParam = (0, _getNativeAudioParam.getNativeAudioParam)(destination);
      /*
       * Bug #147 & #153: Safari does not support to connect an input signal to the playbackRate AudioParam of an
       * AudioBufferSourceNode. This can't be easily detected and that's why the outdated name property is used here to identify
       * Safari.
       */

      if (nativeAudioParam.name === 'playbackRate') {
        throw createNotSupportedError();
      }

      try {
        this._nativeAudioNode.connect(nativeAudioParam, output);

        if (isOffline || (0, _isPassiveAudioNode.isPassiveAudioNode)(this)) {
          this._nativeAudioNode.disconnect(nativeAudioParam, output);
        }
      } catch (err) {
        // Bug #58: Only Firefox does throw an InvalidStateError yet.
        if (err.code === 12) {
          throw createInvalidAccessError();
        }

        throw err;
      }

      const isNewConnectionToAudioParam = isOffline ? addConnectionToAudioParamOfOfflineAudioContext(this, destination, output) : addConnectionToAudioParamOfAudioContext(this, destination, output); // Bug #164: Only Firefox detects cycles so far.

      if (isNewConnectionToAudioParam) {
        const cycles = detectCycles([this], destination);
        (0, _visitEachAudioNodeOnce.visitEachAudioNodeOnce)(cycles, createIncrementCycleCounter(isOffline));
      }
    }

    disconnect(destinationOrOutput, output, input) {
      let destinations;

      if (destinationOrOutput === undefined) {
        destinations = deleteAnyConnection(this);
      } else if (typeof destinationOrOutput === 'number') {
        if (destinationOrOutput < 0 || destinationOrOutput >= this.numberOfOutputs) {
          throw createIndexSizeError();
        }

        destinations = deleteConnectionAtOutput(this, destinationOrOutput);
      } else {
        if (output !== undefined && (output < 0 || output >= this.numberOfOutputs)) {
          throw createIndexSizeError();
        }

        if ((0, _audioNode.isAudioNode)(destinationOrOutput) && input !== undefined && (input < 0 || input >= destinationOrOutput.numberOfInputs)) {
          throw createIndexSizeError();
        }

        destinations = deleteConnectionToDestination(this, destinationOrOutput, output, input);

        if (destinations.length === 0) {
          throw createInvalidAccessError();
        }
      } // Bug #164: Only Firefox detects cycles so far.


      for (const destination of destinations) {
        const cycles = detectCycles([this], destination);
        (0, _visitEachAudioNodeOnce.visitEachAudioNodeOnce)(cycles, decrementCycleCounter);
      }
    }

  };
};

exports.createAudioNodeConstructor = createAudioNodeConstructor;
},{"../globals":"../node_modules/standardized-audio-context/build/es2019/globals.js","../guards/audio-node":"../node_modules/standardized-audio-context/build/es2019/guards/audio-node.js","../guards/audio-node-output-connection":"../node_modules/standardized-audio-context/build/es2019/guards/audio-node-output-connection.js","../guards/audio-worklet-node":"../node_modules/standardized-audio-context/build/es2019/guards/audio-worklet-node.js","../helpers/connect-native-audio-node-to-native-audio-node":"../node_modules/standardized-audio-context/build/es2019/helpers/connect-native-audio-node-to-native-audio-node.js","../helpers/delete-event-listeners-of-audio-node":"../node_modules/standardized-audio-context/build/es2019/helpers/delete-event-listeners-of-audio-node.js","../helpers/disconnect-native-audio-node-from-native-audio-node":"../node_modules/standardized-audio-context/build/es2019/helpers/disconnect-native-audio-node-from-native-audio-node.js","../helpers/get-audio-node-connections":"../node_modules/standardized-audio-context/build/es2019/helpers/get-audio-node-connections.js","../helpers/get-audio-param-connections":"../node_modules/standardized-audio-context/build/es2019/helpers/get-audio-param-connections.js","../helpers/get-event-listeners-of-audio-node":"../node_modules/standardized-audio-context/build/es2019/helpers/get-event-listeners-of-audio-node.js","../helpers/get-native-audio-node":"../node_modules/standardized-audio-context/build/es2019/helpers/get-native-audio-node.js","../helpers/get-native-audio-param":"../node_modules/standardized-audio-context/build/es2019/helpers/get-native-audio-param.js","../helpers/get-value-for-key":"../node_modules/standardized-audio-context/build/es2019/helpers/get-value-for-key.js","../helpers/insert-element-in-set":"../node_modules/standardized-audio-context/build/es2019/helpers/insert-element-in-set.js","../helpers/is-active-audio-node":"../node_modules/standardized-audio-context/build/es2019/helpers/is-active-audio-node.js","../helpers/is-part-of-a-cycle":"../node_modules/standardized-audio-context/build/es2019/helpers/is-part-of-a-cycle.js","../helpers/is-passive-audio-node":"../node_modules/standardized-audio-context/build/es2019/helpers/is-passive-audio-node.js","../helpers/pick-element-from-set":"../node_modules/standardized-audio-context/build/es2019/helpers/pick-element-from-set.js","../helpers/set-internal-state-to-active":"../node_modules/standardized-audio-context/build/es2019/helpers/set-internal-state-to-active.js","../helpers/set-internal-state-to-passive-when-necessary":"../node_modules/standardized-audio-context/build/es2019/helpers/set-internal-state-to-passive-when-necessary.js","../helpers/test-audio-node-disconnect-method-support":"../node_modules/standardized-audio-context/build/es2019/helpers/test-audio-node-disconnect-method-support.js","../helpers/visit-each-audio-node-once":"../node_modules/standardized-audio-context/build/es2019/helpers/visit-each-audio-node-once.js","../helpers/wrap-audio-node-disconnect-method":"../node_modules/standardized-audio-context/build/es2019/helpers/wrap-audio-node-disconnect-method.js"}],"../node_modules/standardized-audio-context/build/es2019/factories/audio-param-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createAudioParamFactory = void 0;

var _automationEvents = require("automation-events");

const createAudioParamFactory = (addAudioParamConnections, audioParamAudioNodeStore, audioParamStore, createAudioParamRenderer, createCancelAndHoldAutomationEvent, createCancelScheduledValuesAutomationEvent, createExponentialRampToValueAutomationEvent, createLinearRampToValueAutomationEvent, createSetTargetAutomationEvent, createSetValueAutomationEvent, createSetValueCurveAutomationEvent, nativeAudioContextConstructor) => {
  return (audioNode, isAudioParamOfOfflineAudioContext, nativeAudioParam, maxValue = null, minValue = null) => {
    const automationEventList = new _automationEvents.AutomationEventList(nativeAudioParam.defaultValue);
    const audioParamRenderer = isAudioParamOfOfflineAudioContext ? createAudioParamRenderer(automationEventList) : null;
    const audioParam = {
      get defaultValue() {
        return nativeAudioParam.defaultValue;
      },

      get maxValue() {
        return maxValue === null ? nativeAudioParam.maxValue : maxValue;
      },

      get minValue() {
        return minValue === null ? nativeAudioParam.minValue : minValue;
      },

      get value() {
        return nativeAudioParam.value;
      },

      set value(value) {
        nativeAudioParam.value = value; // Bug #98: Edge, Firefox & Safari do not yet treat the value setter like a call to setValueAtTime().

        audioParam.setValueAtTime(value, audioNode.context.currentTime);
      },

      cancelAndHoldAtTime(cancelTime) {
        // Bug #28: Edge, Firefox & Safari do not yet implement cancelAndHoldAtTime().
        if (typeof nativeAudioParam.cancelAndHoldAtTime === 'function') {
          if (audioParamRenderer === null) {
            automationEventList.flush(audioNode.context.currentTime);
          }

          automationEventList.add(createCancelAndHoldAutomationEvent(cancelTime));
          nativeAudioParam.cancelAndHoldAtTime(cancelTime);
        } else {
          const previousLastEvent = Array.from(automationEventList).pop();

          if (audioParamRenderer === null) {
            automationEventList.flush(audioNode.context.currentTime);
          }

          automationEventList.add(createCancelAndHoldAutomationEvent(cancelTime));
          const currentLastEvent = Array.from(automationEventList).pop();
          nativeAudioParam.cancelScheduledValues(cancelTime);

          if (previousLastEvent !== currentLastEvent && currentLastEvent !== undefined) {
            if (currentLastEvent.type === 'exponentialRampToValue') {
              nativeAudioParam.exponentialRampToValueAtTime(currentLastEvent.value, currentLastEvent.endTime);
            } else if (currentLastEvent.type === 'linearRampToValue') {
              nativeAudioParam.linearRampToValueAtTime(currentLastEvent.value, currentLastEvent.endTime);
            } else if (currentLastEvent.type === 'setValue') {
              nativeAudioParam.setValueAtTime(currentLastEvent.value, currentLastEvent.startTime);
            } else if (currentLastEvent.type === 'setValueCurve') {
              nativeAudioParam.setValueCurveAtTime(currentLastEvent.values, currentLastEvent.startTime, currentLastEvent.duration);
            }
          }
        }

        return audioParam;
      },

      cancelScheduledValues(cancelTime) {
        if (audioParamRenderer === null) {
          automationEventList.flush(audioNode.context.currentTime);
        }

        automationEventList.add(createCancelScheduledValuesAutomationEvent(cancelTime));
        nativeAudioParam.cancelScheduledValues(cancelTime);
        return audioParam;
      },

      exponentialRampToValueAtTime(value, endTime) {
        if (audioParamRenderer === null) {
          automationEventList.flush(audioNode.context.currentTime);
        }

        automationEventList.add(createExponentialRampToValueAutomationEvent(value, endTime));
        nativeAudioParam.exponentialRampToValueAtTime(value, endTime);
        return audioParam;
      },

      linearRampToValueAtTime(value, endTime) {
        if (audioParamRenderer === null) {
          automationEventList.flush(audioNode.context.currentTime);
        }

        automationEventList.add(createLinearRampToValueAutomationEvent(value, endTime));
        nativeAudioParam.linearRampToValueAtTime(value, endTime);
        return audioParam;
      },

      setTargetAtTime(target, startTime, timeConstant) {
        if (audioParamRenderer === null) {
          automationEventList.flush(audioNode.context.currentTime);
        }

        automationEventList.add(createSetTargetAutomationEvent(target, startTime, timeConstant));
        nativeAudioParam.setTargetAtTime(target, startTime, timeConstant);
        return audioParam;
      },

      setValueAtTime(value, startTime) {
        if (audioParamRenderer === null) {
          automationEventList.flush(audioNode.context.currentTime);
        }

        automationEventList.add(createSetValueAutomationEvent(value, startTime));
        nativeAudioParam.setValueAtTime(value, startTime);
        return audioParam;
      },

      setValueCurveAtTime(values, startTime, duration) {
        /*
         * Bug #152: Safari does not correctly interpolate the values of the curve.
         * @todo Unfortunately there is no way to test for this behavior in synchronous fashion which is why testing for the
         * existence of the webkitAudioContext is used as a workaround here.
         */
        if (nativeAudioContextConstructor !== null && nativeAudioContextConstructor.name === 'webkitAudioContext') {
          const endTime = startTime + duration;
          const sampleRate = audioNode.context.sampleRate;
          const firstSample = Math.ceil(startTime * sampleRate);
          const lastSample = Math.floor(endTime * sampleRate);
          const numberOfInterpolatedValues = lastSample - firstSample;
          const interpolatedValues = new Float32Array(numberOfInterpolatedValues);

          for (let i = 0; i < numberOfInterpolatedValues; i += 1) {
            const theoreticIndex = (values.length - 1) / duration * ((firstSample + i) / sampleRate - startTime);
            const lowerIndex = Math.floor(theoreticIndex);
            const upperIndex = Math.ceil(theoreticIndex);
            interpolatedValues[i] = lowerIndex === upperIndex ? values[lowerIndex] : (1 - (theoreticIndex - lowerIndex)) * values[lowerIndex] + (1 - (upperIndex - theoreticIndex)) * values[upperIndex];
          }

          if (audioParamRenderer === null) {
            automationEventList.flush(audioNode.context.currentTime);
          }

          automationEventList.add(createSetValueCurveAutomationEvent(interpolatedValues, startTime, duration));
          nativeAudioParam.setValueCurveAtTime(interpolatedValues, startTime, duration);
          const timeOfLastSample = lastSample / sampleRate;

          if (timeOfLastSample < endTime) {
            audioParam.setValueAtTime(interpolatedValues[interpolatedValues.length - 1], timeOfLastSample);
          }

          audioParam.setValueAtTime(values[values.length - 1], endTime);
        } else {
          if (audioParamRenderer === null) {
            automationEventList.flush(audioNode.context.currentTime);
          }

          automationEventList.add(createSetValueCurveAutomationEvent(values, startTime, duration));
          nativeAudioParam.setValueCurveAtTime(values, startTime, duration);
        }

        return audioParam;
      }

    };
    audioParamStore.set(audioParam, nativeAudioParam);
    audioParamAudioNodeStore.set(audioParam, audioNode);
    addAudioParamConnections(audioParam, audioParamRenderer);
    return audioParam;
  };
};

exports.createAudioParamFactory = createAudioParamFactory;
},{"automation-events":"../node_modules/automation-events/build/es5/bundle.js"}],"../node_modules/standardized-audio-context/build/es2019/factories/audio-param-renderer.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createAudioParamRenderer = void 0;

const createAudioParamRenderer = automationEventList => {
  return {
    replay(audioParam) {
      for (const automationEvent of automationEventList) {
        if (automationEvent.type === 'exponentialRampToValue') {
          const {
            endTime,
            value
          } = automationEvent;
          audioParam.exponentialRampToValueAtTime(value, endTime);
        } else if (automationEvent.type === 'linearRampToValue') {
          const {
            endTime,
            value
          } = automationEvent;
          audioParam.linearRampToValueAtTime(value, endTime);
        } else if (automationEvent.type === 'setTarget') {
          const {
            startTime,
            target,
            timeConstant
          } = automationEvent;
          audioParam.setTargetAtTime(target, startTime, timeConstant);
        } else if (automationEvent.type === 'setValue') {
          const {
            startTime,
            value
          } = automationEvent;
          audioParam.setValueAtTime(value, startTime);
        } else if (automationEvent.type === 'setValueCurve') {
          const {
            duration,
            startTime,
            values
          } = automationEvent;
          audioParam.setValueCurveAtTime(values, startTime, duration);
        } else {
          throw new Error("Can't apply an unknown automation.");
        }
      }
    }

  };
};

exports.createAudioParamRenderer = createAudioParamRenderer;
},{}],"../node_modules/standardized-audio-context/build/es2019/read-only-map.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ReadOnlyMap = void 0;

class ReadOnlyMap {
  constructor(parameters) {
    this._map = new Map(parameters);
  }

  get size() {
    return this._map.size;
  }

  entries() {
    return this._map.entries();
  }

  forEach(callback, thisArg = null) {
    return this._map.forEach((value, key) => callback.call(thisArg, value, key, this));
  }

  get(name) {
    return this._map.get(name);
  }

  has(name) {
    return this._map.has(name);
  }

  keys() {
    return this._map.keys();
  }

  values() {
    return this._map.values();
  }

}

exports.ReadOnlyMap = ReadOnlyMap;
},{}],"../node_modules/standardized-audio-context/build/es2019/factories/audio-worklet-node-constructor.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createAudioWorkletNodeConstructor = void 0;

var _globals = require("../globals");

var _readOnlyMap = require("../read-only-map");

const DEFAULT_OPTIONS = {
  channelCount: 2,
  // Bug #61: The channelCountMode should be 'max' according to the spec but is set to 'explicit' to achieve consistent behavior.
  channelCountMode: 'explicit',
  channelInterpretation: 'speakers',
  numberOfInputs: 1,
  numberOfOutputs: 1,
  outputChannelCount: undefined,
  parameterData: {},
  processorOptions: {}
};

const createChannelCount = length => {
  const channelCount = [];

  for (let i = 0; i < length; i += 1) {
    channelCount.push(1);
  }

  return channelCount;
};

const sanitizedOptions = options => {
  return { ...options,
    outputChannelCount: options.outputChannelCount !== undefined ? options.outputChannelCount : options.numberOfInputs === 1 && options.numberOfOutputs === 1 ?
    /*
     * Bug #61: This should be the computedNumberOfChannels, but unfortunately that is almost impossible to fake. That's why
     * the channelCountMode is required to be 'explicit' as long as there is not a native implementation in every browser. That
     * makes sure the computedNumberOfChannels is equivilant to the channelCount which makes it much easier to compute.
     */
    [options.channelCount] : createChannelCount(options.numberOfOutputs)
  };
};

const createAudioWorkletNodeConstructor = (addUnrenderedAudioWorkletNode, audioNodeConstructor, createAudioParam, createAudioWorkletNodeRenderer, createNativeAudioWorkletNode, getNativeContext, isNativeOfflineAudioContext, nativeAudioWorkletNodeConstructor, wrapEventListener) => {
  return class AudioWorkletNode extends audioNodeConstructor {
    constructor(context, name, options = DEFAULT_OPTIONS) {
      const nativeContext = getNativeContext(context);
      const isOffline = isNativeOfflineAudioContext(nativeContext);
      const mergedOptions = sanitizedOptions({ ...DEFAULT_OPTIONS,
        ...options
      });

      const nodeNameToProcessorConstructorMap = _globals.NODE_NAME_TO_PROCESSOR_CONSTRUCTOR_MAPS.get(nativeContext);

      const processorConstructor = nodeNameToProcessorConstructorMap === undefined ? undefined : nodeNameToProcessorConstructorMap.get(name);
      const nativeAudioWorkletNode = createNativeAudioWorkletNode(nativeContext, isOffline ? null : context.baseLatency, nativeAudioWorkletNodeConstructor, name, processorConstructor, mergedOptions);
      const audioWorkletNodeRenderer = isOffline ? createAudioWorkletNodeRenderer(name, mergedOptions, processorConstructor) : null;
      /*
       * @todo Add a mechanism to switch an AudioWorkletNode to passive once the process() function of the AudioWorkletProcessor
       * returns false.
       */

      super(context, true, nativeAudioWorkletNode, audioWorkletNodeRenderer);
      const parameters = [];
      nativeAudioWorkletNode.parameters.forEach((nativeAudioParam, nm) => {
        const audioParam = createAudioParam(this, isOffline, nativeAudioParam);
        parameters.push([nm, audioParam]);
      });
      this._nativeAudioWorkletNode = nativeAudioWorkletNode;
      this._onprocessorerror = null;
      this._parameters = new _readOnlyMap.ReadOnlyMap(parameters);
      /*
       * Bug #86 & #87: Invoking the renderer of an AudioWorkletNode might be necessary if it has no direct or indirect connection to
       * the destination.
       */

      if (isOffline) {
        addUnrenderedAudioWorkletNode(nativeContext, this);
      }
    }

    get onprocessorerror() {
      return this._onprocessorerror;
    }

    set onprocessorerror(value) {
      const wrappedListener = typeof value === 'function' ? wrapEventListener(this, value) : null;
      this._nativeAudioWorkletNode.onprocessorerror = wrappedListener;
      const nativeOnProcessorError = this._nativeAudioWorkletNode.onprocessorerror;
      this._onprocessorerror = nativeOnProcessorError !== null && nativeOnProcessorError === wrappedListener ? value : nativeOnProcessorError;
    }

    get parameters() {
      if (this._parameters === null) {
        // @todo The definition that TypeScript uses of the AudioParamMap is lacking many methods.
        return this._nativeAudioWorkletNode.parameters;
      }

      return this._parameters;
    }

    get port() {
      return this._nativeAudioWorkletNode.port;
    }

  };
};

exports.createAudioWorkletNodeConstructor = createAudioWorkletNodeConstructor;
},{"../globals":"../node_modules/standardized-audio-context/build/es2019/globals.js","../read-only-map":"../node_modules/standardized-audio-context/build/es2019/read-only-map.js"}],"../node_modules/standardized-audio-context/build/es2019/helpers/copy-from-channel.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.copyFromChannel = copyFromChannel;

function copyFromChannel(audioBuffer, // @todo There is currently no way to define something like { [ key: number | string ]: Float32Array }
parent, key, channelNumber, bufferOffset) {
  if (typeof audioBuffer.copyFromChannel === 'function') {
    // The byteLength will be 0 when the ArrayBuffer was transferred.
    if (parent[key].byteLength === 0) {
      parent[key] = new Float32Array(128);
    }

    audioBuffer.copyFromChannel(parent[key], channelNumber, bufferOffset); // Bug #5: Safari does not support copyFromChannel().
  } else {
    const channelData = audioBuffer.getChannelData(channelNumber); // The byteLength will be 0 when the ArrayBuffer was transferred.

    if (parent[key].byteLength === 0) {
      parent[key] = channelData.slice(bufferOffset, bufferOffset + 128);
    } else {
      const slicedInput = new Float32Array(channelData.buffer, bufferOffset * Float32Array.BYTES_PER_ELEMENT, 128);
      parent[key].set(slicedInput);
    }
  }
}
},{}],"../node_modules/standardized-audio-context/build/es2019/helpers/copy-to-channel.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.copyToChannel = void 0;

const copyToChannel = (audioBuffer, parent, key, channelNumber, bufferOffset) => {
  if (typeof audioBuffer.copyToChannel === 'function') {
    // The byteLength will be 0 when the ArrayBuffer was transferred.
    if (parent[key].byteLength !== 0) {
      audioBuffer.copyToChannel(parent[key], channelNumber, bufferOffset);
    } // Bug #5: Safari does not support copyToChannel().

  } else {
    // The byteLength will be 0 when the ArrayBuffer was transferred.
    if (parent[key].byteLength !== 0) {
      audioBuffer.getChannelData(channelNumber).set(parent[key], bufferOffset);
    }
  }
};

exports.copyToChannel = copyToChannel;
},{}],"../node_modules/standardized-audio-context/build/es2019/helpers/create-nested-arrays.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createNestedArrays = void 0;

const createNestedArrays = (x, y) => {
  const arrays = [];

  for (let i = 0; i < x; i += 1) {
    const array = [];
    const length = typeof y === 'number' ? y : y[i];

    for (let j = 0; j < length; j += 1) {
      array.push(new Float32Array(128));
    }

    arrays.push(array);
  }

  return arrays;
};

exports.createNestedArrays = createNestedArrays;
},{}],"../node_modules/standardized-audio-context/build/es2019/helpers/get-audio-worklet-processor.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getAudioWorkletProcessor = void 0;

var _globals = require("../globals");

var _getNativeAudioNode = require("./get-native-audio-node");

var _getValueForKey = require("./get-value-for-key");

const getAudioWorkletProcessor = (nativeOfflineAudioContext, proxy) => {
  const nodeToProcessorMap = (0, _getValueForKey.getValueForKey)(_globals.NODE_TO_PROCESSOR_MAPS, nativeOfflineAudioContext);
  const nativeAudioWorkletNode = (0, _getNativeAudioNode.getNativeAudioNode)(proxy);
  return (0, _getValueForKey.getValueForKey)(nodeToProcessorMap, nativeAudioWorkletNode);
};

exports.getAudioWorkletProcessor = getAudioWorkletProcessor;
},{"../globals":"../node_modules/standardized-audio-context/build/es2019/globals.js","./get-native-audio-node":"../node_modules/standardized-audio-context/build/es2019/helpers/get-native-audio-node.js","./get-value-for-key":"../node_modules/standardized-audio-context/build/es2019/helpers/get-value-for-key.js"}],"../node_modules/standardized-audio-context/build/es2019/factories/audio-worklet-node-renderer-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createAudioWorkletNodeRendererFactory = void 0;

var _copyFromChannel = require("../helpers/copy-from-channel");

var _copyToChannel = require("../helpers/copy-to-channel");

var _createNestedArrays = require("../helpers/create-nested-arrays");

var _getAudioNodeConnections = require("../helpers/get-audio-node-connections");

var _getAudioWorkletProcessor = require("../helpers/get-audio-worklet-processor");

var _isOwnedByContext = require("../helpers/is-owned-by-context");

const processBuffer = async (proxy, renderedBuffer, nativeOfflineAudioContext, options, processorConstructor, exposeCurrentFrameAndCurrentTime) => {
  // Ceil the length to the next full render quantum.
  // Bug #17: Safari does not yet expose the length.
  const length = renderedBuffer === null ? Math.ceil(proxy.context.length / 128) * 128 : renderedBuffer.length;
  const numberOfInputChannels = options.channelCount * options.numberOfInputs;
  const numberOfOutputChannels = options.outputChannelCount.reduce((sum, value) => sum + value, 0);
  const processedBuffer = numberOfOutputChannels === 0 ? null : nativeOfflineAudioContext.createBuffer(numberOfOutputChannels, length, nativeOfflineAudioContext.sampleRate);

  if (processorConstructor === undefined) {
    throw new Error('Missing the processor constructor.');
  }

  const audioNodeConnections = (0, _getAudioNodeConnections.getAudioNodeConnections)(proxy);
  const audioWorkletProcessor = await (0, _getAudioWorkletProcessor.getAudioWorkletProcessor)(nativeOfflineAudioContext, proxy);
  const inputs = (0, _createNestedArrays.createNestedArrays)(options.numberOfInputs, options.channelCount);
  const outputs = (0, _createNestedArrays.createNestedArrays)(options.numberOfOutputs, options.outputChannelCount);
  const parameters = Array.from(proxy.parameters.keys()).reduce((prmtrs, name) => ({ ...prmtrs,
    [name]: new Float32Array(128)
  }), {});

  for (let i = 0; i < length; i += 128) {
    if (options.numberOfInputs > 0 && renderedBuffer !== null) {
      for (let j = 0; j < options.numberOfInputs; j += 1) {
        for (let k = 0; k < options.channelCount; k += 1) {
          (0, _copyFromChannel.copyFromChannel)(renderedBuffer, inputs[j], k, k, i);
        }
      }
    }

    if (processorConstructor.parameterDescriptors !== undefined && renderedBuffer !== null) {
      processorConstructor.parameterDescriptors.forEach(({
        name
      }, index) => {
        (0, _copyFromChannel.copyFromChannel)(renderedBuffer, parameters, name, numberOfInputChannels + index, i);
      });
    }

    for (let j = 0; j < options.numberOfInputs; j += 1) {
      for (let k = 0; k < options.outputChannelCount[j]; k += 1) {
        // The byteLength will be 0 when the ArrayBuffer was transferred.
        if (outputs[j][k].byteLength === 0) {
          outputs[j][k] = new Float32Array(128);
        }
      }
    }

    try {
      const potentiallyEmptyInputs = inputs.map((input, index) => {
        if (audioNodeConnections.activeInputs[index].size === 0) {
          return [];
        }

        return input;
      });
      const activeSourceFlag = exposeCurrentFrameAndCurrentTime(i / nativeOfflineAudioContext.sampleRate, nativeOfflineAudioContext.sampleRate, () => audioWorkletProcessor.process(potentiallyEmptyInputs, outputs, parameters));

      if (processedBuffer !== null) {
        for (let j = 0, outputChannelSplitterNodeOutput = 0; j < options.numberOfOutputs; j += 1) {
          for (let k = 0; k < options.outputChannelCount[j]; k += 1) {
            (0, _copyToChannel.copyToChannel)(processedBuffer, outputs[j], k, outputChannelSplitterNodeOutput + k, i);
          }

          outputChannelSplitterNodeOutput += options.outputChannelCount[j];
        }
      }

      if (!activeSourceFlag) {
        break;
      }
    } catch (error) {
      proxy.dispatchEvent(new ErrorEvent('processorerror', {
        error
      }));
      break;
    }
  }

  return processedBuffer;
};

const createAudioWorkletNodeRendererFactory = (connectAudioParam, connectMultipleOutputs, createNativeAudioBufferSourceNode, createNativeChannelMergerNode, createNativeChannelSplitterNode, createNativeConstantSourceNode, createNativeGainNode, deleteUnrenderedAudioWorkletNode, disconnectMultipleOutputs, exposeCurrentFrameAndCurrentTime, getNativeAudioNode, nativeAudioWorkletNodeConstructor, nativeOfflineAudioContextConstructor, renderAutomation, renderInputsOfAudioNode, renderNativeOfflineAudioContext) => {
  return (name, options, processorConstructor) => {
    const renderedNativeAudioNodes = new WeakMap();
    let processedBufferPromise = null;

    const createAudioNode = async (proxy, nativeOfflineAudioContext, trace) => {
      let nativeAudioWorkletNode = getNativeAudioNode(proxy);
      let nativeOutputNodes = null;
      const nativeAudioWorkletNodeIsOwnedByContext = (0, _isOwnedByContext.isOwnedByContext)(nativeAudioWorkletNode, nativeOfflineAudioContext); // Bug #61: Only Chrome & Opera have an implementation of the AudioWorkletNode yet.

      if (nativeAudioWorkletNodeConstructor === null) {
        const numberOfOutputChannels = options.outputChannelCount.reduce((sum, value) => sum + value, 0);
        const outputChannelSplitterNode = createNativeChannelSplitterNode(nativeOfflineAudioContext, {
          channelCount: Math.max(1, numberOfOutputChannels),
          channelCountMode: 'explicit',
          channelInterpretation: 'discrete',
          numberOfOutputs: Math.max(1, numberOfOutputChannels)
        });
        const outputChannelMergerNodes = [];

        for (let i = 0; i < proxy.numberOfOutputs; i += 1) {
          outputChannelMergerNodes.push(createNativeChannelMergerNode(nativeOfflineAudioContext, {
            channelCount: 1,
            channelCountMode: 'explicit',
            channelInterpretation: 'speakers',
            numberOfInputs: options.outputChannelCount[i]
          }));
        }

        const outputGainNode = createNativeGainNode(nativeOfflineAudioContext, {
          channelCount: options.channelCount,
          channelCountMode: options.channelCountMode,
          channelInterpretation: options.channelInterpretation,
          gain: 1
        });
        outputGainNode.connect = connectMultipleOutputs.bind(null, outputChannelMergerNodes);
        outputGainNode.disconnect = disconnectMultipleOutputs.bind(null, outputChannelMergerNodes);
        nativeOutputNodes = [outputChannelSplitterNode, outputChannelMergerNodes, outputGainNode];
      } else if (!nativeAudioWorkletNodeIsOwnedByContext) {
        nativeAudioWorkletNode = new nativeAudioWorkletNodeConstructor(nativeOfflineAudioContext, name);
      }

      renderedNativeAudioNodes.set(nativeOfflineAudioContext, nativeOutputNodes === null ? nativeAudioWorkletNode : nativeOutputNodes[2]);

      if (nativeOutputNodes !== null) {
        if (processedBufferPromise === null) {
          if (processorConstructor === undefined) {
            throw new Error('Missing the processor constructor.');
          }

          if (nativeOfflineAudioContextConstructor === null) {
            throw new Error('Missing the native OfflineAudioContext constructor.');
          } // Bug #47: The AudioDestinationNode in Edge and Safari gets not initialized correctly.


          const numberOfInputChannels = proxy.channelCount * proxy.numberOfInputs;
          const numberOfParameters = processorConstructor.parameterDescriptors === undefined ? 0 : processorConstructor.parameterDescriptors.length;
          const numberOfChannels = numberOfInputChannels + numberOfParameters;

          const renderBuffer = async () => {
            const partialOfflineAudioContext = new nativeOfflineAudioContextConstructor(numberOfChannels, // Ceil the length to the next full render quantum.
            // Bug #17: Safari does not yet expose the length.
            Math.ceil(proxy.context.length / 128) * 128, nativeOfflineAudioContext.sampleRate);
            const gainNodes = [];
            const inputChannelSplitterNodes = [];

            for (let i = 0; i < options.numberOfInputs; i += 1) {
              gainNodes.push(createNativeGainNode(partialOfflineAudioContext, {
                channelCount: options.channelCount,
                channelCountMode: options.channelCountMode,
                channelInterpretation: options.channelInterpretation,
                gain: 1
              }));
              inputChannelSplitterNodes.push(createNativeChannelSplitterNode(partialOfflineAudioContext, {
                channelCount: options.channelCount,
                channelCountMode: 'explicit',
                channelInterpretation: 'discrete',
                numberOfOutputs: options.channelCount
              }));
            }

            const constantSourceNodes = await Promise.all(Array.from(proxy.parameters.values()).map(async audioParam => {
              const constantSourceNode = createNativeConstantSourceNode(partialOfflineAudioContext, {
                channelCount: 1,
                channelCountMode: 'explicit',
                channelInterpretation: 'discrete',
                offset: audioParam.value
              });
              await renderAutomation(partialOfflineAudioContext, audioParam, constantSourceNode.offset, trace);
              return constantSourceNode;
            }));
            const inputChannelMergerNode = createNativeChannelMergerNode(partialOfflineAudioContext, {
              channelCount: 1,
              channelCountMode: 'explicit',
              channelInterpretation: 'speakers',
              numberOfInputs: Math.max(1, numberOfInputChannels + numberOfParameters)
            });

            for (let i = 0; i < options.numberOfInputs; i += 1) {
              gainNodes[i].connect(inputChannelSplitterNodes[i]);

              for (let j = 0; j < options.channelCount; j += 1) {
                inputChannelSplitterNodes[i].connect(inputChannelMergerNode, j, i * options.channelCount + j);
              }
            }

            for (const [index, constantSourceNode] of constantSourceNodes.entries()) {
              constantSourceNode.connect(inputChannelMergerNode, 0, numberOfInputChannels + index);
              constantSourceNode.start(0);
            }

            inputChannelMergerNode.connect(partialOfflineAudioContext.destination);
            await Promise.all(gainNodes.map(gainNode => renderInputsOfAudioNode(proxy, partialOfflineAudioContext, gainNode, trace)));
            return renderNativeOfflineAudioContext(partialOfflineAudioContext);
          };

          processedBufferPromise = processBuffer(proxy, numberOfChannels === 0 ? null : await renderBuffer(), nativeOfflineAudioContext, options, processorConstructor, exposeCurrentFrameAndCurrentTime);
        }

        const processedBuffer = await processedBufferPromise;
        const audioBufferSourceNode = createNativeAudioBufferSourceNode(nativeOfflineAudioContext, {
          buffer: null,
          channelCount: 2,
          channelCountMode: 'max',
          channelInterpretation: 'speakers',
          loop: false,
          loopEnd: 0,
          loopStart: 0,
          playbackRate: 1
        });
        const [outputChannelSplitterNode, outputChannelMergerNodes, outputGainNode] = nativeOutputNodes;

        if (processedBuffer !== null) {
          audioBufferSourceNode.buffer = processedBuffer;
          audioBufferSourceNode.start(0);
        }

        audioBufferSourceNode.connect(outputChannelSplitterNode);

        for (let i = 0, outputChannelSplitterNodeOutput = 0; i < proxy.numberOfOutputs; i += 1) {
          const outputChannelMergerNode = outputChannelMergerNodes[i];

          for (let j = 0; j < options.outputChannelCount[i]; j += 1) {
            outputChannelSplitterNode.connect(outputChannelMergerNode, outputChannelSplitterNodeOutput + j, j);
          }

          outputChannelSplitterNodeOutput += options.outputChannelCount[i];
        }

        return outputGainNode;
      }

      if (!nativeAudioWorkletNodeIsOwnedByContext) {
        for (const [nm, audioParam] of proxy.parameters.entries()) {
          await renderAutomation(nativeOfflineAudioContext, audioParam, // @todo The definition that TypeScript uses of the AudioParamMap is lacking many methods.
          nativeAudioWorkletNode.parameters.get(nm), trace);
        }
      } else {
        for (const [nm, audioParam] of proxy.parameters.entries()) {
          await connectAudioParam(nativeOfflineAudioContext, audioParam, // @todo The definition that TypeScript uses of the AudioParamMap is lacking many methods.
          nativeAudioWorkletNode.parameters.get(nm), trace);
        }
      }

      await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeAudioWorkletNode, trace);
      return nativeAudioWorkletNode;
    };

    return {
      render(proxy, nativeOfflineAudioContext, trace) {
        deleteUnrenderedAudioWorkletNode(nativeOfflineAudioContext, proxy);
        const renderedNativeAudioWorkletNodeOrGainNode = renderedNativeAudioNodes.get(nativeOfflineAudioContext);

        if (renderedNativeAudioWorkletNodeOrGainNode !== undefined) {
          return Promise.resolve(renderedNativeAudioWorkletNodeOrGainNode);
        }

        return createAudioNode(proxy, nativeOfflineAudioContext, trace);
      }

    };
  };
};

exports.createAudioWorkletNodeRendererFactory = createAudioWorkletNodeRendererFactory;
},{"../helpers/copy-from-channel":"../node_modules/standardized-audio-context/build/es2019/helpers/copy-from-channel.js","../helpers/copy-to-channel":"../node_modules/standardized-audio-context/build/es2019/helpers/copy-to-channel.js","../helpers/create-nested-arrays":"../node_modules/standardized-audio-context/build/es2019/helpers/create-nested-arrays.js","../helpers/get-audio-node-connections":"../node_modules/standardized-audio-context/build/es2019/helpers/get-audio-node-connections.js","../helpers/get-audio-worklet-processor":"../node_modules/standardized-audio-context/build/es2019/helpers/get-audio-worklet-processor.js","../helpers/is-owned-by-context":"../node_modules/standardized-audio-context/build/es2019/helpers/is-owned-by-context.js"}],"../node_modules/standardized-audio-context/build/es2019/factories/base-audio-context-constructor.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createBaseAudioContextConstructor = void 0;

const createBaseAudioContextConstructor = (addAudioWorkletModule, analyserNodeConstructor, audioBufferConstructor, audioBufferSourceNodeConstructor, biquadFilterNodeConstructor, channelMergerNodeConstructor, channelSplitterNodeConstructor, constantSourceNodeConstructor, convolverNodeConstructor, decodeAudioData, delayNodeConstructor, dynamicsCompressorNodeConstructor, gainNodeConstructor, iIRFilterNodeConstructor, minimalBaseAudioContextConstructor, oscillatorNodeConstructor, pannerNodeConstructor, periodicWaveConstructor, stereoPannerNodeConstructor, waveShaperNodeConstructor) => {
  return class BaseAudioContext extends minimalBaseAudioContextConstructor {
    constructor(_nativeContext, numberOfChannels) {
      super(_nativeContext, numberOfChannels);
      this._nativeContext = _nativeContext;
      this._audioWorklet = addAudioWorkletModule === undefined ? undefined : {
        addModule: (moduleURL, options) => {
          return addAudioWorkletModule(this, moduleURL, options);
        }
      };
    }

    get audioWorklet() {
      return this._audioWorklet;
    }

    createAnalyser() {
      return new analyserNodeConstructor(this);
    }

    createBiquadFilter() {
      return new biquadFilterNodeConstructor(this);
    }

    createBuffer(numberOfChannels, length, sampleRate) {
      return new audioBufferConstructor({
        length,
        numberOfChannels,
        sampleRate
      });
    }

    createBufferSource() {
      return new audioBufferSourceNodeConstructor(this);
    }

    createChannelMerger(numberOfInputs = 6) {
      return new channelMergerNodeConstructor(this, {
        numberOfInputs
      });
    }

    createChannelSplitter(numberOfOutputs = 6) {
      return new channelSplitterNodeConstructor(this, {
        numberOfOutputs
      });
    }

    createConstantSource() {
      return new constantSourceNodeConstructor(this);
    }

    createConvolver() {
      return new convolverNodeConstructor(this);
    }

    createDelay(maxDelayTime = 1) {
      return new delayNodeConstructor(this, {
        maxDelayTime
      });
    }

    createDynamicsCompressor() {
      return new dynamicsCompressorNodeConstructor(this);
    }

    createGain() {
      return new gainNodeConstructor(this);
    }

    createIIRFilter(feedforward, feedback) {
      return new iIRFilterNodeConstructor(this, {
        feedback,
        feedforward
      });
    }

    createOscillator() {
      return new oscillatorNodeConstructor(this);
    }

    createPanner() {
      return new pannerNodeConstructor(this);
    }

    createPeriodicWave(real, imag, constraints = {
      disableNormalization: false
    }) {
      return new periodicWaveConstructor(this, { ...constraints,
        imag,
        real
      });
    }

    createStereoPanner() {
      return new stereoPannerNodeConstructor(this);
    }

    createWaveShaper() {
      return new waveShaperNodeConstructor(this);
    }

    decodeAudioData(audioData, successCallback, errorCallback) {
      return decodeAudioData(this._nativeContext, audioData).then(audioBuffer => {
        if (typeof successCallback === 'function') {
          successCallback(audioBuffer);
        }

        return audioBuffer;
      }).catch(err => {
        if (typeof errorCallback === 'function') {
          errorCallback(err);
        }

        throw err;
      });
    }

  };
};

exports.createBaseAudioContextConstructor = createBaseAudioContextConstructor;
},{}],"../node_modules/standardized-audio-context/build/es2019/factories/biquad-filter-node-constructor.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createBiquadFilterNodeConstructor = void 0;

var _constants = require("../constants");

const DEFAULT_OPTIONS = {
  Q: 1,
  channelCount: 2,
  channelCountMode: 'max',
  channelInterpretation: 'speakers',
  detune: 0,
  frequency: 350,
  gain: 0,
  type: 'lowpass'
};

const createBiquadFilterNodeConstructor = (audioNodeConstructor, createAudioParam, createBiquadFilterNodeRenderer, createInvalidAccessError, createNativeBiquadFilterNode, getNativeContext, isNativeOfflineAudioContext) => {
  return class BiquadFilterNode extends audioNodeConstructor {
    constructor(context, options = DEFAULT_OPTIONS) {
      const nativeContext = getNativeContext(context);
      const mergedOptions = { ...DEFAULT_OPTIONS,
        ...options
      };
      const nativeBiquadFilterNode = createNativeBiquadFilterNode(nativeContext, mergedOptions);
      const isOffline = isNativeOfflineAudioContext(nativeContext);
      const biquadFilterNodeRenderer = isOffline ? createBiquadFilterNodeRenderer() : null;
      super(context, false, nativeBiquadFilterNode, biquadFilterNodeRenderer); // Bug #80: Edge & Safari do not export the correct values for maxValue and minValue.

      this._Q = createAudioParam(this, isOffline, nativeBiquadFilterNode.Q, _constants.MOST_POSITIVE_SINGLE_FLOAT, _constants.MOST_NEGATIVE_SINGLE_FLOAT); // Bug #78: Firefox & Safari do not export the correct values for maxValue and minValue.

      this._detune = createAudioParam(this, isOffline, nativeBiquadFilterNode.detune, 1200 * Math.log2(_constants.MOST_POSITIVE_SINGLE_FLOAT), -1200 * Math.log2(_constants.MOST_POSITIVE_SINGLE_FLOAT));
      /*
       * Bug #77: Edge does not export the correct values for maxValue and minValue. Firefox & Safari do not export the correct value
       * for minValue.
       */

      this._frequency = createAudioParam(this, isOffline, nativeBiquadFilterNode.frequency, context.sampleRate / 2, 0); // Bug #79: Firefox & Safari do not export the correct values for maxValue and minValue.

      this._gain = createAudioParam(this, isOffline, nativeBiquadFilterNode.gain, 40 * Math.log10(_constants.MOST_POSITIVE_SINGLE_FLOAT), _constants.MOST_NEGATIVE_SINGLE_FLOAT);
      this._nativeBiquadFilterNode = nativeBiquadFilterNode;
    }

    get detune() {
      return this._detune;
    }

    get frequency() {
      return this._frequency;
    }

    get gain() {
      return this._gain;
    }

    get Q() {
      return this._Q;
    }

    get type() {
      return this._nativeBiquadFilterNode.type;
    }

    set type(value) {
      this._nativeBiquadFilterNode.type = value;
    }

    getFrequencyResponse(frequencyHz, magResponse, phaseResponse) {
      this._nativeBiquadFilterNode.getFrequencyResponse(frequencyHz, magResponse, phaseResponse); // Bug #68: Only Chrome, Firefox & Opera do throw an error if the parameters differ in their length.


      if (frequencyHz.length !== magResponse.length || magResponse.length !== phaseResponse.length) {
        throw createInvalidAccessError();
      }
    }

  };
};

exports.createBiquadFilterNodeConstructor = createBiquadFilterNodeConstructor;
},{"../constants":"../node_modules/standardized-audio-context/build/es2019/constants.js"}],"../node_modules/standardized-audio-context/build/es2019/factories/biquad-filter-node-renderer-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createBiquadFilterNodeRendererFactory = void 0;

var _isOwnedByContext = require("../helpers/is-owned-by-context");

const createBiquadFilterNodeRendererFactory = (connectAudioParam, createNativeBiquadFilterNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode) => {
  return () => {
    const renderedNativeBiquadFilterNodes = new WeakMap();

    const createBiquadFilterNode = async (proxy, nativeOfflineAudioContext, trace) => {
      let nativeBiquadFilterNode = getNativeAudioNode(proxy);
      /*
       * If the initially used nativeBiquadFilterNode was not constructed on the same OfflineAudioContext it needs to be created
       * again.
       */

      const nativeBiquadFilterNodeIsOwnedByContext = (0, _isOwnedByContext.isOwnedByContext)(nativeBiquadFilterNode, nativeOfflineAudioContext);

      if (!nativeBiquadFilterNodeIsOwnedByContext) {
        const options = {
          Q: nativeBiquadFilterNode.Q.value,
          channelCount: nativeBiquadFilterNode.channelCount,
          channelCountMode: nativeBiquadFilterNode.channelCountMode,
          channelInterpretation: nativeBiquadFilterNode.channelInterpretation,
          detune: nativeBiquadFilterNode.detune.value,
          frequency: nativeBiquadFilterNode.frequency.value,
          gain: nativeBiquadFilterNode.gain.value,
          type: nativeBiquadFilterNode.type
        };
        nativeBiquadFilterNode = createNativeBiquadFilterNode(nativeOfflineAudioContext, options);
      }

      renderedNativeBiquadFilterNodes.set(nativeOfflineAudioContext, nativeBiquadFilterNode);

      if (!nativeBiquadFilterNodeIsOwnedByContext) {
        await renderAutomation(nativeOfflineAudioContext, proxy.Q, nativeBiquadFilterNode.Q, trace);
        await renderAutomation(nativeOfflineAudioContext, proxy.detune, nativeBiquadFilterNode.detune, trace);
        await renderAutomation(nativeOfflineAudioContext, proxy.frequency, nativeBiquadFilterNode.frequency, trace);
        await renderAutomation(nativeOfflineAudioContext, proxy.gain, nativeBiquadFilterNode.gain, trace);
      } else {
        await connectAudioParam(nativeOfflineAudioContext, proxy.Q, nativeBiquadFilterNode.Q, trace);
        await connectAudioParam(nativeOfflineAudioContext, proxy.detune, nativeBiquadFilterNode.detune, trace);
        await connectAudioParam(nativeOfflineAudioContext, proxy.frequency, nativeBiquadFilterNode.frequency, trace);
        await connectAudioParam(nativeOfflineAudioContext, proxy.gain, nativeBiquadFilterNode.gain, trace);
      }

      await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeBiquadFilterNode, trace);
      return nativeBiquadFilterNode;
    };

    return {
      render(proxy, nativeOfflineAudioContext, trace) {
        const renderedNativeBiquadFilterNode = renderedNativeBiquadFilterNodes.get(nativeOfflineAudioContext);

        if (renderedNativeBiquadFilterNode !== undefined) {
          return Promise.resolve(renderedNativeBiquadFilterNode);
        }

        return createBiquadFilterNode(proxy, nativeOfflineAudioContext, trace);
      }

    };
  };
};

exports.createBiquadFilterNodeRendererFactory = createBiquadFilterNodeRendererFactory;
},{"../helpers/is-owned-by-context":"../node_modules/standardized-audio-context/build/es2019/helpers/is-owned-by-context.js"}],"../node_modules/standardized-audio-context/build/es2019/factories/cache-test-result.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createCacheTestResult = void 0;

const createCacheTestResult = (ongoingTests, testResults) => {
  return (tester, test) => {
    const cachedTestResult = testResults.get(tester);

    if (cachedTestResult !== undefined) {
      return cachedTestResult;
    }

    const ongoingTest = ongoingTests.get(tester);

    if (ongoingTest !== undefined) {
      return ongoingTest;
    }

    try {
      const synchronousTestResult = test();

      if (synchronousTestResult instanceof Promise) {
        ongoingTests.set(tester, synchronousTestResult);
        return synchronousTestResult.catch(() => false).then(finalTestResult => {
          ongoingTests.delete(tester);
          testResults.set(tester, finalTestResult);
          return finalTestResult;
        });
      }

      testResults.set(tester, synchronousTestResult);
      return synchronousTestResult;
    } catch {
      testResults.set(tester, false);
      return false;
    }
  };
};

exports.createCacheTestResult = createCacheTestResult;
},{}],"../node_modules/standardized-audio-context/build/es2019/factories/channel-merger-node-constructor.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createChannelMergerNodeConstructor = void 0;
const DEFAULT_OPTIONS = {
  channelCount: 1,
  channelCountMode: 'explicit',
  channelInterpretation: 'speakers',
  numberOfInputs: 6
};

const createChannelMergerNodeConstructor = (audioNodeConstructor, createChannelMergerNodeRenderer, createNativeChannelMergerNode, getNativeContext, isNativeOfflineAudioContext) => {
  return class ChannelMergerNode extends audioNodeConstructor {
    constructor(context, options = DEFAULT_OPTIONS) {
      const nativeContext = getNativeContext(context);
      const mergedOptions = { ...DEFAULT_OPTIONS,
        ...options
      };
      const nativeChannelMergerNode = createNativeChannelMergerNode(nativeContext, mergedOptions);
      const channelMergerNodeRenderer = isNativeOfflineAudioContext(nativeContext) ? createChannelMergerNodeRenderer() : null;
      super(context, false, nativeChannelMergerNode, channelMergerNodeRenderer);
    }

  };
};

exports.createChannelMergerNodeConstructor = createChannelMergerNodeConstructor;
},{}],"../node_modules/standardized-audio-context/build/es2019/factories/channel-merger-node-renderer-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createChannelMergerNodeRendererFactory = void 0;

var _isOwnedByContext = require("../helpers/is-owned-by-context");

const createChannelMergerNodeRendererFactory = (createNativeChannelMergerNode, getNativeAudioNode, renderInputsOfAudioNode) => {
  return () => {
    const renderedNativeAudioNodes = new WeakMap();

    const createAudioNode = async (proxy, nativeOfflineAudioContext, trace) => {
      let nativeAudioNode = getNativeAudioNode(proxy); // If the initially used nativeAudioNode was not constructed on the same OfflineAudioContext it needs to be created again.

      const nativeAudioNodeIsOwnedByContext = (0, _isOwnedByContext.isOwnedByContext)(nativeAudioNode, nativeOfflineAudioContext);

      if (!nativeAudioNodeIsOwnedByContext) {
        const options = {
          channelCount: nativeAudioNode.channelCount,
          channelCountMode: nativeAudioNode.channelCountMode,
          channelInterpretation: nativeAudioNode.channelInterpretation,
          numberOfInputs: nativeAudioNode.numberOfInputs
        };
        nativeAudioNode = createNativeChannelMergerNode(nativeOfflineAudioContext, options);
      }

      renderedNativeAudioNodes.set(nativeOfflineAudioContext, nativeAudioNode);
      await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeAudioNode, trace);
      return nativeAudioNode;
    };

    return {
      render(proxy, nativeOfflineAudioContext, trace) {
        const renderedNativeAudioNode = renderedNativeAudioNodes.get(nativeOfflineAudioContext);

        if (renderedNativeAudioNode !== undefined) {
          return Promise.resolve(renderedNativeAudioNode);
        }

        return createAudioNode(proxy, nativeOfflineAudioContext, trace);
      }

    };
  };
};

exports.createChannelMergerNodeRendererFactory = createChannelMergerNodeRendererFactory;
},{"../helpers/is-owned-by-context":"../node_modules/standardized-audio-context/build/es2019/helpers/is-owned-by-context.js"}],"../node_modules/standardized-audio-context/build/es2019/factories/channel-splitter-node-constructor.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createChannelSplitterNodeConstructor = void 0;
const DEFAULT_OPTIONS = {
  channelCount: 6,
  channelCountMode: 'explicit',
  channelInterpretation: 'discrete',
  numberOfOutputs: 6
};

const sanitizedOptions = options => {
  return { ...options,
    channelCount: options.numberOfOutputs
  };
};

const createChannelSplitterNodeConstructor = (audioNodeConstructor, createChannelSplitterNodeRenderer, createNativeChannelSplitterNode, getNativeContext, isNativeOfflineAudioContext) => {
  return class ChannelSplitterNode extends audioNodeConstructor {
    constructor(context, options = DEFAULT_OPTIONS) {
      const nativeContext = getNativeContext(context);
      const mergedOptions = sanitizedOptions({ ...DEFAULT_OPTIONS,
        ...options
      });
      const nativeChannelSplitterNode = createNativeChannelSplitterNode(nativeContext, mergedOptions);
      const channelSplitterNodeRenderer = isNativeOfflineAudioContext(nativeContext) ? createChannelSplitterNodeRenderer() : null;
      super(context, false, nativeChannelSplitterNode, channelSplitterNodeRenderer);
    }

  };
};

exports.createChannelSplitterNodeConstructor = createChannelSplitterNodeConstructor;
},{}],"../node_modules/standardized-audio-context/build/es2019/factories/channel-splitter-node-renderer-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createChannelSplitterNodeRendererFactory = void 0;

var _isOwnedByContext = require("../helpers/is-owned-by-context");

const createChannelSplitterNodeRendererFactory = (createNativeChannelSplitterNode, getNativeAudioNode, renderInputsOfAudioNode) => {
  return () => {
    const renderedNativeAudioNodes = new WeakMap();

    const createAudioNode = async (proxy, nativeOfflineAudioContext, trace) => {
      let nativeAudioNode = getNativeAudioNode(proxy); // If the initially used nativeAudioNode was not constructed on the same OfflineAudioContext it needs to be created again.

      const nativeAudioNodeIsOwnedByContext = (0, _isOwnedByContext.isOwnedByContext)(nativeAudioNode, nativeOfflineAudioContext);

      if (!nativeAudioNodeIsOwnedByContext) {
        const options = {
          channelCount: nativeAudioNode.channelCount,
          channelCountMode: nativeAudioNode.channelCountMode,
          channelInterpretation: nativeAudioNode.channelInterpretation,
          numberOfOutputs: nativeAudioNode.numberOfOutputs
        };
        nativeAudioNode = createNativeChannelSplitterNode(nativeOfflineAudioContext, options);
      }

      renderedNativeAudioNodes.set(nativeOfflineAudioContext, nativeAudioNode);
      await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeAudioNode, trace);
      return nativeAudioNode;
    };

    return {
      render(proxy, nativeOfflineAudioContext, trace) {
        const renderedNativeAudioNode = renderedNativeAudioNodes.get(nativeOfflineAudioContext);

        if (renderedNativeAudioNode !== undefined) {
          return Promise.resolve(renderedNativeAudioNode);
        }

        return createAudioNode(proxy, nativeOfflineAudioContext, trace);
      }

    };
  };
};

exports.createChannelSplitterNodeRendererFactory = createChannelSplitterNodeRendererFactory;
},{"../helpers/is-owned-by-context":"../node_modules/standardized-audio-context/build/es2019/helpers/is-owned-by-context.js"}],"../node_modules/standardized-audio-context/build/es2019/factories/connect-audio-param.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createConnectAudioParam = void 0;

const createConnectAudioParam = renderInputsOfAudioParam => {
  return (nativeOfflineAudioContext, audioParam, nativeAudioParam, trace) => {
    return renderInputsOfAudioParam(audioParam, nativeOfflineAudioContext, nativeAudioParam, trace);
  };
};

exports.createConnectAudioParam = createConnectAudioParam;
},{}],"../node_modules/standardized-audio-context/build/es2019/factories/connect-multiple-outputs.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createConnectMultipleOutputs = void 0;

var _nativeAudioNode = require("../guards/native-audio-node");

const createConnectMultipleOutputs = createIndexSizeError => {
  return (outputAudioNodes, destination, output = 0, input = 0) => {
    const outputAudioNode = outputAudioNodes[output];

    if (outputAudioNode === undefined) {
      throw createIndexSizeError();
    }

    if ((0, _nativeAudioNode.isNativeAudioNode)(destination)) {
      return outputAudioNode.connect(destination, 0, input);
    }

    return outputAudioNode.connect(destination, 0);
  };
};

exports.createConnectMultipleOutputs = createConnectMultipleOutputs;
},{"../guards/native-audio-node":"../node_modules/standardized-audio-context/build/es2019/guards/native-audio-node.js"}],"../node_modules/standardized-audio-context/build/es2019/factories/connected-native-audio-buffer-source-node-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createConnectedNativeAudioBufferSourceNodeFactory = void 0;

const createConnectedNativeAudioBufferSourceNodeFactory = createNativeAudioBufferSourceNode => {
  return (nativeContext, nativeAudioNode) => {
    const nativeAudioBufferSourceNode = createNativeAudioBufferSourceNode(nativeContext, {
      buffer: null,
      channelCount: 2,
      channelCountMode: 'max',
      channelInterpretation: 'speakers',
      loop: false,
      loopEnd: 0,
      loopStart: 0,
      playbackRate: 1
    });
    const nativeAudioBuffer = nativeContext.createBuffer(1, 2, nativeContext.sampleRate);
    nativeAudioBufferSourceNode.buffer = nativeAudioBuffer;
    nativeAudioBufferSourceNode.loop = true;
    nativeAudioBufferSourceNode.connect(nativeAudioNode);
    nativeAudioBufferSourceNode.start();
    return () => {
      nativeAudioBufferSourceNode.stop();
      nativeAudioBufferSourceNode.disconnect(nativeAudioNode);
    };
  };
};

exports.createConnectedNativeAudioBufferSourceNodeFactory = createConnectedNativeAudioBufferSourceNodeFactory;
},{}],"../node_modules/standardized-audio-context/build/es2019/factories/constant-source-node-constructor.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createConstantSourceNodeConstructor = void 0;

var _constants = require("../constants");

var _setInternalStateToActive = require("../helpers/set-internal-state-to-active");

var _setInternalStateToPassive = require("../helpers/set-internal-state-to-passive");

const DEFAULT_OPTIONS = {
  channelCount: 2,
  channelCountMode: 'max',
  channelInterpretation: 'speakers',
  offset: 1
};

const createConstantSourceNodeConstructor = (audioNodeConstructor, createAudioParam, createConstantSourceNodeRendererFactory, createNativeConstantSourceNode, getNativeContext, isNativeOfflineAudioContext, wrapEventListener) => {
  return class ConstantSourceNode extends audioNodeConstructor {
    constructor(context, options = DEFAULT_OPTIONS) {
      const nativeContext = getNativeContext(context);
      const mergedOptions = { ...DEFAULT_OPTIONS,
        ...options
      };
      const nativeConstantSourceNode = createNativeConstantSourceNode(nativeContext, mergedOptions);
      const isOffline = isNativeOfflineAudioContext(nativeContext);
      const constantSourceNodeRenderer = isOffline ? createConstantSourceNodeRendererFactory() : null;
      super(context, false, nativeConstantSourceNode, constantSourceNodeRenderer);
      this._constantSourceNodeRenderer = constantSourceNodeRenderer;
      this._nativeConstantSourceNode = nativeConstantSourceNode;
      /*
       * Bug #62 & #74: Edge & Safari do not support ConstantSourceNodes and do not export the correct values for maxValue and
       * minValue for GainNodes.
       */

      this._offset = createAudioParam(this, isOffline, nativeConstantSourceNode.offset, _constants.MOST_POSITIVE_SINGLE_FLOAT, _constants.MOST_NEGATIVE_SINGLE_FLOAT);
      this._onended = null;
    }

    get offset() {
      return this._offset;
    }

    get onended() {
      return this._onended;
    }

    set onended(value) {
      const wrappedListener = typeof value === 'function' ? wrapEventListener(this, value) : null;
      this._nativeConstantSourceNode.onended = wrappedListener;
      const nativeOnEnded = this._nativeConstantSourceNode.onended;
      this._onended = nativeOnEnded !== null && nativeOnEnded === wrappedListener ? value : nativeOnEnded;
    }

    start(when = 0) {
      this._nativeConstantSourceNode.start(when);

      if (this._constantSourceNodeRenderer !== null) {
        this._constantSourceNodeRenderer.start = when;
      } else {
        (0, _setInternalStateToActive.setInternalStateToActive)(this);

        const resetInternalStateToPassive = () => {
          this._nativeConstantSourceNode.removeEventListener('ended', resetInternalStateToPassive); // @todo Determine a meaningful delay instead of just using one second.


          setTimeout(() => (0, _setInternalStateToPassive.setInternalStateToPassive)(this), 1000);
        };

        this._nativeConstantSourceNode.addEventListener('ended', resetInternalStateToPassive);
      }
    }

    stop(when = 0) {
      this._nativeConstantSourceNode.stop(when);

      if (this._constantSourceNodeRenderer !== null) {
        this._constantSourceNodeRenderer.stop = when;
      }
    }

  };
};

exports.createConstantSourceNodeConstructor = createConstantSourceNodeConstructor;
},{"../constants":"../node_modules/standardized-audio-context/build/es2019/constants.js","../helpers/set-internal-state-to-active":"../node_modules/standardized-audio-context/build/es2019/helpers/set-internal-state-to-active.js","../helpers/set-internal-state-to-passive":"../node_modules/standardized-audio-context/build/es2019/helpers/set-internal-state-to-passive.js"}],"../node_modules/standardized-audio-context/build/es2019/factories/constant-source-node-renderer-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createConstantSourceNodeRendererFactory = void 0;

var _isOwnedByContext = require("../helpers/is-owned-by-context");

const createConstantSourceNodeRendererFactory = (connectAudioParam, createNativeConstantSourceNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode) => {
  return () => {
    const renderedNativeConstantSourceNodes = new WeakMap();
    let start = null;
    let stop = null;

    const createConstantSourceNode = async (proxy, nativeOfflineAudioContext, trace) => {
      let nativeConstantSourceNode = getNativeAudioNode(proxy);
      /*
       * If the initially used nativeConstantSourceNode was not constructed on the same OfflineAudioContext it needs to be created
       * again.
       */

      const nativeConstantSourceNodeIsOwnedByContext = (0, _isOwnedByContext.isOwnedByContext)(nativeConstantSourceNode, nativeOfflineAudioContext);

      if (!nativeConstantSourceNodeIsOwnedByContext) {
        const options = {
          channelCount: nativeConstantSourceNode.channelCount,
          channelCountMode: nativeConstantSourceNode.channelCountMode,
          channelInterpretation: nativeConstantSourceNode.channelInterpretation,
          offset: nativeConstantSourceNode.offset.value
        };
        nativeConstantSourceNode = createNativeConstantSourceNode(nativeOfflineAudioContext, options);

        if (start !== null) {
          nativeConstantSourceNode.start(start);
        }

        if (stop !== null) {
          nativeConstantSourceNode.stop(stop);
        }
      }

      renderedNativeConstantSourceNodes.set(nativeOfflineAudioContext, nativeConstantSourceNode);

      if (!nativeConstantSourceNodeIsOwnedByContext) {
        await renderAutomation(nativeOfflineAudioContext, proxy.offset, nativeConstantSourceNode.offset, trace);
      } else {
        await connectAudioParam(nativeOfflineAudioContext, proxy.offset, nativeConstantSourceNode.offset, trace);
      }

      await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeConstantSourceNode, trace);
      return nativeConstantSourceNode;
    };

    return {
      set start(value) {
        start = value;
      },

      set stop(value) {
        stop = value;
      },

      render(proxy, nativeOfflineAudioContext, trace) {
        const renderedNativeConstantSourceNode = renderedNativeConstantSourceNodes.get(nativeOfflineAudioContext);

        if (renderedNativeConstantSourceNode !== undefined) {
          return Promise.resolve(renderedNativeConstantSourceNode);
        }

        return createConstantSourceNode(proxy, nativeOfflineAudioContext, trace);
      }

    };
  };
};

exports.createConstantSourceNodeRendererFactory = createConstantSourceNodeRendererFactory;
},{"../helpers/is-owned-by-context":"../node_modules/standardized-audio-context/build/es2019/helpers/is-owned-by-context.js"}],"../node_modules/standardized-audio-context/build/es2019/factories/convert-number-to-unsigned-long.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createConvertNumberToUnsignedLong = void 0;

const createConvertNumberToUnsignedLong = unit32Array => {
  return value => {
    unit32Array[0] = value;
    return unit32Array[0];
  };
};

exports.createConvertNumberToUnsignedLong = createConvertNumberToUnsignedLong;
},{}],"../node_modules/standardized-audio-context/build/es2019/factories/convolver-node-constructor.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createConvolverNodeConstructor = void 0;
const DEFAULT_OPTIONS = {
  buffer: null,
  channelCount: 2,
  channelCountMode: 'clamped-max',
  channelInterpretation: 'speakers',
  disableNormalization: false
};

const createConvolverNodeConstructor = (audioNodeConstructor, createConvolverNodeRenderer, createNativeConvolverNode, getNativeContext, isNativeOfflineAudioContext) => {
  return class ConvolverNode extends audioNodeConstructor {
    constructor(context, options = DEFAULT_OPTIONS) {
      const nativeContext = getNativeContext(context);
      const mergedOptions = { ...DEFAULT_OPTIONS,
        ...options
      };
      const nativeConvolverNode = createNativeConvolverNode(nativeContext, mergedOptions);
      const isOffline = isNativeOfflineAudioContext(nativeContext);
      const convolverNodeRenderer = isOffline ? createConvolverNodeRenderer() : null;
      super(context, false, nativeConvolverNode, convolverNodeRenderer);
      this._isBufferNullified = false;
      this._nativeConvolverNode = nativeConvolverNode;
    }

    get buffer() {
      if (this._isBufferNullified) {
        return null;
      }

      return this._nativeConvolverNode.buffer;
    }

    set buffer(value) {
      this._nativeConvolverNode.buffer = value; // Bug #115: Safari does not allow to set the buffer to null.

      if (value === null && this._nativeConvolverNode.buffer !== null) {
        const nativeContext = this._nativeConvolverNode.context;
        this._nativeConvolverNode.buffer = nativeContext.createBuffer(1, 1, nativeContext.sampleRate);
        this._isBufferNullified = true;
      } else {
        this._isBufferNullified = false;
      }
    }

    get normalize() {
      return this._nativeConvolverNode.normalize;
    }

    set normalize(value) {
      this._nativeConvolverNode.normalize = value;
    }

  };
};

exports.createConvolverNodeConstructor = createConvolverNodeConstructor;
},{}],"../node_modules/standardized-audio-context/build/es2019/factories/convolver-node-renderer-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createConvolverNodeRendererFactory = void 0;

var _nativeAudioNodeFaker = require("../guards/native-audio-node-faker");

var _isOwnedByContext = require("../helpers/is-owned-by-context");

const createConvolverNodeRendererFactory = (createNativeConvolverNode, getNativeAudioNode, renderInputsOfAudioNode) => {
  return () => {
    const renderedNativeConvolverNodes = new WeakMap();

    const createConvolverNode = async (proxy, nativeOfflineAudioContext, trace) => {
      let nativeConvolverNode = getNativeAudioNode(proxy); // If the initially used nativeConvolverNode was not constructed on the same OfflineAudioContext it needs to be created again.

      const nativeConvolverNodeIsOwnedByContext = (0, _isOwnedByContext.isOwnedByContext)(nativeConvolverNode, nativeOfflineAudioContext);

      if (!nativeConvolverNodeIsOwnedByContext) {
        const options = {
          buffer: nativeConvolverNode.buffer,
          channelCount: nativeConvolverNode.channelCount,
          channelCountMode: nativeConvolverNode.channelCountMode,
          channelInterpretation: nativeConvolverNode.channelInterpretation,
          disableNormalization: !nativeConvolverNode.normalize
        };
        nativeConvolverNode = createNativeConvolverNode(nativeOfflineAudioContext, options);
      }

      renderedNativeConvolverNodes.set(nativeOfflineAudioContext, nativeConvolverNode);

      if ((0, _nativeAudioNodeFaker.isNativeAudioNodeFaker)(nativeConvolverNode)) {
        await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeConvolverNode.inputs[0], trace);
      } else {
        await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeConvolverNode, trace);
      }

      return nativeConvolverNode;
    };

    return {
      render(proxy, nativeOfflineAudioContext, trace) {
        const renderedNativeConvolverNode = renderedNativeConvolverNodes.get(nativeOfflineAudioContext);

        if (renderedNativeConvolverNode !== undefined) {
          return Promise.resolve(renderedNativeConvolverNode);
        }

        return createConvolverNode(proxy, nativeOfflineAudioContext, trace);
      }

    };
  };
};

exports.createConvolverNodeRendererFactory = createConvolverNodeRendererFactory;
},{"../guards/native-audio-node-faker":"../node_modules/standardized-audio-context/build/es2019/guards/native-audio-node-faker.js","../helpers/is-owned-by-context":"../node_modules/standardized-audio-context/build/es2019/helpers/is-owned-by-context.js"}],"../node_modules/standardized-audio-context/build/es2019/factories/create-native-offline-audio-context.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createCreateNativeOfflineAudioContext = void 0;

const createCreateNativeOfflineAudioContext = (createNotSupportedError, nativeOfflineAudioContextConstructor) => {
  return (numberOfChannels, length, sampleRate) => {
    if (nativeOfflineAudioContextConstructor === null) {
      throw new Error('Missing the native OfflineAudioContext constructor.');
    }

    try {
      return new nativeOfflineAudioContextConstructor(numberOfChannels, length, sampleRate);
    } catch (err) {
      // Bug #143, #144 & #146: Safari throws a SyntaxError when numberOfChannels, length or sampleRate are invalid.
      // Bug #143: Edge throws a SyntaxError when numberOfChannels or length are invalid.
      // Bug #145: Edge throws an IndexSizeError when sampleRate is zero.
      if (err.name === 'IndexSizeError' || err.name === 'SyntaxError') {
        throw createNotSupportedError();
      }

      throw err;
    }
  };
};

exports.createCreateNativeOfflineAudioContext = createCreateNativeOfflineAudioContext;
},{}],"../node_modules/standardized-audio-context/build/es2019/factories/data-clone-error.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createDataCloneError = void 0;

const createDataCloneError = () => {
  try {
    return new DOMException('', 'DataCloneError');
  } catch (err) {
    // Bug #122: Edge is the only browser that does not yet allow to construct a DOMException.
    err.code = 25;
    err.name = 'DataCloneError';
    return err;
  }
};

exports.createDataCloneError = createDataCloneError;
},{}],"../node_modules/standardized-audio-context/build/es2019/helpers/detach-array-buffer.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.detachArrayBuffer = void 0;

const detachArrayBuffer = arrayBuffer => {
  const {
    port1
  } = new MessageChannel();
  port1.postMessage(arrayBuffer, [arrayBuffer]);
};

exports.detachArrayBuffer = detachArrayBuffer;
},{}],"../node_modules/standardized-audio-context/build/es2019/factories/decode-audio-data.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createDecodeAudioData = void 0;

var _detachArrayBuffer = require("../helpers/detach-array-buffer");

var _wrapAudioBufferGetChannelDataMethod = require("../helpers/wrap-audio-buffer-get-channel-data-method");

const createDecodeAudioData = (audioBufferStore, cacheTestResult, createDataCloneError, createEncodingError, detachedArrayBuffers, getNativeContext, isNativeContext, isNativeOfflineAudioContext, nativeOfflineAudioContextConstructor, testAudioBufferCopyChannelMethodsOutOfBoundsSupport, testPromiseSupport, wrapAudioBufferCopyChannelMethods, wrapAudioBufferCopyChannelMethodsOutOfBounds) => {
  return (anyContext, audioData) => {
    const nativeContext = isNativeContext(anyContext) ? anyContext : getNativeContext(anyContext); // Bug #43: Only Chrome and Opera do throw a DataCloneError.

    if (detachedArrayBuffers.has(audioData)) {
      const err = createDataCloneError();
      return Promise.reject(err);
    } // The audioData parameter maybe of a type which can't be added to a WeakSet.


    try {
      detachedArrayBuffers.add(audioData);
    } catch {// Ignore errors.
    } // Bug #21: Safari does not support promises yet.


    if (cacheTestResult(testPromiseSupport, () => testPromiseSupport(nativeContext))) {
      // Bug #101: Edge does not decode something on a closed OfflineAudioContext.
      const nativeContextOrBackupNativeContext = nativeContext.state === 'closed' && nativeOfflineAudioContextConstructor !== null && isNativeOfflineAudioContext(nativeContext) ? new nativeOfflineAudioContextConstructor(1, 1, nativeContext.sampleRate) : nativeContext;
      const promise = nativeContextOrBackupNativeContext.decodeAudioData(audioData).catch(err => {
        // Bug #27: Edge is rejecting invalid arrayBuffers with a DOMException.
        if (err instanceof DOMException && err.name === 'NotSupportedError') {
          throw new TypeError();
        }

        throw err;
      });
      return promise.then(audioBuffer => {
        // Bug #157: Only Chrome & Opera do allow the bufferOffset to be out-of-bounds.
        if (!cacheTestResult(testAudioBufferCopyChannelMethodsOutOfBoundsSupport, () => testAudioBufferCopyChannelMethodsOutOfBoundsSupport(audioBuffer))) {
          wrapAudioBufferCopyChannelMethodsOutOfBounds(audioBuffer);
        }

        audioBufferStore.add(audioBuffer);
        return audioBuffer;
      });
    } // Bug #21: Safari does not return a Promise yet.


    return new Promise((resolve, reject) => {
      const complete = () => {
        // Bug #133: Safari does neuter the ArrayBuffer.
        try {
          (0, _detachArrayBuffer.detachArrayBuffer)(audioData);
        } catch {// Ignore errors.
        }
      };

      const fail = err => {
        reject(err);
        complete();
      }; // Bug #26: Safari throws a synchronous error.


      try {
        // Bug #1: Safari requires a successCallback.
        nativeContext.decodeAudioData(audioData, audioBuffer => {
          // Bug #5: Safari does not support copyFromChannel() and copyToChannel().
          // Bug #100: Safari does throw a wrong error when calling getChannelData() with an out-of-bounds value.
          if (typeof audioBuffer.copyFromChannel !== 'function') {
            wrapAudioBufferCopyChannelMethods(audioBuffer);
            (0, _wrapAudioBufferGetChannelDataMethod.wrapAudioBufferGetChannelDataMethod)(audioBuffer);
          }

          audioBufferStore.add(audioBuffer);
          complete();
          resolve(audioBuffer);
        }, err => {
          // Bug #4: Safari returns null instead of an error.
          if (err === null) {
            fail(createEncodingError());
          } else {
            fail(err);
          }
        });
      } catch (err) {
        fail(err);
      }
    });
  };
};

exports.createDecodeAudioData = createDecodeAudioData;
},{"../helpers/detach-array-buffer":"../node_modules/standardized-audio-context/build/es2019/helpers/detach-array-buffer.js","../helpers/wrap-audio-buffer-get-channel-data-method":"../node_modules/standardized-audio-context/build/es2019/helpers/wrap-audio-buffer-get-channel-data-method.js"}],"../node_modules/standardized-audio-context/build/es2019/factories/decrement-cycle-counter.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createDecrementCycleCounter = void 0;

var _audioNodeOutputConnection = require("../guards/audio-node-output-connection");

const createDecrementCycleCounter = (connectNativeAudioNodeToNativeAudioNode, cycleCounters, getAudioNodeConnections, getNativeAudioNode, getNativeAudioParam, getNativeContext, isActiveAudioNode, isNativeOfflineAudioContext) => {
  return (audioNode, count) => {
    const cycleCounter = cycleCounters.get(audioNode);

    if (cycleCounter === undefined) {
      throw new Error('Missing the expected cycle count.');
    }

    const nativeContext = getNativeContext(audioNode.context);
    const isOffline = isNativeOfflineAudioContext(nativeContext);

    if (cycleCounter === count) {
      cycleCounters.delete(audioNode);

      if (!isOffline && isActiveAudioNode(audioNode)) {
        const nativeSourceAudioNode = getNativeAudioNode(audioNode);
        const {
          outputs
        } = getAudioNodeConnections(audioNode);

        for (const output of outputs) {
          if ((0, _audioNodeOutputConnection.isAudioNodeOutputConnection)(output)) {
            const nativeDestinationAudioNode = getNativeAudioNode(output[0]);
            connectNativeAudioNodeToNativeAudioNode(nativeSourceAudioNode, nativeDestinationAudioNode, output[1], output[2]);
          } else {
            const nativeDestinationAudioParam = getNativeAudioParam(output[0]);
            nativeSourceAudioNode.connect(nativeDestinationAudioParam, output[1]);
          }
        }
      }
    } else {
      cycleCounters.set(audioNode, cycleCounter - count);
    }
  };
};

exports.createDecrementCycleCounter = createDecrementCycleCounter;
},{"../guards/audio-node-output-connection":"../node_modules/standardized-audio-context/build/es2019/guards/audio-node-output-connection.js"}],"../node_modules/standardized-audio-context/build/es2019/factories/delay-node-constructor.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createDelayNodeConstructor = void 0;
const DEFAULT_OPTIONS = {
  channelCount: 2,
  channelCountMode: 'max',
  channelInterpretation: 'speakers',
  delayTime: 0,
  maxDelayTime: 1
};

const createDelayNodeConstructor = (audioNodeConstructor, createAudioParam, createDelayNodeRenderer, createNativeDelayNode, getNativeContext, isNativeOfflineAudioContext) => {
  return class DelayNode extends audioNodeConstructor {
    constructor(context, options = DEFAULT_OPTIONS) {
      const nativeContext = getNativeContext(context);
      const mergedOptions = { ...DEFAULT_OPTIONS,
        ...options
      };
      const nativeDelayNode = createNativeDelayNode(nativeContext, mergedOptions);
      const isOffline = isNativeOfflineAudioContext(nativeContext);
      const delayNodeRenderer = isOffline ? createDelayNodeRenderer(mergedOptions.maxDelayTime) : null;
      super(context, false, nativeDelayNode, delayNodeRenderer); // Bug #161: Edge does not export the correct values for maxValue and minValue.

      this._delayTime = createAudioParam(this, isOffline, nativeDelayNode.delayTime, mergedOptions.maxDelayTime, 0);
    }

    get delayTime() {
      return this._delayTime;
    }

  };
};

exports.createDelayNodeConstructor = createDelayNodeConstructor;
},{}],"../node_modules/standardized-audio-context/build/es2019/factories/delay-node-renderer-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createDelayNodeRendererFactory = void 0;

var _isOwnedByContext = require("../helpers/is-owned-by-context");

const createDelayNodeRendererFactory = (connectAudioParam, createNativeDelayNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode) => {
  return maxDelayTime => {
    const renderedNativeDelayNodes = new WeakMap();

    const createDelayNode = async (proxy, nativeOfflineAudioContext, trace) => {
      let nativeDelayNode = getNativeAudioNode(proxy); // If the initially used nativeDelayNode was not constructed on the same OfflineAudioContext it needs to be created again.

      const nativeDelayNodeIsOwnedByContext = (0, _isOwnedByContext.isOwnedByContext)(nativeDelayNode, nativeOfflineAudioContext);

      if (!nativeDelayNodeIsOwnedByContext) {
        const options = {
          channelCount: nativeDelayNode.channelCount,
          channelCountMode: nativeDelayNode.channelCountMode,
          channelInterpretation: nativeDelayNode.channelInterpretation,
          delayTime: nativeDelayNode.delayTime.value,
          maxDelayTime
        };
        nativeDelayNode = createNativeDelayNode(nativeOfflineAudioContext, options);
      }

      renderedNativeDelayNodes.set(nativeOfflineAudioContext, nativeDelayNode);

      if (!nativeDelayNodeIsOwnedByContext) {
        await renderAutomation(nativeOfflineAudioContext, proxy.delayTime, nativeDelayNode.delayTime, trace);
      } else {
        await connectAudioParam(nativeOfflineAudioContext, proxy.delayTime, nativeDelayNode.delayTime, trace);
      }

      await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeDelayNode, trace);
      return nativeDelayNode;
    };

    return {
      render(proxy, nativeOfflineAudioContext, trace) {
        const renderedNativeDelayNode = renderedNativeDelayNodes.get(nativeOfflineAudioContext);

        if (renderedNativeDelayNode !== undefined) {
          return Promise.resolve(renderedNativeDelayNode);
        }

        return createDelayNode(proxy, nativeOfflineAudioContext, trace);
      }

    };
  };
};

exports.createDelayNodeRendererFactory = createDelayNodeRendererFactory;
},{"../helpers/is-owned-by-context":"../node_modules/standardized-audio-context/build/es2019/helpers/is-owned-by-context.js"}],"../node_modules/standardized-audio-context/build/es2019/factories/delete-unrendered-audio-worklet-node.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createDeleteUnrenderedAudioWorkletNode = void 0;

const createDeleteUnrenderedAudioWorkletNode = getUnrenderedAudioWorkletNodes => {
  return (nativeContext, audioWorkletNode) => {
    getUnrenderedAudioWorkletNodes(nativeContext).delete(audioWorkletNode);
  };
};

exports.createDeleteUnrenderedAudioWorkletNode = createDeleteUnrenderedAudioWorkletNode;
},{}],"../node_modules/standardized-audio-context/build/es2019/guards/delay-node.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isDelayNode = void 0;

const isDelayNode = audioNode => {
  return 'delayTime' in audioNode;
};

exports.isDelayNode = isDelayNode;
},{}],"../node_modules/standardized-audio-context/build/es2019/factories/detect-cycles.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createDetectCycles = void 0;

var _audioNode = require("../guards/audio-node");

var _delayNode = require("../guards/delay-node");

const createDetectCycles = (audioParamAudioNodeStore, getAudioNodeConnections, getValueForKey) => {
  return function detectCycles(chain, nextLink) {
    const audioNode = (0, _audioNode.isAudioNode)(nextLink) ? nextLink : getValueForKey(audioParamAudioNodeStore, nextLink);

    if ((0, _delayNode.isDelayNode)(audioNode)) {
      return [];
    }

    if (chain[0] === audioNode) {
      return [chain];
    }

    if (chain.includes(audioNode)) {
      return [];
    }

    const {
      outputs
    } = getAudioNodeConnections(audioNode);
    return Array.from(outputs).map(outputConnection => detectCycles([...chain, audioNode], outputConnection[0])).reduce((mergedCycles, nestedCycles) => mergedCycles.concat(nestedCycles), []);
  };
};

exports.createDetectCycles = createDetectCycles;
},{"../guards/audio-node":"../node_modules/standardized-audio-context/build/es2019/guards/audio-node.js","../guards/delay-node":"../node_modules/standardized-audio-context/build/es2019/guards/delay-node.js"}],"../node_modules/standardized-audio-context/build/es2019/factories/disconnect-multiple-outputs.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createDisconnectMultipleOutputs = void 0;

var _nativeAudioNode = require("../guards/native-audio-node");

const getOutputAudioNodeAtIndex = (createIndexSizeError, outputAudioNodes, output) => {
  const outputAudioNode = outputAudioNodes[output];

  if (outputAudioNode === undefined) {
    throw createIndexSizeError();
  }

  return outputAudioNode;
};

const createDisconnectMultipleOutputs = createIndexSizeError => {
  return (outputAudioNodes, destinationOrOutput = undefined, output = undefined, input = 0) => {
    if (destinationOrOutput === undefined) {
      return outputAudioNodes.forEach(outputAudioNode => outputAudioNode.disconnect());
    }

    if (typeof destinationOrOutput === 'number') {
      return getOutputAudioNodeAtIndex(createIndexSizeError, outputAudioNodes, destinationOrOutput).disconnect();
    }

    if ((0, _nativeAudioNode.isNativeAudioNode)(destinationOrOutput)) {
      if (output === undefined) {
        return outputAudioNodes.forEach(outputAudioNode => outputAudioNode.disconnect(destinationOrOutput));
      }

      if (input === undefined) {
        return getOutputAudioNodeAtIndex(createIndexSizeError, outputAudioNodes, output).disconnect(destinationOrOutput, 0);
      }

      return getOutputAudioNodeAtIndex(createIndexSizeError, outputAudioNodes, output).disconnect(destinationOrOutput, 0, input);
    }

    if (output === undefined) {
      return outputAudioNodes.forEach(outputAudioNode => outputAudioNode.disconnect(destinationOrOutput));
    }

    return getOutputAudioNodeAtIndex(createIndexSizeError, outputAudioNodes, output).disconnect(destinationOrOutput, 0);
  };
};

exports.createDisconnectMultipleOutputs = createDisconnectMultipleOutputs;
},{"../guards/native-audio-node":"../node_modules/standardized-audio-context/build/es2019/guards/native-audio-node.js"}],"../node_modules/standardized-audio-context/build/es2019/factories/dynamics-compressor-node-constructor.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createDynamicsCompressorNodeConstructor = void 0;
const DEFAULT_OPTIONS = {
  attack: 0.003,
  channelCount: 2,
  channelCountMode: 'clamped-max',
  channelInterpretation: 'speakers',
  knee: 30,
  ratio: 12,
  release: 0.25,
  threshold: -24
};

const createDynamicsCompressorNodeConstructor = (audioNodeConstructor, createAudioParam, createDynamicsCompressorNodeRenderer, createNativeDynamicsCompressorNode, createNotSupportedError, getNativeContext, isNativeOfflineAudioContext) => {
  return class DynamicsCompressorNode extends audioNodeConstructor {
    constructor(context, options = DEFAULT_OPTIONS) {
      const nativeContext = getNativeContext(context);
      const mergedOptions = { ...DEFAULT_OPTIONS,
        ...options
      };
      const nativeDynamicsCompressorNode = createNativeDynamicsCompressorNode(nativeContext, mergedOptions);
      const isOffline = isNativeOfflineAudioContext(nativeContext);
      const dynamicsCompressorNodeRenderer = isOffline ? createDynamicsCompressorNodeRenderer() : null;
      super(context, false, nativeDynamicsCompressorNode, dynamicsCompressorNodeRenderer); // Bug #110: Edge does not export the correct values for maxValue and minValue.

      this._attack = createAudioParam(this, isOffline, nativeDynamicsCompressorNode.attack, 1, 0);
      this._knee = createAudioParam(this, isOffline, nativeDynamicsCompressorNode.knee, 40, 0);
      this._nativeDynamicsCompressorNode = nativeDynamicsCompressorNode;
      this._ratio = createAudioParam(this, isOffline, nativeDynamicsCompressorNode.ratio, 20, 1);
      this._release = createAudioParam(this, isOffline, nativeDynamicsCompressorNode.release, 1, 0);
      this._threshold = createAudioParam(this, isOffline, nativeDynamicsCompressorNode.threshold, 0, -100);
    }

    get attack() {
      return this._attack;
    }
    /*
     * Bug #108: Only Chrome, Firefox and Opera disallow a channelCount of three and above yet which is why the getter and setter needs
     * to be overwritten here.
     */


    get channelCount() {
      return this._nativeDynamicsCompressorNode.channelCount;
    }

    set channelCount(value) {
      const previousChannelCount = this._nativeDynamicsCompressorNode.channelCount;
      this._nativeDynamicsCompressorNode.channelCount = value;

      if (value > 2) {
        this._nativeDynamicsCompressorNode.channelCount = previousChannelCount;
        throw createNotSupportedError();
      }
    }
    /*
     * Bug #109: Only Chrome, Firefox and Opera disallow a channelCountMode of 'max' yet which is why the getter and setter needs to be
     * overwritten here.
     */


    get channelCountMode() {
      return this._nativeDynamicsCompressorNode.channelCountMode;
    }

    set channelCountMode(value) {
      const previousChannelCount = this._nativeDynamicsCompressorNode.channelCountMode;
      this._nativeDynamicsCompressorNode.channelCountMode = value;

      if (value === 'max') {
        this._nativeDynamicsCompressorNode.channelCountMode = previousChannelCount;
        throw createNotSupportedError();
      }
    }

    get knee() {
      return this._knee;
    }

    get ratio() {
      return this._ratio;
    }

    get reduction() {
      // Bug #111: Safari returns an AudioParam instead of a number.
      if (typeof this._nativeDynamicsCompressorNode.reduction.value === 'number') {
        return this._nativeDynamicsCompressorNode.reduction.value;
      }

      return this._nativeDynamicsCompressorNode.reduction;
    }

    get release() {
      return this._release;
    }

    get threshold() {
      return this._threshold;
    }

  };
};

exports.createDynamicsCompressorNodeConstructor = createDynamicsCompressorNodeConstructor;
},{}],"../node_modules/standardized-audio-context/build/es2019/factories/dynamics-compressor-node-renderer-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createDynamicsCompressorNodeRendererFactory = void 0;

var _isOwnedByContext = require("../helpers/is-owned-by-context");

const createDynamicsCompressorNodeRendererFactory = (connectAudioParam, createNativeDynamicsCompressorNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode) => {
  return () => {
    const renderedNativeDynamicsCompressorNodes = new WeakMap();

    const createDynamicsCompressorNode = async (proxy, nativeOfflineAudioContext, trace) => {
      let nativeDynamicsCompressorNode = getNativeAudioNode(proxy);
      /*
       * If the initially used nativeDynamicsCompressorNode was not constructed on the same OfflineAudioContext it needs to be
       * created again.
       */

      const nativeDynamicsCompressorNodeIsOwnedByContext = (0, _isOwnedByContext.isOwnedByContext)(nativeDynamicsCompressorNode, nativeOfflineAudioContext);

      if (!nativeDynamicsCompressorNodeIsOwnedByContext) {
        const options = {
          attack: nativeDynamicsCompressorNode.attack.value,
          channelCount: nativeDynamicsCompressorNode.channelCount,
          channelCountMode: nativeDynamicsCompressorNode.channelCountMode,
          channelInterpretation: nativeDynamicsCompressorNode.channelInterpretation,
          knee: nativeDynamicsCompressorNode.knee.value,
          ratio: nativeDynamicsCompressorNode.ratio.value,
          release: nativeDynamicsCompressorNode.release.value,
          threshold: nativeDynamicsCompressorNode.threshold.value
        };
        nativeDynamicsCompressorNode = createNativeDynamicsCompressorNode(nativeOfflineAudioContext, options);
      }

      renderedNativeDynamicsCompressorNodes.set(nativeOfflineAudioContext, nativeDynamicsCompressorNode);

      if (!nativeDynamicsCompressorNodeIsOwnedByContext) {
        await renderAutomation(nativeOfflineAudioContext, proxy.attack, nativeDynamicsCompressorNode.attack, trace);
        await renderAutomation(nativeOfflineAudioContext, proxy.knee, nativeDynamicsCompressorNode.knee, trace);
        await renderAutomation(nativeOfflineAudioContext, proxy.ratio, nativeDynamicsCompressorNode.ratio, trace);
        await renderAutomation(nativeOfflineAudioContext, proxy.release, nativeDynamicsCompressorNode.release, trace);
        await renderAutomation(nativeOfflineAudioContext, proxy.threshold, nativeDynamicsCompressorNode.threshold, trace);
      } else {
        await connectAudioParam(nativeOfflineAudioContext, proxy.attack, nativeDynamicsCompressorNode.attack, trace);
        await connectAudioParam(nativeOfflineAudioContext, proxy.knee, nativeDynamicsCompressorNode.knee, trace);
        await connectAudioParam(nativeOfflineAudioContext, proxy.ratio, nativeDynamicsCompressorNode.ratio, trace);
        await connectAudioParam(nativeOfflineAudioContext, proxy.release, nativeDynamicsCompressorNode.release, trace);
        await connectAudioParam(nativeOfflineAudioContext, proxy.threshold, nativeDynamicsCompressorNode.threshold, trace);
      }

      await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeDynamicsCompressorNode, trace);
      return nativeDynamicsCompressorNode;
    };

    return {
      render(proxy, nativeOfflineAudioContext, trace) {
        const renderedNativeDynamicsCompressorNode = renderedNativeDynamicsCompressorNodes.get(nativeOfflineAudioContext);

        if (renderedNativeDynamicsCompressorNode !== undefined) {
          return Promise.resolve(renderedNativeDynamicsCompressorNode);
        }

        return createDynamicsCompressorNode(proxy, nativeOfflineAudioContext, trace);
      }

    };
  };
};

exports.createDynamicsCompressorNodeRendererFactory = createDynamicsCompressorNodeRendererFactory;
},{"../helpers/is-owned-by-context":"../node_modules/standardized-audio-context/build/es2019/helpers/is-owned-by-context.js"}],"../node_modules/standardized-audio-context/build/es2019/factories/encoding-error.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createEncodingError = void 0;

const createEncodingError = () => {
  try {
    return new DOMException('', 'EncodingError');
  } catch (err) {
    // Bug #122: Edge is the only browser that does not yet allow to construct a DOMException.
    err.code = 0;
    err.name = 'EncodingError';
    return err;
  }
};

exports.createEncodingError = createEncodingError;
},{}],"../node_modules/standardized-audio-context/build/es2019/factories/evaluate-source.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createEvaluateSource = void 0;

const createEvaluateSource = window => {
  return source => new Promise((resolve, reject) => {
    if (window === null) {
      reject(new SyntaxError());
      return;
    }

    const head = window.document.head;

    if (head === null) {
      reject(new SyntaxError());
    } else {
      const script = window.document.createElement('script'); // @todo Safari doesn't like URLs with a type of 'application/javascript; charset=utf-8'.

      const blob = new Blob([source], {
        type: 'application/javascript'
      });
      const url = URL.createObjectURL(blob);
      const originalOnErrorHandler = window.onerror;

      const removeErrorEventListenerAndRevokeUrl = () => {
        window.onerror = originalOnErrorHandler;
        URL.revokeObjectURL(url);
      };

      window.onerror = (message, src, lineno, colno, error) => {
        // @todo Edge thinks the source is the one of the html document.
        if (src === url || src === window.location.href && lineno === 1 && colno === 1) {
          removeErrorEventListenerAndRevokeUrl();
          reject(error);
          return false;
        }

        if (originalOnErrorHandler !== null) {
          return originalOnErrorHandler(message, src, lineno, colno, error);
        }
      };

      script.onerror = () => {
        removeErrorEventListenerAndRevokeUrl();
        reject(new SyntaxError());
      };

      script.onload = () => {
        removeErrorEventListenerAndRevokeUrl();
        resolve();
      };

      script.src = url;
      script.type = 'module';
      head.appendChild(script);
    }
  });
};

exports.createEvaluateSource = createEvaluateSource;
},{}],"../node_modules/standardized-audio-context/build/es2019/factories/event-target-constructor.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createEventTargetConstructor = void 0;

const createEventTargetConstructor = wrapEventListener => {
  return class EventTarget {
    constructor(_nativeEventTarget) {
      this._nativeEventTarget = _nativeEventTarget;
      this._listeners = new WeakMap();
    }

    addEventListener(type, listener, options) {
      if (listener !== null) {
        let wrappedEventListener = this._listeners.get(listener);

        if (wrappedEventListener === undefined) {
          wrappedEventListener = wrapEventListener(this, listener);

          if (typeof listener === 'function') {
            this._listeners.set(listener, wrappedEventListener);
          }
        }

        this._nativeEventTarget.addEventListener(type, wrappedEventListener, options);
      }
    }

    dispatchEvent(event) {
      return this._nativeEventTarget.dispatchEvent(event);
    }

    removeEventListener(type, listener, options) {
      const wrappedEventListener = listener === null ? undefined : this._listeners.get(listener);

      this._nativeEventTarget.removeEventListener(type, wrappedEventListener === undefined ? null : wrappedEventListener, options);
    }

  };
};

exports.createEventTargetConstructor = createEventTargetConstructor;
},{}],"../node_modules/standardized-audio-context/build/es2019/factories/expose-current-frame-and-current-time.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createExposeCurrentFrameAndCurrentTime = void 0;

const createExposeCurrentFrameAndCurrentTime = window => {
  return (currentTime, sampleRate, fn) => {
    Object.defineProperties(window, {
      currentFrame: {
        configurable: true,

        get() {
          return Math.round(currentTime * sampleRate);
        }

      },
      currentTime: {
        configurable: true,

        get() {
          return currentTime;
        }

      }
    });

    try {
      return fn();
    } finally {
      if (window !== null) {
        delete window.currentFrame;
        delete window.currentTime;
      }
    }
  };
};

exports.createExposeCurrentFrameAndCurrentTime = createExposeCurrentFrameAndCurrentTime;
},{}],"../node_modules/standardized-audio-context/build/es2019/factories/fetch-source.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createFetchSource = void 0;

const createFetchSource = createAbortError => {
  return async url => {
    try {
      const response = await fetch(url);

      if (response.ok) {
        return response.text();
      }
    } catch {// Ignore errors.
    } // tslint:disable-line:no-empty


    throw createAbortError();
  };
};

exports.createFetchSource = createFetchSource;
},{}],"../node_modules/standardized-audio-context/build/es2019/factories/gain-node-constructor.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createGainNodeConstructor = void 0;

var _constants = require("../constants");

const DEFAULT_OPTIONS = {
  channelCount: 2,
  channelCountMode: 'max',
  channelInterpretation: 'speakers',
  gain: 1
};

const createGainNodeConstructor = (audioNodeConstructor, createAudioParam, createGainNodeRenderer, createNativeGainNode, getNativeContext, isNativeOfflineAudioContext) => {
  return class GainNode extends audioNodeConstructor {
    constructor(context, options = DEFAULT_OPTIONS) {
      const nativeContext = getNativeContext(context);
      const mergedOptions = { ...DEFAULT_OPTIONS,
        ...options
      };
      const nativeGainNode = createNativeGainNode(nativeContext, mergedOptions);
      const isOffline = isNativeOfflineAudioContext(nativeContext);
      const gainNodeRenderer = isOffline ? createGainNodeRenderer() : null;
      super(context, false, nativeGainNode, gainNodeRenderer); // Bug #74: Edge & Safari do not export the correct values for maxValue and minValue.

      this._gain = createAudioParam(this, isOffline, nativeGainNode.gain, _constants.MOST_POSITIVE_SINGLE_FLOAT, _constants.MOST_NEGATIVE_SINGLE_FLOAT);
    }

    get gain() {
      return this._gain;
    }

  };
};

exports.createGainNodeConstructor = createGainNodeConstructor;
},{"../constants":"../node_modules/standardized-audio-context/build/es2019/constants.js"}],"../node_modules/standardized-audio-context/build/es2019/factories/gain-node-renderer-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createGainNodeRendererFactory = void 0;

var _isOwnedByContext = require("../helpers/is-owned-by-context");

const createGainNodeRendererFactory = (connectAudioParam, createNativeGainNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode) => {
  return () => {
    const renderedNativeGainNodes = new WeakMap();

    const createGainNode = async (proxy, nativeOfflineAudioContext, trace) => {
      let nativeGainNode = getNativeAudioNode(proxy); // If the initially used nativeGainNode was not constructed on the same OfflineAudioContext it needs to be created again.

      const nativeGainNodeIsOwnedByContext = (0, _isOwnedByContext.isOwnedByContext)(nativeGainNode, nativeOfflineAudioContext);

      if (!nativeGainNodeIsOwnedByContext) {
        const options = {
          channelCount: nativeGainNode.channelCount,
          channelCountMode: nativeGainNode.channelCountMode,
          channelInterpretation: nativeGainNode.channelInterpretation,
          gain: nativeGainNode.gain.value
        };
        nativeGainNode = createNativeGainNode(nativeOfflineAudioContext, options);
      }

      renderedNativeGainNodes.set(nativeOfflineAudioContext, nativeGainNode);

      if (!nativeGainNodeIsOwnedByContext) {
        await renderAutomation(nativeOfflineAudioContext, proxy.gain, nativeGainNode.gain, trace);
      } else {
        await connectAudioParam(nativeOfflineAudioContext, proxy.gain, nativeGainNode.gain, trace);
      }

      await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeGainNode, trace);
      return nativeGainNode;
    };

    return {
      render(proxy, nativeOfflineAudioContext, trace) {
        const renderedNativeGainNode = renderedNativeGainNodes.get(nativeOfflineAudioContext);

        if (renderedNativeGainNode !== undefined) {
          return Promise.resolve(renderedNativeGainNode);
        }

        return createGainNode(proxy, nativeOfflineAudioContext, trace);
      }

    };
  };
};

exports.createGainNodeRendererFactory = createGainNodeRendererFactory;
},{"../helpers/is-owned-by-context":"../node_modules/standardized-audio-context/build/es2019/helpers/is-owned-by-context.js"}],"../node_modules/standardized-audio-context/build/es2019/factories/get-audio-node-renderer.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createGetAudioNodeRenderer = void 0;

const createGetAudioNodeRenderer = getAudioNodeConnections => {
  return audioNode => {
    const audioNodeConnections = getAudioNodeConnections(audioNode);

    if (audioNodeConnections.renderer === null) {
      throw new Error('Missing the renderer of the given AudioNode in the audio graph.');
    }

    return audioNodeConnections.renderer;
  };
};

exports.createGetAudioNodeRenderer = createGetAudioNodeRenderer;
},{}],"../node_modules/standardized-audio-context/build/es2019/factories/get-audio-param-renderer.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createGetAudioParamRenderer = void 0;

const createGetAudioParamRenderer = getAudioParamConnections => {
  return audioParam => {
    const audioParamConnections = getAudioParamConnections(audioParam);

    if (audioParamConnections.renderer === null) {
      throw new Error('Missing the renderer of the given AudioParam in the audio graph.');
    }

    return audioParamConnections.renderer;
  };
};

exports.createGetAudioParamRenderer = createGetAudioParamRenderer;
},{}],"../node_modules/standardized-audio-context/build/es2019/factories/get-backup-native-context.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createGetBackupNativeContext = void 0;

var _globals = require("../globals");

const createGetBackupNativeContext = (isNativeOfflineAudioContext, nativeAudioContextConstructor, nativeOfflineAudioContextConstructor) => {
  return nativeContext => {
    /*
     * Bug #50: Only Edge does currently not allow to create AudioNodes on a closed context yet which is why there needs to be no
     * backupNativeContext in that case.
     */
    if (nativeContext.state === 'closed' && nativeAudioContextConstructor !== null && nativeAudioContextConstructor.name !== 'webkitAudioContext') {
      if (isNativeOfflineAudioContext(nativeContext)) {
        const backupNativeContext = _globals.BACKUP_NATIVE_CONTEXT_STORE.get(nativeContext);

        if (backupNativeContext !== undefined) {
          return backupNativeContext;
        }

        if (nativeOfflineAudioContextConstructor !== null) {
          // @todo Copy the attached AudioWorkletProcessors and other settings.
          const bckpNtveCntxt = new nativeOfflineAudioContextConstructor(1, 1, 44100);

          _globals.BACKUP_NATIVE_CONTEXT_STORE.set(nativeContext, bckpNtveCntxt);

          return bckpNtveCntxt;
        }
      } else {
        const backupNativeContext = _globals.BACKUP_NATIVE_CONTEXT_STORE.get(nativeContext);

        if (backupNativeContext !== undefined) {
          return backupNativeContext;
        } // @todo Copy the attached AudioWorkletProcessors and other settings.


        const bckpNtveCntxt = new nativeAudioContextConstructor();

        _globals.BACKUP_NATIVE_CONTEXT_STORE.set(nativeContext, bckpNtveCntxt);

        return bckpNtveCntxt;
      }
    }

    return null;
  };
};

exports.createGetBackupNativeContext = createGetBackupNativeContext;
},{"../globals":"../node_modules/standardized-audio-context/build/es2019/globals.js"}],"../node_modules/standardized-audio-context/build/es2019/factories/invalid-state-error.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createInvalidStateError = void 0;

const createInvalidStateError = () => {
  try {
    return new DOMException('', 'InvalidStateError');
  } catch (err) {
    // Bug #122: Edge is the only browser that does not yet allow to construct a DOMException.
    err.code = 11;
    err.name = 'InvalidStateError';
    return err;
  }
};

exports.createInvalidStateError = createInvalidStateError;
},{}],"../node_modules/standardized-audio-context/build/es2019/factories/get-native-context.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createGetNativeContext = void 0;

var _invalidStateError = require("./invalid-state-error");

const createGetNativeContext = contextStore => {
  return context => {
    const nativeContext = contextStore.get(context);

    if (nativeContext === undefined) {
      throw (0, _invalidStateError.createInvalidStateError)();
    }

    return nativeContext;
  };
};

exports.createGetNativeContext = createGetNativeContext;
},{"./invalid-state-error":"../node_modules/standardized-audio-context/build/es2019/factories/invalid-state-error.js"}],"../node_modules/standardized-audio-context/build/es2019/factories/get-unrendered-audio-worklet-nodes.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createGetUnrenderedAudioWorkletNodes = void 0;

const createGetUnrenderedAudioWorkletNodes = unrenderedAudioWorkletNodeStore => {
  return nativeContext => {
    const unrenderedAudioWorkletNodes = unrenderedAudioWorkletNodeStore.get(nativeContext);

    if (unrenderedAudioWorkletNodes === undefined) {
      throw new Error('The context has no set of AudioWorkletNodes.');
    }

    return unrenderedAudioWorkletNodes;
  };
};

exports.createGetUnrenderedAudioWorkletNodes = createGetUnrenderedAudioWorkletNodes;
},{}],"../node_modules/standardized-audio-context/build/es2019/factories/invalid-access-error.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createInvalidAccessError = void 0;

const createInvalidAccessError = () => {
  try {
    return new DOMException('', 'InvalidAccessError');
  } catch (err) {
    // Bug #122: Edge is the only browser that does not yet allow to construct a DOMException.
    err.code = 15;
    err.name = 'InvalidAccessError';
    return err;
  }
};

exports.createInvalidAccessError = createInvalidAccessError;
},{}],"../node_modules/standardized-audio-context/build/es2019/helpers/wrap-iir-filter-node-get-frequency-response-method.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.wrapIIRFilterNodeGetFrequencyResponseMethod = void 0;

var _invalidAccessError = require("../factories/invalid-access-error");

const wrapIIRFilterNodeGetFrequencyResponseMethod = nativeIIRFilterNode => {
  nativeIIRFilterNode.getFrequencyResponse = (getFrequencyResponse => {
    return (frequencyHz, magResponse, phaseResponse) => {
      if (frequencyHz.length !== magResponse.length || magResponse.length !== phaseResponse.length) {
        throw (0, _invalidAccessError.createInvalidAccessError)();
      }

      return getFrequencyResponse.call(nativeIIRFilterNode, frequencyHz, magResponse, phaseResponse);
    };
  })(nativeIIRFilterNode.getFrequencyResponse);
};

exports.wrapIIRFilterNodeGetFrequencyResponseMethod = wrapIIRFilterNodeGetFrequencyResponseMethod;
},{"../factories/invalid-access-error":"../node_modules/standardized-audio-context/build/es2019/factories/invalid-access-error.js"}],"../node_modules/standardized-audio-context/build/es2019/factories/iir-filter-node-constructor.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createIIRFilterNodeConstructor = void 0;

var _wrapIirFilterNodeGetFrequencyResponseMethod = require("../helpers/wrap-iir-filter-node-get-frequency-response-method");

const DEFAULT_OPTIONS = {
  channelCount: 2,
  channelCountMode: 'max',
  channelInterpretation: 'speakers'
};

const createIIRFilterNodeConstructor = (audioNodeConstructor, createNativeIIRFilterNode, createIIRFilterNodeRenderer, getNativeContext, isNativeOfflineAudioContext) => {
  return class IIRFilterNode extends audioNodeConstructor {
    constructor(context, options) {
      const nativeContext = getNativeContext(context);
      const isOffline = isNativeOfflineAudioContext(nativeContext);
      const mergedOptions = { ...DEFAULT_OPTIONS,
        ...options
      };
      const nativeIIRFilterNode = createNativeIIRFilterNode(nativeContext, isOffline ? null : context.baseLatency, mergedOptions);
      const iirFilterNodeRenderer = isOffline ? createIIRFilterNodeRenderer(mergedOptions.feedback, mergedOptions.feedforward) : null;
      super(context, false, nativeIIRFilterNode, iirFilterNodeRenderer); // Bug #23 & #24: FirefoxDeveloper does not throw an InvalidAccessError.
      // @todo Write a test which allows other browsers to remain unpatched.

      (0, _wrapIirFilterNodeGetFrequencyResponseMethod.wrapIIRFilterNodeGetFrequencyResponseMethod)(nativeIIRFilterNode);
      this._nativeIIRFilterNode = nativeIIRFilterNode;
    }

    getFrequencyResponse(frequencyHz, magResponse, phaseResponse) {
      return this._nativeIIRFilterNode.getFrequencyResponse(frequencyHz, magResponse, phaseResponse);
    }

  };
};

exports.createIIRFilterNodeConstructor = createIIRFilterNodeConstructor;
},{"../helpers/wrap-iir-filter-node-get-frequency-response-method":"../node_modules/standardized-audio-context/build/es2019/helpers/wrap-iir-filter-node-get-frequency-response-method.js"}],"../node_modules/standardized-audio-context/build/es2019/helpers/filter-buffer.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.filterBuffer = void 0;

// This implementation as shamelessly inspired by source code of
// tslint:disable-next-line:max-line-length
// {@link https://chromium.googlesource.com/chromium/src.git/+/master/third_party/WebKit/Source/platform/audio/IIRFilter.cpp|Chromium's IIRFilter}.
const filterBuffer = (feedback, feedbackLength, feedforward, feedforwardLength, minLength, xBuffer, yBuffer, bufferIndex, bufferLength, input, output) => {
  const inputLength = input.length;
  let i = bufferIndex;

  for (let j = 0; j < inputLength; j += 1) {
    let y = feedforward[0] * input[j];

    for (let k = 1; k < minLength; k += 1) {
      const x = i - k & bufferLength - 1; // tslint:disable-line:no-bitwise

      y += feedforward[k] * xBuffer[x];
      y -= feedback[k] * yBuffer[x];
    }

    for (let k = minLength; k < feedforwardLength; k += 1) {
      y += feedforward[k] * xBuffer[i - k & bufferLength - 1]; // tslint:disable-line:no-bitwise
    }

    for (let k = minLength; k < feedbackLength; k += 1) {
      y -= feedback[k] * yBuffer[i - k & bufferLength - 1]; // tslint:disable-line:no-bitwise
    }

    xBuffer[i] = input[j];
    yBuffer[i] = y;
    i = i + 1 & bufferLength - 1; // tslint:disable-line:no-bitwise

    output[j] = y;
  }

  return i;
};

exports.filterBuffer = filterBuffer;
},{}],"../node_modules/standardized-audio-context/build/es2019/factories/iir-filter-node-renderer-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createIIRFilterNodeRendererFactory = void 0;

var _filterBuffer = require("../helpers/filter-buffer");

var _isOwnedByContext = require("../helpers/is-owned-by-context");

const filterFullBuffer = (renderedBuffer, nativeOfflineAudioContext, feedback, feedforward) => {
  const feedbackLength = feedback.length;
  const feedforwardLength = feedforward.length;
  const minLength = Math.min(feedbackLength, feedforwardLength);

  if (feedback[0] !== 1) {
    for (let i = 0; i < feedbackLength; i += 1) {
      feedforward[i] /= feedback[0];
    }

    for (let i = 1; i < feedforwardLength; i += 1) {
      feedback[i] /= feedback[0];
    }
  }

  const bufferLength = 32;
  const xBuffer = new Float32Array(bufferLength);
  const yBuffer = new Float32Array(bufferLength);
  const filteredBuffer = nativeOfflineAudioContext.createBuffer(renderedBuffer.numberOfChannels, renderedBuffer.length, renderedBuffer.sampleRate);
  const numberOfChannels = renderedBuffer.numberOfChannels;

  for (let i = 0; i < numberOfChannels; i += 1) {
    const input = renderedBuffer.getChannelData(i);
    const output = filteredBuffer.getChannelData(i);
    xBuffer.fill(0);
    yBuffer.fill(0);
    (0, _filterBuffer.filterBuffer)(feedback, feedbackLength, feedforward, feedforwardLength, minLength, xBuffer, yBuffer, 0, bufferLength, input, output);
  }

  return filteredBuffer;
};

const createIIRFilterNodeRendererFactory = (createNativeAudioBufferSourceNode, createNativeAudioNode, getNativeAudioNode, nativeOfflineAudioContextConstructor, renderInputsOfAudioNode, renderNativeOfflineAudioContext) => {
  return (feedback, feedforward) => {
    const renderedNativeAudioNodes = new WeakMap();
    let filteredBufferPromise = null;

    const createAudioNode = async (proxy, nativeOfflineAudioContext, trace) => {
      let nativeAudioBufferSourceNode = null;
      let nativeIIRFilterNode = getNativeAudioNode(proxy); // If the initially used nativeIIRFilterNode was not constructed on the same OfflineAudioContext it needs to be created again.

      const nativeIIRFilterNodeIsOwnedByContext = (0, _isOwnedByContext.isOwnedByContext)(nativeIIRFilterNode, nativeOfflineAudioContext); // Bug #9: Safari does not support IIRFilterNodes.

      if (nativeOfflineAudioContext.createIIRFilter === undefined) {
        nativeAudioBufferSourceNode = createNativeAudioBufferSourceNode(nativeOfflineAudioContext, {
          buffer: null,
          channelCount: 2,
          channelCountMode: 'max',
          channelInterpretation: 'speakers',
          loop: false,
          loopEnd: 0,
          loopStart: 0,
          playbackRate: 1
        });
      } else if (!nativeIIRFilterNodeIsOwnedByContext) {
        nativeIIRFilterNode = createNativeAudioNode(nativeOfflineAudioContext, ntvCntxt => {
          return ntvCntxt.createIIRFilter(feedforward, feedback);
        });
      }

      renderedNativeAudioNodes.set(nativeOfflineAudioContext, nativeAudioBufferSourceNode === null ? nativeIIRFilterNode : nativeAudioBufferSourceNode);

      if (nativeAudioBufferSourceNode !== null) {
        if (filteredBufferPromise === null) {
          if (nativeOfflineAudioContextConstructor === null) {
            throw new Error('Missing the native OfflineAudioContext constructor.');
          }

          const partialOfflineAudioContext = new nativeOfflineAudioContextConstructor( // Bug #47: The AudioDestinationNode in Edge and Safari gets not initialized correctly.
          proxy.context.destination.channelCount, // Bug #17: Safari does not yet expose the length.
          proxy.context.length, nativeOfflineAudioContext.sampleRate);

          filteredBufferPromise = (async () => {
            await renderInputsOfAudioNode(proxy, partialOfflineAudioContext, partialOfflineAudioContext.destination, trace);
            const renderedBuffer = await renderNativeOfflineAudioContext(partialOfflineAudioContext);
            return filterFullBuffer(renderedBuffer, nativeOfflineAudioContext, feedback, feedforward);
          })();
        }

        const filteredBuffer = await filteredBufferPromise;
        nativeAudioBufferSourceNode.buffer = filteredBuffer;
        nativeAudioBufferSourceNode.start(0);
        return nativeAudioBufferSourceNode;
      }

      await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeIIRFilterNode, trace);
      return nativeIIRFilterNode;
    };

    return {
      render(proxy, nativeOfflineAudioContext, trace) {
        const renderedNativeAudioNode = renderedNativeAudioNodes.get(nativeOfflineAudioContext);

        if (renderedNativeAudioNode !== undefined) {
          return Promise.resolve(renderedNativeAudioNode);
        }

        return createAudioNode(proxy, nativeOfflineAudioContext, trace);
      }

    };
  };
};

exports.createIIRFilterNodeRendererFactory = createIIRFilterNodeRendererFactory;
},{"../helpers/filter-buffer":"../node_modules/standardized-audio-context/build/es2019/helpers/filter-buffer.js","../helpers/is-owned-by-context":"../node_modules/standardized-audio-context/build/es2019/helpers/is-owned-by-context.js"}],"../node_modules/standardized-audio-context/build/es2019/factories/increment-cycle-counter-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createIncrementCycleCounterFactory = void 0;

var _audioNodeOutputConnection = require("../guards/audio-node-output-connection");

const createIncrementCycleCounterFactory = (cycleCounters, disconnectNativeAudioNodeFromNativeAudioNode, getAudioNodeConnections, getNativeAudioNode, getNativeAudioParam, isActiveAudioNode) => {
  return isOffline => {
    return (audioNode, count) => {
      const cycleCounter = cycleCounters.get(audioNode);

      if (cycleCounter === undefined) {
        if (!isOffline && isActiveAudioNode(audioNode)) {
          const nativeSourceAudioNode = getNativeAudioNode(audioNode);
          const {
            outputs
          } = getAudioNodeConnections(audioNode);

          for (const output of outputs) {
            if ((0, _audioNodeOutputConnection.isAudioNodeOutputConnection)(output)) {
              const nativeDestinationAudioNode = getNativeAudioNode(output[0]);
              disconnectNativeAudioNodeFromNativeAudioNode(nativeSourceAudioNode, nativeDestinationAudioNode, output[1], output[2]);
            } else {
              const nativeDestinationAudioParam = getNativeAudioParam(output[0]);
              nativeSourceAudioNode.disconnect(nativeDestinationAudioParam, output[1]);
            }
          }
        }

        cycleCounters.set(audioNode, count);
      } else {
        cycleCounters.set(audioNode, cycleCounter + count);
      }
    };
  };
};

exports.createIncrementCycleCounterFactory = createIncrementCycleCounterFactory;
},{"../guards/audio-node-output-connection":"../node_modules/standardized-audio-context/build/es2019/guards/audio-node-output-connection.js"}],"../node_modules/standardized-audio-context/build/es2019/factories/is-any-audio-context.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createIsAnyAudioContext = void 0;

const createIsAnyAudioContext = (contextStore, isNativeAudioContext) => {
  return anything => {
    const nativeContext = contextStore.get(anything);
    return isNativeAudioContext(nativeContext) || isNativeAudioContext(anything);
  };
};

exports.createIsAnyAudioContext = createIsAnyAudioContext;
},{}],"../node_modules/standardized-audio-context/build/es2019/factories/is-any-audio-node.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createIsAnyAudioNode = void 0;

const createIsAnyAudioNode = (audioNodeStore, isNativeAudioNode) => {
  return anything => audioNodeStore.has(anything) || isNativeAudioNode(anything);
};

exports.createIsAnyAudioNode = createIsAnyAudioNode;
},{}],"../node_modules/standardized-audio-context/build/es2019/factories/is-any-audio-param.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createIsAnyAudioParam = void 0;

const createIsAnyAudioParam = (audioParamStore, isNativeAudioParam) => {
  return anything => audioParamStore.has(anything) || isNativeAudioParam(anything);
};

exports.createIsAnyAudioParam = createIsAnyAudioParam;
},{}],"../node_modules/standardized-audio-context/build/es2019/factories/is-any-offline-audio-context.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createIsAnyOfflineAudioContext = void 0;

const createIsAnyOfflineAudioContext = (contextStore, isNativeOfflineAudioContext) => {
  return anything => {
    const nativeContext = contextStore.get(anything);
    return isNativeOfflineAudioContext(nativeContext) || isNativeOfflineAudioContext(anything);
  };
};

exports.createIsAnyOfflineAudioContext = createIsAnyOfflineAudioContext;
},{}],"../node_modules/standardized-audio-context/build/es2019/factories/is-native-audio-context.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createIsNativeAudioContext = void 0;

const createIsNativeAudioContext = nativeAudioContextConstructor => {
  return anything => {
    return nativeAudioContextConstructor !== null && anything instanceof nativeAudioContextConstructor;
  };
};

exports.createIsNativeAudioContext = createIsNativeAudioContext;
},{}],"../node_modules/standardized-audio-context/build/es2019/factories/is-native-audio-node.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createIsNativeAudioNode = void 0;

const createIsNativeAudioNode = window => {
  return anything => {
    return window !== null && typeof window.AudioNode === 'function' && anything instanceof window.AudioNode;
  };
};

exports.createIsNativeAudioNode = createIsNativeAudioNode;
},{}],"../node_modules/standardized-audio-context/build/es2019/factories/is-native-audio-param.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createIsNativeAudioParam = void 0;

const createIsNativeAudioParam = window => {
  return anything => {
    return window !== null && typeof window.AudioParam === 'function' && anything instanceof window.AudioParam;
  };
};

exports.createIsNativeAudioParam = createIsNativeAudioParam;
},{}],"../node_modules/standardized-audio-context/build/es2019/factories/is-native-context.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createIsNativeContext = void 0;

const createIsNativeContext = (isNativeAudioContext, isNativeOfflineAudioContext) => {
  return anything => {
    return isNativeAudioContext(anything) || isNativeOfflineAudioContext(anything);
  };
};

exports.createIsNativeContext = createIsNativeContext;
},{}],"../node_modules/standardized-audio-context/build/es2019/factories/is-native-offline-audio-context.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createIsNativeOfflineAudioContext = void 0;

const createIsNativeOfflineAudioContext = nativeOfflineAudioContextConstructor => {
  return anything => {
    return nativeOfflineAudioContextConstructor !== null && anything instanceof nativeOfflineAudioContextConstructor;
  };
};

exports.createIsNativeOfflineAudioContext = createIsNativeOfflineAudioContext;
},{}],"../node_modules/standardized-audio-context/build/es2019/factories/is-secure-context.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createIsSecureContext = void 0;

const createIsSecureContext = window => window !== null && window.isSecureContext;

exports.createIsSecureContext = createIsSecureContext;
},{}],"../node_modules/standardized-audio-context/build/es2019/factories/is-supported-promise.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createIsSupportedPromise = void 0;

const createIsSupportedPromise = async (cacheTestResult, testAudioBufferCopyChannelMethodsSubarraySupport, testAudioContextCloseMethodSupport, testAudioContextDecodeAudioDataMethodTypeErrorSupport, testAudioContextOptionsSupport, testAudioNodeConnectMethodSupport, testAudioWorkletProcessorNoOutputsSupport, testChannelMergerNodeChannelCountSupport, testConstantSourceNodeAccurateSchedulingSupport, testConvolverNodeBufferReassignabilitySupport, testIsSecureContextSupport, testMediaStreamAudioSourceNodeMediaStreamWithoutAudioTrackSupport, testStereoPannerNodeDefaultValueSupport, testTransferablesSupport) => {
  if (cacheTestResult(testAudioBufferCopyChannelMethodsSubarraySupport, testAudioBufferCopyChannelMethodsSubarraySupport) && cacheTestResult(testAudioContextCloseMethodSupport, testAudioContextCloseMethodSupport) && cacheTestResult(testAudioContextOptionsSupport, testAudioContextOptionsSupport) && cacheTestResult(testAudioNodeConnectMethodSupport, testAudioNodeConnectMethodSupport) && cacheTestResult(testChannelMergerNodeChannelCountSupport, testChannelMergerNodeChannelCountSupport) && cacheTestResult(testConstantSourceNodeAccurateSchedulingSupport, testConstantSourceNodeAccurateSchedulingSupport) && cacheTestResult(testConvolverNodeBufferReassignabilitySupport, testConvolverNodeBufferReassignabilitySupport) && cacheTestResult(testIsSecureContextSupport, testIsSecureContextSupport) && cacheTestResult(testMediaStreamAudioSourceNodeMediaStreamWithoutAudioTrackSupport, testMediaStreamAudioSourceNodeMediaStreamWithoutAudioTrackSupport)) {
    const results = await Promise.all([cacheTestResult(testAudioContextDecodeAudioDataMethodTypeErrorSupport, testAudioContextDecodeAudioDataMethodTypeErrorSupport), cacheTestResult(testAudioWorkletProcessorNoOutputsSupport, testAudioWorkletProcessorNoOutputsSupport), cacheTestResult(testStereoPannerNodeDefaultValueSupport, testStereoPannerNodeDefaultValueSupport), cacheTestResult(testTransferablesSupport, testTransferablesSupport)]);
    return results.every(result => result);
  }

  return false;
};

exports.createIsSupportedPromise = createIsSupportedPromise;
},{}],"../node_modules/standardized-audio-context/build/es2019/factories/media-element-audio-source-node-constructor.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createMediaElementAudioSourceNodeConstructor = void 0;

const createMediaElementAudioSourceNodeConstructor = (audioNodeConstructor, createNativeMediaElementAudioSourceNode, getNativeContext, isNativeOfflineAudioContext) => {
  return class MediaElementAudioSourceNode extends audioNodeConstructor {
    constructor(context, options) {
      const nativeContext = getNativeContext(context);
      const nativeMediaElementAudioSourceNode = createNativeMediaElementAudioSourceNode(nativeContext, options); // Bug #171: Safari allows to create a MediaElementAudioSourceNode with an OfflineAudioContext.

      if (isNativeOfflineAudioContext(nativeContext)) {
        throw TypeError();
      }

      super(context, true, nativeMediaElementAudioSourceNode, null); // Bug #63: Edge does not expose the mediaElement yet.

      this._mediaElement = options.mediaElement;
      this._nativeMediaElementAudioSourceNode = nativeMediaElementAudioSourceNode;
    }

    get mediaElement() {
      return this._nativeMediaElementAudioSourceNode.mediaElement === undefined ? this._mediaElement : this._nativeMediaElementAudioSourceNode.mediaElement;
    }

  };
};

exports.createMediaElementAudioSourceNodeConstructor = createMediaElementAudioSourceNodeConstructor;
},{}],"../node_modules/standardized-audio-context/build/es2019/factories/media-stream-audio-destination-node-constructor.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createMediaStreamAudioDestinationNodeConstructor = void 0;
const DEFAULT_OPTIONS = {
  channelCount: 2,
  channelCountMode: 'explicit',
  channelInterpretation: 'speakers'
};

const createMediaStreamAudioDestinationNodeConstructor = (audioNodeConstructor, createNativeMediaStreamAudioDestinationNode, getNativeContext, isNativeOfflineAudioContext) => {
  return class MediaStreamAudioDestinationNode extends audioNodeConstructor {
    constructor(context, options = DEFAULT_OPTIONS) {
      const nativeContext = getNativeContext(context); // Bug #173: Safari allows to create a MediaStreamAudioDestinationNode with an OfflineAudioContext.

      if (isNativeOfflineAudioContext(nativeContext)) {
        throw new TypeError();
      }

      const mergedOptions = { ...DEFAULT_OPTIONS,
        ...options
      };
      const nativeMediaStreamAudioDestinationNode = createNativeMediaStreamAudioDestinationNode(nativeContext, mergedOptions);
      super(context, false, nativeMediaStreamAudioDestinationNode, null);
      this._nativeMediaStreamAudioDestinationNode = nativeMediaStreamAudioDestinationNode;
    }

    get stream() {
      return this._nativeMediaStreamAudioDestinationNode.stream;
    }

  };
};

exports.createMediaStreamAudioDestinationNodeConstructor = createMediaStreamAudioDestinationNodeConstructor;
},{}],"../node_modules/standardized-audio-context/build/es2019/factories/media-stream-audio-source-node-constructor.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createMediaStreamAudioSourceNodeConstructor = void 0;

const createMediaStreamAudioSourceNodeConstructor = (audioNodeConstructor, createNativeMediaStreamAudioSourceNode, getNativeContext, isNativeOfflineAudioContext) => {
  return class MediaStreamAudioSourceNode extends audioNodeConstructor {
    constructor(context, options) {
      const nativeContext = getNativeContext(context);
      const nativeMediaStreamAudioSourceNode = createNativeMediaStreamAudioSourceNode(nativeContext, options); // Bug #172: Safari allows to create a MediaStreamAudioSourceNode with an OfflineAudioContext.

      if (isNativeOfflineAudioContext(nativeContext)) {
        throw new TypeError();
      }

      super(context, true, nativeMediaStreamAudioSourceNode, null);
      this._nativeMediaStreamAudioSourceNode = nativeMediaStreamAudioSourceNode;
    }

    get mediaStream() {
      return this._nativeMediaStreamAudioSourceNode.mediaStream;
    }

  };
};

exports.createMediaStreamAudioSourceNodeConstructor = createMediaStreamAudioSourceNodeConstructor;
},{}],"../node_modules/standardized-audio-context/build/es2019/factories/media-stream-track-audio-source-node-constructor.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createMediaStreamTrackAudioSourceNodeConstructor = void 0;

const createMediaStreamTrackAudioSourceNodeConstructor = (audioNodeConstructor, createNativeMediaStreamTrackAudioSourceNode, getNativeContext) => {
  return class MediaStreamTrackAudioSourceNode extends audioNodeConstructor {
    constructor(context, options) {
      const nativeContext = getNativeContext(context);
      const nativeMediaStreamTrackAudioSourceNode = createNativeMediaStreamTrackAudioSourceNode(nativeContext, options);
      super(context, true, nativeMediaStreamTrackAudioSourceNode, null);
    }

  };
};

exports.createMediaStreamTrackAudioSourceNodeConstructor = createMediaStreamTrackAudioSourceNodeConstructor;
},{}],"../node_modules/standardized-audio-context/build/es2019/factories/minimal-audio-context-constructor.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createMinimalAudioContextConstructor = void 0;

var _isValidLatencyHint = require("../helpers/is-valid-latency-hint");

const createMinimalAudioContextConstructor = (createInvalidStateError, createNotSupportedError, createUnknownError, minimalBaseAudioContextConstructor, nativeAudioContextConstructor) => {
  return class MinimalAudioContext extends minimalBaseAudioContextConstructor {
    constructor(options = {}) {
      if (nativeAudioContextConstructor === null) {
        throw new Error('Missing the native AudioContext constructor.');
      }

      const nativeAudioContext = new nativeAudioContextConstructor(options); // Bug #131 Safari returns null when there are four other AudioContexts running already.

      if (nativeAudioContext === null) {
        throw createUnknownError();
      } // Bug #51 Only Chrome and Opera throw an error if the given latencyHint is invalid.


      if (!(0, _isValidLatencyHint.isValidLatencyHint)(options.latencyHint)) {
        throw new TypeError(`The provided value '${options.latencyHint}' is not a valid enum value of type AudioContextLatencyCategory.`);
      } // Bug #150 Only Chrome, Firefox and Opera support setting the sampleRate.


      if (options.sampleRate !== undefined && nativeAudioContext.sampleRate !== options.sampleRate) {
        throw createNotSupportedError();
      }

      super(nativeAudioContext, 2);
      const {
        latencyHint
      } = options;
      const {
        sampleRate
      } = nativeAudioContext; // @todo The values for 'balanced', 'interactive' and 'playback' are just copied from Chrome's implementation.

      this._baseLatency = typeof nativeAudioContext.baseLatency === 'number' ? nativeAudioContext.baseLatency : latencyHint === 'balanced' ? 512 / sampleRate : latencyHint === 'interactive' || latencyHint === undefined ? 256 / sampleRate : latencyHint === 'playback' ? 1024 / sampleRate :
      /*
       * @todo The min (256) and max (16384) values are taken from the allowed bufferSize values of a
       * ScriptProcessorNode.
       */
      Math.max(2, Math.min(128, Math.round(latencyHint * sampleRate / 128))) * 128 / sampleRate;
      this._nativeAudioContext = nativeAudioContext;
      this._state = null;
      /*
       * Bug #34: Chrome and Opera pretend to be running right away, but fire an onstatechange event when the state actually
       * changes to 'running'.
       */

      if (nativeAudioContext.state === 'running') {
        this._state = 'suspended';

        const revokeState = () => {
          if (this._state === 'suspended') {
            this._state = null;
          }

          nativeAudioContext.removeEventListener('statechange', revokeState);
        };

        nativeAudioContext.addEventListener('statechange', revokeState);
      }
    }

    get baseLatency() {
      return this._baseLatency;
    }

    get state() {
      return this._state !== null ? this._state : this._nativeAudioContext.state;
    }

    close() {
      // Bug #35: Firefox does not throw an error if the AudioContext was closed before.
      if (this.state === 'closed') {
        return this._nativeAudioContext.close().then(() => {
          throw createInvalidStateError();
        });
      } // Bug #34: If the state was set to suspended before it should be revoked now.


      if (this._state === 'suspended') {
        this._state = null;
      }

      return this._nativeAudioContext.close();
      /*
       * Bug #50: Deleting the AudioGraph is currently not possible anymore.
       * ...then(() => deleteAudioGraph(this, this._nativeAudioContext));
       */
    }

    resume() {
      if (this._state === 'suspended') {
        return new Promise((resolve, reject) => {
          const resolvePromise = () => {
            this._nativeAudioContext.removeEventListener('statechange', resolvePromise);

            if (this._nativeAudioContext.state === 'running') {
              resolve();
            } else {
              this.resume().then(resolve, reject);
            }
          };

          this._nativeAudioContext.addEventListener('statechange', resolvePromise);
        });
      }

      return this._nativeAudioContext.resume().catch(err => {
        // Bug #55: Chrome, Edge and Opera do throw an InvalidAccessError instead of an InvalidStateError.
        // Bug #56: Safari invokes the catch handler but without an error.
        if (err === undefined || err.code === 15) {
          throw createInvalidStateError();
        }

        throw err;
      });
    }

    suspend() {
      return this._nativeAudioContext.suspend().catch(err => {
        // Bug #56: Safari invokes the catch handler but without an error.
        if (err === undefined) {
          throw createInvalidStateError();
        }

        throw err;
      });
    }

  };
};

exports.createMinimalAudioContextConstructor = createMinimalAudioContextConstructor;
},{"../helpers/is-valid-latency-hint":"../node_modules/standardized-audio-context/build/es2019/helpers/is-valid-latency-hint.js"}],"../node_modules/standardized-audio-context/build/es2019/factories/minimal-base-audio-context-constructor.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createMinimalBaseAudioContextConstructor = void 0;

var _globals = require("../globals");

const createMinimalBaseAudioContextConstructor = (audioDestinationNodeConstructor, createAudioListener, eventTargetConstructor, isNativeOfflineAudioContext, unrenderedAudioWorkletNodeStore, wrapEventListener) => {
  return class MinimalBaseAudioContext extends eventTargetConstructor {
    constructor(_nativeContext, numberOfChannels) {
      super(_nativeContext);
      this._nativeContext = _nativeContext;

      _globals.CONTEXT_STORE.set(this, _nativeContext); // Bug #93: Edge will set the sampleRate of an AudioContext to zero when it is closed.


      const sampleRate = _nativeContext.sampleRate;
      Object.defineProperty(_nativeContext, 'sampleRate', {
        get: () => sampleRate
      });

      if (isNativeOfflineAudioContext(_nativeContext)) {
        unrenderedAudioWorkletNodeStore.set(_nativeContext, new Set());
      }

      this._destination = new audioDestinationNodeConstructor(this, numberOfChannels);
      this._listener = createAudioListener(this, _nativeContext);
      this._onstatechange = null;
    }

    get currentTime() {
      return this._nativeContext.currentTime;
    }

    get destination() {
      return this._destination;
    }

    get listener() {
      return this._listener;
    }

    get onstatechange() {
      return this._onstatechange;
    }

    set onstatechange(value) {
      const wrappedListener = typeof value === 'function' ? wrapEventListener(this, value) : null;
      this._nativeContext.onstatechange = wrappedListener;
      const nativeOnStateChange = this._nativeContext.onstatechange;
      this._onstatechange = nativeOnStateChange !== null && nativeOnStateChange === wrappedListener ? value : nativeOnStateChange;
    }

    get sampleRate() {
      return this._nativeContext.sampleRate;
    }

    get state() {
      return this._nativeContext.state;
    }

  };
};

exports.createMinimalBaseAudioContextConstructor = createMinimalBaseAudioContextConstructor;
},{"../globals":"../node_modules/standardized-audio-context/build/es2019/globals.js"}],"../node_modules/standardized-audio-context/build/es2019/helpers/test-promise-support.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.testPromiseSupport = void 0;

const testPromiseSupport = nativeContext => {
  // This 12 numbers represent the 48 bytes of an empty WAVE file with a single sample.
  const uint32Array = new Uint32Array([1179011410, 40, 1163280727, 544501094, 16, 131073, 44100, 176400, 1048580, 1635017060, 4, 0]);

  try {
    // Bug #1: Safari requires a successCallback.
    const promise = nativeContext.decodeAudioData(uint32Array.buffer, () => {// Ignore the success callback.
    });

    if (promise === undefined) {
      return false;
    }

    promise.catch(() => {// Ignore rejected errors.
    });
    return true;
  } catch {// Ignore errors.
  }

  return false;
};

exports.testPromiseSupport = testPromiseSupport;
},{}],"../node_modules/standardized-audio-context/build/es2019/factories/minimal-offline-audio-context-constructor.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createMinimalOfflineAudioContextConstructor = void 0;

var _testPromiseSupport = require("../helpers/test-promise-support");

const DEFAULT_OPTIONS = {
  numberOfChannels: 1
};

const createMinimalOfflineAudioContextConstructor = (cacheTestResult, createInvalidStateError, createNativeOfflineAudioContext, minimalBaseAudioContextConstructor, startRendering) => {
  return class MinimalOfflineAudioContext extends minimalBaseAudioContextConstructor {
    constructor(options) {
      const {
        length,
        numberOfChannels,
        sampleRate
      } = { ...DEFAULT_OPTIONS,
        ...options
      };
      const nativeOfflineAudioContext = createNativeOfflineAudioContext(numberOfChannels, length, sampleRate); // #21 Safari does not support promises and therefore would fire the statechange event before the promise can be resolved.

      if (!cacheTestResult(_testPromiseSupport.testPromiseSupport, () => (0, _testPromiseSupport.testPromiseSupport)(nativeOfflineAudioContext))) {
        nativeOfflineAudioContext.addEventListener('statechange', (() => {
          let i = 0;

          const delayStateChangeEvent = event => {
            if (this._state === 'running') {
              if (i > 0) {
                nativeOfflineAudioContext.removeEventListener('statechange', delayStateChangeEvent);
                event.stopImmediatePropagation();

                this._waitForThePromiseToSettle(event);
              } else {
                i += 1;
              }
            }
          };

          return delayStateChangeEvent;
        })());
      }

      super(nativeOfflineAudioContext, numberOfChannels);
      this._length = length;
      this._nativeOfflineAudioContext = nativeOfflineAudioContext;
      this._state = null;
    }

    get length() {
      // Bug #17: Safari does not yet expose the length.
      if (this._nativeOfflineAudioContext.length === undefined) {
        return this._length;
      }

      return this._nativeOfflineAudioContext.length;
    }

    get state() {
      return this._state === null ? this._nativeOfflineAudioContext.state : this._state;
    }

    startRendering() {
      /*
       * Bug #9 & #59: It is theoretically possible that startRendering() will first render a partialOfflineAudioContext. Therefore
       * the state of the nativeOfflineAudioContext might no transition to running immediately.
       */
      if (this._state === 'running') {
        return Promise.reject(createInvalidStateError());
      }

      this._state = 'running';
      return startRendering(this.destination, this._nativeOfflineAudioContext).then(audioBuffer => {
        this._state = null;
        /*
         * Bug #50: Deleting the AudioGraph is currently not possible anymore.
         * deleteAudioGraph(this, this._nativeOfflineAudioContext);
         */

        return audioBuffer;
      }) // @todo This could be written more elegantly when Promise.finally() becomes avalaible.
      .catch(err => {
        this._state = null;
        /*
         * Bug #50: Deleting the AudioGraph is currently not possible anymore.
         * deleteAudioGraph(this, this._nativeOfflineAudioContext);
         */

        throw err;
      });
    }

    _waitForThePromiseToSettle(event) {
      if (this._state === null) {
        this._nativeOfflineAudioContext.dispatchEvent(event);
      } else {
        setTimeout(() => this._waitForThePromiseToSettle(event));
      }
    }

  };
};

exports.createMinimalOfflineAudioContextConstructor = createMinimalOfflineAudioContextConstructor;
},{"../helpers/test-promise-support":"../node_modules/standardized-audio-context/build/es2019/helpers/test-promise-support.js"}],"../node_modules/standardized-audio-context/build/es2019/factories/monitor-connections.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createMonitorConnections = void 0;

const createMonitorConnections = (insertElementInSet, isNativeAudioNode) => {
  return (nativeAudioNode, whenConnected, whenDisconnected) => {
    const connections = new Set();

    nativeAudioNode.connect = (connect => {
      // tslint:disable-next-line:invalid-void
      return (destination, output = 0, input = 0) => {
        const wasDisconnected = connections.size === 0;

        if (isNativeAudioNode(destination)) {
          // @todo TypeScript cannot infer the overloaded signature with 3 arguments yet.
          connect.call(nativeAudioNode, destination, output, input);
          insertElementInSet(connections, [destination, output, input], connection => connection[0] === destination && connection[1] === output && connection[2] === input, true);

          if (wasDisconnected) {
            whenConnected();
          }

          return destination;
        }

        connect.call(nativeAudioNode, destination, output);
        insertElementInSet(connections, [destination, output], connection => connection[0] === destination && connection[1] === output, true);

        if (wasDisconnected) {
          whenConnected();
        }

        return;
      };
    })(nativeAudioNode.connect);

    nativeAudioNode.disconnect = (disconnect => {
      return (destinationOrOutput, output, input) => {
        const wasConnected = connections.size > 0;

        if (destinationOrOutput === undefined) {
          disconnect.apply(nativeAudioNode);
          connections.clear();
        } else if (typeof destinationOrOutput === 'number') {
          // @todo TypeScript cannot infer the overloaded signature with 1 argument yet.
          disconnect.call(nativeAudioNode, destinationOrOutput);

          for (const connection of connections) {
            if (connection[1] === destinationOrOutput) {
              connections.delete(connection);
            }
          }
        } else {
          if (isNativeAudioNode(destinationOrOutput)) {
            // @todo TypeScript cannot infer the overloaded signature with 3 arguments yet.
            disconnect.call(nativeAudioNode, destinationOrOutput, output, input);
          } else {
            // @todo TypeScript cannot infer the overloaded signature with 2 arguments yet.
            disconnect.call(nativeAudioNode, destinationOrOutput, output);
          }

          for (const connection of connections) {
            if (connection[0] === destinationOrOutput && (output === undefined || connection[1] === output) && (input === undefined || connection[2] === input)) {
              connections.delete(connection);
            }
          }
        }

        const isDisconnected = connections.size === 0;

        if (wasConnected && isDisconnected) {
          whenDisconnected();
        }
      };
    })(nativeAudioNode.disconnect);

    return nativeAudioNode;
  };
};

exports.createMonitorConnections = createMonitorConnections;
},{}],"../node_modules/standardized-audio-context/build/es2019/helpers/assign-native-audio-node-option.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.assignNativeAudioNodeOption = void 0;

const assignNativeAudioNodeOption = (nativeAudioNode, options, option) => {
  const value = options[option];

  if (value !== undefined && value !== nativeAudioNode[option]) {
    nativeAudioNode[option] = value;
  }
};

exports.assignNativeAudioNodeOption = assignNativeAudioNodeOption;
},{}],"../node_modules/standardized-audio-context/build/es2019/helpers/assign-native-audio-node-options.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.assignNativeAudioNodeOptions = void 0;

var _assignNativeAudioNodeOption = require("./assign-native-audio-node-option");

const assignNativeAudioNodeOptions = (nativeAudioNode, options) => {
  (0, _assignNativeAudioNodeOption.assignNativeAudioNodeOption)(nativeAudioNode, options, 'channelCount');
  (0, _assignNativeAudioNodeOption.assignNativeAudioNodeOption)(nativeAudioNode, options, 'channelCountMode');
  (0, _assignNativeAudioNodeOption.assignNativeAudioNodeOption)(nativeAudioNode, options, 'channelInterpretation');
};

exports.assignNativeAudioNodeOptions = assignNativeAudioNodeOptions;
},{"./assign-native-audio-node-option":"../node_modules/standardized-audio-context/build/es2019/helpers/assign-native-audio-node-option.js"}],"../node_modules/standardized-audio-context/build/es2019/helpers/test-analyser-node-get-float-time-domain-data-method-support.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.testAnalyserNodeGetFloatTimeDomainDataMethodSupport = void 0;

const testAnalyserNodeGetFloatTimeDomainDataMethodSupport = nativeAnalyserNode => {
  return typeof nativeAnalyserNode.getFloatTimeDomainData === 'function';
};

exports.testAnalyserNodeGetFloatTimeDomainDataMethodSupport = testAnalyserNodeGetFloatTimeDomainDataMethodSupport;
},{}],"../node_modules/standardized-audio-context/build/es2019/helpers/wrap-analyser-node-get-float-time-domain-data-method.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.wrapAnalyserNodeGetFloatTimeDomainDataMethod = void 0;

const wrapAnalyserNodeGetFloatTimeDomainDataMethod = nativeAnalyserNode => {
  nativeAnalyserNode.getFloatTimeDomainData = array => {
    const byteTimeDomainData = new Uint8Array(array.length);
    nativeAnalyserNode.getByteTimeDomainData(byteTimeDomainData);
    const length = Math.max(byteTimeDomainData.length, nativeAnalyserNode.fftSize);

    for (let i = 0; i < length; i += 1) {
      array[i] = (byteTimeDomainData[i] - 128) * 0.0078125;
    }

    return array;
  };
};

exports.wrapAnalyserNodeGetFloatTimeDomainDataMethod = wrapAnalyserNodeGetFloatTimeDomainDataMethod;
},{}],"../node_modules/standardized-audio-context/build/es2019/factories/native-analyser-node-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createNativeAnalyserNodeFactory = void 0;

var _assignNativeAudioNodeOption = require("../helpers/assign-native-audio-node-option");

var _assignNativeAudioNodeOptions = require("../helpers/assign-native-audio-node-options");

var _testAnalyserNodeGetFloatTimeDomainDataMethodSupport = require("../helpers/test-analyser-node-get-float-time-domain-data-method-support");

var _wrapAnalyserNodeGetFloatTimeDomainDataMethod = require("../helpers/wrap-analyser-node-get-float-time-domain-data-method");

const createNativeAnalyserNodeFactory = (cacheTestResult, createIndexSizeError, createNativeAudioNode) => {
  return (nativeContext, options) => {
    const nativeAnalyserNode = createNativeAudioNode(nativeContext, ntvCntxt => ntvCntxt.createAnalyser()); // Bug #37: Firefox does not create an AnalyserNode with the default properties.

    (0, _assignNativeAudioNodeOptions.assignNativeAudioNodeOptions)(nativeAnalyserNode, options); // Bug #118: Safari does not throw an error if maxDecibels is not more than minDecibels.

    if (!(options.maxDecibels > options.minDecibels)) {
      throw createIndexSizeError();
    }

    (0, _assignNativeAudioNodeOption.assignNativeAudioNodeOption)(nativeAnalyserNode, options, 'fftSize');
    (0, _assignNativeAudioNodeOption.assignNativeAudioNodeOption)(nativeAnalyserNode, options, 'maxDecibels');
    (0, _assignNativeAudioNodeOption.assignNativeAudioNodeOption)(nativeAnalyserNode, options, 'minDecibels');
    (0, _assignNativeAudioNodeOption.assignNativeAudioNodeOption)(nativeAnalyserNode, options, 'smoothingTimeConstant'); // Bug #36: Safari does not support getFloatTimeDomainData() yet.

    if (!cacheTestResult(_testAnalyserNodeGetFloatTimeDomainDataMethodSupport.testAnalyserNodeGetFloatTimeDomainDataMethodSupport, () => (0, _testAnalyserNodeGetFloatTimeDomainDataMethodSupport.testAnalyserNodeGetFloatTimeDomainDataMethodSupport)(nativeAnalyserNode))) {
      (0, _wrapAnalyserNodeGetFloatTimeDomainDataMethod.wrapAnalyserNodeGetFloatTimeDomainDataMethod)(nativeAnalyserNode);
    }

    return nativeAnalyserNode;
  };
};

exports.createNativeAnalyserNodeFactory = createNativeAnalyserNodeFactory;
},{"../helpers/assign-native-audio-node-option":"../node_modules/standardized-audio-context/build/es2019/helpers/assign-native-audio-node-option.js","../helpers/assign-native-audio-node-options":"../node_modules/standardized-audio-context/build/es2019/helpers/assign-native-audio-node-options.js","../helpers/test-analyser-node-get-float-time-domain-data-method-support":"../node_modules/standardized-audio-context/build/es2019/helpers/test-analyser-node-get-float-time-domain-data-method-support.js","../helpers/wrap-analyser-node-get-float-time-domain-data-method":"../node_modules/standardized-audio-context/build/es2019/helpers/wrap-analyser-node-get-float-time-domain-data-method.js"}],"../node_modules/standardized-audio-context/build/es2019/factories/native-audio-buffer-constructor.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createNativeAudioBufferConstructor = void 0;

const createNativeAudioBufferConstructor = window => {
  if (window === null) {
    return null;
  }

  if (window.hasOwnProperty('AudioBuffer')) {
    return window.AudioBuffer;
  }

  return null;
};

exports.createNativeAudioBufferConstructor = createNativeAudioBufferConstructor;
},{}],"../node_modules/standardized-audio-context/build/es2019/helpers/assign-native-audio-node-audio-param-value.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.assignNativeAudioNodeAudioParamValue = void 0;

const assignNativeAudioNodeAudioParamValue = (nativeAudioNode, options, audioParam) => {
  const value = options[audioParam];

  if (value !== undefined && value !== nativeAudioNode[audioParam].value) {
    nativeAudioNode[audioParam].value = value;
  }
};

exports.assignNativeAudioNodeAudioParamValue = assignNativeAudioNodeAudioParamValue;
},{}],"../node_modules/standardized-audio-context/build/es2019/helpers/wrap-audio-buffer-source-node-start-method-consecutive-calls.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.wrapAudioBufferSourceNodeStartMethodConsecutiveCalls = void 0;

var _invalidStateError = require("../factories/invalid-state-error");

const wrapAudioBufferSourceNodeStartMethodConsecutiveCalls = nativeAudioBufferSourceNode => {
  nativeAudioBufferSourceNode.start = (start => {
    let isScheduled = false;
    return (when = 0, offset = 0, duration) => {
      if (isScheduled) {
        throw (0, _invalidStateError.createInvalidStateError)();
      }

      start.call(nativeAudioBufferSourceNode, when, offset, duration);
      isScheduled = true;
    };
  })(nativeAudioBufferSourceNode.start);
};

exports.wrapAudioBufferSourceNodeStartMethodConsecutiveCalls = wrapAudioBufferSourceNodeStartMethodConsecutiveCalls;
},{"../factories/invalid-state-error":"../node_modules/standardized-audio-context/build/es2019/factories/invalid-state-error.js"}],"../node_modules/standardized-audio-context/build/es2019/helpers/wrap-audio-buffer-source-node-start-method-duration-parameter.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.wrapAudioBufferSourceNodeStartMethodDurationParameter = void 0;

const wrapAudioBufferSourceNodeStartMethodDurationParameter = (nativeAudioScheduledSourceNode, nativeContext) => {
  let endTime = Number.POSITIVE_INFINITY;
  let stopTime = Number.POSITIVE_INFINITY;

  nativeAudioScheduledSourceNode.start = ((start, stop) => {
    return (when = 0, offset = 0, duration = Number.POSITIVE_INFINITY) => {
      start.call(nativeAudioScheduledSourceNode, when, offset);

      if (duration >= 0 && duration < Number.POSITIVE_INFINITY) {
        const actualStartTime = Math.max(when, nativeContext.currentTime); // @todo The playbackRate could of course also have been automated and is not always fixed.

        const durationInBufferTime = duration / nativeAudioScheduledSourceNode.playbackRate.value;
        endTime = actualStartTime + durationInBufferTime;
        stop.call(nativeAudioScheduledSourceNode, Math.min(endTime, stopTime));
      }
    };
  })(nativeAudioScheduledSourceNode.start, nativeAudioScheduledSourceNode.stop);

  nativeAudioScheduledSourceNode.stop = (stop => {
    return (when = 0) => {
      stopTime = Math.max(when, nativeContext.currentTime);
      stop.call(nativeAudioScheduledSourceNode, Math.min(endTime, stopTime));
    };
  })(nativeAudioScheduledSourceNode.stop);
};

exports.wrapAudioBufferSourceNodeStartMethodDurationParameter = wrapAudioBufferSourceNodeStartMethodDurationParameter;
},{}],"../node_modules/standardized-audio-context/build/es2019/helpers/wrap-audio-scheduled-source-node-start-method-negative-parameters.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.wrapAudioScheduledSourceNodeStartMethodNegativeParameters = void 0;

const wrapAudioScheduledSourceNodeStartMethodNegativeParameters = nativeAudioScheduledSourceNode => {
  nativeAudioScheduledSourceNode.start = (start => {
    return (when = 0, offset = 0, duration) => {
      if (typeof duration === 'number' && duration < 0 || offset < 0 || when < 0) {
        throw new RangeError("The parameters can't be negative.");
      } // @todo TypeScript cannot infer the overloaded signature with 3 arguments yet.


      start.call(nativeAudioScheduledSourceNode, when, offset, duration);
    };
  })(nativeAudioScheduledSourceNode.start);
};

exports.wrapAudioScheduledSourceNodeStartMethodNegativeParameters = wrapAudioScheduledSourceNodeStartMethodNegativeParameters;
},{}],"../node_modules/standardized-audio-context/build/es2019/helpers/wrap-audio-scheduled-source-node-stop-method-negative-parameters.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.wrapAudioScheduledSourceNodeStopMethodNegativeParameters = void 0;

const wrapAudioScheduledSourceNodeStopMethodNegativeParameters = nativeAudioScheduledSourceNode => {
  nativeAudioScheduledSourceNode.stop = (stop => {
    return (when = 0) => {
      if (when < 0) {
        throw new RangeError("The parameter can't be negative.");
      }

      stop.call(nativeAudioScheduledSourceNode, when);
    };
  })(nativeAudioScheduledSourceNode.stop);
};

exports.wrapAudioScheduledSourceNodeStopMethodNegativeParameters = wrapAudioScheduledSourceNodeStopMethodNegativeParameters;
},{}],"../node_modules/standardized-audio-context/build/es2019/factories/native-audio-buffer-source-node-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createNativeAudioBufferSourceNodeFactory = void 0;

var _assignNativeAudioNodeAudioParamValue = require("../helpers/assign-native-audio-node-audio-param-value");

var _assignNativeAudioNodeOption = require("../helpers/assign-native-audio-node-option");

var _assignNativeAudioNodeOptions = require("../helpers/assign-native-audio-node-options");

var _wrapAudioBufferSourceNodeStartMethodConsecutiveCalls = require("../helpers/wrap-audio-buffer-source-node-start-method-consecutive-calls");

var _wrapAudioBufferSourceNodeStartMethodDurationParameter = require("../helpers/wrap-audio-buffer-source-node-start-method-duration-parameter");

var _wrapAudioScheduledSourceNodeStartMethodNegativeParameters = require("../helpers/wrap-audio-scheduled-source-node-start-method-negative-parameters");

var _wrapAudioScheduledSourceNodeStopMethodNegativeParameters = require("../helpers/wrap-audio-scheduled-source-node-stop-method-negative-parameters");

const createNativeAudioBufferSourceNodeFactory = (addSilentConnection, cacheTestResult, createNativeAudioNode, testAudioBufferSourceNodeStartMethodConsecutiveCallsSupport, testAudioBufferSourceNodeStartMethodDurationParameterSupport, testAudioBufferSourceNodeStartMethodOffsetClampingSupport, testAudioBufferSourceNodeStopMethodNullifiedBufferSupport, testAudioScheduledSourceNodeStartMethodNegativeParametersSupport, testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport, testAudioScheduledSourceNodeStopMethodNegativeParametersSupport, wrapAudioBufferSourceNodeStartMethodOffsetClampling, wrapAudioBufferSourceNodeStopMethodNullifiedBuffer, wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls) => {
  return (nativeContext, options) => {
    const nativeAudioBufferSourceNode = createNativeAudioNode(nativeContext, ntvCntxt => ntvCntxt.createBufferSource());
    (0, _assignNativeAudioNodeOptions.assignNativeAudioNodeOptions)(nativeAudioBufferSourceNode, options);
    (0, _assignNativeAudioNodeAudioParamValue.assignNativeAudioNodeAudioParamValue)(nativeAudioBufferSourceNode, options, 'playbackRate'); // Bug #71: Edge does not allow to set the buffer to null.

    (0, _assignNativeAudioNodeOption.assignNativeAudioNodeOption)(nativeAudioBufferSourceNode, options, 'buffer'); // Bug #149: Safari does not yet support the detune AudioParam.

    (0, _assignNativeAudioNodeOption.assignNativeAudioNodeOption)(nativeAudioBufferSourceNode, options, 'loop');
    (0, _assignNativeAudioNodeOption.assignNativeAudioNodeOption)(nativeAudioBufferSourceNode, options, 'loopEnd');
    (0, _assignNativeAudioNodeOption.assignNativeAudioNodeOption)(nativeAudioBufferSourceNode, options, 'loopStart'); // Bug #69: Safari does allow calls to start() of an already scheduled AudioBufferSourceNode.

    if (!cacheTestResult(testAudioBufferSourceNodeStartMethodConsecutiveCallsSupport, () => testAudioBufferSourceNodeStartMethodConsecutiveCallsSupport(nativeContext))) {
      (0, _wrapAudioBufferSourceNodeStartMethodConsecutiveCalls.wrapAudioBufferSourceNodeStartMethodConsecutiveCalls)(nativeAudioBufferSourceNode);
    } // Bug #92: Chrome & Edge do not respect the duration parameter yet.


    if (!cacheTestResult(testAudioBufferSourceNodeStartMethodDurationParameterSupport, testAudioBufferSourceNodeStartMethodDurationParameterSupport)) {
      (0, _wrapAudioBufferSourceNodeStartMethodDurationParameter.wrapAudioBufferSourceNodeStartMethodDurationParameter)(nativeAudioBufferSourceNode, nativeContext);
    } // Bug #154 & #155: Safari does not handle offsets which are equal to or greater than the duration of the buffer.


    if (!cacheTestResult(testAudioBufferSourceNodeStartMethodOffsetClampingSupport, () => testAudioBufferSourceNodeStartMethodOffsetClampingSupport(nativeContext))) {
      wrapAudioBufferSourceNodeStartMethodOffsetClampling(nativeAudioBufferSourceNode);
    } // Bug #162: Safari does throw an error when stop() is called on an AudioBufferSourceNode which has no buffer assigned to it.


    if (!cacheTestResult(testAudioBufferSourceNodeStopMethodNullifiedBufferSupport, () => testAudioBufferSourceNodeStopMethodNullifiedBufferSupport(nativeContext))) {
      wrapAudioBufferSourceNodeStopMethodNullifiedBuffer(nativeAudioBufferSourceNode, nativeContext);
    } // Bug #44: Only Chrome, Firefox & Opera throw a RangeError yet.


    if (!cacheTestResult(testAudioScheduledSourceNodeStartMethodNegativeParametersSupport, () => testAudioScheduledSourceNodeStartMethodNegativeParametersSupport(nativeContext))) {
      (0, _wrapAudioScheduledSourceNodeStartMethodNegativeParameters.wrapAudioScheduledSourceNodeStartMethodNegativeParameters)(nativeAudioBufferSourceNode);
    } // Bug #19: Safari does not ignore calls to stop() of an already stopped AudioBufferSourceNode.


    if (!cacheTestResult(testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport, () => testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport(nativeContext))) {
      wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls(nativeAudioBufferSourceNode, nativeContext);
    } // Bug #44: Only Firefox does not throw a RangeError yet.


    if (!cacheTestResult(testAudioScheduledSourceNodeStopMethodNegativeParametersSupport, () => testAudioScheduledSourceNodeStopMethodNegativeParametersSupport(nativeContext))) {
      (0, _wrapAudioScheduledSourceNodeStopMethodNegativeParameters.wrapAudioScheduledSourceNodeStopMethodNegativeParameters)(nativeAudioBufferSourceNode);
    } // Bug #175: Safari will not fire an ended event if the AudioBufferSourceNode is unconnected.


    addSilentConnection(nativeContext, nativeAudioBufferSourceNode);
    return nativeAudioBufferSourceNode;
  };
};

exports.createNativeAudioBufferSourceNodeFactory = createNativeAudioBufferSourceNodeFactory;
},{"../helpers/assign-native-audio-node-audio-param-value":"../node_modules/standardized-audio-context/build/es2019/helpers/assign-native-audio-node-audio-param-value.js","../helpers/assign-native-audio-node-option":"../node_modules/standardized-audio-context/build/es2019/helpers/assign-native-audio-node-option.js","../helpers/assign-native-audio-node-options":"../node_modules/standardized-audio-context/build/es2019/helpers/assign-native-audio-node-options.js","../helpers/wrap-audio-buffer-source-node-start-method-consecutive-calls":"../node_modules/standardized-audio-context/build/es2019/helpers/wrap-audio-buffer-source-node-start-method-consecutive-calls.js","../helpers/wrap-audio-buffer-source-node-start-method-duration-parameter":"../node_modules/standardized-audio-context/build/es2019/helpers/wrap-audio-buffer-source-node-start-method-duration-parameter.js","../helpers/wrap-audio-scheduled-source-node-start-method-negative-parameters":"../node_modules/standardized-audio-context/build/es2019/helpers/wrap-audio-scheduled-source-node-start-method-negative-parameters.js","../helpers/wrap-audio-scheduled-source-node-stop-method-negative-parameters":"../node_modules/standardized-audio-context/build/es2019/helpers/wrap-audio-scheduled-source-node-stop-method-negative-parameters.js"}],"../node_modules/standardized-audio-context/build/es2019/factories/native-audio-context-constructor.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createNativeAudioContextConstructor = void 0;

const createNativeAudioContextConstructor = window => {
  if (window === null) {
    return null;
  }

  if (window.hasOwnProperty('AudioContext')) {
    return window.AudioContext;
  }

  return window.hasOwnProperty('webkitAudioContext') ? window.webkitAudioContext : null;
};

exports.createNativeAudioContextConstructor = createNativeAudioContextConstructor;
},{}],"../node_modules/standardized-audio-context/build/es2019/factories/native-audio-destination-node.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createNativeAudioDestinationNodeFactory = void 0;

const createNativeAudioDestinationNodeFactory = (createNativeGainNode, overwriteAccessors) => {
  return (nativeContext, channelCount, isNodeOfNativeOfflineAudioContext) => {
    const nativeAudioDestinationNode = nativeContext.destination; // Bug #132: Edge & Safari do not have the correct channelCount.

    if (nativeAudioDestinationNode.channelCount !== channelCount) {
      try {
        nativeAudioDestinationNode.channelCount = channelCount;
      } catch {// Bug #169: Safari throws an error on each attempt to change the channelCount.
      }
    } // Bug #83: Edge & Safari do not have the correct channelCountMode.


    if (isNodeOfNativeOfflineAudioContext && nativeAudioDestinationNode.channelCountMode !== 'explicit') {
      nativeAudioDestinationNode.channelCountMode = 'explicit';
    } // Bug #47: The AudioDestinationNode in Edge and Safari does not initialize the maxChannelCount property correctly.


    if (nativeAudioDestinationNode.maxChannelCount === 0) {
      Object.defineProperty(nativeAudioDestinationNode, 'maxChannelCount', {
        value: channelCount
      });
    } // Bug #168: No browser does yet have an AudioDestinationNode with an output.


    const gainNode = createNativeGainNode(nativeContext, {
      channelCount,
      channelCountMode: nativeAudioDestinationNode.channelCountMode,
      channelInterpretation: nativeAudioDestinationNode.channelInterpretation,
      gain: 1
    });
    overwriteAccessors(gainNode, 'channelCount', get => () => get.call(gainNode), set => value => {
      set.call(gainNode, value);

      try {
        nativeAudioDestinationNode.channelCount = value;
      } catch (err) {
        // Bug #169: Safari throws an error on each attempt to change the channelCount.
        if (value > nativeAudioDestinationNode.maxChannelCount) {
          throw err;
        }
      }
    });
    overwriteAccessors(gainNode, 'channelCountMode', get => () => get.call(gainNode), set => value => {
      set.call(gainNode, value);
      nativeAudioDestinationNode.channelCountMode = value;
    });
    overwriteAccessors(gainNode, 'channelInterpretation', get => () => get.call(gainNode), set => value => {
      set.call(gainNode, value);
      nativeAudioDestinationNode.channelInterpretation = value;
    });
    Object.defineProperty(gainNode, 'maxChannelCount', {
      get: () => nativeAudioDestinationNode.maxChannelCount
    }); // @todo This should be disconnected when the context is closed.

    gainNode.connect(nativeAudioDestinationNode);
    return gainNode;
  };
};

exports.createNativeAudioDestinationNodeFactory = createNativeAudioDestinationNodeFactory;
},{}],"../node_modules/standardized-audio-context/build/es2019/factories/native-audio-node-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createNativeAudioNodeFactory = void 0;

const createNativeAudioNodeFactory = getBackupNativeContext => {
  return (nativeContext, factoryFunction) => {
    // Bug #50: Only Edge does currently not allow to create AudioNodes on a closed context yet.
    const backupNativeContext = getBackupNativeContext(nativeContext);

    if (backupNativeContext !== null) {
      return factoryFunction(backupNativeContext);
    }

    return factoryFunction(nativeContext);
  };
};

exports.createNativeAudioNodeFactory = createNativeAudioNodeFactory;
},{}],"../node_modules/standardized-audio-context/build/es2019/factories/native-audio-worklet-node-constructor.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createNativeAudioWorkletNodeConstructor = void 0;

const createNativeAudioWorkletNodeConstructor = window => {
  if (window === null) {
    return null;
  }

  return window.hasOwnProperty('AudioWorkletNode') ? window.AudioWorkletNode : null;
};

exports.createNativeAudioWorkletNodeConstructor = createNativeAudioWorkletNodeConstructor;
},{}],"../node_modules/standardized-audio-context/build/es2019/helpers/test-clonability-of-audio-worklet-node-options.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.testClonabilityOfAudioWorkletNodeOptions = void 0;

const testClonabilityOfAudioWorkletNodeOptions = audioWorkletNodeOptions => {
  const {
    port1
  } = new MessageChannel();

  try {
    // This will throw an error if the audioWorkletNodeOptions are not clonable.
    port1.postMessage(audioWorkletNodeOptions);
  } finally {
    port1.close();
  }
};

exports.testClonabilityOfAudioWorkletNodeOptions = testClonabilityOfAudioWorkletNodeOptions;
},{}],"../node_modules/standardized-audio-context/build/es2019/factories/native-audio-worklet-node-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createNativeAudioWorkletNodeFactory = void 0;

var _testClonabilityOfAudioWorkletNodeOptions = require("../helpers/test-clonability-of-audio-worklet-node-options");

const createNativeAudioWorkletNodeFactory = (createInvalidStateError, createNativeAudioNode, createNativeAudioWorkletNodeFaker, createNativeGainNode, createNotSupportedError, monitorConnections) => {
  return (nativeContext, baseLatency, nativeAudioWorkletNodeConstructor, name, processorConstructor, options) => {
    if (nativeAudioWorkletNodeConstructor !== null) {
      try {
        const nativeAudioWorkletNode = createNativeAudioNode(nativeContext, ntvCntxt => {
          return new nativeAudioWorkletNodeConstructor(ntvCntxt, name, options);
        });
        const patchedEventListeners = new Map();
        let onprocessorerror = null;
        Object.defineProperties(nativeAudioWorkletNode, {
          /*
           * Bug #61: Overwriting the property accessors for channelCount and channelCountMode is necessary as long as some
           * browsers have no native implementation to achieve a consistent behavior.
           */
          channelCount: {
            get: () => options.channelCount,
            set: () => {
              throw createInvalidStateError();
            }
          },
          channelCountMode: {
            get: () => 'explicit',
            set: () => {
              throw createInvalidStateError();
            }
          },
          // Bug #156: Chrome & Opera do not yet fire an ErrorEvent.
          onprocessorerror: {
            get: () => onprocessorerror,
            set: value => {
              if (typeof onprocessorerror === 'function') {
                nativeAudioWorkletNode.removeEventListener('processorerror', onprocessorerror);
              }

              onprocessorerror = typeof value === 'function' ? value : null;

              if (typeof onprocessorerror === 'function') {
                nativeAudioWorkletNode.addEventListener('processorerror', onprocessorerror);
              }
            }
          }
        });

        nativeAudioWorkletNode.addEventListener = (addEventListener => {
          return (...args) => {
            if (args[0] === 'processorerror') {
              const unpatchedEventListener = typeof args[1] === 'function' ? args[1] : typeof args[1] === 'object' && args[1] !== null && typeof args[1].handleEvent === 'function' ? args[1].handleEvent : null;

              if (unpatchedEventListener !== null) {
                const patchedEventListener = patchedEventListeners.get(args[1]);

                if (patchedEventListener !== undefined) {
                  args[1] = patchedEventListener;
                } else {
                  args[1] = event => {
                    unpatchedEventListener(new ErrorEvent(args[0], { ...event,
                      error: new Error()
                    }));
                  };

                  patchedEventListeners.set(unpatchedEventListener, args[1]);
                }
              }
            }

            return addEventListener.call(nativeAudioWorkletNode, args[0], args[1], args[2]);
          };
        })(nativeAudioWorkletNode.addEventListener);

        nativeAudioWorkletNode.removeEventListener = (removeEventListener => {
          return (...args) => {
            if (args[0] === 'processorerror') {
              const patchedEventListener = patchedEventListeners.get(args[1]);

              if (patchedEventListener !== undefined) {
                patchedEventListeners.delete(args[1]);
                args[1] = patchedEventListener;
              }
            }

            return removeEventListener.call(nativeAudioWorkletNode, args[0], args[1], args[2]);
          };
        })(nativeAudioWorkletNode.removeEventListener);
        /*
         * Bug #86: Chrome & Opera do not invoke the process() function if the corresponding AudioWorkletNode is unconnected but has
         * an output.
         */


        if (options.numberOfOutputs !== 0) {
          const nativeGainNode = createNativeGainNode(nativeContext, {
            channelCount: 1,
            channelCountMode: 'explicit',
            channelInterpretation: 'discrete',
            gain: 0
          });
          nativeAudioWorkletNode.connect(nativeGainNode)
          /*
           * Bug #50: Edge does not yet allow to create AudioNodes on a closed AudioContext. Therefore the context property is
           * used here to make sure to connect the right destination.
           */
          .connect(nativeGainNode.context.destination);

          const whenConnected = () => nativeGainNode.disconnect();
          /*
           * Bug #50: Edge does not yet allow to create AudioNodes on a closed AudioContext. Therefore the context property is
           * used here to make sure to connect the right destination.
           */


          const whenDisconnected = () => nativeGainNode.connect(nativeGainNode.context.destination); // @todo Disconnect the connection when the process() function of the AudioWorkletNode returns false.


          return monitorConnections(nativeAudioWorkletNode, whenConnected, whenDisconnected);
        }

        return nativeAudioWorkletNode;
      } catch (err) {
        // Bug #60: Chrome & Opera throw an InvalidStateError instead of a NotSupportedError.
        if (err.code === 11) {
          throw createNotSupportedError();
        }

        throw err;
      }
    } // Bug #61: Only Chrome & Opera have an implementation of the AudioWorkletNode yet.


    if (processorConstructor === undefined) {
      throw createNotSupportedError();
    }

    (0, _testClonabilityOfAudioWorkletNodeOptions.testClonabilityOfAudioWorkletNodeOptions)(options);
    return createNativeAudioWorkletNodeFaker(nativeContext, baseLatency, processorConstructor, options);
  };
};

exports.createNativeAudioWorkletNodeFactory = createNativeAudioWorkletNodeFactory;
},{"../helpers/test-clonability-of-audio-worklet-node-options":"../node_modules/standardized-audio-context/build/es2019/helpers/test-clonability-of-audio-worklet-node-options.js"}],"../node_modules/standardized-audio-context/build/es2019/helpers/compute-buffer-size.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.computeBufferSize = void 0;

const computeBufferSize = (baseLatency, sampleRate) => {
  if (baseLatency === null) {
    return 512;
  }

  return Math.max(512, Math.min(16384, Math.pow(2, Math.round(Math.log2(baseLatency * sampleRate)))));
};

exports.computeBufferSize = computeBufferSize;
},{}],"../node_modules/standardized-audio-context/build/es2019/helpers/clone-audio-worklet-node-options.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.cloneAudioWorkletNodeOptions = void 0;

const cloneAudioWorkletNodeOptions = audioWorkletNodeOptions => {
  return new Promise((resolve, reject) => {
    const {
      port1,
      port2
    } = new MessageChannel();

    port1.onmessage = ({
      data
    }) => {
      port1.close();
      port2.close();
      resolve(data);
    };

    port1.onmessageerror = ({
      data
    }) => {
      port1.close();
      port2.close();
      reject(data);
    }; // This will throw an error if the audioWorkletNodeOptions are not clonable.


    port2.postMessage(audioWorkletNodeOptions);
  });
};

exports.cloneAudioWorkletNodeOptions = cloneAudioWorkletNodeOptions;
},{}],"../node_modules/standardized-audio-context/build/es2019/helpers/create-audio-worklet-processor-promise.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createAudioWorkletProcessorPromise = void 0;

var _cloneAudioWorkletNodeOptions = require("./clone-audio-worklet-node-options");

const createAudioWorkletProcessorPromise = async (processorConstructor, audioWorkletNodeOptions) => {
  const clonedAudioWorkletNodeOptions = await (0, _cloneAudioWorkletNodeOptions.cloneAudioWorkletNodeOptions)(audioWorkletNodeOptions);
  return new processorConstructor(clonedAudioWorkletNodeOptions);
};

exports.createAudioWorkletProcessorPromise = createAudioWorkletProcessorPromise;
},{"./clone-audio-worklet-node-options":"../node_modules/standardized-audio-context/build/es2019/helpers/clone-audio-worklet-node-options.js"}],"../node_modules/standardized-audio-context/build/es2019/helpers/create-audio-worklet-processor.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createAudioWorkletProcessor = void 0;

var _globals = require("../globals");

var _createAudioWorkletProcessorPromise = require("./create-audio-worklet-processor-promise");

const createAudioWorkletProcessor = (nativeContext, nativeAudioWorkletNode, processorConstructor, audioWorkletNodeOptions) => {
  let nodeToProcessorMap = _globals.NODE_TO_PROCESSOR_MAPS.get(nativeContext);

  if (nodeToProcessorMap === undefined) {
    nodeToProcessorMap = new WeakMap();

    _globals.NODE_TO_PROCESSOR_MAPS.set(nativeContext, nodeToProcessorMap);
  }

  const audioWorkletProcessorPromise = (0, _createAudioWorkletProcessorPromise.createAudioWorkletProcessorPromise)(processorConstructor, audioWorkletNodeOptions);
  nodeToProcessorMap.set(nativeAudioWorkletNode, audioWorkletProcessorPromise);
  return audioWorkletProcessorPromise;
};

exports.createAudioWorkletProcessor = createAudioWorkletProcessor;
},{"../globals":"../node_modules/standardized-audio-context/build/es2019/globals.js","./create-audio-worklet-processor-promise":"../node_modules/standardized-audio-context/build/es2019/helpers/create-audio-worklet-processor-promise.js"}],"../node_modules/standardized-audio-context/build/es2019/factories/native-audio-worklet-node-faker-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createNativeAudioWorkletNodeFakerFactory = void 0;

var _constants = require("../constants");

var _computeBufferSize = require("../helpers/compute-buffer-size");

var _copyFromChannel = require("../helpers/copy-from-channel");

var _copyToChannel = require("../helpers/copy-to-channel");

var _createAudioWorkletProcessor = require("../helpers/create-audio-worklet-processor");

var _createNestedArrays = require("../helpers/create-nested-arrays");

var _readOnlyMap = require("../read-only-map");

const createNativeAudioWorkletNodeFakerFactory = (auxiliaryGainNodeStore, connectMultipleOutputs, createIndexSizeError, createInvalidStateError, createNativeChannelMergerNode, createNativeChannelSplitterNode, createNativeConstantSourceNode, createNativeGainNode, createNativeScriptProcessorNode, createNotSupportedError, disconnectMultipleOutputs, exposeCurrentFrameAndCurrentTime, monitorConnections) => {
  return (nativeContext, baseLatency, processorConstructor, options) => {
    if (options.numberOfInputs === 0 && options.numberOfOutputs === 0) {
      throw createNotSupportedError();
    }

    if (options.outputChannelCount !== undefined) {
      // @todo Check if any of the channelCount values is greater than the implementation's maximum number of channels.
      if (options.outputChannelCount.some(channelCount => channelCount < 1)) {
        throw createNotSupportedError();
      }

      if (options.outputChannelCount.length !== options.numberOfOutputs) {
        throw createIndexSizeError();
      }
    } // Bug #61: This is not part of the standard but required for the faker to work.


    if (options.channelCountMode !== 'explicit') {
      throw createNotSupportedError();
    }

    const numberOfInputChannels = options.channelCount * options.numberOfInputs;
    const numberOfOutputChannels = options.outputChannelCount.reduce((sum, value) => sum + value, 0);
    const numberOfParameters = processorConstructor.parameterDescriptors === undefined ? 0 : processorConstructor.parameterDescriptors.length; // Bug #61: This is not part of the standard but required for the faker to work.

    if (numberOfInputChannels + numberOfParameters > 6 || numberOfOutputChannels > 6) {
      throw createNotSupportedError();
    }

    const messageChannel = new MessageChannel();
    const gainNodes = [];
    const inputChannelSplitterNodes = [];

    for (let i = 0; i < options.numberOfInputs; i += 1) {
      gainNodes.push(createNativeGainNode(nativeContext, {
        channelCount: options.channelCount,
        channelCountMode: options.channelCountMode,
        channelInterpretation: options.channelInterpretation,
        gain: 1
      }));
      inputChannelSplitterNodes.push(createNativeChannelSplitterNode(nativeContext, {
        channelCount: options.channelCount,
        channelCountMode: 'explicit',
        channelInterpretation: 'discrete',
        numberOfOutputs: options.channelCount
      }));
    }

    const constantSourceNodes = [];

    if (processorConstructor.parameterDescriptors !== undefined) {
      for (const {
        defaultValue,
        maxValue,
        minValue,
        name
      } of processorConstructor.parameterDescriptors) {
        const constantSourceNode = createNativeConstantSourceNode(nativeContext, {
          channelCount: 1,
          channelCountMode: 'explicit',
          channelInterpretation: 'discrete',
          offset: options.parameterData[name] !== undefined ? options.parameterData[name] : defaultValue === undefined ? 0 : defaultValue
        });
        Object.defineProperties(constantSourceNode.offset, {
          defaultValue: {
            get: () => defaultValue === undefined ? 0 : defaultValue
          },
          maxValue: {
            get: () => maxValue === undefined ? _constants.MOST_POSITIVE_SINGLE_FLOAT : maxValue
          },
          minValue: {
            get: () => minValue === undefined ? _constants.MOST_NEGATIVE_SINGLE_FLOAT : minValue
          }
        });
        constantSourceNodes.push(constantSourceNode);
      }
    }

    const inputChannelMergerNode = createNativeChannelMergerNode(nativeContext, {
      channelCount: 1,
      channelCountMode: 'explicit',
      channelInterpretation: 'speakers',
      numberOfInputs: Math.max(1, numberOfInputChannels + numberOfParameters)
    });
    const bufferSize = (0, _computeBufferSize.computeBufferSize)(baseLatency, nativeContext.sampleRate);
    const scriptProcessorNode = createNativeScriptProcessorNode(nativeContext, bufferSize, numberOfInputChannels + numberOfParameters, // Bug #87: Only Firefox will fire an AudioProcessingEvent if there is no connected output.
    Math.max(1, numberOfOutputChannels));
    const outputChannelSplitterNode = createNativeChannelSplitterNode(nativeContext, {
      channelCount: Math.max(1, numberOfOutputChannels),
      channelCountMode: 'explicit',
      channelInterpretation: 'discrete',
      numberOfOutputs: Math.max(1, numberOfOutputChannels)
    });
    const outputChannelMergerNodes = [];

    for (let i = 0; i < options.numberOfOutputs; i += 1) {
      outputChannelMergerNodes.push(createNativeChannelMergerNode(nativeContext, {
        channelCount: 1,
        channelCountMode: 'explicit',
        channelInterpretation: 'speakers',
        numberOfInputs: options.outputChannelCount[i]
      }));
    }

    for (let i = 0; i < options.numberOfInputs; i += 1) {
      gainNodes[i].connect(inputChannelSplitterNodes[i]);

      for (let j = 0; j < options.channelCount; j += 1) {
        inputChannelSplitterNodes[i].connect(inputChannelMergerNode, j, i * options.channelCount + j);
      }
    }

    const parameterMap = new _readOnlyMap.ReadOnlyMap(processorConstructor.parameterDescriptors === undefined ? [] : processorConstructor.parameterDescriptors.map(({
      name
    }, index) => {
      const constantSourceNode = constantSourceNodes[index];
      constantSourceNode.connect(inputChannelMergerNode, 0, numberOfInputChannels + index);
      constantSourceNode.start(0);
      return [name, constantSourceNode.offset];
    }));
    inputChannelMergerNode.connect(scriptProcessorNode);
    let channelInterpretation = options.channelInterpretation;
    let onprocessorerror = null; // Bug #87: Expose at least one output to make this node connectable.

    const outputAudioNodes = options.numberOfOutputs === 0 ? [scriptProcessorNode] : outputChannelMergerNodes;
    const nativeAudioWorkletNodeFaker = {
      get bufferSize() {
        return bufferSize;
      },

      get channelCount() {
        return options.channelCount;
      },

      set channelCount(_) {
        // Bug #61: This is not part of the standard but required for the faker to work.
        throw createInvalidStateError();
      },

      get channelCountMode() {
        return options.channelCountMode;
      },

      set channelCountMode(_) {
        // Bug #61: This is not part of the standard but required for the faker to work.
        throw createInvalidStateError();
      },

      get channelInterpretation() {
        return channelInterpretation;
      },

      set channelInterpretation(value) {
        for (const gainNode of gainNodes) {
          gainNode.channelInterpretation = value;
        }

        channelInterpretation = value;
      },

      get context() {
        return scriptProcessorNode.context;
      },

      get inputs() {
        return gainNodes;
      },

      get numberOfInputs() {
        return options.numberOfInputs;
      },

      get numberOfOutputs() {
        return options.numberOfOutputs;
      },

      get onprocessorerror() {
        return onprocessorerror;
      },

      set onprocessorerror(value) {
        if (typeof onprocessorerror === 'function') {
          nativeAudioWorkletNodeFaker.removeEventListener('processorerror', onprocessorerror);
        }

        onprocessorerror = typeof value === 'function' ? value : null;

        if (typeof onprocessorerror === 'function') {
          nativeAudioWorkletNodeFaker.addEventListener('processorerror', onprocessorerror);
        }
      },

      get parameters() {
        return parameterMap;
      },

      get port() {
        return messageChannel.port2;
      },

      addEventListener(...args) {
        return scriptProcessorNode.addEventListener(args[0], args[1], args[2]);
      },

      connect: connectMultipleOutputs.bind(null, outputAudioNodes),
      disconnect: disconnectMultipleOutputs.bind(null, outputAudioNodes),

      dispatchEvent(...args) {
        return scriptProcessorNode.dispatchEvent(args[0]);
      },

      removeEventListener(...args) {
        return scriptProcessorNode.removeEventListener(args[0], args[1], args[2]);
      }

    };
    const patchedEventListeners = new Map();

    messageChannel.port1.addEventListener = (addEventListener => {
      return (...args) => {
        if (args[0] === 'message') {
          const unpatchedEventListener = typeof args[1] === 'function' ? args[1] : typeof args[1] === 'object' && args[1] !== null && typeof args[1].handleEvent === 'function' ? args[1].handleEvent : null;

          if (unpatchedEventListener !== null) {
            const patchedEventListener = patchedEventListeners.get(args[1]);

            if (patchedEventListener !== undefined) {
              args[1] = patchedEventListener;
            } else {
              args[1] = event => {
                exposeCurrentFrameAndCurrentTime(nativeContext.currentTime, nativeContext.sampleRate, () => unpatchedEventListener(event));
              };

              patchedEventListeners.set(unpatchedEventListener, args[1]);
            }
          }
        }

        return addEventListener.call(messageChannel.port1, args[0], args[1], args[2]);
      };
    })(messageChannel.port1.addEventListener);

    messageChannel.port1.removeEventListener = (removeEventListener => {
      return (...args) => {
        if (args[0] === 'message') {
          const patchedEventListener = patchedEventListeners.get(args[1]);

          if (patchedEventListener !== undefined) {
            patchedEventListeners.delete(args[1]);
            args[1] = patchedEventListener;
          }
        }

        return removeEventListener.call(messageChannel.port1, args[0], args[1], args[2]);
      };
    })(messageChannel.port1.removeEventListener);

    let onmessage = null;
    Object.defineProperty(messageChannel.port1, 'onmessage', {
      get: () => onmessage,
      set: value => {
        if (typeof onmessage === 'function') {
          messageChannel.port1.removeEventListener('message', onmessage);
        }

        onmessage = typeof value === 'function' ? value : null;

        if (typeof onmessage === 'function') {
          messageChannel.port1.addEventListener('message', onmessage);
          messageChannel.port1.start();
        }
      }
    });
    processorConstructor.prototype.port = messageChannel.port1;
    let audioWorkletProcessor = null;
    const audioWorkletProcessorPromise = (0, _createAudioWorkletProcessor.createAudioWorkletProcessor)(nativeContext, nativeAudioWorkletNodeFaker, processorConstructor, options);
    audioWorkletProcessorPromise.then(dWrkltPrcssr => audioWorkletProcessor = dWrkltPrcssr);
    const inputs = (0, _createNestedArrays.createNestedArrays)(options.numberOfInputs, options.channelCount);
    const outputs = (0, _createNestedArrays.createNestedArrays)(options.numberOfOutputs, options.outputChannelCount);
    const parameters = processorConstructor.parameterDescriptors === undefined ? [] : processorConstructor.parameterDescriptors.reduce((prmtrs, {
      name
    }) => ({ ...prmtrs,
      [name]: new Float32Array(128)
    }), {});
    let isActive = true;

    const disconnectOutputsGraph = () => {
      if (options.numberOfOutputs > 0) {
        scriptProcessorNode.disconnect(outputChannelSplitterNode);
      }

      for (let i = 0, outputChannelSplitterNodeOutput = 0; i < options.numberOfOutputs; i += 1) {
        const outputChannelMergerNode = outputChannelMergerNodes[i];

        for (let j = 0; j < options.outputChannelCount[i]; j += 1) {
          outputChannelSplitterNode.disconnect(outputChannelMergerNode, outputChannelSplitterNodeOutput + j, j);
        }

        outputChannelSplitterNodeOutput += options.outputChannelCount[i];
      }
    }; // tslint:disable-next-line:deprecation


    scriptProcessorNode.onaudioprocess = ({
      inputBuffer,
      outputBuffer
    }) => {
      if (audioWorkletProcessor !== null) {
        for (let i = 0; i < bufferSize; i += 128) {
          for (let j = 0; j < options.numberOfInputs; j += 1) {
            for (let k = 0; k < options.channelCount; k += 1) {
              (0, _copyFromChannel.copyFromChannel)(inputBuffer, inputs[j], k, k, i);
            }
          }

          if (processorConstructor.parameterDescriptors !== undefined) {
            processorConstructor.parameterDescriptors.forEach(({
              name
            }, index) => {
              (0, _copyFromChannel.copyFromChannel)(inputBuffer, parameters, name, numberOfInputChannels + index, i);
            });
          }

          for (let j = 0; j < options.numberOfInputs; j += 1) {
            for (let k = 0; k < options.outputChannelCount[j]; k += 1) {
              // The byteLength will be 0 when the ArrayBuffer was transferred.
              if (outputs[j][k].byteLength === 0) {
                outputs[j][k] = new Float32Array(128);
              }
            }
          }

          try {
            const potentiallyEmptyInputs = inputs.map((input, index) => {
              const auxiliaryGainNodes = auxiliaryGainNodeStore.get(nativeAudioWorkletNodeFaker);

              if (auxiliaryGainNodes === undefined || auxiliaryGainNodes.get(index) === undefined) {
                return [];
              }

              return input;
            });
            const activeSourceFlag = exposeCurrentFrameAndCurrentTime(nativeContext.currentTime + i / nativeContext.sampleRate, nativeContext.sampleRate, () => audioWorkletProcessor.process(potentiallyEmptyInputs, outputs, parameters));
            isActive = activeSourceFlag;

            for (let j = 0, outputChannelSplitterNodeOutput = 0; j < options.numberOfOutputs; j += 1) {
              for (let k = 0; k < options.outputChannelCount[j]; k += 1) {
                (0, _copyToChannel.copyToChannel)(outputBuffer, outputs[j], k, outputChannelSplitterNodeOutput + k, i);
              }

              outputChannelSplitterNodeOutput += options.outputChannelCount[j];
            }
          } catch (error) {
            isActive = false;
            nativeAudioWorkletNodeFaker.dispatchEvent(new ErrorEvent('processorerror', {
              error
            }));
          }

          if (!isActive) {
            for (let j = 0; j < options.numberOfInputs; j += 1) {
              gainNodes[j].disconnect(inputChannelSplitterNodes[j]);

              for (let k = 0; k < options.channelCount; k += 1) {
                inputChannelSplitterNodes[i].disconnect(inputChannelMergerNode, k, j * options.channelCount + k);
              }
            }

            if (processorConstructor.parameterDescriptors !== undefined) {
              const length = processorConstructor.parameterDescriptors.length;

              for (let j = 0; j < length; j += 1) {
                const constantSourceNode = constantSourceNodes[j];
                constantSourceNode.disconnect(inputChannelMergerNode, 0, numberOfInputChannels + j);
                constantSourceNode.stop();
              }
            }

            inputChannelMergerNode.disconnect(scriptProcessorNode);
            scriptProcessorNode.onaudioprocess = null; // tslint:disable-line:deprecation

            if (isConnected) {
              disconnectOutputsGraph();
            } else {
              disconnectFakeGraph();
            }

            break;
          }
        }
      }
    };

    let isConnected = false; // Bug #87: Only Firefox will fire an AudioProcessingEvent if there is no connected output.

    const nativeGainNode = createNativeGainNode(nativeContext, {
      channelCount: 1,
      channelCountMode: 'explicit',
      channelInterpretation: 'discrete',
      gain: 0
    });

    const connectFakeGraph = () => scriptProcessorNode.connect(nativeGainNode)
    /*
     * Bug #50: Edge does not yet allow to create AudioNodes on a closed AudioContext. Therefore the context property is used here
     * to make sure to connect the right destination.
     */
    .connect(nativeGainNode.context.destination);

    const disconnectFakeGraph = () => {
      scriptProcessorNode.disconnect(nativeGainNode);
      nativeGainNode.disconnect();
    };

    const whenConnected = () => {
      if (isActive) {
        disconnectFakeGraph();

        if (options.numberOfOutputs > 0) {
          scriptProcessorNode.connect(outputChannelSplitterNode);
        }

        for (let i = 0, outputChannelSplitterNodeOutput = 0; i < options.numberOfOutputs; i += 1) {
          const outputChannelMergerNode = outputChannelMergerNodes[i];

          for (let j = 0; j < options.outputChannelCount[i]; j += 1) {
            outputChannelSplitterNode.connect(outputChannelMergerNode, outputChannelSplitterNodeOutput + j, j);
          }

          outputChannelSplitterNodeOutput += options.outputChannelCount[i];
        }
      }

      isConnected = true;
    };

    const whenDisconnected = () => {
      if (isActive) {
        connectFakeGraph();
        disconnectOutputsGraph();
      }

      isConnected = false;
    };

    connectFakeGraph();
    return monitorConnections(nativeAudioWorkletNodeFaker, whenConnected, whenDisconnected);
  };
};

exports.createNativeAudioWorkletNodeFakerFactory = createNativeAudioWorkletNodeFakerFactory;
},{"../constants":"../node_modules/standardized-audio-context/build/es2019/constants.js","../helpers/compute-buffer-size":"../node_modules/standardized-audio-context/build/es2019/helpers/compute-buffer-size.js","../helpers/copy-from-channel":"../node_modules/standardized-audio-context/build/es2019/helpers/copy-from-channel.js","../helpers/copy-to-channel":"../node_modules/standardized-audio-context/build/es2019/helpers/copy-to-channel.js","../helpers/create-audio-worklet-processor":"../node_modules/standardized-audio-context/build/es2019/helpers/create-audio-worklet-processor.js","../helpers/create-nested-arrays":"../node_modules/standardized-audio-context/build/es2019/helpers/create-nested-arrays.js","../read-only-map":"../node_modules/standardized-audio-context/build/es2019/read-only-map.js"}],"../node_modules/standardized-audio-context/build/es2019/factories/native-biquad-filter-node-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createNativeBiquadFilterNodeFactory = void 0;

var _assignNativeAudioNodeAudioParamValue = require("../helpers/assign-native-audio-node-audio-param-value");

var _assignNativeAudioNodeOption = require("../helpers/assign-native-audio-node-option");

var _assignNativeAudioNodeOptions = require("../helpers/assign-native-audio-node-options");

const createNativeBiquadFilterNodeFactory = createNativeAudioNode => {
  return (nativeContext, options) => {
    const nativeBiquadFilterNode = createNativeAudioNode(nativeContext, ntvCntxt => ntvCntxt.createBiquadFilter());
    (0, _assignNativeAudioNodeOptions.assignNativeAudioNodeOptions)(nativeBiquadFilterNode, options);
    (0, _assignNativeAudioNodeAudioParamValue.assignNativeAudioNodeAudioParamValue)(nativeBiquadFilterNode, options, 'Q');
    (0, _assignNativeAudioNodeAudioParamValue.assignNativeAudioNodeAudioParamValue)(nativeBiquadFilterNode, options, 'detune');
    (0, _assignNativeAudioNodeAudioParamValue.assignNativeAudioNodeAudioParamValue)(nativeBiquadFilterNode, options, 'frequency');
    (0, _assignNativeAudioNodeAudioParamValue.assignNativeAudioNodeAudioParamValue)(nativeBiquadFilterNode, options, 'gain');
    (0, _assignNativeAudioNodeOption.assignNativeAudioNodeOption)(nativeBiquadFilterNode, options, 'type');
    return nativeBiquadFilterNode;
  };
};

exports.createNativeBiquadFilterNodeFactory = createNativeBiquadFilterNodeFactory;
},{"../helpers/assign-native-audio-node-audio-param-value":"../node_modules/standardized-audio-context/build/es2019/helpers/assign-native-audio-node-audio-param-value.js","../helpers/assign-native-audio-node-option":"../node_modules/standardized-audio-context/build/es2019/helpers/assign-native-audio-node-option.js","../helpers/assign-native-audio-node-options":"../node_modules/standardized-audio-context/build/es2019/helpers/assign-native-audio-node-options.js"}],"../node_modules/standardized-audio-context/build/es2019/factories/native-channel-merger-node-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createNativeChannelMergerNodeFactory = void 0;

var _assignNativeAudioNodeOptions = require("../helpers/assign-native-audio-node-options");

const createNativeChannelMergerNodeFactory = (createNativeAudioNode, wrapChannelMergerNode) => {
  return (nativeContext, options) => {
    const nativeChannelMergerNode = createNativeAudioNode(nativeContext, ntvCntxt => {
      return ntvCntxt.createChannelMerger(options.numberOfInputs);
    }); // Bug #15: Safari does not return the default properties.
    // Bug #16: Safari does not throw an error when setting a different channelCount or channelCountMode.

    if (nativeChannelMergerNode.channelCount !== 1 && nativeChannelMergerNode.channelCountMode !== 'explicit') {
      wrapChannelMergerNode(nativeContext, nativeChannelMergerNode);
    }

    (0, _assignNativeAudioNodeOptions.assignNativeAudioNodeOptions)(nativeChannelMergerNode, options);
    return nativeChannelMergerNode;
  };
};

exports.createNativeChannelMergerNodeFactory = createNativeChannelMergerNodeFactory;
},{"../helpers/assign-native-audio-node-options":"../node_modules/standardized-audio-context/build/es2019/helpers/assign-native-audio-node-options.js"}],"../node_modules/standardized-audio-context/build/es2019/helpers/wrap-channel-splitter-node.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.wrapChannelSplitterNode = void 0;

var _invalidStateError = require("../factories/invalid-state-error");

const wrapChannelSplitterNode = channelSplitterNode => {
  const channelCount = channelSplitterNode.numberOfOutputs; // Bug #97: Safari does not throw an error when attempting to change the channelCount to something other than its initial value.

  Object.defineProperty(channelSplitterNode, 'channelCount', {
    get: () => channelCount,
    set: value => {
      if (value !== channelCount) {
        throw (0, _invalidStateError.createInvalidStateError)();
      }
    }
  });
  /*
   * Bug #30: Only Chrome, Firefox & Opera throw an error when attempting to change the channelCountMode to something other than
   * explicit.
   */

  Object.defineProperty(channelSplitterNode, 'channelCountMode', {
    get: () => 'explicit',
    set: value => {
      if (value !== 'explicit') {
        throw (0, _invalidStateError.createInvalidStateError)();
      }
    }
  });
  /*
   * Bug #32: Only Chrome, Firefox & Opera throws an error when attempting to change the channelInterpretation to something other than
   * discrete.
   */

  Object.defineProperty(channelSplitterNode, 'channelInterpretation', {
    get: () => 'discrete',
    set: value => {
      if (value !== 'discrete') {
        throw (0, _invalidStateError.createInvalidStateError)();
      }
    }
  });
};

exports.wrapChannelSplitterNode = wrapChannelSplitterNode;
},{"../factories/invalid-state-error":"../node_modules/standardized-audio-context/build/es2019/factories/invalid-state-error.js"}],"../node_modules/standardized-audio-context/build/es2019/factories/native-channel-splitter-node-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createNativeChannelSplitterNodeFactory = void 0;

var _assignNativeAudioNodeOptions = require("../helpers/assign-native-audio-node-options");

var _wrapChannelSplitterNode = require("../helpers/wrap-channel-splitter-node");

const createNativeChannelSplitterNodeFactory = createNativeAudioNode => {
  return (nativeContext, options) => {
    const nativeChannelSplitterNode = createNativeAudioNode(nativeContext, ntvCntxt => {
      return ntvCntxt.createChannelSplitter(options.numberOfOutputs);
    }); // Bug #96: Safari does not have the correct channelCount.
    // Bug #29: Edge & Safari do not have the correct channelCountMode.
    // Bug #31: Edge & Safari do not have the correct channelInterpretation.

    (0, _assignNativeAudioNodeOptions.assignNativeAudioNodeOptions)(nativeChannelSplitterNode, options); // Bug #29, #30, #31, #32, #96 & #97: Only Chrome, Firefox & Opera partially support the spec yet.

    (0, _wrapChannelSplitterNode.wrapChannelSplitterNode)(nativeChannelSplitterNode);
    return nativeChannelSplitterNode;
  };
};

exports.createNativeChannelSplitterNodeFactory = createNativeChannelSplitterNodeFactory;
},{"../helpers/assign-native-audio-node-options":"../node_modules/standardized-audio-context/build/es2019/helpers/assign-native-audio-node-options.js","../helpers/wrap-channel-splitter-node":"../node_modules/standardized-audio-context/build/es2019/helpers/wrap-channel-splitter-node.js"}],"../node_modules/standardized-audio-context/build/es2019/factories/native-constant-source-node-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createNativeConstantSourceNodeFactory = void 0;

var _assignNativeAudioNodeAudioParamValue = require("../helpers/assign-native-audio-node-audio-param-value");

var _assignNativeAudioNodeOptions = require("../helpers/assign-native-audio-node-options");

var _wrapAudioScheduledSourceNodeStartMethodNegativeParameters = require("../helpers/wrap-audio-scheduled-source-node-start-method-negative-parameters");

var _wrapAudioScheduledSourceNodeStopMethodNegativeParameters = require("../helpers/wrap-audio-scheduled-source-node-stop-method-negative-parameters");

const createNativeConstantSourceNodeFactory = (addSilentConnection, cacheTestResult, createNativeAudioNode, createNativeConstantSourceNodeFaker, testAudioScheduledSourceNodeStartMethodNegativeParametersSupport, testAudioScheduledSourceNodeStopMethodNegativeParametersSupport) => {
  return (nativeContext, options) => {
    // Bug #62: Edge & Safari do not support ConstantSourceNodes.
    if (nativeContext.createConstantSource === undefined) {
      return createNativeConstantSourceNodeFaker(nativeContext, options);
    }

    const nativeConstantSourceNode = createNativeAudioNode(nativeContext, ntvCntxt => {
      return ntvCntxt.createConstantSource();
    });
    (0, _assignNativeAudioNodeOptions.assignNativeAudioNodeOptions)(nativeConstantSourceNode, options);
    (0, _assignNativeAudioNodeAudioParamValue.assignNativeAudioNodeAudioParamValue)(nativeConstantSourceNode, options, 'offset'); // Bug #44: Only Chrome, Firefox & Opera throw a RangeError yet.

    if (!cacheTestResult(testAudioScheduledSourceNodeStartMethodNegativeParametersSupport, () => testAudioScheduledSourceNodeStartMethodNegativeParametersSupport(nativeContext))) {
      (0, _wrapAudioScheduledSourceNodeStartMethodNegativeParameters.wrapAudioScheduledSourceNodeStartMethodNegativeParameters)(nativeConstantSourceNode);
    } // Bug #44: Only Firefox does not throw a RangeError yet.


    if (!cacheTestResult(testAudioScheduledSourceNodeStopMethodNegativeParametersSupport, () => testAudioScheduledSourceNodeStopMethodNegativeParametersSupport(nativeContext))) {
      (0, _wrapAudioScheduledSourceNodeStopMethodNegativeParameters.wrapAudioScheduledSourceNodeStopMethodNegativeParameters)(nativeConstantSourceNode);
    } // Bug #175: Safari will not fire an ended event if the ConstantSourceNode is unconnected.


    addSilentConnection(nativeContext, nativeConstantSourceNode);
    return nativeConstantSourceNode;
  };
};

exports.createNativeConstantSourceNodeFactory = createNativeConstantSourceNodeFactory;
},{"../helpers/assign-native-audio-node-audio-param-value":"../node_modules/standardized-audio-context/build/es2019/helpers/assign-native-audio-node-audio-param-value.js","../helpers/assign-native-audio-node-options":"../node_modules/standardized-audio-context/build/es2019/helpers/assign-native-audio-node-options.js","../helpers/wrap-audio-scheduled-source-node-start-method-negative-parameters":"../node_modules/standardized-audio-context/build/es2019/helpers/wrap-audio-scheduled-source-node-start-method-negative-parameters.js","../helpers/wrap-audio-scheduled-source-node-stop-method-negative-parameters":"../node_modules/standardized-audio-context/build/es2019/helpers/wrap-audio-scheduled-source-node-stop-method-negative-parameters.js"}],"../node_modules/standardized-audio-context/build/es2019/helpers/intercept-connections.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.interceptConnections = void 0;

const interceptConnections = (original, interceptor) => {
  original.connect = interceptor.connect.bind(interceptor);
  original.disconnect = interceptor.disconnect.bind(interceptor);
  return original;
};

exports.interceptConnections = interceptConnections;
},{}],"../node_modules/standardized-audio-context/build/es2019/factories/native-constant-source-node-faker-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createNativeConstantSourceNodeFakerFactory = void 0;

var _interceptConnections = require("../helpers/intercept-connections");

const createNativeConstantSourceNodeFakerFactory = (addSilentConnection, createNativeAudioBufferSourceNode, createNativeGainNode, monitorConnections) => {
  return (nativeContext, {
    offset,
    ...audioNodeOptions
  }) => {
    const audioBuffer = nativeContext.createBuffer(1, 2, nativeContext.sampleRate);
    const audioBufferSourceNode = createNativeAudioBufferSourceNode(nativeContext, {
      buffer: null,
      channelCount: 2,
      channelCountMode: 'max',
      channelInterpretation: 'speakers',
      loop: false,
      loopEnd: 0,
      loopStart: 0,
      playbackRate: 1
    });
    const gainNode = createNativeGainNode(nativeContext, { ...audioNodeOptions,
      gain: offset
    }); // Bug #5: Safari does not support copyFromChannel() and copyToChannel().

    const channelData = audioBuffer.getChannelData(0); // Bug #95: Safari does not play or loop one sample buffers.

    channelData[0] = 1;
    channelData[1] = 1;
    audioBufferSourceNode.buffer = audioBuffer;
    audioBufferSourceNode.loop = true;
    const nativeConstantSourceNodeFaker = {
      get bufferSize() {
        return undefined;
      },

      get channelCount() {
        return gainNode.channelCount;
      },

      set channelCount(value) {
        gainNode.channelCount = value;
      },

      get channelCountMode() {
        return gainNode.channelCountMode;
      },

      set channelCountMode(value) {
        gainNode.channelCountMode = value;
      },

      get channelInterpretation() {
        return gainNode.channelInterpretation;
      },

      set channelInterpretation(value) {
        gainNode.channelInterpretation = value;
      },

      get context() {
        return gainNode.context;
      },

      get inputs() {
        return [];
      },

      get numberOfInputs() {
        return audioBufferSourceNode.numberOfInputs;
      },

      get numberOfOutputs() {
        return gainNode.numberOfOutputs;
      },

      get offset() {
        return gainNode.gain;
      },

      get onended() {
        return audioBufferSourceNode.onended;
      },

      set onended(value) {
        audioBufferSourceNode.onended = value;
      },

      addEventListener(...args) {
        return audioBufferSourceNode.addEventListener(args[0], args[1], args[2]);
      },

      dispatchEvent(...args) {
        return audioBufferSourceNode.dispatchEvent(args[0]);
      },

      removeEventListener(...args) {
        return audioBufferSourceNode.removeEventListener(args[0], args[1], args[2]);
      },

      start(when = 0) {
        audioBufferSourceNode.start.call(audioBufferSourceNode, when);
      },

      stop(when = 0) {
        audioBufferSourceNode.stop.call(audioBufferSourceNode, when);
      }

    };

    const whenConnected = () => audioBufferSourceNode.connect(gainNode);

    const whenDisconnected = () => audioBufferSourceNode.disconnect(gainNode); // Bug #175: Safari will not fire an ended event if the AudioBufferSourceNode is unconnected.


    addSilentConnection(nativeContext, audioBufferSourceNode);
    return monitorConnections((0, _interceptConnections.interceptConnections)(nativeConstantSourceNodeFaker, gainNode), whenConnected, whenDisconnected);
  };
};

exports.createNativeConstantSourceNodeFakerFactory = createNativeConstantSourceNodeFakerFactory;
},{"../helpers/intercept-connections":"../node_modules/standardized-audio-context/build/es2019/helpers/intercept-connections.js"}],"../node_modules/standardized-audio-context/build/es2019/factories/native-convolver-node-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createNativeConvolverNodeFactory = void 0;

var _assignNativeAudioNodeOption = require("../helpers/assign-native-audio-node-option");

var _assignNativeAudioNodeOptions = require("../helpers/assign-native-audio-node-options");

const createNativeConvolverNodeFactory = (createNativeAudioNode, createNativeConvolverNodeFaker, createNotSupportedError, overwriteAccessors) => {
  return (nativeContext, options) => {
    const nativeConvolverNode = createNativeAudioNode(nativeContext, ntvCntxt => ntvCntxt.createConvolver());

    try {
      // Bug #166: Opera does not allow yet to set the channelCount to 1.
      nativeConvolverNode.channelCount = 1;
    } catch (err) {
      return createNativeConvolverNodeFaker(nativeContext, options);
    }

    (0, _assignNativeAudioNodeOptions.assignNativeAudioNodeOptions)(nativeConvolverNode, options); // The normalize property needs to be set before setting the buffer.

    if (options.disableNormalization === nativeConvolverNode.normalize) {
      nativeConvolverNode.normalize = !options.disableNormalization;
    }

    (0, _assignNativeAudioNodeOption.assignNativeAudioNodeOption)(nativeConvolverNode, options, 'buffer'); // Bug #113: Edge & Safari allow to set the channelCount to a value larger than 2.

    if (options.channelCount > 2) {
      throw createNotSupportedError();
    }

    overwriteAccessors(nativeConvolverNode, 'channelCount', get => () => get.call(nativeConvolverNode), set => value => {
      if (value > 2) {
        throw createNotSupportedError();
      }

      return set.call(nativeConvolverNode, value);
    }); // Bug #114: Edge & Safari allow to set the channelCountMode to 'max'.

    if (options.channelCountMode === 'max') {
      throw createNotSupportedError();
    }

    overwriteAccessors(nativeConvolverNode, 'channelCountMode', get => () => get.call(nativeConvolverNode), set => value => {
      if (value === 'max') {
        throw createNotSupportedError();
      }

      return set.call(nativeConvolverNode, value);
    });
    return nativeConvolverNode;
  };
};

exports.createNativeConvolverNodeFactory = createNativeConvolverNodeFactory;
},{"../helpers/assign-native-audio-node-option":"../node_modules/standardized-audio-context/build/es2019/helpers/assign-native-audio-node-option.js","../helpers/assign-native-audio-node-options":"../node_modules/standardized-audio-context/build/es2019/helpers/assign-native-audio-node-options.js"}],"../node_modules/standardized-audio-context/build/es2019/factories/native-convolver-node-faker-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createNativeConvolverNodeFakerFactory = void 0;

var _assignNativeAudioNodeOptions = require("../helpers/assign-native-audio-node-options");

var _interceptConnections = require("../helpers/intercept-connections");

const createNativeConvolverNodeFakerFactory = (createNativeAudioNode, createNativeGainNode, monitorConnections) => {
  return (nativeContext, {
    buffer,
    channelCount,
    channelCountMode,
    channelInterpretation,
    disableNormalization
  }) => {
    const convolverNode = createNativeAudioNode(nativeContext, ntvCntxt => ntvCntxt.createConvolver());
    (0, _assignNativeAudioNodeOptions.assignNativeAudioNodeOptions)(convolverNode, {
      // Bug #166: Opera does not allow yet to set the channelCount to 1.
      channelCount: Math.max(channelCount, 2),
      // Bug #167: Opera does not allow yet to set the channelCountMode to 'explicit'.
      channelCountMode: channelCountMode === 'max' ? channelCountMode : 'clamped-max',
      channelInterpretation
    });
    const gainNode = createNativeGainNode(nativeContext, {
      channelCount,
      channelCountMode,
      channelInterpretation,
      gain: 1
    });
    const nativeConvolverNodeFaker = {
      get buffer() {
        return convolverNode.buffer;
      },

      set buffer(value) {
        convolverNode.buffer = value;
      },

      get bufferSize() {
        return undefined;
      },

      get channelCount() {
        return gainNode.channelCount;
      },

      set channelCount(value) {
        // Bug #166: Opera does not allow yet to set the channelCount to 1.
        if (value > 2) {
          convolverNode.channelCount = value;
        }

        gainNode.channelCount = value;
      },

      get channelCountMode() {
        return gainNode.channelCountMode;
      },

      set channelCountMode(value) {
        // Bug #167: Opera does not allow yet to set the channelCountMode to 'explicit'.
        if (value === 'max') {
          convolverNode.channelCountMode = value;
        }

        gainNode.channelCountMode = value;
      },

      get channelInterpretation() {
        return convolverNode.channelInterpretation;
      },

      set channelInterpretation(value) {
        convolverNode.channelInterpretation = value;
        gainNode.channelInterpretation = value;
      },

      get context() {
        return convolverNode.context;
      },

      get inputs() {
        return [convolverNode];
      },

      get numberOfInputs() {
        return convolverNode.numberOfInputs;
      },

      get numberOfOutputs() {
        return convolverNode.numberOfOutputs;
      },

      get normalize() {
        return convolverNode.normalize;
      },

      set normalize(value) {
        convolverNode.normalize = value;
      },

      addEventListener(...args) {
        return convolverNode.addEventListener(args[0], args[1], args[2]);
      },

      dispatchEvent(...args) {
        return convolverNode.dispatchEvent(args[0]);
      },

      removeEventListener(...args) {
        return convolverNode.removeEventListener(args[0], args[1], args[2]);
      }

    }; // The normalize property needs to be set before setting the buffer.

    if (disableNormalization === nativeConvolverNodeFaker.normalize) {
      nativeConvolverNodeFaker.normalize = !disableNormalization;
    }

    if (buffer !== nativeConvolverNodeFaker.buffer) {
      nativeConvolverNodeFaker.buffer = buffer;
    }

    const whenConnected = () => convolverNode.connect(gainNode);

    const whenDisconnected = () => convolverNode.disconnect(gainNode);

    return monitorConnections((0, _interceptConnections.interceptConnections)(nativeConvolverNodeFaker, gainNode), whenConnected, whenDisconnected);
  };
};

exports.createNativeConvolverNodeFakerFactory = createNativeConvolverNodeFakerFactory;
},{"../helpers/assign-native-audio-node-options":"../node_modules/standardized-audio-context/build/es2019/helpers/assign-native-audio-node-options.js","../helpers/intercept-connections":"../node_modules/standardized-audio-context/build/es2019/helpers/intercept-connections.js"}],"../node_modules/standardized-audio-context/build/es2019/factories/native-delay-node-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createNativeDelayNodeFactory = void 0;

var _assignNativeAudioNodeAudioParamValue = require("../helpers/assign-native-audio-node-audio-param-value");

var _assignNativeAudioNodeOptions = require("../helpers/assign-native-audio-node-options");

const createNativeDelayNodeFactory = createNativeAudioNode => {
  return (nativeContext, options) => {
    const nativeDelayNode = createNativeAudioNode(nativeContext, ntvCntxt => ntvCntxt.createDelay(options.maxDelayTime));
    (0, _assignNativeAudioNodeOptions.assignNativeAudioNodeOptions)(nativeDelayNode, options);
    (0, _assignNativeAudioNodeAudioParamValue.assignNativeAudioNodeAudioParamValue)(nativeDelayNode, options, 'delayTime');
    return nativeDelayNode;
  };
};

exports.createNativeDelayNodeFactory = createNativeDelayNodeFactory;
},{"../helpers/assign-native-audio-node-audio-param-value":"../node_modules/standardized-audio-context/build/es2019/helpers/assign-native-audio-node-audio-param-value.js","../helpers/assign-native-audio-node-options":"../node_modules/standardized-audio-context/build/es2019/helpers/assign-native-audio-node-options.js"}],"../node_modules/standardized-audio-context/build/es2019/factories/native-dynamics-compressor-node-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createNativeDynamicsCompressorNodeFactory = void 0;

var _assignNativeAudioNodeAudioParamValue = require("../helpers/assign-native-audio-node-audio-param-value");

var _assignNativeAudioNodeOptions = require("../helpers/assign-native-audio-node-options");

const createNativeDynamicsCompressorNodeFactory = (createNativeAudioNode, createNotSupportedError) => {
  return (nativeContext, options) => {
    const nativeDynamicsCompressorNode = createNativeAudioNode(nativeContext, ntvCntxt => ntvCntxt.createDynamicsCompressor());
    (0, _assignNativeAudioNodeOptions.assignNativeAudioNodeOptions)(nativeDynamicsCompressorNode, options); // Bug #108: Only Chrome, Firefox and Opera disallow a channelCount of three and above yet.

    if (options.channelCount > 2) {
      throw createNotSupportedError();
    } // Bug #109: Only Chrome, Firefox and Opera disallow a channelCountMode of 'max'.


    if (options.channelCountMode === 'max') {
      throw createNotSupportedError();
    }

    (0, _assignNativeAudioNodeAudioParamValue.assignNativeAudioNodeAudioParamValue)(nativeDynamicsCompressorNode, options, 'attack');
    (0, _assignNativeAudioNodeAudioParamValue.assignNativeAudioNodeAudioParamValue)(nativeDynamicsCompressorNode, options, 'knee');
    (0, _assignNativeAudioNodeAudioParamValue.assignNativeAudioNodeAudioParamValue)(nativeDynamicsCompressorNode, options, 'ratio');
    (0, _assignNativeAudioNodeAudioParamValue.assignNativeAudioNodeAudioParamValue)(nativeDynamicsCompressorNode, options, 'release');
    (0, _assignNativeAudioNodeAudioParamValue.assignNativeAudioNodeAudioParamValue)(nativeDynamicsCompressorNode, options, 'threshold');
    return nativeDynamicsCompressorNode;
  };
};

exports.createNativeDynamicsCompressorNodeFactory = createNativeDynamicsCompressorNodeFactory;
},{"../helpers/assign-native-audio-node-audio-param-value":"../node_modules/standardized-audio-context/build/es2019/helpers/assign-native-audio-node-audio-param-value.js","../helpers/assign-native-audio-node-options":"../node_modules/standardized-audio-context/build/es2019/helpers/assign-native-audio-node-options.js"}],"../node_modules/standardized-audio-context/build/es2019/factories/native-gain-node-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createNativeGainNodeFactory = void 0;

var _assignNativeAudioNodeAudioParamValue = require("../helpers/assign-native-audio-node-audio-param-value");

var _assignNativeAudioNodeOptions = require("../helpers/assign-native-audio-node-options");

const createNativeGainNodeFactory = createNativeAudioNode => {
  return (nativeContext, options) => {
    const nativeGainNode = createNativeAudioNode(nativeContext, ntvCntxt => ntvCntxt.createGain());
    (0, _assignNativeAudioNodeOptions.assignNativeAudioNodeOptions)(nativeGainNode, options);
    (0, _assignNativeAudioNodeAudioParamValue.assignNativeAudioNodeAudioParamValue)(nativeGainNode, options, 'gain');
    return nativeGainNode;
  };
};

exports.createNativeGainNodeFactory = createNativeGainNodeFactory;
},{"../helpers/assign-native-audio-node-audio-param-value":"../node_modules/standardized-audio-context/build/es2019/helpers/assign-native-audio-node-audio-param-value.js","../helpers/assign-native-audio-node-options":"../node_modules/standardized-audio-context/build/es2019/helpers/assign-native-audio-node-options.js"}],"../node_modules/standardized-audio-context/build/es2019/factories/native-iir-filter-node-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createNativeIIRFilterNodeFactory = void 0;

var _assignNativeAudioNodeOptions = require("../helpers/assign-native-audio-node-options");

const createNativeIIRFilterNodeFactory = (createNativeAudioNode, createNativeIIRFilterNodeFaker) => {
  return (nativeContext, baseLatency, options) => {
    // Bug #9: Safari does not support IIRFilterNodes.
    if (nativeContext.createIIRFilter === undefined) {
      return createNativeIIRFilterNodeFaker(nativeContext, baseLatency, options);
    }

    const nativeIIRFilterNode = createNativeAudioNode(nativeContext, ntvCntxt => {
      return ntvCntxt.createIIRFilter(options.feedforward, options.feedback);
    });
    (0, _assignNativeAudioNodeOptions.assignNativeAudioNodeOptions)(nativeIIRFilterNode, options);
    return nativeIIRFilterNode;
  };
};

exports.createNativeIIRFilterNodeFactory = createNativeIIRFilterNodeFactory;
},{"../helpers/assign-native-audio-node-options":"../node_modules/standardized-audio-context/build/es2019/helpers/assign-native-audio-node-options.js"}],"../node_modules/standardized-audio-context/build/es2019/factories/native-iir-filter-node-faker-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createNativeIIRFilterNodeFakerFactory = void 0;

var _computeBufferSize = require("../helpers/compute-buffer-size");

var _filterBuffer = require("../helpers/filter-buffer");

var _interceptConnections = require("../helpers/intercept-connections");

function divide(a, b) {
  const denominator = b[0] * b[0] + b[1] * b[1];
  return [(a[0] * b[0] + a[1] * b[1]) / denominator, (a[1] * b[0] - a[0] * b[1]) / denominator];
}

function multiply(a, b) {
  return [a[0] * b[0] - a[1] * b[1], a[0] * b[1] + a[1] * b[0]];
}

function evaluatePolynomial(coefficient, z) {
  let result = [0, 0];

  for (let i = coefficient.length - 1; i >= 0; i -= 1) {
    result = multiply(result, z);
    result[0] += coefficient[i];
  }

  return result;
}

const createNativeIIRFilterNodeFakerFactory = (createInvalidAccessError, createInvalidStateError, createNativeScriptProcessorNode, createNotSupportedError) => {
  return (nativeContext, baseLatency, {
    channelCount,
    channelCountMode,
    channelInterpretation,
    feedback,
    feedforward
  }) => {
    const bufferSize = (0, _computeBufferSize.computeBufferSize)(baseLatency, nativeContext.sampleRate);
    const feedbackLength = feedback.length;
    const feedforwardLength = feedforward.length;
    const minLength = Math.min(feedbackLength, feedforwardLength);

    if (feedback.length === 0 || feedback.length > 20) {
      throw createNotSupportedError();
    }

    if (feedback[0] === 0) {
      throw createInvalidStateError();
    }

    if (feedforward.length === 0 || feedforward.length > 20) {
      throw createNotSupportedError();
    }

    if (feedforward[0] === 0) {
      throw createInvalidStateError();
    }

    if (feedback[0] !== 1) {
      for (let i = 0; i < feedforwardLength; i += 1) {
        feedforward[i] /= feedback[0];
      }

      for (let i = 1; i < feedbackLength; i += 1) {
        feedback[i] /= feedback[0];
      }
    }

    const scriptProcessorNode = createNativeScriptProcessorNode(nativeContext, bufferSize, channelCount, channelCount);
    scriptProcessorNode.channelCount = channelCount;
    scriptProcessorNode.channelCountMode = channelCountMode;
    scriptProcessorNode.channelInterpretation = channelInterpretation;
    const bufferLength = 32;
    const bufferIndexes = [];
    const xBuffers = [];
    const yBuffers = [];

    for (let i = 0; i < channelCount; i += 1) {
      bufferIndexes.push(0);
      const xBuffer = new Float32Array(bufferLength);
      const yBuffer = new Float32Array(bufferLength);
      xBuffer.fill(0);
      yBuffer.fill(0);
      xBuffers.push(xBuffer);
      yBuffers.push(yBuffer);
    } // tslint:disable-next-line:deprecation


    scriptProcessorNode.onaudioprocess = event => {
      const inputBuffer = event.inputBuffer;
      const outputBuffer = event.outputBuffer;
      const numberOfChannels = inputBuffer.numberOfChannels;

      for (let i = 0; i < numberOfChannels; i += 1) {
        const input = inputBuffer.getChannelData(i);
        const output = outputBuffer.getChannelData(i);
        bufferIndexes[i] = (0, _filterBuffer.filterBuffer)(feedback, feedbackLength, feedforward, feedforwardLength, minLength, xBuffers[i], yBuffers[i], bufferIndexes[i], bufferLength, input, output);
      }
    };

    const nyquist = nativeContext.sampleRate / 2;
    const nativeIIRFilterNodeFaker = {
      get bufferSize() {
        return bufferSize;
      },

      get channelCount() {
        return scriptProcessorNode.channelCount;
      },

      set channelCount(value) {
        scriptProcessorNode.channelCount = value;
      },

      get channelCountMode() {
        return scriptProcessorNode.channelCountMode;
      },

      set channelCountMode(value) {
        scriptProcessorNode.channelCountMode = value;
      },

      get channelInterpretation() {
        return scriptProcessorNode.channelInterpretation;
      },

      set channelInterpretation(value) {
        scriptProcessorNode.channelInterpretation = value;
      },

      get context() {
        return scriptProcessorNode.context;
      },

      get inputs() {
        return [scriptProcessorNode];
      },

      get numberOfInputs() {
        return scriptProcessorNode.numberOfInputs;
      },

      get numberOfOutputs() {
        return scriptProcessorNode.numberOfOutputs;
      },

      addEventListener(...args) {
        // @todo Dissallow adding an audioprocess listener.
        return scriptProcessorNode.addEventListener(args[0], args[1], args[2]);
      },

      dispatchEvent(...args) {
        return scriptProcessorNode.dispatchEvent(args[0]);
      },

      getFrequencyResponse(frequencyHz, magResponse, phaseResponse) {
        if (frequencyHz.length !== magResponse.length || magResponse.length !== phaseResponse.length) {
          throw createInvalidAccessError();
        }

        const length = frequencyHz.length;

        for (let i = 0; i < length; i += 1) {
          const omega = -Math.PI * (frequencyHz[i] / nyquist);
          const z = [Math.cos(omega), Math.sin(omega)];
          const numerator = evaluatePolynomial(feedforward, z);
          const denominator = evaluatePolynomial(feedback, z);
          const response = divide(numerator, denominator);
          magResponse[i] = Math.sqrt(response[0] * response[0] + response[1] * response[1]);
          phaseResponse[i] = Math.atan2(response[1], response[0]);
        }
      },

      removeEventListener(...args) {
        return scriptProcessorNode.removeEventListener(args[0], args[1], args[2]);
      }

    };
    return (0, _interceptConnections.interceptConnections)(nativeIIRFilterNodeFaker, scriptProcessorNode);
  };
};

exports.createNativeIIRFilterNodeFakerFactory = createNativeIIRFilterNodeFakerFactory;
},{"../helpers/compute-buffer-size":"../node_modules/standardized-audio-context/build/es2019/helpers/compute-buffer-size.js","../helpers/filter-buffer":"../node_modules/standardized-audio-context/build/es2019/helpers/filter-buffer.js","../helpers/intercept-connections":"../node_modules/standardized-audio-context/build/es2019/helpers/intercept-connections.js"}],"../node_modules/standardized-audio-context/build/es2019/factories/native-media-element-audio-source-node-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createNativeMediaElementAudioSourceNodeFactory = void 0;

const createNativeMediaElementAudioSourceNodeFactory = createNativeAudioNode => {
  return (nativeAudioContext, options) => createNativeAudioNode(nativeAudioContext, ntvDCntxt => {
    return ntvDCntxt.createMediaElementSource(options.mediaElement);
  });
};

exports.createNativeMediaElementAudioSourceNodeFactory = createNativeMediaElementAudioSourceNodeFactory;
},{}],"../node_modules/standardized-audio-context/build/es2019/factories/native-media-stream-audio-destination-node-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createNativeMediaStreamAudioDestinationNodeFactory = void 0;

var _assignNativeAudioNodeOptions = require("../helpers/assign-native-audio-node-options");

const createNativeMediaStreamAudioDestinationNodeFactory = (createNativeAudioNode, createNotSupportedError) => {
  return (nativeAudioContext, options) => {
    // Bug #64: Edge does not support MediaStreamAudioDestinationNodes.
    if (nativeAudioContext.createMediaStreamDestination === undefined) {
      throw createNotSupportedError();
    }

    const nativeMediaStreamAudioDestinationNode = createNativeAudioNode(nativeAudioContext, ntvDCntxt => {
      return ntvDCntxt.createMediaStreamDestination();
    });
    (0, _assignNativeAudioNodeOptions.assignNativeAudioNodeOptions)(nativeMediaStreamAudioDestinationNode, options); // Bug #174: Safari does expose a wrong numberOfOutputs.

    if (nativeMediaStreamAudioDestinationNode.numberOfOutputs === 1) {
      Object.defineProperty(nativeMediaStreamAudioDestinationNode, 'numberOfOutputs', {
        get: () => 0
      });
    }

    return nativeMediaStreamAudioDestinationNode;
  };
};

exports.createNativeMediaStreamAudioDestinationNodeFactory = createNativeMediaStreamAudioDestinationNodeFactory;
},{"../helpers/assign-native-audio-node-options":"../node_modules/standardized-audio-context/build/es2019/helpers/assign-native-audio-node-options.js"}],"../node_modules/standardized-audio-context/build/es2019/factories/native-media-stream-audio-source-node-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createNativeMediaStreamAudioSourceNodeFactory = void 0;

const createNativeMediaStreamAudioSourceNodeFactory = createNativeAudioNode => {
  return (nativeAudioContext, {
    mediaStream
  }) => {
    const audioStreamTracks = mediaStream.getAudioTracks();
    const nativeMediaStreamAudioSourceNode = createNativeAudioNode(nativeAudioContext, ntvDCntxt => {
      /*
       * Bug #151: Safari does not use the audio track as input anymore if it gets removed from the mediaStream after construction.
       * Bug #159: Safari picks the first audio track if the MediaStream has more than one audio track.
       */
      audioStreamTracks.sort((a, b) => a.id < b.id ? -1 : a.id > b.id ? 1 : 0);
      const filteredAudioStreamTracks = audioStreamTracks.slice(0, 1);
      return ntvDCntxt.createMediaStreamSource(new MediaStream(filteredAudioStreamTracks));
    }); // Bug #63: Edge does not expose the mediaStream yet.

    Object.defineProperty(nativeMediaStreamAudioSourceNode, 'mediaStream', {
      value: mediaStream
    });
    return nativeMediaStreamAudioSourceNode;
  };
};

exports.createNativeMediaStreamAudioSourceNodeFactory = createNativeMediaStreamAudioSourceNodeFactory;
},{}],"../node_modules/standardized-audio-context/build/es2019/factories/native-media-stream-track-audio-source-node-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createNativeMediaStreamTrackAudioSourceNodeFactory = void 0;

const createNativeMediaStreamTrackAudioSourceNodeFactory = (createInvalidStateError, createNativeAudioNode, isNativeOfflineAudioContext) => {
  return (nativeAudioContext, {
    mediaStreamTrack
  }) => {
    if (typeof nativeAudioContext.createMediaStreamTrackSource === 'function') {
      return createNativeAudioNode(nativeAudioContext, ntvDCntxt => ntvDCntxt.createMediaStreamTrackSource(mediaStreamTrack));
    } // Bug #121: Only Firefox does yet support the MediaStreamTrackAudioSourceNode.


    return createNativeAudioNode(nativeAudioContext, ntvDCntxt => {
      const mediaStream = new MediaStream([mediaStreamTrack]);
      const nativeMediaStreamAudioSourceNode = ntvDCntxt.createMediaStreamSource(mediaStream); // Bug #120: Firefox does not throw an error if the mediaStream has no audio track.

      if (mediaStreamTrack.kind !== 'audio') {
        throw createInvalidStateError();
      } // Bug #172: Safari allows to create a MediaStreamAudioSourceNode with an OfflineAudioContext.


      if (isNativeOfflineAudioContext(ntvDCntxt)) {
        throw new TypeError();
      }

      return nativeMediaStreamAudioSourceNode;
    });
  };
};

exports.createNativeMediaStreamTrackAudioSourceNodeFactory = createNativeMediaStreamTrackAudioSourceNodeFactory;
},{}],"../node_modules/standardized-audio-context/build/es2019/factories/native-offline-audio-context-constructor.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createNativeOfflineAudioContextConstructor = void 0;

const createNativeOfflineAudioContextConstructor = window => {
  if (window === null) {
    return null;
  }

  if (window.hasOwnProperty('OfflineAudioContext')) {
    return window.OfflineAudioContext;
  }

  return window.hasOwnProperty('webkitOfflineAudioContext') ? window.webkitOfflineAudioContext : null;
};

exports.createNativeOfflineAudioContextConstructor = createNativeOfflineAudioContextConstructor;
},{}],"../node_modules/standardized-audio-context/build/es2019/factories/native-oscillator-node-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createNativeOscillatorNodeFactory = void 0;

var _assignNativeAudioNodeAudioParamValue = require("../helpers/assign-native-audio-node-audio-param-value");

var _assignNativeAudioNodeOption = require("../helpers/assign-native-audio-node-option");

var _assignNativeAudioNodeOptions = require("../helpers/assign-native-audio-node-options");

var _wrapAudioScheduledSourceNodeStartMethodNegativeParameters = require("../helpers/wrap-audio-scheduled-source-node-start-method-negative-parameters");

var _wrapAudioScheduledSourceNodeStopMethodNegativeParameters = require("../helpers/wrap-audio-scheduled-source-node-stop-method-negative-parameters");

const createNativeOscillatorNodeFactory = (addSilentConnection, cacheTestResult, createNativeAudioNode, testAudioScheduledSourceNodeStartMethodNegativeParametersSupport, testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport, testAudioScheduledSourceNodeStopMethodNegativeParametersSupport, wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls) => {
  return (nativeContext, options) => {
    const nativeOscillatorNode = createNativeAudioNode(nativeContext, ntvCntxt => ntvCntxt.createOscillator());
    (0, _assignNativeAudioNodeOptions.assignNativeAudioNodeOptions)(nativeOscillatorNode, options);
    (0, _assignNativeAudioNodeAudioParamValue.assignNativeAudioNodeAudioParamValue)(nativeOscillatorNode, options, 'detune');
    (0, _assignNativeAudioNodeAudioParamValue.assignNativeAudioNodeAudioParamValue)(nativeOscillatorNode, options, 'frequency');

    if (options.periodicWave !== undefined) {
      nativeOscillatorNode.setPeriodicWave(options.periodicWave);
    } else {
      (0, _assignNativeAudioNodeOption.assignNativeAudioNodeOption)(nativeOscillatorNode, options, 'type');
    } // Bug #44: Only Chrome & Opera throw a RangeError yet.


    if (!cacheTestResult(testAudioScheduledSourceNodeStartMethodNegativeParametersSupport, () => testAudioScheduledSourceNodeStartMethodNegativeParametersSupport(nativeContext))) {
      (0, _wrapAudioScheduledSourceNodeStartMethodNegativeParameters.wrapAudioScheduledSourceNodeStartMethodNegativeParameters)(nativeOscillatorNode);
    } // Bug #19: Safari does not ignore calls to stop() of an already stopped AudioBufferSourceNode.


    if (!cacheTestResult(testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport, () => testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport(nativeContext))) {
      wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls(nativeOscillatorNode, nativeContext);
    } // Bug #44: Only Firefox does not throw a RangeError yet.


    if (!cacheTestResult(testAudioScheduledSourceNodeStopMethodNegativeParametersSupport, () => testAudioScheduledSourceNodeStopMethodNegativeParametersSupport(nativeContext))) {
      (0, _wrapAudioScheduledSourceNodeStopMethodNegativeParameters.wrapAudioScheduledSourceNodeStopMethodNegativeParameters)(nativeOscillatorNode);
    } // Bug #175: Safari will not fire an ended event if the OscillatorNode is unconnected.


    addSilentConnection(nativeContext, nativeOscillatorNode);
    return nativeOscillatorNode;
  };
};

exports.createNativeOscillatorNodeFactory = createNativeOscillatorNodeFactory;
},{"../helpers/assign-native-audio-node-audio-param-value":"../node_modules/standardized-audio-context/build/es2019/helpers/assign-native-audio-node-audio-param-value.js","../helpers/assign-native-audio-node-option":"../node_modules/standardized-audio-context/build/es2019/helpers/assign-native-audio-node-option.js","../helpers/assign-native-audio-node-options":"../node_modules/standardized-audio-context/build/es2019/helpers/assign-native-audio-node-options.js","../helpers/wrap-audio-scheduled-source-node-start-method-negative-parameters":"../node_modules/standardized-audio-context/build/es2019/helpers/wrap-audio-scheduled-source-node-start-method-negative-parameters.js","../helpers/wrap-audio-scheduled-source-node-stop-method-negative-parameters":"../node_modules/standardized-audio-context/build/es2019/helpers/wrap-audio-scheduled-source-node-stop-method-negative-parameters.js"}],"../node_modules/standardized-audio-context/build/es2019/factories/native-panner-node-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createNativePannerNodeFactory = void 0;

var _assignNativeAudioNodeAudioParamValue = require("../helpers/assign-native-audio-node-audio-param-value");

var _assignNativeAudioNodeOption = require("../helpers/assign-native-audio-node-option");

var _assignNativeAudioNodeOptions = require("../helpers/assign-native-audio-node-options");

const createNativePannerNodeFactory = (createNativeAudioNode, createNativePannerNodeFaker) => {
  return (nativeContext, options) => {
    const nativePannerNode = createNativeAudioNode(nativeContext, ntvCntxt => ntvCntxt.createPanner()); // Bug #124: Edge & Safari do not support modifying the orientation and the position with AudioParams.

    if (nativePannerNode.orientationX === undefined) {
      return createNativePannerNodeFaker(nativeContext, options);
    }

    (0, _assignNativeAudioNodeOptions.assignNativeAudioNodeOptions)(nativePannerNode, options);
    (0, _assignNativeAudioNodeAudioParamValue.assignNativeAudioNodeAudioParamValue)(nativePannerNode, options, 'orientationX');
    (0, _assignNativeAudioNodeAudioParamValue.assignNativeAudioNodeAudioParamValue)(nativePannerNode, options, 'orientationY');
    (0, _assignNativeAudioNodeAudioParamValue.assignNativeAudioNodeAudioParamValue)(nativePannerNode, options, 'orientationZ');
    (0, _assignNativeAudioNodeAudioParamValue.assignNativeAudioNodeAudioParamValue)(nativePannerNode, options, 'positionX');
    (0, _assignNativeAudioNodeAudioParamValue.assignNativeAudioNodeAudioParamValue)(nativePannerNode, options, 'positionY');
    (0, _assignNativeAudioNodeAudioParamValue.assignNativeAudioNodeAudioParamValue)(nativePannerNode, options, 'positionZ');
    (0, _assignNativeAudioNodeOption.assignNativeAudioNodeOption)(nativePannerNode, options, 'coneInnerAngle');
    (0, _assignNativeAudioNodeOption.assignNativeAudioNodeOption)(nativePannerNode, options, 'coneOuterAngle');
    (0, _assignNativeAudioNodeOption.assignNativeAudioNodeOption)(nativePannerNode, options, 'coneOuterGain');
    (0, _assignNativeAudioNodeOption.assignNativeAudioNodeOption)(nativePannerNode, options, 'distanceModel');
    (0, _assignNativeAudioNodeOption.assignNativeAudioNodeOption)(nativePannerNode, options, 'maxDistance');
    (0, _assignNativeAudioNodeOption.assignNativeAudioNodeOption)(nativePannerNode, options, 'panningModel');
    (0, _assignNativeAudioNodeOption.assignNativeAudioNodeOption)(nativePannerNode, options, 'refDistance');
    (0, _assignNativeAudioNodeOption.assignNativeAudioNodeOption)(nativePannerNode, options, 'rolloffFactor');
    return nativePannerNode;
  };
};

exports.createNativePannerNodeFactory = createNativePannerNodeFactory;
},{"../helpers/assign-native-audio-node-audio-param-value":"../node_modules/standardized-audio-context/build/es2019/helpers/assign-native-audio-node-audio-param-value.js","../helpers/assign-native-audio-node-option":"../node_modules/standardized-audio-context/build/es2019/helpers/assign-native-audio-node-option.js","../helpers/assign-native-audio-node-options":"../node_modules/standardized-audio-context/build/es2019/helpers/assign-native-audio-node-options.js"}],"../node_modules/standardized-audio-context/build/es2019/factories/native-panner-node-faker-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createNativePannerNodeFakerFactory = void 0;

var _assignNativeAudioNodeOptions = require("../helpers/assign-native-audio-node-options");

var _interceptConnections = require("../helpers/intercept-connections");

const createNativePannerNodeFakerFactory = (connectNativeAudioNodeToNativeAudioNode, createInvalidStateError, createNativeAudioNode, createNativeChannelMergerNode, createNativeGainNode, createNativeScriptProcessorNode, createNativeWaveShaperNode, createNotSupportedError, disconnectNativeAudioNodeFromNativeAudioNode, monitorConnections) => {
  return (nativeContext, {
    coneInnerAngle,
    coneOuterAngle,
    coneOuterGain,
    distanceModel,
    maxDistance,
    orientationX,
    orientationY,
    orientationZ,
    panningModel,
    positionX,
    positionY,
    positionZ,
    refDistance,
    rolloffFactor,
    ...audioNodeOptions
  }) => {
    const pannerNode = createNativeAudioNode(nativeContext, ntvCntxt => ntvCntxt.createPanner()); // Bug #125: Safari does not throw an error yet.

    if (audioNodeOptions.channelCount > 2) {
      throw createNotSupportedError();
    } // Bug #126: Safari does not throw an error yet.


    if (audioNodeOptions.channelCountMode === 'max') {
      throw createNotSupportedError();
    }

    (0, _assignNativeAudioNodeOptions.assignNativeAudioNodeOptions)(pannerNode, audioNodeOptions);
    const SINGLE_CHANNEL_OPTIONS = {
      channelCount: 1,
      channelCountMode: 'explicit',
      channelInterpretation: 'discrete'
    };
    const channelMergerNode = createNativeChannelMergerNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS,
      channelInterpretation: 'speakers',
      numberOfInputs: 6
    });
    const inputGainNode = createNativeGainNode(nativeContext, { ...audioNodeOptions,
      gain: 1
    });
    const orientationXGainNode = createNativeGainNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS,
      gain: 1
    });
    const orientationYGainNode = createNativeGainNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS,
      gain: 0
    });
    const orientationZGainNode = createNativeGainNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS,
      gain: 0
    });
    const positionXGainNode = createNativeGainNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS,
      gain: 0
    });
    const positionYGainNode = createNativeGainNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS,
      gain: 0
    });
    const positionZGainNode = createNativeGainNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS,
      gain: 0
    });
    const scriptProcessorNode = createNativeScriptProcessorNode(nativeContext, 256, 6, 1);
    const waveShaperNode = createNativeWaveShaperNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS,
      curve: new Float32Array([1, 1]),
      oversample: 'none'
    });
    let lastOrientation = [orientationX, orientationY, orientationZ];
    let lastPosition = [positionX, positionY, positionZ]; // tslint:disable-next-line:deprecation

    scriptProcessorNode.onaudioprocess = ({
      inputBuffer
    }) => {
      const orientation = [inputBuffer.getChannelData(0)[0], inputBuffer.getChannelData(1)[0], inputBuffer.getChannelData(2)[0]];

      if (orientation.some((value, index) => value !== lastOrientation[index])) {
        pannerNode.setOrientation(...orientation); // tslint:disable-line:deprecation

        lastOrientation = orientation;
      }

      const positon = [inputBuffer.getChannelData(3)[0], inputBuffer.getChannelData(4)[0], inputBuffer.getChannelData(5)[0]];

      if (positon.some((value, index) => value !== lastPosition[index])) {
        pannerNode.setPosition(...positon); // tslint:disable-line:deprecation

        lastPosition = positon;
      }
    };

    Object.defineProperty(orientationYGainNode.gain, 'defaultValue', {
      get: () => 0
    });
    Object.defineProperty(orientationZGainNode.gain, 'defaultValue', {
      get: () => 0
    });
    Object.defineProperty(positionXGainNode.gain, 'defaultValue', {
      get: () => 0
    });
    Object.defineProperty(positionYGainNode.gain, 'defaultValue', {
      get: () => 0
    });
    Object.defineProperty(positionZGainNode.gain, 'defaultValue', {
      get: () => 0
    });
    const nativePannerNodeFaker = {
      get bufferSize() {
        return undefined;
      },

      get channelCount() {
        return pannerNode.channelCount;
      },

      set channelCount(value) {
        // Bug #125: Safari does not throw an error yet.
        if (value > 2) {
          throw createNotSupportedError();
        }

        inputGainNode.channelCount = value;
        pannerNode.channelCount = value;
      },

      get channelCountMode() {
        return pannerNode.channelCountMode;
      },

      set channelCountMode(value) {
        // Bug #126: Safari does not throw an error yet.
        if (value === 'max') {
          throw createNotSupportedError();
        }

        inputGainNode.channelCountMode = value;
        pannerNode.channelCountMode = value;
      },

      get channelInterpretation() {
        return pannerNode.channelInterpretation;
      },

      set channelInterpretation(value) {
        inputGainNode.channelInterpretation = value;
        pannerNode.channelInterpretation = value;
      },

      get coneInnerAngle() {
        return pannerNode.coneInnerAngle;
      },

      set coneInnerAngle(value) {
        pannerNode.coneInnerAngle = value;
      },

      get coneOuterAngle() {
        return pannerNode.coneOuterAngle;
      },

      set coneOuterAngle(value) {
        pannerNode.coneOuterAngle = value;
      },

      get coneOuterGain() {
        return pannerNode.coneOuterGain;
      },

      set coneOuterGain(value) {
        // Bug #127: Edge & Safari do not throw an InvalidStateError yet.
        if (value < 0 || value > 1) {
          throw createInvalidStateError();
        }

        pannerNode.coneOuterGain = value;
      },

      get context() {
        return pannerNode.context;
      },

      get distanceModel() {
        return pannerNode.distanceModel;
      },

      set distanceModel(value) {
        pannerNode.distanceModel = value;
      },

      get inputs() {
        return [inputGainNode];
      },

      get maxDistance() {
        return pannerNode.maxDistance;
      },

      set maxDistance(value) {
        // Bug #128: Edge & Safari do not throw an error yet.
        if (value < 0) {
          throw new RangeError();
        }

        pannerNode.maxDistance = value;
      },

      get numberOfInputs() {
        return pannerNode.numberOfInputs;
      },

      get numberOfOutputs() {
        return pannerNode.numberOfOutputs;
      },

      get orientationX() {
        return orientationXGainNode.gain;
      },

      get orientationY() {
        return orientationYGainNode.gain;
      },

      get orientationZ() {
        return orientationZGainNode.gain;
      },

      get panningModel() {
        return pannerNode.panningModel;
      },

      set panningModel(value) {
        pannerNode.panningModel = value; // Bug #123: Edge does not support HRTF as panningModel.

        if (pannerNode.panningModel !== value && value === 'HRTF') {
          throw createNotSupportedError();
        }
      },

      get positionX() {
        return positionXGainNode.gain;
      },

      get positionY() {
        return positionYGainNode.gain;
      },

      get positionZ() {
        return positionZGainNode.gain;
      },

      get refDistance() {
        return pannerNode.refDistance;
      },

      set refDistance(value) {
        // Bug #129: Edge & Safari do not throw an error yet.
        if (value < 0) {
          throw new RangeError();
        }

        pannerNode.refDistance = value;
      },

      get rolloffFactor() {
        return pannerNode.rolloffFactor;
      },

      set rolloffFactor(value) {
        // Bug #130: Edge & Safari do not throw an error yet.
        if (value < 0) {
          throw new RangeError();
        }

        pannerNode.rolloffFactor = value;
      },

      addEventListener(...args) {
        return inputGainNode.addEventListener(args[0], args[1], args[2]);
      },

      dispatchEvent(...args) {
        return inputGainNode.dispatchEvent(args[0]);
      },

      removeEventListener(...args) {
        return inputGainNode.removeEventListener(args[0], args[1], args[2]);
      }

    };

    if (coneInnerAngle !== nativePannerNodeFaker.coneInnerAngle) {
      nativePannerNodeFaker.coneInnerAngle = coneInnerAngle;
    }

    if (coneOuterAngle !== nativePannerNodeFaker.coneOuterAngle) {
      nativePannerNodeFaker.coneOuterAngle = coneOuterAngle;
    }

    if (coneOuterGain !== nativePannerNodeFaker.coneOuterGain) {
      nativePannerNodeFaker.coneOuterGain = coneOuterGain;
    }

    if (distanceModel !== nativePannerNodeFaker.distanceModel) {
      nativePannerNodeFaker.distanceModel = distanceModel;
    }

    if (maxDistance !== nativePannerNodeFaker.maxDistance) {
      nativePannerNodeFaker.maxDistance = maxDistance;
    }

    if (orientationX !== nativePannerNodeFaker.orientationX.value) {
      nativePannerNodeFaker.orientationX.value = orientationX;
    }

    if (orientationY !== nativePannerNodeFaker.orientationY.value) {
      nativePannerNodeFaker.orientationY.value = orientationY;
    }

    if (orientationZ !== nativePannerNodeFaker.orientationZ.value) {
      nativePannerNodeFaker.orientationZ.value = orientationZ;
    }

    if (panningModel !== nativePannerNodeFaker.panningModel) {
      nativePannerNodeFaker.panningModel = panningModel;
    }

    if (positionX !== nativePannerNodeFaker.positionX.value) {
      nativePannerNodeFaker.positionX.value = positionX;
    }

    if (positionY !== nativePannerNodeFaker.positionY.value) {
      nativePannerNodeFaker.positionY.value = positionY;
    }

    if (positionZ !== nativePannerNodeFaker.positionZ.value) {
      nativePannerNodeFaker.positionZ.value = positionZ;
    }

    if (refDistance !== nativePannerNodeFaker.refDistance) {
      nativePannerNodeFaker.refDistance = refDistance;
    }

    if (rolloffFactor !== nativePannerNodeFaker.rolloffFactor) {
      nativePannerNodeFaker.rolloffFactor = rolloffFactor;
    }

    if (lastOrientation[0] !== 1 || lastOrientation[1] !== 0 || lastOrientation[2] !== 0) {
      pannerNode.setOrientation(...lastOrientation); // tslint:disable-line:deprecation
    }

    if (lastPosition[0] !== 0 || lastPosition[1] !== 0 || lastPosition[2] !== 0) {
      pannerNode.setPosition(...lastPosition); // tslint:disable-line:deprecation
    }

    const whenConnected = () => {
      inputGainNode.connect(pannerNode); // Bug #119: Safari does not fully support the WaveShaperNode.

      connectNativeAudioNodeToNativeAudioNode(inputGainNode, waveShaperNode, 0, 0);
      waveShaperNode.connect(orientationXGainNode).connect(channelMergerNode, 0, 0);
      waveShaperNode.connect(orientationYGainNode).connect(channelMergerNode, 0, 1);
      waveShaperNode.connect(orientationZGainNode).connect(channelMergerNode, 0, 2);
      waveShaperNode.connect(positionXGainNode).connect(channelMergerNode, 0, 3);
      waveShaperNode.connect(positionYGainNode).connect(channelMergerNode, 0, 4);
      waveShaperNode.connect(positionZGainNode).connect(channelMergerNode, 0, 5);
      channelMergerNode.connect(scriptProcessorNode).connect(nativeContext.destination);
    };

    const whenDisconnected = () => {
      inputGainNode.disconnect(pannerNode); // Bug #119: Safari does not fully support the WaveShaperNode.

      disconnectNativeAudioNodeFromNativeAudioNode(inputGainNode, waveShaperNode, 0, 0);
      waveShaperNode.disconnect(orientationXGainNode);
      orientationXGainNode.disconnect(channelMergerNode);
      waveShaperNode.disconnect(orientationYGainNode);
      orientationYGainNode.disconnect(channelMergerNode);
      waveShaperNode.disconnect(orientationZGainNode);
      orientationZGainNode.disconnect(channelMergerNode);
      waveShaperNode.disconnect(positionXGainNode);
      positionXGainNode.disconnect(channelMergerNode);
      waveShaperNode.disconnect(positionYGainNode);
      positionYGainNode.disconnect(channelMergerNode);
      waveShaperNode.disconnect(positionZGainNode);
      positionZGainNode.disconnect(channelMergerNode);
      channelMergerNode.disconnect(scriptProcessorNode);
      scriptProcessorNode.disconnect(nativeContext.destination);
    };

    return monitorConnections((0, _interceptConnections.interceptConnections)(nativePannerNodeFaker, pannerNode), whenConnected, whenDisconnected);
  };
};

exports.createNativePannerNodeFakerFactory = createNativePannerNodeFakerFactory;
},{"../helpers/assign-native-audio-node-options":"../node_modules/standardized-audio-context/build/es2019/helpers/assign-native-audio-node-options.js","../helpers/intercept-connections":"../node_modules/standardized-audio-context/build/es2019/helpers/intercept-connections.js"}],"../node_modules/standardized-audio-context/build/es2019/factories/native-periodic-wave-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createNativePeriodicWaveFactory = void 0;

const createNativePeriodicWaveFactory = getBackupNativeContext => {
  return (nativeContext, {
    disableNormalization,
    imag,
    real
  }) => {
    // Bug #50: Only Edge does currently not allow to create AudioNodes (and other objects) on a closed context yet.
    const backupNativeContext = getBackupNativeContext(nativeContext); // @todo Edge, Firefox & Safari do only accept Float32Arrays.

    const wrappedImag = new Float32Array(imag);
    const wrappedReal = new Float32Array(real);

    if (backupNativeContext !== null) {
      return backupNativeContext.createPeriodicWave(wrappedReal, wrappedImag, {
        disableNormalization
      });
    }

    return nativeContext.createPeriodicWave(wrappedReal, wrappedImag, {
      disableNormalization
    });
  };
};

exports.createNativePeriodicWaveFactory = createNativePeriodicWaveFactory;
},{}],"../node_modules/standardized-audio-context/build/es2019/factories/native-script-processor-node-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createNativeScriptProcessorNodeFactory = void 0;

const createNativeScriptProcessorNodeFactory = createNativeAudioNode => {
  return (nativeContext, bufferSize, numberOfInputChannels, numberOfOutputChannels) => {
    return createNativeAudioNode(nativeContext, ntvCntxt => {
      return ntvCntxt.createScriptProcessor(bufferSize, numberOfInputChannels, numberOfOutputChannels);
    });
  };
};

exports.createNativeScriptProcessorNodeFactory = createNativeScriptProcessorNodeFactory;
},{}],"../node_modules/standardized-audio-context/build/es2019/factories/native-stereo-panner-node-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createNativeStereoPannerNodeFactory = void 0;

var _assignNativeAudioNodeAudioParamValue = require("../helpers/assign-native-audio-node-audio-param-value");

var _assignNativeAudioNodeOptions = require("../helpers/assign-native-audio-node-options");

const createNativeStereoPannerNodeFactory = (createNativeAudioNode, createNativeStereoPannerNodeFaker, createNotSupportedError) => {
  return (nativeContext, options) => createNativeAudioNode(nativeContext, ntvCntxt => {
    const channelCountMode = options.channelCountMode;
    /*
     * Bug #105: The channelCountMode of 'clamped-max' should be supported. However it is not possible to write a polyfill for Safari
     * which supports it and therefore it can't be supported at all.
     */

    if (channelCountMode === 'clamped-max') {
      throw createNotSupportedError();
    } // Bug #105: Safari does not support the StereoPannerNode.


    if (nativeContext.createStereoPanner === undefined) {
      return createNativeStereoPannerNodeFaker(nativeContext, options);
    }

    const nativeStereoPannerNode = ntvCntxt.createStereoPanner();
    (0, _assignNativeAudioNodeOptions.assignNativeAudioNodeOptions)(nativeStereoPannerNode, options);
    (0, _assignNativeAudioNodeAudioParamValue.assignNativeAudioNodeAudioParamValue)(nativeStereoPannerNode, options, 'pan');
    /*
     * Bug #105: The channelCountMode of 'clamped-max' should be supported. However it is not possible to write a polyfill for Safari
     * which supports it and therefore it can't be supported at all.
     */

    Object.defineProperty(nativeStereoPannerNode, 'channelCountMode', {
      get: () => channelCountMode,
      set: value => {
        if (value !== channelCountMode) {
          throw createNotSupportedError();
        }
      }
    });
    return nativeStereoPannerNode;
  });
};

exports.createNativeStereoPannerNodeFactory = createNativeStereoPannerNodeFactory;
},{"../helpers/assign-native-audio-node-audio-param-value":"../node_modules/standardized-audio-context/build/es2019/helpers/assign-native-audio-node-audio-param-value.js","../helpers/assign-native-audio-node-options":"../node_modules/standardized-audio-context/build/es2019/helpers/assign-native-audio-node-options.js"}],"../node_modules/standardized-audio-context/build/es2019/factories/native-stereo-panner-node-faker-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createNativeStereoPannerNodeFakerFactory = void 0;

var _interceptConnections = require("../helpers/intercept-connections");

const createNativeStereoPannerNodeFakerFactory = (createNativeChannelMergerNode, createNativeChannelSplitterNode, createNativeGainNode, createNativeWaveShaperNode, createNotSupportedError, monitorConnections) => {
  // The curve has a size of 14bit plus 1 value to have an exact representation for zero. This value has been determined experimentally.
  const CURVE_SIZE = 16385;
  const DC_CURVE = new Float32Array([1, 1]);
  const HALF_PI = Math.PI / 2;
  const SINGLE_CHANNEL_OPTIONS = {
    channelCount: 1,
    channelCountMode: 'explicit',
    channelInterpretation: 'discrete'
  };
  const SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS = { ...SINGLE_CHANNEL_OPTIONS,
    oversample: 'none'
  };

  const buildInternalGraphForMono = (nativeContext, inputGainNode, panGainNode, channelMergerNode) => {
    const leftWaveShaperCurve = new Float32Array(CURVE_SIZE);
    const rightWaveShaperCurve = new Float32Array(CURVE_SIZE);

    for (let i = 0; i < CURVE_SIZE; i += 1) {
      const x = i / (CURVE_SIZE - 1) * HALF_PI;
      leftWaveShaperCurve[i] = Math.cos(x);
      rightWaveShaperCurve[i] = Math.sin(x);
    }

    const leftGainNode = createNativeGainNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS,
      gain: 0
    }); // Bug #119: Safari does not fully support the WaveShaperNode.

    const leftWaveShaperNode = createNativeWaveShaperNode(nativeContext, { ...SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS,
      curve: leftWaveShaperCurve
    }); // Bug #119: Safari does not fully support the WaveShaperNode.

    const panWaveShaperNode = createNativeWaveShaperNode(nativeContext, { ...SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS,
      curve: DC_CURVE
    });
    const rightGainNode = createNativeGainNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS,
      gain: 0
    }); // Bug #119: Safari does not fully support the WaveShaperNode.

    const rightWaveShaperNode = createNativeWaveShaperNode(nativeContext, { ...SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS,
      curve: rightWaveShaperCurve
    });
    return {
      connectGraph() {
        inputGainNode.connect(leftGainNode);
        inputGainNode.connect(panWaveShaperNode.inputs[0]);
        inputGainNode.connect(rightGainNode);
        panWaveShaperNode.connect(panGainNode);
        panGainNode.connect(leftWaveShaperNode.inputs[0]);
        panGainNode.connect(rightWaveShaperNode.inputs[0]);
        leftWaveShaperNode.connect(leftGainNode.gain);
        rightWaveShaperNode.connect(rightGainNode.gain);
        leftGainNode.connect(channelMergerNode, 0, 0);
        rightGainNode.connect(channelMergerNode, 0, 1);
      },

      disconnectGraph() {
        inputGainNode.disconnect(leftGainNode);
        inputGainNode.disconnect(panWaveShaperNode.inputs[0]);
        inputGainNode.disconnect(rightGainNode);
        panWaveShaperNode.disconnect(panGainNode);
        panGainNode.disconnect(leftWaveShaperNode.inputs[0]);
        panGainNode.disconnect(rightWaveShaperNode.inputs[0]);
        leftWaveShaperNode.disconnect(leftGainNode.gain);
        rightWaveShaperNode.disconnect(rightGainNode.gain);
        leftGainNode.disconnect(channelMergerNode, 0, 0);
        rightGainNode.disconnect(channelMergerNode, 0, 1);
      }

    };
  };

  const buildInternalGraphForStereo = (nativeContext, inputGainNode, panGainNode, channelMergerNode) => {
    const leftInputForLeftOutputWaveShaperCurve = new Float32Array(CURVE_SIZE);
    const leftInputForRightOutputWaveShaperCurve = new Float32Array(CURVE_SIZE);
    const rightInputForLeftOutputWaveShaperCurve = new Float32Array(CURVE_SIZE);
    const rightInputForRightOutputWaveShaperCurve = new Float32Array(CURVE_SIZE);
    const centerIndex = Math.floor(CURVE_SIZE / 2);

    for (let i = 0; i < CURVE_SIZE; i += 1) {
      if (i > centerIndex) {
        const x = (i - centerIndex) / (CURVE_SIZE - 1 - centerIndex) * HALF_PI;
        leftInputForLeftOutputWaveShaperCurve[i] = Math.cos(x);
        leftInputForRightOutputWaveShaperCurve[i] = Math.sin(x);
        rightInputForLeftOutputWaveShaperCurve[i] = 0;
        rightInputForRightOutputWaveShaperCurve[i] = 1;
      } else {
        const x = i / (CURVE_SIZE - 1 - centerIndex) * HALF_PI;
        leftInputForLeftOutputWaveShaperCurve[i] = 1;
        leftInputForRightOutputWaveShaperCurve[i] = 0;
        rightInputForLeftOutputWaveShaperCurve[i] = Math.cos(x);
        rightInputForRightOutputWaveShaperCurve[i] = Math.sin(x);
      }
    }

    const channelSplitterNode = createNativeChannelSplitterNode(nativeContext, {
      channelCount: 2,
      channelCountMode: 'explicit',
      channelInterpretation: 'discrete',
      numberOfOutputs: 2
    });
    const leftInputForLeftOutputGainNode = createNativeGainNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS,
      gain: 0
    }); // Bug #119: Safari does not fully support the WaveShaperNode.

    const leftInputForLeftOutputWaveShaperNode = createNativeWaveShaperNode(nativeContext, { ...SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS,
      curve: leftInputForLeftOutputWaveShaperCurve
    });
    const leftInputForRightOutputGainNode = createNativeGainNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS,
      gain: 0
    }); // Bug #119: Safari does not fully support the WaveShaperNode.

    const leftInputForRightOutputWaveShaperNode = createNativeWaveShaperNode(nativeContext, { ...SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS,
      curve: leftInputForRightOutputWaveShaperCurve
    }); // Bug #119: Safari does not fully support the WaveShaperNode.

    const panWaveShaperNode = createNativeWaveShaperNode(nativeContext, { ...SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS,
      curve: DC_CURVE
    });
    const rightInputForLeftOutputGainNode = createNativeGainNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS,
      gain: 0
    }); // Bug #119: Safari does not fully support the WaveShaperNode.

    const rightInputForLeftOutputWaveShaperNode = createNativeWaveShaperNode(nativeContext, { ...SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS,
      curve: rightInputForLeftOutputWaveShaperCurve
    });
    const rightInputForRightOutputGainNode = createNativeGainNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS,
      gain: 0
    }); // Bug #119: Safari does not fully support the WaveShaperNode.

    const rightInputForRightOutputWaveShaperNode = createNativeWaveShaperNode(nativeContext, { ...SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS,
      curve: rightInputForRightOutputWaveShaperCurve
    });
    return {
      connectGraph() {
        inputGainNode.connect(channelSplitterNode);
        inputGainNode.connect(panWaveShaperNode.inputs[0]);
        channelSplitterNode.connect(leftInputForLeftOutputGainNode, 1);
        channelSplitterNode.connect(leftInputForRightOutputGainNode, 1);
        channelSplitterNode.connect(rightInputForLeftOutputGainNode, 1);
        channelSplitterNode.connect(rightInputForRightOutputGainNode, 1);
        panWaveShaperNode.connect(panGainNode);
        panGainNode.connect(leftInputForLeftOutputWaveShaperNode.inputs[0]);
        panGainNode.connect(leftInputForRightOutputWaveShaperNode.inputs[0]);
        panGainNode.connect(rightInputForLeftOutputWaveShaperNode.inputs[0]);
        panGainNode.connect(rightInputForRightOutputWaveShaperNode.inputs[0]);
        leftInputForLeftOutputWaveShaperNode.connect(leftInputForLeftOutputGainNode.gain);
        leftInputForRightOutputWaveShaperNode.connect(leftInputForRightOutputGainNode.gain);
        rightInputForLeftOutputWaveShaperNode.connect(rightInputForLeftOutputGainNode.gain);
        rightInputForRightOutputWaveShaperNode.connect(rightInputForRightOutputGainNode.gain);
        leftInputForLeftOutputGainNode.connect(channelMergerNode, 0, 0);
        rightInputForLeftOutputGainNode.connect(channelMergerNode, 0, 0);
        leftInputForRightOutputGainNode.connect(channelMergerNode, 0, 1);
        rightInputForRightOutputGainNode.connect(channelMergerNode, 0, 1);
      },

      disconnectGraph() {
        inputGainNode.disconnect(channelSplitterNode);
        inputGainNode.disconnect(panWaveShaperNode.inputs[0]);
        channelSplitterNode.disconnect(leftInputForLeftOutputGainNode, 1);
        channelSplitterNode.disconnect(leftInputForRightOutputGainNode, 1);
        channelSplitterNode.disconnect(rightInputForLeftOutputGainNode, 1);
        channelSplitterNode.disconnect(rightInputForRightOutputGainNode, 1);
        panWaveShaperNode.disconnect(panGainNode);
        panGainNode.disconnect(leftInputForLeftOutputWaveShaperNode.inputs[0]);
        panGainNode.disconnect(leftInputForRightOutputWaveShaperNode.inputs[0]);
        panGainNode.disconnect(rightInputForLeftOutputWaveShaperNode.inputs[0]);
        panGainNode.disconnect(rightInputForRightOutputWaveShaperNode.inputs[0]);
        leftInputForLeftOutputWaveShaperNode.disconnect(leftInputForLeftOutputGainNode.gain);
        leftInputForRightOutputWaveShaperNode.disconnect(leftInputForRightOutputGainNode.gain);
        rightInputForLeftOutputWaveShaperNode.disconnect(rightInputForLeftOutputGainNode.gain);
        rightInputForRightOutputWaveShaperNode.disconnect(rightInputForRightOutputGainNode.gain);
        leftInputForLeftOutputGainNode.disconnect(channelMergerNode, 0, 0);
        rightInputForLeftOutputGainNode.disconnect(channelMergerNode, 0, 0);
        leftInputForRightOutputGainNode.disconnect(channelMergerNode, 0, 1);
        rightInputForRightOutputGainNode.disconnect(channelMergerNode, 0, 1);
      }

    };
  };

  const buildInternalGraph = (nativeContext, channelCount, inputGainNode, panGainNode, channelMergerNode) => {
    if (channelCount === 1) {
      return buildInternalGraphForMono(nativeContext, inputGainNode, panGainNode, channelMergerNode);
    }

    if (channelCount === 2) {
      return buildInternalGraphForStereo(nativeContext, inputGainNode, panGainNode, channelMergerNode);
    }

    throw createNotSupportedError();
  };

  return (nativeContext, {
    channelCount,
    channelCountMode,
    pan,
    ...audioNodeOptions
  }) => {
    if (channelCountMode === 'max') {
      throw createNotSupportedError();
    }

    const channelMergerNode = createNativeChannelMergerNode(nativeContext, { ...audioNodeOptions,
      channelCount: 1,
      channelCountMode,
      numberOfInputs: 2
    });
    const inputGainNode = createNativeGainNode(nativeContext, { ...audioNodeOptions,
      channelCount,
      channelCountMode,
      gain: 1
    });
    const panGainNode = createNativeGainNode(nativeContext, {
      channelCount: 1,
      channelCountMode: 'explicit',
      channelInterpretation: 'discrete',
      gain: pan
    });
    let {
      connectGraph,
      disconnectGraph
    } = buildInternalGraph(nativeContext, channelCount, inputGainNode, panGainNode, channelMergerNode);
    Object.defineProperty(panGainNode.gain, 'defaultValue', {
      get: () => 0
    });
    const nativeStereoPannerNodeFakerFactory = {
      get bufferSize() {
        return undefined;
      },

      get channelCount() {
        return inputGainNode.channelCount;
      },

      set channelCount(value) {
        if (inputGainNode.channelCount !== value) {
          if (isConnected) {
            disconnectGraph();
          }

          ({
            connectGraph,
            disconnectGraph
          } = buildInternalGraph(nativeContext, value, inputGainNode, panGainNode, channelMergerNode));

          if (isConnected) {
            connectGraph();
          }
        }

        inputGainNode.channelCount = value;
      },

      get channelCountMode() {
        return inputGainNode.channelCountMode;
      },

      set channelCountMode(value) {
        if (value === 'clamped-max' || value === 'max') {
          throw createNotSupportedError();
        }

        inputGainNode.channelCountMode = value;
      },

      get channelInterpretation() {
        return inputGainNode.channelInterpretation;
      },

      set channelInterpretation(value) {
        inputGainNode.channelInterpretation = value;
      },

      get context() {
        return inputGainNode.context;
      },

      get inputs() {
        return [inputGainNode];
      },

      get numberOfInputs() {
        return inputGainNode.numberOfInputs;
      },

      get numberOfOutputs() {
        return inputGainNode.numberOfOutputs;
      },

      get pan() {
        return panGainNode.gain;
      },

      addEventListener(...args) {
        return inputGainNode.addEventListener(args[0], args[1], args[2]);
      },

      dispatchEvent(...args) {
        return inputGainNode.dispatchEvent(args[0]);
      },

      removeEventListener(...args) {
        return inputGainNode.removeEventListener(args[0], args[1], args[2]);
      }

    };
    let isConnected = false;

    const whenConnected = () => {
      connectGraph();
      isConnected = true;
    };

    const whenDisconnected = () => {
      disconnectGraph();
      isConnected = false;
    };

    return monitorConnections((0, _interceptConnections.interceptConnections)(nativeStereoPannerNodeFakerFactory, channelMergerNode), whenConnected, whenDisconnected);
  };
};

exports.createNativeStereoPannerNodeFakerFactory = createNativeStereoPannerNodeFakerFactory;
},{"../helpers/intercept-connections":"../node_modules/standardized-audio-context/build/es2019/helpers/intercept-connections.js"}],"../node_modules/standardized-audio-context/build/es2019/factories/native-wave-shaper-node-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createNativeWaveShaperNodeFactory = void 0;

var _assignNativeAudioNodeOption = require("../helpers/assign-native-audio-node-option");

var _assignNativeAudioNodeOptions = require("../helpers/assign-native-audio-node-options");

const createNativeWaveShaperNodeFactory = (createConnectedNativeAudioBufferSourceNode, createInvalidStateError, createNativeAudioNode, createNativeWaveShaperNodeFaker, isDCCurve, monitorConnections, overwriteAccessors) => {
  return (nativeContext, options) => {
    const nativeWaveShaperNode = createNativeAudioNode(nativeContext, ntvCntxt => ntvCntxt.createWaveShaper());

    try {
      // Bug #102: Safari does not throw an InvalidStateError when the curve has less than two samples.
      // Bug #119: Safari does not correctly map the values. Bug #102 is only used to detect Safari in this case.
      nativeWaveShaperNode.curve = new Float32Array([1]);
      return createNativeWaveShaperNodeFaker(nativeContext, options);
    } catch {// Ignore errors.
    }

    (0, _assignNativeAudioNodeOptions.assignNativeAudioNodeOptions)(nativeWaveShaperNode, options);
    const curve = options.curve; // Bug #104: Chrome will throw an InvalidAccessError when the curve has less than two samples.

    if (curve !== null && curve.length < 2) {
      throw createInvalidStateError();
    }

    (0, _assignNativeAudioNodeOption.assignNativeAudioNodeOption)(nativeWaveShaperNode, options, 'curve');
    (0, _assignNativeAudioNodeOption.assignNativeAudioNodeOption)(nativeWaveShaperNode, options, 'oversample');
    let disconnectNativeAudioBufferSourceNode = null;
    let isConnected = false;
    overwriteAccessors(nativeWaveShaperNode, 'curve', get => () => get.call(nativeWaveShaperNode), set => value => {
      set.call(nativeWaveShaperNode, value);

      if (isConnected) {
        if (isDCCurve(value) && disconnectNativeAudioBufferSourceNode === null) {
          disconnectNativeAudioBufferSourceNode = createConnectedNativeAudioBufferSourceNode(nativeContext, nativeWaveShaperNode);
        } else if (!isDCCurve(value) && disconnectNativeAudioBufferSourceNode !== null) {
          disconnectNativeAudioBufferSourceNode();
          disconnectNativeAudioBufferSourceNode = null;
        }
      }

      return value;
    });

    const whenConnected = () => {
      isConnected = true;

      if (isDCCurve(nativeWaveShaperNode.curve)) {
        disconnectNativeAudioBufferSourceNode = createConnectedNativeAudioBufferSourceNode(nativeContext, nativeWaveShaperNode);
      }
    };

    const whenDisconnected = () => {
      isConnected = false;

      if (disconnectNativeAudioBufferSourceNode !== null) {
        disconnectNativeAudioBufferSourceNode();
        disconnectNativeAudioBufferSourceNode = null;
      }
    };

    return monitorConnections(nativeWaveShaperNode, whenConnected, whenDisconnected);
  };
};

exports.createNativeWaveShaperNodeFactory = createNativeWaveShaperNodeFactory;
},{"../helpers/assign-native-audio-node-option":"../node_modules/standardized-audio-context/build/es2019/helpers/assign-native-audio-node-option.js","../helpers/assign-native-audio-node-options":"../node_modules/standardized-audio-context/build/es2019/helpers/assign-native-audio-node-options.js"}],"../node_modules/standardized-audio-context/build/es2019/factories/native-wave-shaper-node-faker-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createNativeWaveShaperNodeFakerFactory = void 0;

var _assignNativeAudioNodeOptions = require("../helpers/assign-native-audio-node-options");

var _interceptConnections = require("../helpers/intercept-connections");

const createNativeWaveShaperNodeFakerFactory = (createConnectedNativeAudioBufferSourceNode, createInvalidStateError, createNativeAudioNode, createNativeGainNode, isDCCurve, monitorConnections) => {
  return (nativeContext, {
    curve,
    oversample,
    ...audioNodeOptions
  }) => {
    const negativeWaveShaperNode = createNativeAudioNode(nativeContext, ntvCntxt => ntvCntxt.createWaveShaper());
    const positiveWaveShaperNode = createNativeAudioNode(nativeContext, ntvCntxt => ntvCntxt.createWaveShaper());
    (0, _assignNativeAudioNodeOptions.assignNativeAudioNodeOptions)(negativeWaveShaperNode, audioNodeOptions);
    (0, _assignNativeAudioNodeOptions.assignNativeAudioNodeOptions)(positiveWaveShaperNode, audioNodeOptions);
    const inputGainNode = createNativeGainNode(nativeContext, { ...audioNodeOptions,
      gain: 1
    });
    const invertGainNode = createNativeGainNode(nativeContext, { ...audioNodeOptions,
      gain: -1
    });
    const outputGainNode = createNativeGainNode(nativeContext, { ...audioNodeOptions,
      gain: 1
    });
    const revertGainNode = createNativeGainNode(nativeContext, { ...audioNodeOptions,
      gain: -1
    });
    let disconnectNativeAudioBufferSourceNode = null;
    let isConnected = false;
    let unmodifiedCurve = null;
    const nativeWaveShaperNodeFaker = {
      get bufferSize() {
        return undefined;
      },

      get channelCount() {
        return negativeWaveShaperNode.channelCount;
      },

      set channelCount(value) {
        inputGainNode.channelCount = value;
        invertGainNode.channelCount = value;
        negativeWaveShaperNode.channelCount = value;
        outputGainNode.channelCount = value;
        positiveWaveShaperNode.channelCount = value;
        revertGainNode.channelCount = value;
      },

      get channelCountMode() {
        return negativeWaveShaperNode.channelCountMode;
      },

      set channelCountMode(value) {
        inputGainNode.channelCountMode = value;
        invertGainNode.channelCountMode = value;
        negativeWaveShaperNode.channelCountMode = value;
        outputGainNode.channelCountMode = value;
        positiveWaveShaperNode.channelCountMode = value;
        revertGainNode.channelCountMode = value;
      },

      get channelInterpretation() {
        return negativeWaveShaperNode.channelInterpretation;
      },

      set channelInterpretation(value) {
        inputGainNode.channelInterpretation = value;
        invertGainNode.channelInterpretation = value;
        negativeWaveShaperNode.channelInterpretation = value;
        outputGainNode.channelInterpretation = value;
        positiveWaveShaperNode.channelInterpretation = value;
        revertGainNode.channelInterpretation = value;
      },

      get context() {
        return negativeWaveShaperNode.context;
      },

      get curve() {
        return unmodifiedCurve;
      },

      set curve(value) {
        // Bug #102: Safari does not throw an InvalidStateError when the curve has less than two samples.
        if (curve !== null && curve.length < 2) {
          throw createInvalidStateError();
        }

        if (value === null) {
          negativeWaveShaperNode.curve = value;
          positiveWaveShaperNode.curve = value;
        } else {
          const curveLength = value.length;
          const negativeCurve = new Float32Array(curveLength + 2 - curveLength % 2);
          const positiveCurve = new Float32Array(curveLength + 2 - curveLength % 2);
          negativeCurve[0] = value[0];
          positiveCurve[0] = -value[curveLength - 1];
          const length = Math.ceil((curveLength + 1) / 2);
          const centerIndex = (curveLength + 1) / 2 - 1;

          for (let i = 1; i < length; i += 1) {
            const theoreticIndex = i / length * centerIndex;
            const lowerIndex = Math.floor(theoreticIndex);
            const upperIndex = Math.ceil(theoreticIndex);
            negativeCurve[i] = lowerIndex === upperIndex ? value[lowerIndex] : (1 - (theoreticIndex - lowerIndex)) * value[lowerIndex] + (1 - (upperIndex - theoreticIndex)) * value[upperIndex];
            positiveCurve[i] = lowerIndex === upperIndex ? -value[curveLength - 1 - lowerIndex] : -((1 - (theoreticIndex - lowerIndex)) * value[curveLength - 1 - lowerIndex]) - (1 - (upperIndex - theoreticIndex)) * value[curveLength - 1 - upperIndex];
          }

          negativeCurve[length] = curveLength % 2 === 1 ? value[length - 1] : (value[length - 2] + value[length - 1]) / 2;
          negativeWaveShaperNode.curve = negativeCurve;
          positiveWaveShaperNode.curve = positiveCurve;
        }

        unmodifiedCurve = value;

        if (isConnected) {
          if (isDCCurve(unmodifiedCurve) && disconnectNativeAudioBufferSourceNode === null) {
            disconnectNativeAudioBufferSourceNode = createConnectedNativeAudioBufferSourceNode(nativeContext, inputGainNode);
          } else if (disconnectNativeAudioBufferSourceNode !== null) {
            disconnectNativeAudioBufferSourceNode();
            disconnectNativeAudioBufferSourceNode = null;
          }
        }
      },

      get inputs() {
        return [inputGainNode];
      },

      get numberOfInputs() {
        return negativeWaveShaperNode.numberOfInputs;
      },

      get numberOfOutputs() {
        return negativeWaveShaperNode.numberOfOutputs;
      },

      get oversample() {
        return negativeWaveShaperNode.oversample;
      },

      set oversample(value) {
        negativeWaveShaperNode.oversample = value;
        positiveWaveShaperNode.oversample = value;
      },

      addEventListener(...args) {
        return inputGainNode.addEventListener(args[0], args[1], args[2]);
      },

      dispatchEvent(...args) {
        return inputGainNode.dispatchEvent(args[0]);
      },

      removeEventListener(...args) {
        return inputGainNode.removeEventListener(args[0], args[1], args[2]);
      }

    };

    if (curve !== nativeWaveShaperNodeFaker.curve) {
      nativeWaveShaperNodeFaker.curve = curve;
    }

    if (oversample !== nativeWaveShaperNodeFaker.oversample) {
      nativeWaveShaperNodeFaker.oversample = oversample;
    }

    const whenConnected = () => {
      inputGainNode.connect(negativeWaveShaperNode).connect(outputGainNode);
      inputGainNode.connect(invertGainNode).connect(positiveWaveShaperNode).connect(revertGainNode).connect(outputGainNode);
      isConnected = true;

      if (isDCCurve(unmodifiedCurve)) {
        disconnectNativeAudioBufferSourceNode = createConnectedNativeAudioBufferSourceNode(nativeContext, inputGainNode);
      }
    };

    const whenDisconnected = () => {
      inputGainNode.disconnect(negativeWaveShaperNode);
      negativeWaveShaperNode.disconnect(outputGainNode);
      inputGainNode.disconnect(invertGainNode);
      invertGainNode.disconnect(positiveWaveShaperNode);
      positiveWaveShaperNode.disconnect(revertGainNode);
      revertGainNode.disconnect(outputGainNode);
      isConnected = false;

      if (disconnectNativeAudioBufferSourceNode !== null) {
        disconnectNativeAudioBufferSourceNode();
        disconnectNativeAudioBufferSourceNode = null;
      }
    };

    return monitorConnections((0, _interceptConnections.interceptConnections)(nativeWaveShaperNodeFaker, outputGainNode), whenConnected, whenDisconnected);
  };
};

exports.createNativeWaveShaperNodeFakerFactory = createNativeWaveShaperNodeFakerFactory;
},{"../helpers/assign-native-audio-node-options":"../node_modules/standardized-audio-context/build/es2019/helpers/assign-native-audio-node-options.js","../helpers/intercept-connections":"../node_modules/standardized-audio-context/build/es2019/helpers/intercept-connections.js"}],"../node_modules/standardized-audio-context/build/es2019/factories/not-supported-error.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createNotSupportedError = void 0;

const createNotSupportedError = () => {
  try {
    return new DOMException('', 'NotSupportedError');
  } catch (err) {
    // Bug #122: Edge is the only browser that does not yet allow to construct a DOMException.
    err.code = 9;
    err.name = 'NotSupportedError';
    return err;
  }
};

exports.createNotSupportedError = createNotSupportedError;
},{}],"../node_modules/standardized-audio-context/build/es2019/factories/offline-audio-context-constructor.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createOfflineAudioContextConstructor = void 0;

var _testPromiseSupport = require("../helpers/test-promise-support");

const DEFAULT_OPTIONS = {
  numberOfChannels: 1
};

const createOfflineAudioContextConstructor = (baseAudioContextConstructor, cacheTestResult, createInvalidStateError, createNativeOfflineAudioContext, startRendering) => {
  return class OfflineAudioContext extends baseAudioContextConstructor {
    constructor(a, b, c) {
      let options;

      if (typeof a === 'number' && b !== undefined && c !== undefined) {
        options = {
          length: b,
          numberOfChannels: a,
          sampleRate: c
        };
      } else if (typeof a === 'object') {
        options = a;
      } else {
        throw new Error('The given parameters are not valid.');
      }

      const {
        length,
        numberOfChannels,
        sampleRate
      } = { ...DEFAULT_OPTIONS,
        ...options
      };
      const nativeOfflineAudioContext = createNativeOfflineAudioContext(numberOfChannels, length, sampleRate); // #21 Safari does not support promises and therefore would fire the statechange event before the promise can be resolved.

      if (!cacheTestResult(_testPromiseSupport.testPromiseSupport, () => (0, _testPromiseSupport.testPromiseSupport)(nativeOfflineAudioContext))) {
        nativeOfflineAudioContext.addEventListener('statechange', (() => {
          let i = 0;

          const delayStateChangeEvent = event => {
            if (this._state === 'running') {
              if (i > 0) {
                nativeOfflineAudioContext.removeEventListener('statechange', delayStateChangeEvent);
                event.stopImmediatePropagation();

                this._waitForThePromiseToSettle(event);
              } else {
                i += 1;
              }
            }
          };

          return delayStateChangeEvent;
        })());
      }

      super(nativeOfflineAudioContext, numberOfChannels);
      this._length = length;
      this._nativeOfflineAudioContext = nativeOfflineAudioContext;
      this._state = null;
    }

    get length() {
      // Bug #17: Safari does not yet expose the length.
      if (this._nativeOfflineAudioContext.length === undefined) {
        return this._length;
      }

      return this._nativeOfflineAudioContext.length;
    }

    get state() {
      return this._state === null ? this._nativeOfflineAudioContext.state : this._state;
    }

    startRendering() {
      /*
       * Bug #9 & #59: It is theoretically possible that startRendering() will first render a partialOfflineAudioContext. Therefore
       * the state of the nativeOfflineAudioContext might no transition to running immediately.
       */
      if (this._state === 'running') {
        return Promise.reject(createInvalidStateError());
      }

      this._state = 'running';
      return startRendering(this.destination, this._nativeOfflineAudioContext).then(audioBuffer => {
        this._state = null;
        /*
         * Bug #50: Deleting the AudioGraph is currently not possible anymore.
         * deleteAudioGraph(this, this._nativeOfflineAudioContext);
         */

        return audioBuffer;
      }) // @todo This could be written more elegantly when Promise.finally() becomes avalaible.
      .catch(err => {
        this._state = null;
        /*
         * Bug #50: Deleting the AudioGraph is currently not possible anymore.
         * deleteAudioGraph(this, this._nativeOfflineAudioContext);
         */

        throw err;
      });
    }

    _waitForThePromiseToSettle(event) {
      if (this._state === null) {
        this._nativeOfflineAudioContext.dispatchEvent(event);
      } else {
        setTimeout(() => this._waitForThePromiseToSettle(event));
      }
    }

  };
};

exports.createOfflineAudioContextConstructor = createOfflineAudioContextConstructor;
},{"../helpers/test-promise-support":"../node_modules/standardized-audio-context/build/es2019/helpers/test-promise-support.js"}],"../node_modules/standardized-audio-context/build/es2019/factories/oscillator-node-constructor.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createOscillatorNodeConstructor = void 0;

var _setInternalStateToActive = require("../helpers/set-internal-state-to-active");

var _setInternalStateToPassive = require("../helpers/set-internal-state-to-passive");

const DEFAULT_OPTIONS = {
  channelCount: 2,
  channelCountMode: 'max',
  channelInterpretation: 'speakers',
  detune: 0,
  frequency: 440,
  type: 'sine'
};

const createOscillatorNodeConstructor = (audioNodeConstructor, createAudioParam, createInvalidStateError, createNativeOscillatorNode, createOscillatorNodeRenderer, getNativeContext, isNativeOfflineAudioContext, wrapEventListener) => {
  return class OscillatorNode extends audioNodeConstructor {
    constructor(context, options = DEFAULT_OPTIONS) {
      const nativeContext = getNativeContext(context);
      const mergedOptions = { ...DEFAULT_OPTIONS,
        ...options
      };
      const nativeOscillatorNode = createNativeOscillatorNode(nativeContext, mergedOptions);
      const isOffline = isNativeOfflineAudioContext(nativeContext);
      const oscillatorNodeRenderer = isOffline ? createOscillatorNodeRenderer() : null;
      const nyquist = context.sampleRate / 2;
      super(context, false, nativeOscillatorNode, oscillatorNodeRenderer); // Bug #81: Edge, Firefox & Safari do not export the correct values for maxValue and minValue.

      this._detune = createAudioParam(this, isOffline, nativeOscillatorNode.detune, 153600, -153600); // Bug #76: Edge & Safari do not export the correct values for maxValue and minValue.

      this._frequency = createAudioParam(this, isOffline, nativeOscillatorNode.frequency, nyquist, -nyquist);
      this._nativeOscillatorNode = nativeOscillatorNode;
      this._onended = null;
      this._oscillatorNodeRenderer = oscillatorNodeRenderer;

      if (this._oscillatorNodeRenderer !== null && mergedOptions.periodicWave !== undefined) {
        this._oscillatorNodeRenderer.periodicWave = mergedOptions.periodicWave;
      }
    }

    get detune() {
      return this._detune;
    }

    get frequency() {
      return this._frequency;
    }

    get onended() {
      return this._onended;
    }

    set onended(value) {
      const wrappedListener = typeof value === 'function' ? wrapEventListener(this, value) : null;
      this._nativeOscillatorNode.onended = wrappedListener;
      const nativeOnEnded = this._nativeOscillatorNode.onended;
      this._onended = nativeOnEnded !== null && nativeOnEnded === wrappedListener ? value : nativeOnEnded;
    }

    get type() {
      return this._nativeOscillatorNode.type;
    }

    set type(value) {
      this._nativeOscillatorNode.type = value; // Bug #57: Edge will not throw an error when assigning the type to 'custom'. But it still will change the value.

      if (value === 'custom') {
        throw createInvalidStateError();
      }

      if (this._oscillatorNodeRenderer !== null) {
        this._oscillatorNodeRenderer.periodicWave = null;
      }
    }

    setPeriodicWave(periodicWave) {
      this._nativeOscillatorNode.setPeriodicWave(periodicWave);

      if (this._oscillatorNodeRenderer !== null) {
        this._oscillatorNodeRenderer.periodicWave = periodicWave;
      }
    }

    start(when = 0) {
      this._nativeOscillatorNode.start(when);

      if (this._oscillatorNodeRenderer !== null) {
        this._oscillatorNodeRenderer.start = when;
      } else {
        (0, _setInternalStateToActive.setInternalStateToActive)(this);

        const resetInternalStateToPassive = () => {
          this._nativeOscillatorNode.removeEventListener('ended', resetInternalStateToPassive); // @todo Determine a meaningful delay instead of just using one second.


          setTimeout(() => (0, _setInternalStateToPassive.setInternalStateToPassive)(this), 1000);
        };

        this._nativeOscillatorNode.addEventListener('ended', resetInternalStateToPassive);
      }
    }

    stop(when = 0) {
      this._nativeOscillatorNode.stop(when);

      if (this._oscillatorNodeRenderer !== null) {
        this._oscillatorNodeRenderer.stop = when;
      }
    }

  };
};

exports.createOscillatorNodeConstructor = createOscillatorNodeConstructor;
},{"../helpers/set-internal-state-to-active":"../node_modules/standardized-audio-context/build/es2019/helpers/set-internal-state-to-active.js","../helpers/set-internal-state-to-passive":"../node_modules/standardized-audio-context/build/es2019/helpers/set-internal-state-to-passive.js"}],"../node_modules/standardized-audio-context/build/es2019/factories/oscillator-node-renderer-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createOscillatorNodeRendererFactory = void 0;

var _isOwnedByContext = require("../helpers/is-owned-by-context");

const createOscillatorNodeRendererFactory = (connectAudioParam, createNativeOscillatorNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode) => {
  return () => {
    const renderedNativeOscillatorNodes = new WeakMap();
    let periodicWave = null;
    let start = null;
    let stop = null;

    const createOscillatorNode = async (proxy, nativeOfflineAudioContext, trace) => {
      let nativeOscillatorNode = getNativeAudioNode(proxy); // If the initially used nativeOscillatorNode was not constructed on the same OfflineAudioContext it needs to be created again.

      const nativeOscillatorNodeIsOwnedByContext = (0, _isOwnedByContext.isOwnedByContext)(nativeOscillatorNode, nativeOfflineAudioContext);

      if (!nativeOscillatorNodeIsOwnedByContext) {
        const options = {
          channelCount: nativeOscillatorNode.channelCount,
          channelCountMode: nativeOscillatorNode.channelCountMode,
          channelInterpretation: nativeOscillatorNode.channelInterpretation,
          detune: nativeOscillatorNode.detune.value,
          frequency: nativeOscillatorNode.frequency.value,
          periodicWave: periodicWave === null ? undefined : periodicWave,
          type: nativeOscillatorNode.type
        };
        nativeOscillatorNode = createNativeOscillatorNode(nativeOfflineAudioContext, options);

        if (start !== null) {
          nativeOscillatorNode.start(start);
        }

        if (stop !== null) {
          nativeOscillatorNode.stop(stop);
        }
      }

      renderedNativeOscillatorNodes.set(nativeOfflineAudioContext, nativeOscillatorNode);

      if (!nativeOscillatorNodeIsOwnedByContext) {
        await renderAutomation(nativeOfflineAudioContext, proxy.detune, nativeOscillatorNode.detune, trace);
        await renderAutomation(nativeOfflineAudioContext, proxy.frequency, nativeOscillatorNode.frequency, trace);
      } else {
        await connectAudioParam(nativeOfflineAudioContext, proxy.detune, nativeOscillatorNode.detune, trace);
        await connectAudioParam(nativeOfflineAudioContext, proxy.frequency, nativeOscillatorNode.frequency, trace);
      }

      await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeOscillatorNode, trace);
      return nativeOscillatorNode;
    };

    return {
      set periodicWave(value) {
        periodicWave = value;
      },

      set start(value) {
        start = value;
      },

      set stop(value) {
        stop = value;
      },

      render(proxy, nativeOfflineAudioContext, trace) {
        const renderedNativeOscillatorNode = renderedNativeOscillatorNodes.get(nativeOfflineAudioContext);

        if (renderedNativeOscillatorNode !== undefined) {
          return Promise.resolve(renderedNativeOscillatorNode);
        }

        return createOscillatorNode(proxy, nativeOfflineAudioContext, trace);
      }

    };
  };
};

exports.createOscillatorNodeRendererFactory = createOscillatorNodeRendererFactory;
},{"../helpers/is-owned-by-context":"../node_modules/standardized-audio-context/build/es2019/helpers/is-owned-by-context.js"}],"../node_modules/standardized-audio-context/build/es2019/factories/panner-node-constructor.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createPannerNodeConstructor = void 0;

var _constants = require("../constants");

const DEFAULT_OPTIONS = {
  channelCount: 2,
  channelCountMode: 'clamped-max',
  channelInterpretation: 'speakers',
  coneInnerAngle: 360,
  coneOuterAngle: 360,
  coneOuterGain: 0,
  distanceModel: 'inverse',
  maxDistance: 10000,
  orientationX: 1,
  orientationY: 0,
  orientationZ: 0,
  panningModel: 'equalpower',
  positionX: 0,
  positionY: 0,
  positionZ: 0,
  refDistance: 1,
  rolloffFactor: 1
};

const createPannerNodeConstructor = (audioNodeConstructor, createAudioParam, createNativePannerNode, createPannerNodeRenderer, getNativeContext, isNativeOfflineAudioContext) => {
  return class PannerNode extends audioNodeConstructor {
    constructor(context, options = DEFAULT_OPTIONS) {
      const nativeContext = getNativeContext(context);
      const mergedOptions = { ...DEFAULT_OPTIONS,
        ...options
      };
      const nativePannerNode = createNativePannerNode(nativeContext, mergedOptions);
      const isOffline = isNativeOfflineAudioContext(nativeContext);
      const pannerNodeRenderer = isOffline ? createPannerNodeRenderer() : null;
      super(context, false, nativePannerNode, pannerNodeRenderer);
      this._nativePannerNode = nativePannerNode; // Bug #74: Edge & Safari do not export the correct values for maxValue and minValue for GainNodes.

      this._orientationX = createAudioParam(this, isOffline, nativePannerNode.orientationX, _constants.MOST_POSITIVE_SINGLE_FLOAT, _constants.MOST_NEGATIVE_SINGLE_FLOAT);
      this._orientationY = createAudioParam(this, isOffline, nativePannerNode.orientationY, _constants.MOST_POSITIVE_SINGLE_FLOAT, _constants.MOST_NEGATIVE_SINGLE_FLOAT);
      this._orientationZ = createAudioParam(this, isOffline, nativePannerNode.orientationZ, _constants.MOST_POSITIVE_SINGLE_FLOAT, _constants.MOST_NEGATIVE_SINGLE_FLOAT);
      this._positionX = createAudioParam(this, isOffline, nativePannerNode.positionX, _constants.MOST_POSITIVE_SINGLE_FLOAT, _constants.MOST_NEGATIVE_SINGLE_FLOAT);
      this._positionY = createAudioParam(this, isOffline, nativePannerNode.positionY, _constants.MOST_POSITIVE_SINGLE_FLOAT, _constants.MOST_NEGATIVE_SINGLE_FLOAT);
      this._positionZ = createAudioParam(this, isOffline, nativePannerNode.positionZ, _constants.MOST_POSITIVE_SINGLE_FLOAT, _constants.MOST_NEGATIVE_SINGLE_FLOAT);
    }

    get coneInnerAngle() {
      return this._nativePannerNode.coneInnerAngle;
    }

    set coneInnerAngle(value) {
      this._nativePannerNode.coneInnerAngle = value;
    }

    get coneOuterAngle() {
      return this._nativePannerNode.coneOuterAngle;
    }

    set coneOuterAngle(value) {
      this._nativePannerNode.coneOuterAngle = value;
    }

    get coneOuterGain() {
      return this._nativePannerNode.coneOuterGain;
    }

    set coneOuterGain(value) {
      this._nativePannerNode.coneOuterGain = value;
    }

    get distanceModel() {
      return this._nativePannerNode.distanceModel;
    }

    set distanceModel(value) {
      this._nativePannerNode.distanceModel = value;
    }

    get maxDistance() {
      return this._nativePannerNode.maxDistance;
    }

    set maxDistance(value) {
      this._nativePannerNode.maxDistance = value;
    }

    get orientationX() {
      return this._orientationX;
    }

    get orientationY() {
      return this._orientationY;
    }

    get orientationZ() {
      return this._orientationZ;
    }

    get panningModel() {
      return this._nativePannerNode.panningModel;
    }

    set panningModel(value) {
      this._nativePannerNode.panningModel = value;
    }

    get positionX() {
      return this._positionX;
    }

    get positionY() {
      return this._positionY;
    }

    get positionZ() {
      return this._positionZ;
    }

    get refDistance() {
      return this._nativePannerNode.refDistance;
    }

    set refDistance(value) {
      this._nativePannerNode.refDistance = value;
    }

    get rolloffFactor() {
      return this._nativePannerNode.rolloffFactor;
    }

    set rolloffFactor(value) {
      this._nativePannerNode.rolloffFactor = value;
    }

  };
};

exports.createPannerNodeConstructor = createPannerNodeConstructor;
},{"../constants":"../node_modules/standardized-audio-context/build/es2019/constants.js"}],"../node_modules/standardized-audio-context/build/es2019/factories/panner-node-renderer-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createPannerNodeRendererFactory = void 0;

var _nativeAudioNodeFaker = require("../guards/native-audio-node-faker");

var _isOwnedByContext = require("../helpers/is-owned-by-context");

const createPannerNodeRendererFactory = (connectAudioParam, createNativeChannelMergerNode, createNativeConstantSourceNode, createNativeGainNode, createNativePannerNode, getNativeAudioNode, nativeOfflineAudioContextConstructor, renderAutomation, renderInputsOfAudioNode, renderNativeOfflineAudioContext) => {
  return () => {
    const renderedNativeAudioNodes = new WeakMap();
    let renderedBufferPromise = null;

    const createAudioNode = async (proxy, nativeOfflineAudioContext, trace) => {
      let nativeGainNode = null;
      let nativePannerNode = getNativeAudioNode(proxy);
      const commonAudioNodeOptions = {
        channelCount: nativePannerNode.channelCount,
        channelCountMode: nativePannerNode.channelCountMode,
        channelInterpretation: nativePannerNode.channelInterpretation
      };
      const commonNativePannerNodeOptions = { ...commonAudioNodeOptions,
        coneInnerAngle: nativePannerNode.coneInnerAngle,
        coneOuterAngle: nativePannerNode.coneOuterAngle,
        coneOuterGain: nativePannerNode.coneOuterGain,
        distanceModel: nativePannerNode.distanceModel,
        maxDistance: nativePannerNode.maxDistance,
        panningModel: nativePannerNode.panningModel,
        refDistance: nativePannerNode.refDistance,
        rolloffFactor: nativePannerNode.rolloffFactor
      }; // If the initially used nativePannerNode was not constructed on the same OfflineAudioContext it needs to be created again.

      const nativePannerNodeIsOwnedByContext = (0, _isOwnedByContext.isOwnedByContext)(nativePannerNode, nativeOfflineAudioContext); // Bug #124: Edge & Safari do not support modifying the orientation and the position with AudioParams.

      if ('bufferSize' in nativePannerNode) {
        nativeGainNode = createNativeGainNode(nativeOfflineAudioContext, { ...commonAudioNodeOptions,
          gain: 1
        });
      } else if (!nativePannerNodeIsOwnedByContext) {
        const options = { ...commonNativePannerNodeOptions,
          orientationX: nativePannerNode.orientationX.value,
          orientationY: nativePannerNode.orientationY.value,
          orientationZ: nativePannerNode.orientationZ.value,
          positionX: nativePannerNode.positionX.value,
          positionY: nativePannerNode.positionY.value,
          positionZ: nativePannerNode.positionZ.value
        };
        nativePannerNode = createNativePannerNode(nativeOfflineAudioContext, options);
      }

      renderedNativeAudioNodes.set(nativeOfflineAudioContext, nativeGainNode === null ? nativePannerNode : nativeGainNode);

      if (nativeGainNode !== null) {
        if (renderedBufferPromise === null) {
          if (nativeOfflineAudioContextConstructor === null) {
            throw new Error('Missing the native OfflineAudioContext constructor.');
          }

          const partialOfflineAudioContext = new nativeOfflineAudioContextConstructor(6, // Bug #17: Safari does not yet expose the length.
          proxy.context.length, nativeOfflineAudioContext.sampleRate);
          const nativeChannelMergerNode = createNativeChannelMergerNode(partialOfflineAudioContext, {
            channelCount: 1,
            channelCountMode: 'explicit',
            channelInterpretation: 'speakers',
            numberOfInputs: 6
          });
          nativeChannelMergerNode.connect(partialOfflineAudioContext.destination);

          renderedBufferPromise = (async () => {
            const nativeConstantSourceNodes = await Promise.all([proxy.orientationX, proxy.orientationY, proxy.orientationZ, proxy.positionX, proxy.positionY, proxy.positionZ].map(async (audioParam, index) => {
              const nativeConstantSourceNode = createNativeConstantSourceNode(partialOfflineAudioContext, {
                channelCount: 1,
                channelCountMode: 'explicit',
                channelInterpretation: 'discrete',
                offset: index === 0 ? 1 : 0
              });
              await renderAutomation(partialOfflineAudioContext, audioParam, nativeConstantSourceNode.offset, trace);
              return nativeConstantSourceNode;
            }));

            for (let i = 0; i < 6; i += 1) {
              nativeConstantSourceNodes[i].connect(nativeChannelMergerNode, 0, i);
              nativeConstantSourceNodes[i].start(0);
            }

            return renderNativeOfflineAudioContext(partialOfflineAudioContext);
          })();
        }

        const renderedBuffer = await renderedBufferPromise;
        const inputGainNode = createNativeGainNode(nativeOfflineAudioContext, { ...commonAudioNodeOptions,
          gain: 1
        });
        await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, inputGainNode, trace);
        const channelDatas = [];

        for (let i = 0; i < renderedBuffer.numberOfChannels; i += 1) {
          channelDatas.push(renderedBuffer.getChannelData(i));
        }

        let lastOrientation = [channelDatas[0][0], channelDatas[1][0], channelDatas[2][0]];
        let lastPosition = [channelDatas[3][0], channelDatas[4][0], channelDatas[5][0]];
        let gateGainNode = createNativeGainNode(nativeOfflineAudioContext, { ...commonAudioNodeOptions,
          gain: 1
        });
        let partialPannerNode = createNativePannerNode(nativeOfflineAudioContext, { ...commonNativePannerNodeOptions,
          orientationX: lastOrientation[0],
          orientationY: lastOrientation[1],
          orientationZ: lastOrientation[2],
          positionX: lastPosition[0],
          positionY: lastPosition[1],
          positionZ: lastPosition[2]
        });
        inputGainNode.connect(gateGainNode).connect(partialPannerNode.inputs[0]);
        partialPannerNode.connect(nativeGainNode);

        for (let i = 128; i < renderedBuffer.length; i += 128) {
          const orientation = [channelDatas[0][i], channelDatas[1][i], channelDatas[2][i]];
          const positon = [channelDatas[3][i], channelDatas[4][i], channelDatas[5][i]];

          if (orientation.some((value, index) => value !== lastOrientation[index]) || positon.some((value, index) => value !== lastPosition[index])) {
            lastOrientation = orientation;
            lastPosition = positon;
            const currentTime = i / nativeOfflineAudioContext.sampleRate;
            gateGainNode.gain.setValueAtTime(0, currentTime);
            gateGainNode = createNativeGainNode(nativeOfflineAudioContext, { ...commonAudioNodeOptions,
              gain: 0
            });
            partialPannerNode = createNativePannerNode(nativeOfflineAudioContext, { ...commonNativePannerNodeOptions,
              orientationX: lastOrientation[0],
              orientationY: lastOrientation[1],
              orientationZ: lastOrientation[2],
              positionX: lastPosition[0],
              positionY: lastPosition[1],
              positionZ: lastPosition[2]
            });
            gateGainNode.gain.setValueAtTime(1, currentTime);
            inputGainNode.connect(gateGainNode).connect(partialPannerNode.inputs[0]);
            partialPannerNode.connect(nativeGainNode);
          }
        }

        return nativeGainNode;
      }

      if (!nativePannerNodeIsOwnedByContext) {
        await renderAutomation(nativeOfflineAudioContext, proxy.orientationX, nativePannerNode.orientationX, trace);
        await renderAutomation(nativeOfflineAudioContext, proxy.orientationY, nativePannerNode.orientationY, trace);
        await renderAutomation(nativeOfflineAudioContext, proxy.orientationZ, nativePannerNode.orientationZ, trace);
        await renderAutomation(nativeOfflineAudioContext, proxy.positionX, nativePannerNode.positionX, trace);
        await renderAutomation(nativeOfflineAudioContext, proxy.positionY, nativePannerNode.positionY, trace);
        await renderAutomation(nativeOfflineAudioContext, proxy.positionZ, nativePannerNode.positionZ, trace);
      } else {
        await connectAudioParam(nativeOfflineAudioContext, proxy.orientationX, nativePannerNode.orientationX, trace);
        await connectAudioParam(nativeOfflineAudioContext, proxy.orientationY, nativePannerNode.orientationY, trace);
        await connectAudioParam(nativeOfflineAudioContext, proxy.orientationZ, nativePannerNode.orientationZ, trace);
        await connectAudioParam(nativeOfflineAudioContext, proxy.positionX, nativePannerNode.positionX, trace);
        await connectAudioParam(nativeOfflineAudioContext, proxy.positionY, nativePannerNode.positionY, trace);
        await connectAudioParam(nativeOfflineAudioContext, proxy.positionZ, nativePannerNode.positionZ, trace);
      }

      if ((0, _nativeAudioNodeFaker.isNativeAudioNodeFaker)(nativePannerNode)) {
        await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativePannerNode.inputs[0], trace);
      } else {
        await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativePannerNode, trace);
      }

      return nativePannerNode;
    };

    return {
      render(proxy, nativeOfflineAudioContext, trace) {
        const renderedNativeGainNodeOrNativePannerNode = renderedNativeAudioNodes.get(nativeOfflineAudioContext);

        if (renderedNativeGainNodeOrNativePannerNode !== undefined) {
          return Promise.resolve(renderedNativeGainNodeOrNativePannerNode);
        }

        return createAudioNode(proxy, nativeOfflineAudioContext, trace);
      }

    };
  };
};

exports.createPannerNodeRendererFactory = createPannerNodeRendererFactory;
},{"../guards/native-audio-node-faker":"../node_modules/standardized-audio-context/build/es2019/guards/native-audio-node-faker.js","../helpers/is-owned-by-context":"../node_modules/standardized-audio-context/build/es2019/helpers/is-owned-by-context.js"}],"../node_modules/standardized-audio-context/build/es2019/factories/periodic-wave-constructor.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createPeriodicWaveConstructor = void 0;
const DEFAULT_OPTIONS = {
  disableNormalization: false
};

const createPeriodicWaveConstructor = (createNativePeriodicWave, getNativeContext, periodicWaveStore) => {
  return class PeriodicWave {
    constructor(context, options) {
      const nativeContext = getNativeContext(context);
      const mergedOptions = { ...DEFAULT_OPTIONS,
        ...options
      };
      const periodicWave = createNativePeriodicWave(nativeContext, mergedOptions);
      periodicWaveStore.add(periodicWave); // This does violate all good pratices but it is used here to simplify the handling of periodic waves.

      return periodicWave;
    }

    static [Symbol.hasInstance](instance) {
      return instance !== null && typeof instance === 'object' && Object.getPrototypeOf(instance) === PeriodicWave.prototype || periodicWaveStore.has(instance);
    }

  };
};

exports.createPeriodicWaveConstructor = createPeriodicWaveConstructor;
},{}],"../node_modules/standardized-audio-context/build/es2019/factories/render-automation.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createRenderAutomation = void 0;

const createRenderAutomation = (getAudioParamRenderer, renderInputsOfAudioParam) => {
  return (nativeOfflineAudioContext, audioParam, nativeAudioParam, trace) => {
    const audioParamRenderer = getAudioParamRenderer(audioParam);
    audioParamRenderer.replay(nativeAudioParam);
    return renderInputsOfAudioParam(audioParam, nativeOfflineAudioContext, nativeAudioParam, trace);
  };
};

exports.createRenderAutomation = createRenderAutomation;
},{}],"../node_modules/standardized-audio-context/build/es2019/factories/render-inputs-of-audio-node.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createRenderInputsOfAudioNode = void 0;

const createRenderInputsOfAudioNode = (getAudioNodeConnections, getAudioNodeRenderer, isPartOfACycle) => {
  return async (audioNode, nativeOfflineAudioContext, nativeAudioNode, trace) => {
    const audioNodeConnections = getAudioNodeConnections(audioNode);
    const nextTrace = [...trace, audioNode];
    await Promise.all(audioNodeConnections.activeInputs.map((connections, input) => Array.from(connections).filter(([source]) => !nextTrace.includes(source)).map(async ([source, output]) => {
      const audioNodeRenderer = getAudioNodeRenderer(source);
      const renderedNativeAudioNode = await audioNodeRenderer.render(source, nativeOfflineAudioContext, nextTrace);
      const destination = audioNode.context.destination;

      if (!isPartOfACycle(source) && (audioNode !== destination || !isPartOfACycle(audioNode))) {
        renderedNativeAudioNode.connect(nativeAudioNode, output, input);
      }
    })).reduce((allRenderingPromises, renderingPromises) => [...allRenderingPromises, ...renderingPromises], []));
  };
};

exports.createRenderInputsOfAudioNode = createRenderInputsOfAudioNode;
},{}],"../node_modules/standardized-audio-context/build/es2019/factories/render-inputs-of-audio-param.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createRenderInputsOfAudioParam = void 0;

const createRenderInputsOfAudioParam = (getAudioNodeRenderer, getAudioParamConnections, isPartOfACycle) => {
  return async (audioParam, nativeOfflineAudioContext, nativeAudioParam, trace) => {
    const audioParamConnections = getAudioParamConnections(audioParam);
    await Promise.all(Array.from(audioParamConnections.activeInputs).map(async ([source, output]) => {
      const audioNodeRenderer = getAudioNodeRenderer(source);
      const renderedNativeAudioNode = await audioNodeRenderer.render(source, nativeOfflineAudioContext, trace);

      if (!isPartOfACycle(source)) {
        renderedNativeAudioNode.connect(nativeAudioParam, output);
      }
    }));
  };
};

exports.createRenderInputsOfAudioParam = createRenderInputsOfAudioParam;
},{}],"../node_modules/standardized-audio-context/build/es2019/factories/render-native-offline-audio-context.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createRenderNativeOfflineAudioContext = void 0;

var _testPromiseSupport = require("../helpers/test-promise-support");

const createRenderNativeOfflineAudioContext = (cacheTestResult, createNativeGainNode, createNativeScriptProcessorNode, testOfflineAudioContextCurrentTimeSupport) => {
  return nativeOfflineAudioContext => {
    // Bug #21: Safari does not support promises yet.
    if (cacheTestResult(_testPromiseSupport.testPromiseSupport, () => (0, _testPromiseSupport.testPromiseSupport)(nativeOfflineAudioContext))) {
      // Bug #158: Edge does not advance currentTime if it is not accessed while rendering the audio.
      return Promise.resolve(cacheTestResult(testOfflineAudioContextCurrentTimeSupport, testOfflineAudioContextCurrentTimeSupport)).then(isOfflineAudioContextCurrentTimeSupported => {
        if (!isOfflineAudioContextCurrentTimeSupported) {
          const scriptProcessorNode = createNativeScriptProcessorNode(nativeOfflineAudioContext, 512, 0, 1);

          nativeOfflineAudioContext.oncomplete = () => {
            scriptProcessorNode.onaudioprocess = null; // tslint:disable-line:deprecation

            scriptProcessorNode.disconnect();
          };

          scriptProcessorNode.onaudioprocess = () => nativeOfflineAudioContext.currentTime; // tslint:disable-line:deprecation


          scriptProcessorNode.connect(nativeOfflineAudioContext.destination);
        }

        return nativeOfflineAudioContext.startRendering();
      });
    }

    return new Promise(resolve => {
      // Bug #48: Safari does not render an OfflineAudioContext without any connected node.
      const gainNode = createNativeGainNode(nativeOfflineAudioContext, {
        channelCount: 1,
        channelCountMode: 'explicit',
        channelInterpretation: 'discrete',
        gain: 0
      });

      nativeOfflineAudioContext.oncomplete = event => {
        gainNode.disconnect();
        resolve(event.renderedBuffer);
      };

      gainNode.connect(nativeOfflineAudioContext.destination);
      nativeOfflineAudioContext.startRendering();
    });
  };
};

exports.createRenderNativeOfflineAudioContext = createRenderNativeOfflineAudioContext;
},{"../helpers/test-promise-support":"../node_modules/standardized-audio-context/build/es2019/helpers/test-promise-support.js"}],"../node_modules/standardized-audio-context/build/es2019/factories/start-rendering.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createStartRendering = void 0;

var _wrapAudioBufferGetChannelDataMethod = require("../helpers/wrap-audio-buffer-get-channel-data-method");

const createStartRendering = (audioBufferStore, cacheTestResult, getAudioNodeRenderer, getUnrenderedAudioWorkletNodes, renderNativeOfflineAudioContext, testAudioBufferCopyChannelMethodsOutOfBoundsSupport, wrapAudioBufferCopyChannelMethods, wrapAudioBufferCopyChannelMethodsOutOfBounds) => {
  const trace = [];
  return (destination, nativeOfflineAudioContext) => getAudioNodeRenderer(destination).render(destination, nativeOfflineAudioContext, trace)
  /*
   * Bug #86 & #87: Invoking the renderer of an AudioWorkletNode might be necessary if it has no direct or indirect connection to the
   * destination.
   */
  .then(() => Promise.all(Array.from(getUnrenderedAudioWorkletNodes(nativeOfflineAudioContext)).map(audioWorkletNode => getAudioNodeRenderer(audioWorkletNode).render(audioWorkletNode, nativeOfflineAudioContext, trace)))).then(() => renderNativeOfflineAudioContext(nativeOfflineAudioContext)).then(audioBuffer => {
    // Bug #5: Safari does not support copyFromChannel() and copyToChannel().
    // Bug #100: Safari does throw a wrong error when calling getChannelData() with an out-of-bounds value.
    if (typeof audioBuffer.copyFromChannel !== 'function') {
      wrapAudioBufferCopyChannelMethods(audioBuffer);
      (0, _wrapAudioBufferGetChannelDataMethod.wrapAudioBufferGetChannelDataMethod)(audioBuffer); // Bug #157: Only Chrome & Opera do allow the bufferOffset to be out-of-bounds.
    } else if (!cacheTestResult(testAudioBufferCopyChannelMethodsOutOfBoundsSupport, () => testAudioBufferCopyChannelMethodsOutOfBoundsSupport(audioBuffer))) {
      wrapAudioBufferCopyChannelMethodsOutOfBounds(audioBuffer);
    }

    audioBufferStore.add(audioBuffer);
    return audioBuffer;
  });
};

exports.createStartRendering = createStartRendering;
},{"../helpers/wrap-audio-buffer-get-channel-data-method":"../node_modules/standardized-audio-context/build/es2019/helpers/wrap-audio-buffer-get-channel-data-method.js"}],"../node_modules/standardized-audio-context/build/es2019/factories/stereo-panner-node-constructor.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createStereoPannerNodeConstructor = void 0;
const DEFAULT_OPTIONS = {
  channelCount: 2,

  /*
   * Bug #105: The channelCountMode should be 'clamped-max' according to the spec but is set to 'explicit' to achieve consistent
   * behavior.
   */
  channelCountMode: 'explicit',
  channelInterpretation: 'speakers',
  pan: 0
};

const createStereoPannerNodeConstructor = (audioNodeConstructor, createAudioParam, createNativeStereoPannerNode, createStereoPannerNodeRenderer, getNativeContext, isNativeOfflineAudioContext) => {
  return class StereoPannerNode extends audioNodeConstructor {
    constructor(context, options = DEFAULT_OPTIONS) {
      const nativeContext = getNativeContext(context);
      const mergedOptions = { ...DEFAULT_OPTIONS,
        ...options
      };
      const nativeStereoPannerNode = createNativeStereoPannerNode(nativeContext, mergedOptions);
      const isOffline = isNativeOfflineAudioContext(nativeContext);
      const stereoPannerNodeRenderer = isOffline ? createStereoPannerNodeRenderer() : null;
      super(context, false, nativeStereoPannerNode, stereoPannerNodeRenderer); // Bug #106: Edge does not export a maxValue and minValue property.

      this._pan = createAudioParam(this, isOffline, nativeStereoPannerNode.pan, 1, -1);
    }

    get pan() {
      return this._pan;
    }

  };
};

exports.createStereoPannerNodeConstructor = createStereoPannerNodeConstructor;
},{}],"../node_modules/standardized-audio-context/build/es2019/factories/stereo-panner-node-renderer-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createStereoPannerNodeRendererFactory = void 0;

var _nativeAudioNodeFaker = require("../guards/native-audio-node-faker");

var _isOwnedByContext = require("../helpers/is-owned-by-context");

const createStereoPannerNodeRendererFactory = (connectAudioParam, createNativeStereoPannerNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode) => {
  return () => {
    const renderedNativeStereoPannerNodes = new WeakMap();

    const createStereoPannerNode = async (proxy, nativeOfflineAudioContext, trace) => {
      let nativeStereoPannerNode = getNativeAudioNode(proxy);
      /*
       * If the initially used nativeStereoPannerNode was not constructed on the same OfflineAudioContext it needs to be created
       * again.
       */

      const nativeStereoPannerNodeIsOwnedByContext = (0, _isOwnedByContext.isOwnedByContext)(nativeStereoPannerNode, nativeOfflineAudioContext);

      if (!nativeStereoPannerNodeIsOwnedByContext) {
        const options = {
          channelCount: nativeStereoPannerNode.channelCount,
          channelCountMode: nativeStereoPannerNode.channelCountMode,
          channelInterpretation: nativeStereoPannerNode.channelInterpretation,
          pan: nativeStereoPannerNode.pan.value
        };
        nativeStereoPannerNode = createNativeStereoPannerNode(nativeOfflineAudioContext, options);
      }

      renderedNativeStereoPannerNodes.set(nativeOfflineAudioContext, nativeStereoPannerNode);

      if (!nativeStereoPannerNodeIsOwnedByContext) {
        await renderAutomation(nativeOfflineAudioContext, proxy.pan, nativeStereoPannerNode.pan, trace);
      } else {
        await connectAudioParam(nativeOfflineAudioContext, proxy.pan, nativeStereoPannerNode.pan, trace);
      }

      if ((0, _nativeAudioNodeFaker.isNativeAudioNodeFaker)(nativeStereoPannerNode)) {
        await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeStereoPannerNode.inputs[0], trace);
      } else {
        await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeStereoPannerNode, trace);
      }

      return nativeStereoPannerNode;
    };

    return {
      render(proxy, nativeOfflineAudioContext, trace) {
        const renderedNativeStereoPannerNode = renderedNativeStereoPannerNodes.get(nativeOfflineAudioContext);

        if (renderedNativeStereoPannerNode !== undefined) {
          return Promise.resolve(renderedNativeStereoPannerNode);
        }

        return createStereoPannerNode(proxy, nativeOfflineAudioContext, trace);
      }

    };
  };
};

exports.createStereoPannerNodeRendererFactory = createStereoPannerNodeRendererFactory;
},{"../guards/native-audio-node-faker":"../node_modules/standardized-audio-context/build/es2019/guards/native-audio-node-faker.js","../helpers/is-owned-by-context":"../node_modules/standardized-audio-context/build/es2019/helpers/is-owned-by-context.js"}],"../node_modules/standardized-audio-context/build/es2019/factories/test-audio-buffer-constructor-support.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createTestAudioBufferConstructorSupport = void 0;

// Bug #33: Edge & Safari expose an AudioBuffer but it can't be used as a constructor.
const createTestAudioBufferConstructorSupport = nativeAudioBufferConstructor => {
  return () => {
    if (nativeAudioBufferConstructor === null) {
      return false;
    }

    try {
      new nativeAudioBufferConstructor({
        length: 1,
        sampleRate: 44100
      }); // tslint:disable-line:no-unused-expression
    } catch {
      return false;
    }

    return true;
  };
};

exports.createTestAudioBufferConstructorSupport = createTestAudioBufferConstructorSupport;
},{}],"../node_modules/standardized-audio-context/build/es2019/factories/test-audio-buffer-copy-channel-methods-subarray-support.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createTestAudioBufferCopyChannelMethodsSubarraySupport = void 0;

/*
 * Firefox up to version 67 didn't fully support the copyFromChannel() and copyToChannel() methods. Therefore testing one of those methods
 * is enough to know if the other one is supported as well.
 */
const createTestAudioBufferCopyChannelMethodsSubarraySupport = nativeOfflineAudioContextConstructor => {
  return () => {
    if (nativeOfflineAudioContextConstructor === null) {
      return false;
    }

    const nativeOfflineAudioContext = new nativeOfflineAudioContextConstructor(1, 1, 44100);
    const nativeAudioBuffer = nativeOfflineAudioContext.createBuffer(1, 1, 44100); // Bug #5: Safari does not support copyFromChannel() and copyToChannel().

    if (nativeAudioBuffer.copyToChannel === undefined) {
      return true;
    }

    const source = new Float32Array(2);

    try {
      nativeAudioBuffer.copyFromChannel(source, 0, 0);
    } catch {
      return false;
    }

    return true;
  };
};

exports.createTestAudioBufferCopyChannelMethodsSubarraySupport = createTestAudioBufferCopyChannelMethodsSubarraySupport;
},{}],"../node_modules/standardized-audio-context/build/es2019/factories/test-audio-buffer-source-node-start-method-consecutive-calls-support.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createTestAudioBufferSourceNodeStartMethodConsecutiveCallsSupport = void 0;

const createTestAudioBufferSourceNodeStartMethodConsecutiveCallsSupport = createNativeAudioNode => {
  return nativeContext => {
    const nativeAudioBufferSourceNode = createNativeAudioNode(nativeContext, ntvCntxt => ntvCntxt.createBufferSource());
    nativeAudioBufferSourceNode.start();

    try {
      nativeAudioBufferSourceNode.start();
    } catch {
      return true;
    }

    return false;
  };
};

exports.createTestAudioBufferSourceNodeStartMethodConsecutiveCallsSupport = createTestAudioBufferSourceNodeStartMethodConsecutiveCallsSupport;
},{}],"../node_modules/standardized-audio-context/build/es2019/factories/test-audio-buffer-source-node-start-method-duration-parameter-support.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createTestAudioBufferSourceNodeStartMethodDurationParameterSupport = void 0;

// Bug #92: Edge does not respect the duration parameter yet.
const createTestAudioBufferSourceNodeStartMethodDurationParameterSupport = nativeOfflineAudioContextConstructor => {
  return () => {
    if (nativeOfflineAudioContextConstructor === null) {
      return Promise.resolve(false);
    }

    const offlineAudioContext = new nativeOfflineAudioContextConstructor(1, 1, 44100);
    const audioBuffer = offlineAudioContext.createBuffer(1, 1, offlineAudioContext.sampleRate);
    const audioBufferSourceNode = offlineAudioContext.createBufferSource();
    audioBuffer.getChannelData(0)[0] = 1;
    audioBufferSourceNode.buffer = audioBuffer;
    audioBufferSourceNode.start(0, 0, 0);
    audioBufferSourceNode.connect(offlineAudioContext.destination); // Bug #21: Safari does not support promises yet.

    return new Promise(resolve => {
      offlineAudioContext.oncomplete = ({
        renderedBuffer
      }) => {
        // Bug #5: Safari does not support copyFromChannel().
        resolve(renderedBuffer.getChannelData(0)[0] === 0);
      };

      offlineAudioContext.startRendering();
    });
  };
};

exports.createTestAudioBufferSourceNodeStartMethodDurationParameterSupport = createTestAudioBufferSourceNodeStartMethodDurationParameterSupport;
},{}],"../node_modules/standardized-audio-context/build/es2019/factories/test-audio-buffer-source-node-start-method-offset-clamping-support.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createTestAudioBufferSourceNodeStartMethodOffsetClampingSupport = void 0;

const createTestAudioBufferSourceNodeStartMethodOffsetClampingSupport = createNativeAudioNode => {
  return nativeContext => {
    const nativeAudioBufferSourceNode = createNativeAudioNode(nativeContext, ntvCntxt => ntvCntxt.createBufferSource());
    const nativeAudioBuffer = nativeContext.createBuffer(1, 1, 44100);
    nativeAudioBufferSourceNode.buffer = nativeAudioBuffer;

    try {
      nativeAudioBufferSourceNode.start(0, 1);
    } catch {
      return false;
    }

    return true;
  };
};

exports.createTestAudioBufferSourceNodeStartMethodOffsetClampingSupport = createTestAudioBufferSourceNodeStartMethodOffsetClampingSupport;
},{}],"../node_modules/standardized-audio-context/build/es2019/factories/test-audio-buffer-source-node-stop-method-nullified-buffer-support.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createTestAudioBufferSourceNodeStopMethodNullifiedBufferSupport = void 0;

const createTestAudioBufferSourceNodeStopMethodNullifiedBufferSupport = createNativeAudioNode => {
  return nativeContext => {
    const nativeAudioBufferSourceNode = createNativeAudioNode(nativeContext, ntvCntxt => ntvCntxt.createBufferSource());
    nativeAudioBufferSourceNode.start();

    try {
      nativeAudioBufferSourceNode.stop();
    } catch {
      return false;
    }

    return true;
  };
};

exports.createTestAudioBufferSourceNodeStopMethodNullifiedBufferSupport = createTestAudioBufferSourceNodeStopMethodNullifiedBufferSupport;
},{}],"../node_modules/standardized-audio-context/build/es2019/factories/test-audio-context-close-method-support.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createTestAudioContextCloseMethodSupport = void 0;

const createTestAudioContextCloseMethodSupport = nativeAudioContextConstructor => {
  return () => {
    if (nativeAudioContextConstructor === null) {
      return false;
    } // Try to check the prototype before constructing the AudioContext.


    if (nativeAudioContextConstructor.prototype !== undefined && nativeAudioContextConstructor.prototype.close !== undefined) {
      return true;
    }

    const audioContext = new nativeAudioContextConstructor();
    const isAudioContextClosable = audioContext.close !== undefined;

    try {
      audioContext.close();
    } catch {// Ignore errors.
    }

    return isAudioContextClosable;
  };
};

exports.createTestAudioContextCloseMethodSupport = createTestAudioContextCloseMethodSupport;
},{}],"../node_modules/standardized-audio-context/build/es2019/factories/test-audio-context-decode-audio-data-method-type-error-support.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createTestAudioContextDecodeAudioDataMethodTypeErrorSupport = void 0;

/**
 * Edge up to version 14, Firefox up to version 52, Safari up to version 9 and maybe other browsers
 * did not refuse to decode invalid parameters with a TypeError.
 */
const createTestAudioContextDecodeAudioDataMethodTypeErrorSupport = nativeOfflineAudioContextConstructor => {
  return () => {
    if (nativeOfflineAudioContextConstructor === null) {
      return Promise.resolve(false);
    }

    const offlineAudioContext = new nativeOfflineAudioContextConstructor(1, 1, 44100); // Bug #21: Safari does not support promises yet.

    return new Promise(resolve => {
      let isPending = true;

      const resolvePromise = err => {
        if (isPending) {
          isPending = false;
          offlineAudioContext.startRendering();
          resolve(err instanceof TypeError);
        }
      };

      let promise; // Bug #26: Safari throws a synchronous error.

      try {
        promise = offlineAudioContext // Bug #1: Safari requires a successCallback.
        .decodeAudioData(null, () => {// Ignore the success callback.
        }, resolvePromise);
      } catch (err) {
        resolvePromise(err);
      } // Bug #21: Safari does not support promises yet.


      if (promise !== undefined) {
        // Bug #6 Chrome does not call the errorCallback
        promise.catch(resolvePromise);
      }
    });
  };
};

exports.createTestAudioContextDecodeAudioDataMethodTypeErrorSupport = createTestAudioContextDecodeAudioDataMethodTypeErrorSupport;
},{}],"../node_modules/standardized-audio-context/build/es2019/factories/test-audio-context-options-support.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createTestAudioContextOptionsSupport = void 0;

const createTestAudioContextOptionsSupport = nativeAudioContextConstructor => {
  return () => {
    if (nativeAudioContextConstructor === null) {
      return false;
    }

    let audioContext;

    try {
      audioContext = new nativeAudioContextConstructor({
        latencyHint: 'balanced'
      });
    } catch {
      return false;
    }

    audioContext.close();
    return true;
  };
};

exports.createTestAudioContextOptionsSupport = createTestAudioContextOptionsSupport;
},{}],"../node_modules/standardized-audio-context/build/es2019/factories/test-audio-node-connect-method-support.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createTestAudioNodeConnectMethodSupport = void 0;

// Safari up to version 12.0 (but not v12.1) didn't return the destination in case it was an AudioNode.
const createTestAudioNodeConnectMethodSupport = nativeOfflineAudioContextConstructor => {
  return () => {
    if (nativeOfflineAudioContextConstructor === null) {
      return false;
    }

    const nativeOfflineAudioContext = new nativeOfflineAudioContextConstructor(1, 1, 44100);
    const nativeGainNode = nativeOfflineAudioContext.createGain();
    const isSupported = nativeGainNode.connect(nativeGainNode) === nativeGainNode;
    nativeGainNode.disconnect(nativeGainNode);
    return isSupported;
  };
};

exports.createTestAudioNodeConnectMethodSupport = createTestAudioNodeConnectMethodSupport;
},{}],"../node_modules/standardized-audio-context/build/es2019/factories/test-audio-scheduled-source-node-start-method-negative-parameters-support.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createTestAudioScheduledSourceNodeStartMethodNegativeParametersSupport = void 0;

const createTestAudioScheduledSourceNodeStartMethodNegativeParametersSupport = createNativeAudioNode => {
  return nativeContext => {
    const nativeAudioBufferSourceNode = createNativeAudioNode(nativeContext, ntvCntxt => ntvCntxt.createOscillator());

    try {
      nativeAudioBufferSourceNode.start(-1);
    } catch (err) {
      return err instanceof RangeError;
    }

    return false;
  };
};

exports.createTestAudioScheduledSourceNodeStartMethodNegativeParametersSupport = createTestAudioScheduledSourceNodeStartMethodNegativeParametersSupport;
},{}],"../node_modules/standardized-audio-context/build/es2019/factories/test-audio-scheduled-source-node-stop-method-consecutive-calls-support.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createTestAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport = void 0;

const createTestAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport = createNativeAudioNode => {
  return nativeContext => {
    const nativeAudioBuffer = nativeContext.createBuffer(1, 1, 44100);
    const nativeAudioBufferSourceNode = createNativeAudioNode(nativeContext, ntvCntxt => ntvCntxt.createBufferSource());
    nativeAudioBufferSourceNode.buffer = nativeAudioBuffer;
    nativeAudioBufferSourceNode.start();
    nativeAudioBufferSourceNode.stop();

    try {
      nativeAudioBufferSourceNode.stop();
      return true;
    } catch {
      return false;
    }
  };
};

exports.createTestAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport = createTestAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport;
},{}],"../node_modules/standardized-audio-context/build/es2019/factories/test-audio-scheduled-source-node-stop-method-negative-parameters-support.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createTestAudioScheduledSourceNodeStopMethodNegativeParametersSupport = void 0;

const createTestAudioScheduledSourceNodeStopMethodNegativeParametersSupport = createNativeAudioNode => {
  return nativeContext => {
    const nativeAudioBufferSourceNode = createNativeAudioNode(nativeContext, ntvCntxt => ntvCntxt.createOscillator());

    try {
      nativeAudioBufferSourceNode.stop(-1);
    } catch (err) {
      return err instanceof RangeError;
    }

    return false;
  };
};

exports.createTestAudioScheduledSourceNodeStopMethodNegativeParametersSupport = createTestAudioScheduledSourceNodeStopMethodNegativeParametersSupport;
},{}],"../node_modules/standardized-audio-context/build/es2019/factories/test-audio-worklet-processor-no-outputs-support.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createTestAudioWorkletProcessorNoOutputsSupport = void 0;

/**
 * Chrome version 66 and 67 did not call the process() function of an AudioWorkletProcessor if it had no outputs. AudioWorklet support was
 * enabled by default in version 66.
 */
const createTestAudioWorkletProcessorNoOutputsSupport = (nativeAudioWorkletNodeConstructor, nativeOfflineAudioContextConstructor) => {
  return async () => {
    // Bug #61: If there is no native AudioWorkletNode it gets faked and therefore it is no problem if the it doesn't exist.
    if (nativeAudioWorkletNodeConstructor === null) {
      return true;
    }

    if (nativeOfflineAudioContextConstructor === null) {
      return false;
    }

    const blob = new Blob(['class A extends AudioWorkletProcessor{process(){this.port.postMessage(0)}}registerProcessor("a",A)'], {
      type: 'application/javascript; charset=utf-8'
    });
    const offlineAudioContext = new nativeOfflineAudioContextConstructor(1, 128, 3200);
    const url = URL.createObjectURL(blob);
    let isCallingProcess = false;

    try {
      await offlineAudioContext.audioWorklet.addModule(url);
      const gainNode = offlineAudioContext.createGain();
      const audioWorkletNode = new nativeAudioWorkletNodeConstructor(offlineAudioContext, 'a', {
        numberOfOutputs: 0
      });

      audioWorkletNode.port.onmessage = () => isCallingProcess = true;

      gainNode.connect(audioWorkletNode);
      await offlineAudioContext.startRendering();
    } catch {// Ignore errors.
    } finally {
      URL.revokeObjectURL(url);
    }

    return isCallingProcess;
  };
};

exports.createTestAudioWorkletProcessorNoOutputsSupport = createTestAudioWorkletProcessorNoOutputsSupport;
},{}],"../node_modules/standardized-audio-context/build/es2019/factories/test-channel-merger-node-channel-count-support.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createTestChannelMergerNodeChannelCountSupport = void 0;

/**
 * Firefox up to version 69 did not throw an error when setting a different channelCount or channelCountMode.
 */
const createTestChannelMergerNodeChannelCountSupport = (createNativeAudioNode, nativeOfflineAudioContextConstructor) => {
  return () => {
    if (nativeOfflineAudioContextConstructor === null) {
      return false;
    }

    const offlineAudioContext = new nativeOfflineAudioContextConstructor(1, 1, 44100);
    const nativeChannelMergerNode = createNativeAudioNode(offlineAudioContext, ntvCntxt => ntvCntxt.createChannelMerger());
    /**
     * Bug #15: Safari does not return the default properties. It still needs to be patched. This test is supposed to test the support
     * in other browsers.
     */

    if (nativeChannelMergerNode.channelCountMode === 'max') {
      return true;
    }

    try {
      nativeChannelMergerNode.channelCount = 2;
    } catch {
      return true;
    }

    return false;
  };
};

exports.createTestChannelMergerNodeChannelCountSupport = createTestChannelMergerNodeChannelCountSupport;
},{}],"../node_modules/standardized-audio-context/build/es2019/factories/test-constant-source-node-accurate-scheduling-support.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createTestConstantSourceNodeAccurateSchedulingSupport = void 0;

const createTestConstantSourceNodeAccurateSchedulingSupport = (createNativeAudioNode, nativeOfflineAudioContextConstructor) => {
  return () => {
    if (nativeOfflineAudioContextConstructor === null) {
      return false;
    }

    const nativeOfflineAudioContext = new nativeOfflineAudioContextConstructor(1, 1, 44100); // Bug #62: Edge & Safari do not support ConstantSourceNodes.

    if (nativeOfflineAudioContext.createConstantSource === undefined) {
      return true;
    }

    const nativeConstantSourceNode = createNativeAudioNode(nativeOfflineAudioContext, ntvCntxt => ntvCntxt.createConstantSource());
    /*
     * @todo This is using bug #75 to detect bug #70. That works because both bugs were unique to
     * the implementation of Firefox right now, but it could probably be done in a better way.
     */

    return nativeConstantSourceNode.offset.maxValue !== Number.POSITIVE_INFINITY;
  };
};

exports.createTestConstantSourceNodeAccurateSchedulingSupport = createTestConstantSourceNodeAccurateSchedulingSupport;
},{}],"../node_modules/standardized-audio-context/build/es2019/factories/test-convolver-node-buffer-reassignability-support.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createTestConvolverNodeBufferReassignabilitySupport = void 0;

// Opera up to version 57 did not allow to reassign the buffer of a ConvolverNode.
const createTestConvolverNodeBufferReassignabilitySupport = nativeOfflineAudioContextConstructor => {
  return () => {
    if (nativeOfflineAudioContextConstructor === null) {
      return false;
    }

    const offlineAudioContext = new nativeOfflineAudioContextConstructor(1, 1, 44100);
    const nativeConvolverNode = offlineAudioContext.createConvolver();
    nativeConvolverNode.buffer = offlineAudioContext.createBuffer(1, 1, offlineAudioContext.sampleRate);

    try {
      nativeConvolverNode.buffer = offlineAudioContext.createBuffer(1, 1, offlineAudioContext.sampleRate);
    } catch {
      return false;
    }

    return true;
  };
};

exports.createTestConvolverNodeBufferReassignabilitySupport = createTestConvolverNodeBufferReassignabilitySupport;
},{}],"../node_modules/standardized-audio-context/build/es2019/factories/test-is-secure-context-support.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createTestIsSecureContextSupport = void 0;

const createTestIsSecureContextSupport = window => {
  return () => window !== null && window.hasOwnProperty('isSecureContext');
};

exports.createTestIsSecureContextSupport = createTestIsSecureContextSupport;
},{}],"../node_modules/standardized-audio-context/build/es2019/factories/test-media-stream-audio-source-node-media-stream-without-audio-track-support.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createTestMediaStreamAudioSourceNodeMediaStreamWithoutAudioTrackSupport = void 0;

// Firefox up to version 68 did not throw an error when creating a MediaStreamAudioSourceNode with a mediaStream that had no audio track.
const createTestMediaStreamAudioSourceNodeMediaStreamWithoutAudioTrackSupport = nativeAudioContextConstructor => {
  return () => {
    if (nativeAudioContextConstructor === null) {
      return false;
    }

    const audioContext = new nativeAudioContextConstructor();

    try {
      audioContext.createMediaStreamSource(new MediaStream());
      return false;
    } catch (err) {
      return true;
    }
  };
};

exports.createTestMediaStreamAudioSourceNodeMediaStreamWithoutAudioTrackSupport = createTestMediaStreamAudioSourceNodeMediaStreamWithoutAudioTrackSupport;
},{}],"../node_modules/standardized-audio-context/build/es2019/factories/test-offline-audio-context-current-time-support.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createTestOfflineAudioContextCurrentTimeSupport = void 0;

const createTestOfflineAudioContextCurrentTimeSupport = (createNativeGainNode, nativeOfflineAudioContextConstructor) => {
  return () => {
    if (nativeOfflineAudioContextConstructor === null) {
      return Promise.resolve(false);
    }

    const nativeOfflineAudioContext = new nativeOfflineAudioContextConstructor(1, 1, 44100); // Bug #48: Safari does not render an OfflineAudioContext without any connected node.

    const gainNode = createNativeGainNode(nativeOfflineAudioContext, {
      channelCount: 1,
      channelCountMode: 'explicit',
      channelInterpretation: 'discrete',
      gain: 0
    }); // Bug #21: Safari does not support promises yet.

    return new Promise(resolve => {
      nativeOfflineAudioContext.oncomplete = () => {
        gainNode.disconnect();
        resolve(nativeOfflineAudioContext.currentTime !== 0);
      };

      nativeOfflineAudioContext.startRendering();
    });
  };
};

exports.createTestOfflineAudioContextCurrentTimeSupport = createTestOfflineAudioContextCurrentTimeSupport;
},{}],"../node_modules/standardized-audio-context/build/es2019/factories/test-stereo-panner-node-default-value-support.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createTestStereoPannerNodeDefaultValueSupport = void 0;

/**
 * Firefox up to version 62 did not kick off the processing of the StereoPannerNode if the value of pan was zero.
 */
const createTestStereoPannerNodeDefaultValueSupport = nativeOfflineAudioContextConstructor => {
  return () => {
    if (nativeOfflineAudioContextConstructor === null) {
      return Promise.resolve(false);
    }

    const nativeOfflineAudioContext = new nativeOfflineAudioContextConstructor(1, 1, 44100);
    /*
     * Bug #105: Safari does not support the StereoPannerNode. Therefore the returned value should normally be false but the faker does
     * support the tested behaviour.
     */

    if (nativeOfflineAudioContext.createStereoPanner === undefined) {
      return Promise.resolve(true);
    } // Bug #62: Edge & Safari do not support ConstantSourceNodes.


    if (nativeOfflineAudioContext.createConstantSource === undefined) {
      return Promise.resolve(true);
    }

    const constantSourceNode = nativeOfflineAudioContext.createConstantSource();
    const stereoPanner = nativeOfflineAudioContext.createStereoPanner();
    constantSourceNode.channelCount = 1;
    constantSourceNode.offset.value = 1;
    stereoPanner.channelCount = 1;
    constantSourceNode.start();
    constantSourceNode.connect(stereoPanner).connect(nativeOfflineAudioContext.destination);
    return nativeOfflineAudioContext.startRendering().then(buffer => buffer.getChannelData(0)[0] !== 1);
  };
};

exports.createTestStereoPannerNodeDefaultValueSupport = createTestStereoPannerNodeDefaultValueSupport;
},{}],"../node_modules/standardized-audio-context/build/es2019/factories/unknown-error.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createUnknownError = void 0;

const createUnknownError = () => {
  try {
    return new DOMException('', 'UnknownError');
  } catch (err) {
    // Bug #122: Edge is the only browser that does not yet allow to construct a DOMException.
    err.name = 'UnknownError';
    return err;
  }
};

exports.createUnknownError = createUnknownError;
},{}],"../node_modules/standardized-audio-context/build/es2019/factories/wave-shaper-node-constructor.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createWaveShaperNodeConstructor = void 0;
const DEFAULT_OPTIONS = {
  channelCount: 2,
  channelCountMode: 'max',
  channelInterpretation: 'speakers',
  curve: null,
  oversample: 'none'
};

const createWaveShaperNodeConstructor = (audioNodeConstructor, createInvalidStateError, createNativeWaveShaperNode, createWaveShaperNodeRenderer, getNativeContext, isNativeOfflineAudioContext) => {
  return class WaveShaperNode extends audioNodeConstructor {
    constructor(context, options = DEFAULT_OPTIONS) {
      const nativeContext = getNativeContext(context);
      const mergedOptions = { ...DEFAULT_OPTIONS,
        ...options
      };
      const nativeWaveShaperNode = createNativeWaveShaperNode(nativeContext, mergedOptions);
      const isOffline = isNativeOfflineAudioContext(nativeContext);
      const waveShaperNodeRenderer = isOffline ? createWaveShaperNodeRenderer() : null; // @todo Add a mechanism to only switch a WaveShaperNode to active while it is connected.

      super(context, true, nativeWaveShaperNode, waveShaperNodeRenderer);
      this._isCurveNullified = false;
      this._nativeWaveShaperNode = nativeWaveShaperNode;
    }

    get curve() {
      if (this._isCurveNullified) {
        return null;
      }

      return this._nativeWaveShaperNode.curve;
    }

    set curve(value) {
      // Bug #103: Safari does not allow to set the curve to null.
      if (value === null) {
        this._isCurveNullified = true;
        this._nativeWaveShaperNode.curve = new Float32Array([0, 0]);
      } else {
        // Bug #102: Safari does not throw an InvalidStateError when the curve has less than two samples.
        // Bug #104: Chrome will throw an InvalidAccessError when the curve has less than two samples.
        if (value.length < 2) {
          throw createInvalidStateError();
        }

        this._isCurveNullified = false;
        this._nativeWaveShaperNode.curve = value;
      }
    }

    get oversample() {
      return this._nativeWaveShaperNode.oversample;
    }

    set oversample(value) {
      this._nativeWaveShaperNode.oversample = value;
    }

  };
};

exports.createWaveShaperNodeConstructor = createWaveShaperNodeConstructor;
},{}],"../node_modules/standardized-audio-context/build/es2019/factories/wave-shaper-node-renderer-factory.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createWaveShaperNodeRendererFactory = void 0;

var _nativeAudioNodeFaker = require("../guards/native-audio-node-faker");

var _isOwnedByContext = require("../helpers/is-owned-by-context");

const createWaveShaperNodeRendererFactory = (createNativeWaveShaperNode, getNativeAudioNode, renderInputsOfAudioNode) => {
  return () => {
    const renderedNativeWaveShaperNodes = new WeakMap();

    const createWaveShaperNode = async (proxy, nativeOfflineAudioContext, trace) => {
      let nativeWaveShaperNode = getNativeAudioNode(proxy); // If the initially used nativeWaveShaperNode was not constructed on the same OfflineAudioContext it needs to be created again.

      const nativeWaveShaperNodeIsOwnedByContext = (0, _isOwnedByContext.isOwnedByContext)(nativeWaveShaperNode, nativeOfflineAudioContext);

      if (!nativeWaveShaperNodeIsOwnedByContext) {
        const options = {
          channelCount: nativeWaveShaperNode.channelCount,
          channelCountMode: nativeWaveShaperNode.channelCountMode,
          channelInterpretation: nativeWaveShaperNode.channelInterpretation,
          curve: nativeWaveShaperNode.curve,
          oversample: nativeWaveShaperNode.oversample
        };
        nativeWaveShaperNode = createNativeWaveShaperNode(nativeOfflineAudioContext, options);
      }

      renderedNativeWaveShaperNodes.set(nativeOfflineAudioContext, nativeWaveShaperNode);

      if ((0, _nativeAudioNodeFaker.isNativeAudioNodeFaker)(nativeWaveShaperNode)) {
        await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeWaveShaperNode.inputs[0], trace);
      } else {
        await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeWaveShaperNode, trace);
      }

      return nativeWaveShaperNode;
    };

    return {
      render(proxy, nativeOfflineAudioContext, trace) {
        const renderedNativeWaveShaperNode = renderedNativeWaveShaperNodes.get(nativeOfflineAudioContext);

        if (renderedNativeWaveShaperNode !== undefined) {
          return Promise.resolve(renderedNativeWaveShaperNode);
        }

        return createWaveShaperNode(proxy, nativeOfflineAudioContext, trace);
      }

    };
  };
};

exports.createWaveShaperNodeRendererFactory = createWaveShaperNodeRendererFactory;
},{"../guards/native-audio-node-faker":"../node_modules/standardized-audio-context/build/es2019/guards/native-audio-node-faker.js","../helpers/is-owned-by-context":"../node_modules/standardized-audio-context/build/es2019/helpers/is-owned-by-context.js"}],"../node_modules/standardized-audio-context/build/es2019/factories/window.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createWindow = void 0;

const createWindow = () => typeof window === 'undefined' ? null : window;

exports.createWindow = createWindow;
},{}],"../node_modules/standardized-audio-context/build/es2019/factories/wrap-audio-buffer-copy-channel-methods.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createWrapAudioBufferCopyChannelMethods = void 0;

const createWrapAudioBufferCopyChannelMethods = (convertNumberToUnsignedLong, createIndexSizeError) => {
  return audioBuffer => {
    audioBuffer.copyFromChannel = (destination, channelNumberAsNumber, bufferOffsetAsNumber = 0) => {
      const bufferOffset = convertNumberToUnsignedLong(bufferOffsetAsNumber);
      const channelNumber = convertNumberToUnsignedLong(channelNumberAsNumber);

      if (channelNumber >= audioBuffer.numberOfChannels) {
        throw createIndexSizeError();
      }

      const audioBufferLength = audioBuffer.length;
      const channelData = audioBuffer.getChannelData(channelNumber);
      const destinationLength = destination.length;

      for (let i = bufferOffset < 0 ? -bufferOffset : 0; i + bufferOffset < audioBufferLength && i < destinationLength; i += 1) {
        destination[i] = channelData[i + bufferOffset];
      }
    };

    audioBuffer.copyToChannel = (source, channelNumberAsNumber, bufferOffsetAsNumber = 0) => {
      const bufferOffset = convertNumberToUnsignedLong(bufferOffsetAsNumber);
      const channelNumber = convertNumberToUnsignedLong(channelNumberAsNumber);

      if (channelNumber >= audioBuffer.numberOfChannels) {
        throw createIndexSizeError();
      }

      const audioBufferLength = audioBuffer.length;
      const channelData = audioBuffer.getChannelData(channelNumber);
      const sourceLength = source.length;

      for (let i = bufferOffset < 0 ? -bufferOffset : 0; i + bufferOffset < audioBufferLength && i < sourceLength; i += 1) {
        channelData[i + bufferOffset] = source[i];
      }
    };
  };
};

exports.createWrapAudioBufferCopyChannelMethods = createWrapAudioBufferCopyChannelMethods;
},{}],"../node_modules/standardized-audio-context/build/es2019/factories/wrap-audio-buffer-copy-channel-methods-out-of-bounds.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createWrapAudioBufferCopyChannelMethodsOutOfBounds = void 0;

const createWrapAudioBufferCopyChannelMethodsOutOfBounds = convertNumberToUnsignedLong => {
  return audioBuffer => {
    audioBuffer.copyFromChannel = (copyFromChannel => {
      return (destination, channelNumberAsNumber, bufferOffsetAsNumber = 0) => {
        const bufferOffset = convertNumberToUnsignedLong(bufferOffsetAsNumber);
        const channelNumber = convertNumberToUnsignedLong(channelNumberAsNumber);

        if (bufferOffset < audioBuffer.length) {
          return copyFromChannel.call(audioBuffer, destination, channelNumber, bufferOffset);
        }
      };
    })(audioBuffer.copyFromChannel);

    audioBuffer.copyToChannel = (copyToChannel => {
      return (source, channelNumberAsNumber, bufferOffsetAsNumber = 0) => {
        const bufferOffset = convertNumberToUnsignedLong(bufferOffsetAsNumber);
        const channelNumber = convertNumberToUnsignedLong(channelNumberAsNumber);

        if (bufferOffset < audioBuffer.length) {
          return copyToChannel.call(audioBuffer, source, channelNumber, bufferOffset);
        }
      };
    })(audioBuffer.copyToChannel);
  };
};

exports.createWrapAudioBufferCopyChannelMethodsOutOfBounds = createWrapAudioBufferCopyChannelMethodsOutOfBounds;
},{}],"../node_modules/standardized-audio-context/build/es2019/factories/wrap-audio-buffer-source-node-stop-method-nullified-buffer.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createWrapAudioBufferSourceNodeStopMethodNullifiedBuffer = void 0;

const createWrapAudioBufferSourceNodeStopMethodNullifiedBuffer = overwriteAccessors => {
  return (nativeAudioBufferSourceNode, nativeContext) => {
    const nullifiedBuffer = nativeContext.createBuffer(1, 1, nativeContext.sampleRate);

    if (nativeAudioBufferSourceNode.buffer === null) {
      nativeAudioBufferSourceNode.buffer = nullifiedBuffer;
    }

    overwriteAccessors(nativeAudioBufferSourceNode, 'buffer', get => () => {
      const value = get.call(nativeAudioBufferSourceNode);
      return value === nullifiedBuffer ? null : value;
    }, set => value => {
      return set.call(nativeAudioBufferSourceNode, value === null ? nullifiedBuffer : value);
    });
  };
};

exports.createWrapAudioBufferSourceNodeStopMethodNullifiedBuffer = createWrapAudioBufferSourceNodeStopMethodNullifiedBuffer;
},{}],"../node_modules/standardized-audio-context/build/es2019/factories/wrap-audio-scheduled-source-node-stop-method-consecutive-calls.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createWrapAudioScheduledSourceNodeStopMethodConsecutiveCalls = void 0;

var _interceptConnections = require("../helpers/intercept-connections");

const createWrapAudioScheduledSourceNodeStopMethodConsecutiveCalls = createNativeAudioNode => {
  return (nativeAudioScheduledSourceNode, nativeContext) => {
    const nativeGainNode = createNativeAudioNode(nativeContext, ntvCntxt => ntvCntxt.createGain());
    nativeAudioScheduledSourceNode.connect(nativeGainNode);

    const disconnectGainNode = (disconnect => {
      return () => {
        // @todo TypeScript cannot infer the overloaded signature with 1 argument yet.
        disconnect.call(nativeAudioScheduledSourceNode, nativeGainNode);
        nativeAudioScheduledSourceNode.removeEventListener('ended', disconnectGainNode);
      };
    })(nativeAudioScheduledSourceNode.disconnect);

    nativeAudioScheduledSourceNode.addEventListener('ended', disconnectGainNode);
    (0, _interceptConnections.interceptConnections)(nativeAudioScheduledSourceNode, nativeGainNode);

    nativeAudioScheduledSourceNode.stop = (stop => {
      let isStopped = false;
      return (when = 0) => {
        if (isStopped) {
          try {
            stop.call(nativeAudioScheduledSourceNode, when);
          } catch {
            nativeGainNode.gain.setValueAtTime(0, when);
          }
        } else {
          stop.call(nativeAudioScheduledSourceNode, when);
          isStopped = true;
        }
      };
    })(nativeAudioScheduledSourceNode.stop);
  };
};

exports.createWrapAudioScheduledSourceNodeStopMethodConsecutiveCalls = createWrapAudioScheduledSourceNodeStopMethodConsecutiveCalls;
},{"../helpers/intercept-connections":"../node_modules/standardized-audio-context/build/es2019/helpers/intercept-connections.js"}],"../node_modules/standardized-audio-context/build/es2019/factories/wrap-channel-merger-node.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createWrapChannelMergerNode = void 0;

const createWrapChannelMergerNode = (createInvalidStateError, createNativeAudioNode, monitorConnectionsFunction) => {
  return (nativeContext, channelMergerNode) => {
    channelMergerNode.channelCount = 1;
    channelMergerNode.channelCountMode = 'explicit';
    Object.defineProperty(channelMergerNode, 'channelCount', {
      get: () => 1,
      set: () => {
        throw createInvalidStateError();
      }
    });
    Object.defineProperty(channelMergerNode, 'channelCountMode', {
      get: () => 'explicit',
      set: () => {
        throw createInvalidStateError();
      }
    }); // Bug #20: Safari requires a connection of any kind to treat the input signal correctly.

    const audioBufferSourceNode = createNativeAudioNode(nativeContext, ntvCntxt => ntvCntxt.createBufferSource());

    const whenConnected = () => {
      const length = channelMergerNode.numberOfInputs;

      for (let i = 0; i < length; i += 1) {
        audioBufferSourceNode.connect(channelMergerNode, 0, i);
      }
    };

    const whenDisconnected = () => audioBufferSourceNode.disconnect(channelMergerNode);

    monitorConnectionsFunction(channelMergerNode, whenConnected, whenDisconnected);
  };
};

exports.createWrapChannelMergerNode = createWrapChannelMergerNode;
},{}],"../node_modules/standardized-audio-context/build/es2019/helpers/is-dc-curve.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isDCCurve = void 0;

const isDCCurve = curve => {
  if (curve === null) {
    return false;
  }

  const length = curve.length;

  if (length % 2 !== 0) {
    return curve[Math.floor(length / 2)] !== 0;
  }

  return curve[length / 2 - 1] + curve[length / 2] !== 0;
};

exports.isDCCurve = isDCCurve;
},{}],"../node_modules/standardized-audio-context/build/es2019/helpers/overwrite-accessors.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.overwriteAccessors = void 0;

const overwriteAccessors = (object, property, createGetter, createSetter) => {
  let prototype = Object.getPrototypeOf(object);

  while (!prototype.hasOwnProperty(property)) {
    prototype = Object.getPrototypeOf(prototype);
  }

  const {
    get,
    set
  } = Object.getOwnPropertyDescriptor(prototype, property);
  Object.defineProperty(object, property, {
    get: createGetter(get),
    set: createSetter(set)
  });
};

exports.overwriteAccessors = overwriteAccessors;
},{}],"../node_modules/standardized-audio-context/build/es2019/helpers/test-transferables-support.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.testTransferablesSupport = void 0;

// Safari at version 11 did not support transferables.
const testTransferablesSupport = () => new Promise(resolve => {
  const arrayBuffer = new ArrayBuffer(0);
  const {
    port1,
    port2
  } = new MessageChannel();

  port1.onmessage = ({
    data
  }) => resolve(data !== null);

  port2.postMessage(arrayBuffer, [arrayBuffer]);
});

exports.testTransferablesSupport = testTransferablesSupport;
},{}],"../node_modules/standardized-audio-context/build/es2019/helpers/wrap-audio-buffer-source-node-start-method-offset-clamping.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.wrapAudioBufferSourceNodeStartMethodOffsetClamping = void 0;

const wrapAudioBufferSourceNodeStartMethodOffsetClamping = nativeAudioBufferSourceNode => {
  nativeAudioBufferSourceNode.start = (start => {
    return (when = 0, offset = 0, duration) => {
      const buffer = nativeAudioBufferSourceNode.buffer; // Bug #154: Safari does not clamp the offset if it is equal to or greater than the duration of the buffer.

      const clampedOffset = buffer === null ? offset : Math.min(buffer.duration, offset); // Bug #155: Safari does not handle the offset correctly if it would cause the buffer to be not be played at all.

      if (buffer !== null && clampedOffset > buffer.duration - 0.5 / nativeAudioBufferSourceNode.context.sampleRate) {
        start.call(nativeAudioBufferSourceNode, when, 0, 0);
      } else {
        start.call(nativeAudioBufferSourceNode, when, clampedOffset, duration);
      }
    };
  })(nativeAudioBufferSourceNode.start);
};

exports.wrapAudioBufferSourceNodeStartMethodOffsetClamping = wrapAudioBufferSourceNodeStartMethodOffsetClamping;
},{}],"../node_modules/standardized-audio-context/build/es2019/helpers/wrap-event-listener.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.wrapEventListener = void 0;

const wrapEventListener = (target, eventListener) => {
  return event => {
    const descriptor = {
      value: target
    };
    Object.defineProperties(event, {
      currentTarget: descriptor,
      target: descriptor
    });

    if (typeof eventListener === 'function') {
      return eventListener.call(target, event);
    }

    return eventListener.handleEvent.call(target, event);
  };
};

exports.wrapEventListener = wrapEventListener;
},{}],"../node_modules/standardized-audio-context/build/es2019/interfaces/analyser-node.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/interfaces/analyser-options.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/interfaces/audio-buffer.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/interfaces/audio-buffer-options.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/interfaces/audio-buffer-source-node.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/interfaces/audio-buffer-source-node-renderer.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/interfaces/audio-buffer-source-options.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/interfaces/audio-context.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/interfaces/audio-context-options.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/interfaces/audio-destination-node.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/interfaces/audio-listener.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/interfaces/audio-node.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/interfaces/audio-node-options.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/interfaces/audio-node-renderer.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/interfaces/audio-param.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/interfaces/audio-param-descriptor.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/interfaces/audio-param-renderer.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/interfaces/audio-scheduled-source-node.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/interfaces/audio-scheduled-source-node-event-map.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/interfaces/audio-worklet.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/interfaces/audio-worklet-node.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/interfaces/audio-worklet-node-event-map.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/interfaces/audio-worklet-node-options.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/interfaces/audio-worklet-processor.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/interfaces/audio-worklet-processor-constructor.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/interfaces/automation.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/interfaces/base-audio-context.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/interfaces/biquad-filter-node.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/interfaces/biquad-filter-options.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/interfaces/channel-merger-options.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/interfaces/channel-splitter-options.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/interfaces/common-audio-context.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/interfaces/common-offline-audio-context.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/interfaces/constant-source-node.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/interfaces/constant-source-node-renderer.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/interfaces/constant-source-options.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/interfaces/convolver-node.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/interfaces/convolver-options.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/interfaces/delay-node.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/interfaces/delay-options.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/interfaces/dynamics-compressor-node.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/interfaces/dynamics-compressor-options.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/interfaces/gain-node.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/interfaces/gain-options.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/interfaces/iir-filter-node.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/interfaces/iir-filter-options.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/interfaces/media-element-audio-source-node.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/interfaces/media-element-audio-source-options.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/interfaces/media-stream-audio-destination-node.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/interfaces/media-stream-audio-source-node.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/interfaces/media-stream-audio-source-options.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/interfaces/media-stream-track-audio-source-node.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/interfaces/media-stream-track-audio-source-options.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/interfaces/minimal-audio-context.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/interfaces/minimal-base-audio-context.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/interfaces/minimal-base-audio-context-event-map.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/interfaces/minimal-offline-audio-context.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/interfaces/native-audio-node-faker.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/interfaces/native-audio-worklet-node-faker.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/interfaces/native-constant-source-node-faker.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/interfaces/native-convolver-node-faker.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/interfaces/native-iir-filter-node-faker.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/interfaces/native-panner-node-faker.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/interfaces/native-stereo-panner-node-faker.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/interfaces/native-wave-shaper-node-faker.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/interfaces/offline-audio-completion-event.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/interfaces/offline-audio-context.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/interfaces/offline-audio-context-constructor.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/interfaces/offline-audio-context-options.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/interfaces/oscillator-node.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/interfaces/oscillator-node-renderer.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/interfaces/oscillator-options.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/interfaces/panner-node.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/interfaces/panner-options.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/interfaces/periodic-wave.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/interfaces/periodic-wave-constraints.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/interfaces/periodic-wave-options.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/interfaces/read-only-map.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/interfaces/stereo-panner-node.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/interfaces/stereo-panner-options.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/interfaces/wave-shaper-node.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/interfaces/wave-shaper-options.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/interfaces/worklet-options.js":[function(require,module,exports) {
// @todo This is currently named IWorkletOptions and not IAudioWorkletOptions because it defines the options of a generic Worklet.

},{}],"../node_modules/standardized-audio-context/build/es2019/interfaces/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _analyserNode = require("./analyser-node");

Object.keys(_analyserNode).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _analyserNode[key];
    }
  });
});

var _analyserOptions = require("./analyser-options");

Object.keys(_analyserOptions).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _analyserOptions[key];
    }
  });
});

var _audioBuffer = require("./audio-buffer");

Object.keys(_audioBuffer).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _audioBuffer[key];
    }
  });
});

var _audioBufferOptions = require("./audio-buffer-options");

Object.keys(_audioBufferOptions).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _audioBufferOptions[key];
    }
  });
});

var _audioBufferSourceNode = require("./audio-buffer-source-node");

Object.keys(_audioBufferSourceNode).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _audioBufferSourceNode[key];
    }
  });
});

var _audioBufferSourceNodeRenderer = require("./audio-buffer-source-node-renderer");

Object.keys(_audioBufferSourceNodeRenderer).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _audioBufferSourceNodeRenderer[key];
    }
  });
});

var _audioBufferSourceOptions = require("./audio-buffer-source-options");

Object.keys(_audioBufferSourceOptions).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _audioBufferSourceOptions[key];
    }
  });
});

var _audioContext = require("./audio-context");

Object.keys(_audioContext).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _audioContext[key];
    }
  });
});

var _audioContextOptions = require("./audio-context-options");

Object.keys(_audioContextOptions).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _audioContextOptions[key];
    }
  });
});

var _audioDestinationNode = require("./audio-destination-node");

Object.keys(_audioDestinationNode).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _audioDestinationNode[key];
    }
  });
});

var _audioListener = require("./audio-listener");

Object.keys(_audioListener).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _audioListener[key];
    }
  });
});

var _audioNode = require("./audio-node");

Object.keys(_audioNode).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _audioNode[key];
    }
  });
});

var _audioNodeOptions = require("./audio-node-options");

Object.keys(_audioNodeOptions).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _audioNodeOptions[key];
    }
  });
});

var _audioNodeRenderer = require("./audio-node-renderer");

Object.keys(_audioNodeRenderer).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _audioNodeRenderer[key];
    }
  });
});

var _audioParam = require("./audio-param");

Object.keys(_audioParam).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _audioParam[key];
    }
  });
});

var _audioParamDescriptor = require("./audio-param-descriptor");

Object.keys(_audioParamDescriptor).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _audioParamDescriptor[key];
    }
  });
});

var _audioParamRenderer = require("./audio-param-renderer");

Object.keys(_audioParamRenderer).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _audioParamRenderer[key];
    }
  });
});

var _audioScheduledSourceNode = require("./audio-scheduled-source-node");

Object.keys(_audioScheduledSourceNode).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _audioScheduledSourceNode[key];
    }
  });
});

var _audioScheduledSourceNodeEventMap = require("./audio-scheduled-source-node-event-map");

Object.keys(_audioScheduledSourceNodeEventMap).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _audioScheduledSourceNodeEventMap[key];
    }
  });
});

var _audioWorklet = require("./audio-worklet");

Object.keys(_audioWorklet).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _audioWorklet[key];
    }
  });
});

var _audioWorkletNode = require("./audio-worklet-node");

Object.keys(_audioWorkletNode).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _audioWorkletNode[key];
    }
  });
});

var _audioWorkletNodeEventMap = require("./audio-worklet-node-event-map");

Object.keys(_audioWorkletNodeEventMap).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _audioWorkletNodeEventMap[key];
    }
  });
});

var _audioWorkletNodeOptions = require("./audio-worklet-node-options");

Object.keys(_audioWorkletNodeOptions).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _audioWorkletNodeOptions[key];
    }
  });
});

var _audioWorkletProcessor = require("./audio-worklet-processor");

Object.keys(_audioWorkletProcessor).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _audioWorkletProcessor[key];
    }
  });
});

var _audioWorkletProcessorConstructor = require("./audio-worklet-processor-constructor");

Object.keys(_audioWorkletProcessorConstructor).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _audioWorkletProcessorConstructor[key];
    }
  });
});

var _automation = require("./automation");

Object.keys(_automation).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _automation[key];
    }
  });
});

var _baseAudioContext = require("./base-audio-context");

Object.keys(_baseAudioContext).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _baseAudioContext[key];
    }
  });
});

var _biquadFilterNode = require("./biquad-filter-node");

Object.keys(_biquadFilterNode).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _biquadFilterNode[key];
    }
  });
});

var _biquadFilterOptions = require("./biquad-filter-options");

Object.keys(_biquadFilterOptions).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _biquadFilterOptions[key];
    }
  });
});

var _channelMergerOptions = require("./channel-merger-options");

Object.keys(_channelMergerOptions).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _channelMergerOptions[key];
    }
  });
});

var _channelSplitterOptions = require("./channel-splitter-options");

Object.keys(_channelSplitterOptions).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _channelSplitterOptions[key];
    }
  });
});

var _commonAudioContext = require("./common-audio-context");

Object.keys(_commonAudioContext).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _commonAudioContext[key];
    }
  });
});

var _commonOfflineAudioContext = require("./common-offline-audio-context");

Object.keys(_commonOfflineAudioContext).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _commonOfflineAudioContext[key];
    }
  });
});

var _constantSourceNode = require("./constant-source-node");

Object.keys(_constantSourceNode).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _constantSourceNode[key];
    }
  });
});

var _constantSourceNodeRenderer = require("./constant-source-node-renderer");

Object.keys(_constantSourceNodeRenderer).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _constantSourceNodeRenderer[key];
    }
  });
});

var _constantSourceOptions = require("./constant-source-options");

Object.keys(_constantSourceOptions).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _constantSourceOptions[key];
    }
  });
});

var _convolverNode = require("./convolver-node");

Object.keys(_convolverNode).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _convolverNode[key];
    }
  });
});

var _convolverOptions = require("./convolver-options");

Object.keys(_convolverOptions).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _convolverOptions[key];
    }
  });
});

var _delayNode = require("./delay-node");

Object.keys(_delayNode).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _delayNode[key];
    }
  });
});

var _delayOptions = require("./delay-options");

Object.keys(_delayOptions).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _delayOptions[key];
    }
  });
});

var _dynamicsCompressorNode = require("./dynamics-compressor-node");

Object.keys(_dynamicsCompressorNode).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _dynamicsCompressorNode[key];
    }
  });
});

var _dynamicsCompressorOptions = require("./dynamics-compressor-options");

Object.keys(_dynamicsCompressorOptions).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _dynamicsCompressorOptions[key];
    }
  });
});

var _gainNode = require("./gain-node");

Object.keys(_gainNode).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _gainNode[key];
    }
  });
});

var _gainOptions = require("./gain-options");

Object.keys(_gainOptions).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _gainOptions[key];
    }
  });
});

var _iirFilterNode = require("./iir-filter-node");

Object.keys(_iirFilterNode).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _iirFilterNode[key];
    }
  });
});

var _iirFilterOptions = require("./iir-filter-options");

Object.keys(_iirFilterOptions).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _iirFilterOptions[key];
    }
  });
});

var _mediaElementAudioSourceNode = require("./media-element-audio-source-node");

Object.keys(_mediaElementAudioSourceNode).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _mediaElementAudioSourceNode[key];
    }
  });
});

var _mediaElementAudioSourceOptions = require("./media-element-audio-source-options");

Object.keys(_mediaElementAudioSourceOptions).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _mediaElementAudioSourceOptions[key];
    }
  });
});

var _mediaStreamAudioDestinationNode = require("./media-stream-audio-destination-node");

Object.keys(_mediaStreamAudioDestinationNode).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _mediaStreamAudioDestinationNode[key];
    }
  });
});

var _mediaStreamAudioSourceNode = require("./media-stream-audio-source-node");

Object.keys(_mediaStreamAudioSourceNode).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _mediaStreamAudioSourceNode[key];
    }
  });
});

var _mediaStreamAudioSourceOptions = require("./media-stream-audio-source-options");

Object.keys(_mediaStreamAudioSourceOptions).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _mediaStreamAudioSourceOptions[key];
    }
  });
});

var _mediaStreamTrackAudioSourceNode = require("./media-stream-track-audio-source-node");

Object.keys(_mediaStreamTrackAudioSourceNode).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _mediaStreamTrackAudioSourceNode[key];
    }
  });
});

var _mediaStreamTrackAudioSourceOptions = require("./media-stream-track-audio-source-options");

Object.keys(_mediaStreamTrackAudioSourceOptions).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _mediaStreamTrackAudioSourceOptions[key];
    }
  });
});

var _minimalAudioContext = require("./minimal-audio-context");

Object.keys(_minimalAudioContext).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _minimalAudioContext[key];
    }
  });
});

var _minimalBaseAudioContext = require("./minimal-base-audio-context");

Object.keys(_minimalBaseAudioContext).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _minimalBaseAudioContext[key];
    }
  });
});

var _minimalBaseAudioContextEventMap = require("./minimal-base-audio-context-event-map");

Object.keys(_minimalBaseAudioContextEventMap).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _minimalBaseAudioContextEventMap[key];
    }
  });
});

var _minimalOfflineAudioContext = require("./minimal-offline-audio-context");

Object.keys(_minimalOfflineAudioContext).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _minimalOfflineAudioContext[key];
    }
  });
});

var _nativeAudioNodeFaker = require("./native-audio-node-faker");

Object.keys(_nativeAudioNodeFaker).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _nativeAudioNodeFaker[key];
    }
  });
});

var _nativeAudioWorkletNodeFaker = require("./native-audio-worklet-node-faker");

Object.keys(_nativeAudioWorkletNodeFaker).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _nativeAudioWorkletNodeFaker[key];
    }
  });
});

var _nativeConstantSourceNodeFaker = require("./native-constant-source-node-faker");

Object.keys(_nativeConstantSourceNodeFaker).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _nativeConstantSourceNodeFaker[key];
    }
  });
});

var _nativeConvolverNodeFaker = require("./native-convolver-node-faker");

Object.keys(_nativeConvolverNodeFaker).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _nativeConvolverNodeFaker[key];
    }
  });
});

var _nativeIirFilterNodeFaker = require("./native-iir-filter-node-faker");

Object.keys(_nativeIirFilterNodeFaker).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _nativeIirFilterNodeFaker[key];
    }
  });
});

var _nativePannerNodeFaker = require("./native-panner-node-faker");

Object.keys(_nativePannerNodeFaker).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _nativePannerNodeFaker[key];
    }
  });
});

var _nativeStereoPannerNodeFaker = require("./native-stereo-panner-node-faker");

Object.keys(_nativeStereoPannerNodeFaker).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _nativeStereoPannerNodeFaker[key];
    }
  });
});

var _nativeWaveShaperNodeFaker = require("./native-wave-shaper-node-faker");

Object.keys(_nativeWaveShaperNodeFaker).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _nativeWaveShaperNodeFaker[key];
    }
  });
});

var _offlineAudioCompletionEvent = require("./offline-audio-completion-event");

Object.keys(_offlineAudioCompletionEvent).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _offlineAudioCompletionEvent[key];
    }
  });
});

var _offlineAudioContext = require("./offline-audio-context");

Object.keys(_offlineAudioContext).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _offlineAudioContext[key];
    }
  });
});

var _offlineAudioContextConstructor = require("./offline-audio-context-constructor");

Object.keys(_offlineAudioContextConstructor).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _offlineAudioContextConstructor[key];
    }
  });
});

var _offlineAudioContextOptions = require("./offline-audio-context-options");

Object.keys(_offlineAudioContextOptions).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _offlineAudioContextOptions[key];
    }
  });
});

var _oscillatorNode = require("./oscillator-node");

Object.keys(_oscillatorNode).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _oscillatorNode[key];
    }
  });
});

var _oscillatorNodeRenderer = require("./oscillator-node-renderer");

Object.keys(_oscillatorNodeRenderer).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _oscillatorNodeRenderer[key];
    }
  });
});

var _oscillatorOptions = require("./oscillator-options");

Object.keys(_oscillatorOptions).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _oscillatorOptions[key];
    }
  });
});

var _pannerNode = require("./panner-node");

Object.keys(_pannerNode).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _pannerNode[key];
    }
  });
});

var _pannerOptions = require("./panner-options");

Object.keys(_pannerOptions).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _pannerOptions[key];
    }
  });
});

var _periodicWave = require("./periodic-wave");

Object.keys(_periodicWave).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _periodicWave[key];
    }
  });
});

var _periodicWaveConstraints = require("./periodic-wave-constraints");

Object.keys(_periodicWaveConstraints).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _periodicWaveConstraints[key];
    }
  });
});

var _periodicWaveOptions = require("./periodic-wave-options");

Object.keys(_periodicWaveOptions).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _periodicWaveOptions[key];
    }
  });
});

var _readOnlyMap = require("./read-only-map");

Object.keys(_readOnlyMap).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _readOnlyMap[key];
    }
  });
});

var _stereoPannerNode = require("./stereo-panner-node");

Object.keys(_stereoPannerNode).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _stereoPannerNode[key];
    }
  });
});

var _stereoPannerOptions = require("./stereo-panner-options");

Object.keys(_stereoPannerOptions).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _stereoPannerOptions[key];
    }
  });
});

var _waveShaperNode = require("./wave-shaper-node");

Object.keys(_waveShaperNode).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _waveShaperNode[key];
    }
  });
});

var _waveShaperOptions = require("./wave-shaper-options");

Object.keys(_waveShaperOptions).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _waveShaperOptions[key];
    }
  });
});

var _workletOptions = require("./worklet-options");

Object.keys(_workletOptions).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _workletOptions[key];
    }
  });
});
},{"./analyser-node":"../node_modules/standardized-audio-context/build/es2019/interfaces/analyser-node.js","./analyser-options":"../node_modules/standardized-audio-context/build/es2019/interfaces/analyser-options.js","./audio-buffer":"../node_modules/standardized-audio-context/build/es2019/interfaces/audio-buffer.js","./audio-buffer-options":"../node_modules/standardized-audio-context/build/es2019/interfaces/audio-buffer-options.js","./audio-buffer-source-node":"../node_modules/standardized-audio-context/build/es2019/interfaces/audio-buffer-source-node.js","./audio-buffer-source-node-renderer":"../node_modules/standardized-audio-context/build/es2019/interfaces/audio-buffer-source-node-renderer.js","./audio-buffer-source-options":"../node_modules/standardized-audio-context/build/es2019/interfaces/audio-buffer-source-options.js","./audio-context":"../node_modules/standardized-audio-context/build/es2019/interfaces/audio-context.js","./audio-context-options":"../node_modules/standardized-audio-context/build/es2019/interfaces/audio-context-options.js","./audio-destination-node":"../node_modules/standardized-audio-context/build/es2019/interfaces/audio-destination-node.js","./audio-listener":"../node_modules/standardized-audio-context/build/es2019/interfaces/audio-listener.js","./audio-node":"../node_modules/standardized-audio-context/build/es2019/interfaces/audio-node.js","./audio-node-options":"../node_modules/standardized-audio-context/build/es2019/interfaces/audio-node-options.js","./audio-node-renderer":"../node_modules/standardized-audio-context/build/es2019/interfaces/audio-node-renderer.js","./audio-param":"../node_modules/standardized-audio-context/build/es2019/interfaces/audio-param.js","./audio-param-descriptor":"../node_modules/standardized-audio-context/build/es2019/interfaces/audio-param-descriptor.js","./audio-param-renderer":"../node_modules/standardized-audio-context/build/es2019/interfaces/audio-param-renderer.js","./audio-scheduled-source-node":"../node_modules/standardized-audio-context/build/es2019/interfaces/audio-scheduled-source-node.js","./audio-scheduled-source-node-event-map":"../node_modules/standardized-audio-context/build/es2019/interfaces/audio-scheduled-source-node-event-map.js","./audio-worklet":"../node_modules/standardized-audio-context/build/es2019/interfaces/audio-worklet.js","./audio-worklet-node":"../node_modules/standardized-audio-context/build/es2019/interfaces/audio-worklet-node.js","./audio-worklet-node-event-map":"../node_modules/standardized-audio-context/build/es2019/interfaces/audio-worklet-node-event-map.js","./audio-worklet-node-options":"../node_modules/standardized-audio-context/build/es2019/interfaces/audio-worklet-node-options.js","./audio-worklet-processor":"../node_modules/standardized-audio-context/build/es2019/interfaces/audio-worklet-processor.js","./audio-worklet-processor-constructor":"../node_modules/standardized-audio-context/build/es2019/interfaces/audio-worklet-processor-constructor.js","./automation":"../node_modules/standardized-audio-context/build/es2019/interfaces/automation.js","./base-audio-context":"../node_modules/standardized-audio-context/build/es2019/interfaces/base-audio-context.js","./biquad-filter-node":"../node_modules/standardized-audio-context/build/es2019/interfaces/biquad-filter-node.js","./biquad-filter-options":"../node_modules/standardized-audio-context/build/es2019/interfaces/biquad-filter-options.js","./channel-merger-options":"../node_modules/standardized-audio-context/build/es2019/interfaces/channel-merger-options.js","./channel-splitter-options":"../node_modules/standardized-audio-context/build/es2019/interfaces/channel-splitter-options.js","./common-audio-context":"../node_modules/standardized-audio-context/build/es2019/interfaces/common-audio-context.js","./common-offline-audio-context":"../node_modules/standardized-audio-context/build/es2019/interfaces/common-offline-audio-context.js","./constant-source-node":"../node_modules/standardized-audio-context/build/es2019/interfaces/constant-source-node.js","./constant-source-node-renderer":"../node_modules/standardized-audio-context/build/es2019/interfaces/constant-source-node-renderer.js","./constant-source-options":"../node_modules/standardized-audio-context/build/es2019/interfaces/constant-source-options.js","./convolver-node":"../node_modules/standardized-audio-context/build/es2019/interfaces/convolver-node.js","./convolver-options":"../node_modules/standardized-audio-context/build/es2019/interfaces/convolver-options.js","./delay-node":"../node_modules/standardized-audio-context/build/es2019/interfaces/delay-node.js","./delay-options":"../node_modules/standardized-audio-context/build/es2019/interfaces/delay-options.js","./dynamics-compressor-node":"../node_modules/standardized-audio-context/build/es2019/interfaces/dynamics-compressor-node.js","./dynamics-compressor-options":"../node_modules/standardized-audio-context/build/es2019/interfaces/dynamics-compressor-options.js","./gain-node":"../node_modules/standardized-audio-context/build/es2019/interfaces/gain-node.js","./gain-options":"../node_modules/standardized-audio-context/build/es2019/interfaces/gain-options.js","./iir-filter-node":"../node_modules/standardized-audio-context/build/es2019/interfaces/iir-filter-node.js","./iir-filter-options":"../node_modules/standardized-audio-context/build/es2019/interfaces/iir-filter-options.js","./media-element-audio-source-node":"../node_modules/standardized-audio-context/build/es2019/interfaces/media-element-audio-source-node.js","./media-element-audio-source-options":"../node_modules/standardized-audio-context/build/es2019/interfaces/media-element-audio-source-options.js","./media-stream-audio-destination-node":"../node_modules/standardized-audio-context/build/es2019/interfaces/media-stream-audio-destination-node.js","./media-stream-audio-source-node":"../node_modules/standardized-audio-context/build/es2019/interfaces/media-stream-audio-source-node.js","./media-stream-audio-source-options":"../node_modules/standardized-audio-context/build/es2019/interfaces/media-stream-audio-source-options.js","./media-stream-track-audio-source-node":"../node_modules/standardized-audio-context/build/es2019/interfaces/media-stream-track-audio-source-node.js","./media-stream-track-audio-source-options":"../node_modules/standardized-audio-context/build/es2019/interfaces/media-stream-track-audio-source-options.js","./minimal-audio-context":"../node_modules/standardized-audio-context/build/es2019/interfaces/minimal-audio-context.js","./minimal-base-audio-context":"../node_modules/standardized-audio-context/build/es2019/interfaces/minimal-base-audio-context.js","./minimal-base-audio-context-event-map":"../node_modules/standardized-audio-context/build/es2019/interfaces/minimal-base-audio-context-event-map.js","./minimal-offline-audio-context":"../node_modules/standardized-audio-context/build/es2019/interfaces/minimal-offline-audio-context.js","./native-audio-node-faker":"../node_modules/standardized-audio-context/build/es2019/interfaces/native-audio-node-faker.js","./native-audio-worklet-node-faker":"../node_modules/standardized-audio-context/build/es2019/interfaces/native-audio-worklet-node-faker.js","./native-constant-source-node-faker":"../node_modules/standardized-audio-context/build/es2019/interfaces/native-constant-source-node-faker.js","./native-convolver-node-faker":"../node_modules/standardized-audio-context/build/es2019/interfaces/native-convolver-node-faker.js","./native-iir-filter-node-faker":"../node_modules/standardized-audio-context/build/es2019/interfaces/native-iir-filter-node-faker.js","./native-panner-node-faker":"../node_modules/standardized-audio-context/build/es2019/interfaces/native-panner-node-faker.js","./native-stereo-panner-node-faker":"../node_modules/standardized-audio-context/build/es2019/interfaces/native-stereo-panner-node-faker.js","./native-wave-shaper-node-faker":"../node_modules/standardized-audio-context/build/es2019/interfaces/native-wave-shaper-node-faker.js","./offline-audio-completion-event":"../node_modules/standardized-audio-context/build/es2019/interfaces/offline-audio-completion-event.js","./offline-audio-context":"../node_modules/standardized-audio-context/build/es2019/interfaces/offline-audio-context.js","./offline-audio-context-constructor":"../node_modules/standardized-audio-context/build/es2019/interfaces/offline-audio-context-constructor.js","./offline-audio-context-options":"../node_modules/standardized-audio-context/build/es2019/interfaces/offline-audio-context-options.js","./oscillator-node":"../node_modules/standardized-audio-context/build/es2019/interfaces/oscillator-node.js","./oscillator-node-renderer":"../node_modules/standardized-audio-context/build/es2019/interfaces/oscillator-node-renderer.js","./oscillator-options":"../node_modules/standardized-audio-context/build/es2019/interfaces/oscillator-options.js","./panner-node":"../node_modules/standardized-audio-context/build/es2019/interfaces/panner-node.js","./panner-options":"../node_modules/standardized-audio-context/build/es2019/interfaces/panner-options.js","./periodic-wave":"../node_modules/standardized-audio-context/build/es2019/interfaces/periodic-wave.js","./periodic-wave-constraints":"../node_modules/standardized-audio-context/build/es2019/interfaces/periodic-wave-constraints.js","./periodic-wave-options":"../node_modules/standardized-audio-context/build/es2019/interfaces/periodic-wave-options.js","./read-only-map":"../node_modules/standardized-audio-context/build/es2019/interfaces/read-only-map.js","./stereo-panner-node":"../node_modules/standardized-audio-context/build/es2019/interfaces/stereo-panner-node.js","./stereo-panner-options":"../node_modules/standardized-audio-context/build/es2019/interfaces/stereo-panner-options.js","./wave-shaper-node":"../node_modules/standardized-audio-context/build/es2019/interfaces/wave-shaper-node.js","./wave-shaper-options":"../node_modules/standardized-audio-context/build/es2019/interfaces/wave-shaper-options.js","./worklet-options":"../node_modules/standardized-audio-context/build/es2019/interfaces/worklet-options.js"}],"../node_modules/standardized-audio-context/build/es2019/types/abort-error-factory.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/active-input-connection.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/add-audio-node-connections-factory.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/add-audio-node-connections-function.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/add-audio-param-connections-factory.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/add-audio-param-connections-function.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/add-audio-worklet-module-factory.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/add-audio-worklet-module-function.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/add-silent-connection-factory.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/add-silent-connection-function.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/add-unrendered-audio-worklet-node-factory.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/add-unrendered-audio-worklet-node-function.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/analyser-node-constructor.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/analyser-node-constructor-factory.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/analyser-node-renderer-factory.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/analyser-node-renderer-factory-factory.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/any-audio-buffer.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/any-context.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/audio-buffer-constructor.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/audio-buffer-constructor-factory.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/audio-buffer-source-node-constructor.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/audio-buffer-source-node-constructor-factory.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/audio-buffer-source-node-renderer.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/audio-buffer-source-node-renderer-factory.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/audio-buffer-source-node-renderer-factory-factory.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/audio-buffer-store.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/audio-context-constructor.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/audio-context-constructor-factory.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/audio-context-latency-category.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/audio-context-state.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/audio-destination-node-constructor.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/audio-destination-node-constructor-factory.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/audio-destination-node-renderer-factory.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/audio-listener-factory.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/audio-listener-factory-factory.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/audio-node-connections.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/audio-node-connections-store.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/audio-node-constructor.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/audio-node-constructor-factory.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/audio-node-output-connection.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/audio-node-renderer.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/audio-node-store.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/audio-param-audio-node-store.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/audio-param-connections.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/audio-param-connections-store.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/audio-param-factory.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/audio-param-factory-factory.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/audio-param-map.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/audio-param-output-connection.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/audio-param-renderer-factory.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/audio-param-store.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/audio-worklet-node-constructor.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/audio-worklet-node-constructor-factory.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/audio-worklet-node-renderer-factory.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/audio-worklet-node-renderer-factory-factory.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/auxiliary-gain-node-store.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/base-audio-context-constructor.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/base-audio-context-constructor-factory.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/biquad-filter-node-constructor.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/biquad-filter-node-constructor-factory.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/biquad-filter-node-renderer-factory.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/biquad-filter-node-renderer-factory-factory.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/biquad-filter-type.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/channel-count-mode.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/channel-interpretation.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/channel-merger-node-constructor.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/channel-merger-node-constructor-factory.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/channel-merger-node-renderer-factory.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/channel-merger-node-renderer-factory-factory.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/channel-splitter-node-constructor.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/channel-splitter-node-constructor-factory.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/channel-splitter-node-renderer-factory.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/channel-splitter-node-renderer-factory-factory.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/cache-test-result-factory.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/cache-test-result-function.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/connect-audio-param-factory.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/connect-audio-param-function.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/connect-multiple-outputs-factory.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/connect-multiple-outputs-function.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/connect-native-audio-node-to-native-audio-node-function.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/connected-native-audio-buffer-source-node-factory.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/connected-native-audio-buffer-source-node-factory-factory.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/constant-source-node-constructor.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/constant-source-node-constructor-factory.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/constant-source-node-renderer.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/constant-source-node-renderer-factory.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/constant-source-node-renderer-factory-factory.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/constructor.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/context.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/context-store.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/convert-number-to-unsigned-long-factory.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/convert-number-to-unsigned-long-function.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/convolver-node-constructor.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/convolver-node-constructor-factory.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/convolver-node-renderer-factory.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/convolver-node-renderer-factory-factory.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/create-native-offline-audio-context-factory.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/create-native-offline-audio-context-function.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/cycle-counters.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/data-clone-error-factory.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/decode-audio-data-factory.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/decode-audio-data-function.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/decode-error-callback.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/decode-success-callback.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/decrement-cycle-counter-factory.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/decrement-cycle-counter-function.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/delay-node-constructor.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/delay-node-constructor-factory.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/delay-node-renderer-factory.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/delay-node-renderer-factory-factory.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/delete-unrendered-audio-worklet-node-factory.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/delete-unrendered-audio-worklet-node-function.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/detect-cycles-factory.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/detect-cycles-function.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/disconnect-multiple-outputs-factory.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/disconnect-multiple-outputs-function.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/disconnect-native-audio-node-from-native-audio-node-function.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/distance-model-type.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/dynamics-compressor-node-constructor.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/dynamics-compressor-node-constructor-factory.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/dynamics-compressor-node-renderer-factory.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/dynamics-compressor-node-renderer-factory-factory.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/encoding-error-factory.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/error-event-handler.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/evaluate-audio-worklet-global-scope-function.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/evaluate-source-factory.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/evaluate-source-function.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/event-handler.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/event-target-constructor.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/event-target-constructor-factory.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/expose-current-frame-and-current-time-factory.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/expose-current-frame-and-current-time-function.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/fetch-source-factory.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/fetch-source-function.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/gain-node-constructor.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/gain-node-constructor-factory.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/gain-node-renderer-factory.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/gain-node-renderer-factory-factory.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/get-audio-node-connections-function.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/get-audio-node-renderer-factory.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/get-audio-node-renderer-function.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/get-audio-param-connections-function.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/get-audio-param-renderer-factory.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/get-audio-param-renderer-function.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/get-backup-native-context-factory.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/get-backup-native-context-function.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/get-native-audio-node-function.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/get-native-audio-param-function.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/get-native-context-function.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/get-native-context-factory.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/get-unrendered-audio-worklet-nodes-factory.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/get-unrendered-audio-worklet-nodes-function.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/get-value-for-key-function.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/iir-filter-node-constructor.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/iir-filter-node-constructor-factory.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/iir-filter-node-renderer-factory.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/iir-filter-node-renderer-factory-factory.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/increment-cycle-counter-factory.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/increment-cycle-counter-factory-factory.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/increment-cycle-counter-function.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/index-size-error-factory.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/insert-element-in-set-function.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/internal-state-event-listener.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/invalid-access-error-factory.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/invalid-state-error-factory.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/is-active-audio-node-function.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/is-any-audio-context-factory.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/is-any-audio-context-function.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/is-any-audio-node-factory.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/is-any-audio-node-function.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/is-any-audio-param-factory.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/is-any-audio-param-function.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/is-any-offline-audio-context-factory.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/is-any-offline-audio-context-function.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/is-dc-curve-function.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/is-native-audio-context-factory.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/is-native-audio-context-function.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/is-native-audio-node-factory.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/is-native-audio-node-function.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/is-native-audio-param-factory.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/is-native-audio-param-function.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/is-native-context-factory.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/is-native-context-function.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/is-native-offline-audio-context-factory.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/is-native-offline-audio-context-function.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/is-part-of-a-cycle-function.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/is-secure-context-factory.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/is-supported-promise-factory.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/media-element-audio-source-node-constructor.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/media-element-audio-source-node-constructor-factory.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/media-stream-audio-destination-node-constructor.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/media-stream-audio-destination-node-constructor-factory.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/media-stream-audio-source-node-constructor.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/media-stream-audio-source-node-constructor-factory.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/media-stream-track-audio-source-node-constructor.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/media-stream-track-audio-source-node-constructor-factory.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/minimal-audio-context-constructor.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/minimal-audio-context-constructor-factory.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/minimal-base-audio-context-constructor.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/minimal-base-audio-context-constructor-factory.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/minimal-offline-audio-context-constructor.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/minimal-offline-audio-context-constructor-factory.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/monitor-connections-factory.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/monitor-connections-function.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/native-analyser-node.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/native-analyser-node-factory.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/native-analyser-node-factory-factory.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/native-audio-buffer.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/native-audio-buffer-constructor.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/native-audio-buffer-constructor-factory.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/native-audio-buffer-source-node.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/native-audio-buffer-source-node-factory.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/native-audio-buffer-source-node-factory-factory.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/native-audio-context.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/native-audio-context-constructor.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/native-audio-context-constructor-factory.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/native-audio-destination-node.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/native-audio-destination-node-factory.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/native-audio-destination-node-factory-factory.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/native-audio-listener.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/native-audio-node.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/native-audio-node-factory.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/native-audio-node-factory-factory.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/native-audio-param.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/native-audio-param-map.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/native-audio-worklet.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/native-audio-worklet-node.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/native-audio-worklet-node-constructor.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/native-audio-worklet-node-constructor-factory.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/native-audio-worklet-node-factory.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/native-audio-worklet-node-factory-factory.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/native-audio-worklet-node-faker-factory.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/native-audio-worklet-node-faker-factory-factory.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/native-audio-worklet-node-options.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/native-biquad-filter-node.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/native-biquad-filter-node-factory.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/native-biquad-filter-node-factory-factory.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/native-channel-merger-node.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/native-channel-merger-node-factory.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/native-channel-merger-node-factory-factory.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/native-channel-splitter-node.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/native-channel-splitter-node-factory.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/native-channel-splitter-node-factory-factory.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/native-constant-source-node.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/native-constant-source-node-factory.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/native-constant-source-node-factory-factory.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/native-constant-source-node-faker-factory.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/native-constant-source-node-faker-factory-factory.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/native-context.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/native-convolver-node.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/native-convolver-node-factory.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/native-convolver-node-factory-factory.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/native-convolver-node-faker-factory.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/native-convolver-node-faker-factory-factory.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/native-delay-node-factory.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/native-delay-node-factory-factory.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/native-delay-node.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/native-dynamics-compressor-node.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/native-dynamics-compressor-node-factory.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/native-dynamics-compressor-node-factory-factory.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/native-event-target.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/native-gain-node.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/native-gain-node-factory.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/native-gain-node-factory-factory.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/native-iir-filter-node.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/native-iir-filter-node-factory.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/native-iir-filter-node-factory-factory.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/native-iir-filter-node-faker-factory.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/native-iir-filter-node-faker-factory-factory.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/native-media-element-audio-source-node.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/native-media-element-audio-source-node-factory.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/native-media-element-audio-source-node-factory-factory.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/native-media-stream-audio-destination-node.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/native-media-stream-audio-destination-node-factory.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/native-media-stream-audio-destination-node-factory-factory.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/native-media-stream-audio-source-node.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/native-media-stream-audio-source-node-factory.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/native-media-stream-audio-source-node-factory-factory.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/native-media-stream-track-audio-source-node.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/native-media-stream-track-audio-source-node-factory.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/native-media-stream-track-audio-source-node-factory-factory.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/native-offline-audio-context.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/native-offline-audio-context-constructor.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/native-offline-audio-context-constructor-factory.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/native-oscillator-node.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/native-oscillator-node-factory.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/native-oscillator-node-factory-factory.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/native-panner-node.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/native-panner-node-factory.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/native-panner-node-factory-factory.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/native-panner-node-faker-factory.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/native-panner-node-faker-factory-factory.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/native-periodic-wave.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/native-periodic-wave-factory.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/native-periodic-wave-factory-factory.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/native-script-processor-node.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/native-script-processor-node-factory.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/native-script-processor-node-factory-factory.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/native-stereo-panner-node.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/native-stereo-panner-node-factory.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/native-stereo-panner-node-factory-factory.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/native-stereo-panner-node-faker-factory.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/native-stereo-panner-node-faker-factory-factory.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/native-wave-shaper-node.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/native-wave-shaper-node-factory.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/native-wave-shaper-node-factory-factory.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/native-wave-shaper-node-faker-factory.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/native-wave-shaper-node-faker-factory-factory.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/not-supported-error-factory.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/offline-audio-context-constructor-factory.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/oscillator-node-constructor.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/oscillator-node-constructor-factory.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/oscillator-node-renderer.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/oscillator-node-renderer-factory.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/oscillator-node-renderer-factory-factory.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/oscillator-type.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/output-connection.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/over-sample-type.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/overwrite-accessors-function.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/panner-node-constructor.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/panner-node-constructor-factory.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/panner-node-renderer-factory.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/panner-node-renderer-factory-factory.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/panning-model-type.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/passive-audio-node-input-connection.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/passive-audio-param-input-connection.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/periodic-wave-constructor.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/periodic-wave-constructor-factory.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/render-automation-factory.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/render-automation-function.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/render-inputs-of-audio-node-factory.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/render-inputs-of-audio-node-function.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/render-inputs-of-audio-param-factory.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/render-inputs-of-audio-param-function.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/render-native-offline-audio-context-factory.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/render-native-offline-audio-context-function.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/start-rendering-factory.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/start-rendering-function.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/stereo-panner-node-constructor.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/stereo-panner-node-constructor-factory.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/stereo-panner-node-renderer-factory-factory.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/stereo-panner-node-renderer-factory.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/test-audio-buffer-copy-channel-methods-subarray-support-factory.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/test-audio-buffer-constructor-support-factory.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/test-audio-buffer-source-node-start-method-consecutive-calls-support-factory.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/test-audio-buffer-source-node-start-method-duration-parameter-support-factory.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/test-audio-buffer-source-node-start-method-offset-clamping-support-factory.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/test-audio-buffer-source-node-stop-method-nullified-buffer-support-factory.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/test-audio-context-close-method-support-factory.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/test-audio-context-decode-audio-data-method-type-error-support-factory.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/test-audio-context-options-support-factory.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/test-audio-node-connect-method-support-factory.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/test-audio-scheduled-source-node-start-method-consecutive-calls-support-factory.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/test-audio-scheduled-source-node-stop-method-consecutive-calls-support-factory.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/test-audio-scheduled-source-node-stop-method-negative-parameters-support-factory.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/test-audio-worklet-processor-no-outputs-support-factory.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/test-channel-merger-node-channel-count-support-factory.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/test-constant-source-node-accurate-scheduling-support-factory.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/test-convolver-node-buffer-reassignability-support-factory.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/test-is-secure-context-support-factory.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/test-media-stream-audio-source-node-media-stream-without-audio-track-support.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/test-offline-audio-context-current-time-support-factory.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/test-stereo-panner-node-default-value-support-factory.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/typed-array.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/unknown-error-factory.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/unrendered-audio-worklet-node-store.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/unrendered-audio-worklet-nodes.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/wave-shaper-node-constructor.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/wave-shaper-node-constructor-factory.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/wave-shaper-node-renderer-factory-factory.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/wave-shaper-node-renderer-factory.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/window-factory.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/wrap-audio-buffer-copy-channel-methods-factory.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/wrap-audio-buffer-copy-channel-methods-function.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/wrap-audio-buffer-copy-channel-methods-out-of-bounds-factory.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/wrap-audio-buffer-copy-channel-methods-out-of-bounds-function.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/wrap-audio-buffer-source-node-start-method-offset-clamping-function.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/wrap-audio-buffer-source-node-stop-method-nullified-buffer-factory.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/wrap-audio-buffer-source-node-stop-method-nullified-buffer-function.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/wrap-audio-scheduled-source-node-stop-method-consecutive-calls-factory.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/wrap-audio-scheduled-source-node-stop-method-consecutive-calls-function.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/wrap-channel-merger-node-factory.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/wrap-channel-merger-node-function.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/wrap-event-listener-function.js":[function(require,module,exports) {

},{}],"../node_modules/standardized-audio-context/build/es2019/types/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _abortErrorFactory = require("./abort-error-factory");

Object.keys(_abortErrorFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _abortErrorFactory[key];
    }
  });
});

var _activeInputConnection = require("./active-input-connection");

Object.keys(_activeInputConnection).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _activeInputConnection[key];
    }
  });
});

var _addAudioNodeConnectionsFactory = require("./add-audio-node-connections-factory");

Object.keys(_addAudioNodeConnectionsFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _addAudioNodeConnectionsFactory[key];
    }
  });
});

var _addAudioNodeConnectionsFunction = require("./add-audio-node-connections-function");

Object.keys(_addAudioNodeConnectionsFunction).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _addAudioNodeConnectionsFunction[key];
    }
  });
});

var _addAudioParamConnectionsFactory = require("./add-audio-param-connections-factory");

Object.keys(_addAudioParamConnectionsFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _addAudioParamConnectionsFactory[key];
    }
  });
});

var _addAudioParamConnectionsFunction = require("./add-audio-param-connections-function");

Object.keys(_addAudioParamConnectionsFunction).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _addAudioParamConnectionsFunction[key];
    }
  });
});

var _addAudioWorkletModuleFactory = require("./add-audio-worklet-module-factory");

Object.keys(_addAudioWorkletModuleFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _addAudioWorkletModuleFactory[key];
    }
  });
});

var _addAudioWorkletModuleFunction = require("./add-audio-worklet-module-function");

Object.keys(_addAudioWorkletModuleFunction).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _addAudioWorkletModuleFunction[key];
    }
  });
});

var _addSilentConnectionFactory = require("./add-silent-connection-factory");

Object.keys(_addSilentConnectionFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _addSilentConnectionFactory[key];
    }
  });
});

var _addSilentConnectionFunction = require("./add-silent-connection-function");

Object.keys(_addSilentConnectionFunction).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _addSilentConnectionFunction[key];
    }
  });
});

var _addUnrenderedAudioWorkletNodeFactory = require("./add-unrendered-audio-worklet-node-factory");

Object.keys(_addUnrenderedAudioWorkletNodeFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _addUnrenderedAudioWorkletNodeFactory[key];
    }
  });
});

var _addUnrenderedAudioWorkletNodeFunction = require("./add-unrendered-audio-worklet-node-function");

Object.keys(_addUnrenderedAudioWorkletNodeFunction).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _addUnrenderedAudioWorkletNodeFunction[key];
    }
  });
});

var _analyserNodeConstructor = require("./analyser-node-constructor");

Object.keys(_analyserNodeConstructor).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _analyserNodeConstructor[key];
    }
  });
});

var _analyserNodeConstructorFactory = require("./analyser-node-constructor-factory");

Object.keys(_analyserNodeConstructorFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _analyserNodeConstructorFactory[key];
    }
  });
});

var _analyserNodeRendererFactory = require("./analyser-node-renderer-factory");

Object.keys(_analyserNodeRendererFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _analyserNodeRendererFactory[key];
    }
  });
});

var _analyserNodeRendererFactoryFactory = require("./analyser-node-renderer-factory-factory");

Object.keys(_analyserNodeRendererFactoryFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _analyserNodeRendererFactoryFactory[key];
    }
  });
});

var _anyAudioBuffer = require("./any-audio-buffer");

Object.keys(_anyAudioBuffer).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _anyAudioBuffer[key];
    }
  });
});

var _anyContext = require("./any-context");

Object.keys(_anyContext).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _anyContext[key];
    }
  });
});

var _audioBufferConstructor = require("./audio-buffer-constructor");

Object.keys(_audioBufferConstructor).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _audioBufferConstructor[key];
    }
  });
});

var _audioBufferConstructorFactory = require("./audio-buffer-constructor-factory");

Object.keys(_audioBufferConstructorFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _audioBufferConstructorFactory[key];
    }
  });
});

var _audioBufferSourceNodeConstructor = require("./audio-buffer-source-node-constructor");

Object.keys(_audioBufferSourceNodeConstructor).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _audioBufferSourceNodeConstructor[key];
    }
  });
});

var _audioBufferSourceNodeConstructorFactory = require("./audio-buffer-source-node-constructor-factory");

Object.keys(_audioBufferSourceNodeConstructorFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _audioBufferSourceNodeConstructorFactory[key];
    }
  });
});

var _audioBufferSourceNodeRenderer = require("./audio-buffer-source-node-renderer");

Object.keys(_audioBufferSourceNodeRenderer).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _audioBufferSourceNodeRenderer[key];
    }
  });
});

var _audioBufferSourceNodeRendererFactory = require("./audio-buffer-source-node-renderer-factory");

Object.keys(_audioBufferSourceNodeRendererFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _audioBufferSourceNodeRendererFactory[key];
    }
  });
});

var _audioBufferSourceNodeRendererFactoryFactory = require("./audio-buffer-source-node-renderer-factory-factory");

Object.keys(_audioBufferSourceNodeRendererFactoryFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _audioBufferSourceNodeRendererFactoryFactory[key];
    }
  });
});

var _audioBufferStore = require("./audio-buffer-store");

Object.keys(_audioBufferStore).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _audioBufferStore[key];
    }
  });
});

var _audioContextConstructor = require("./audio-context-constructor");

Object.keys(_audioContextConstructor).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _audioContextConstructor[key];
    }
  });
});

var _audioContextConstructorFactory = require("./audio-context-constructor-factory");

Object.keys(_audioContextConstructorFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _audioContextConstructorFactory[key];
    }
  });
});

var _audioContextLatencyCategory = require("./audio-context-latency-category");

Object.keys(_audioContextLatencyCategory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _audioContextLatencyCategory[key];
    }
  });
});

var _audioContextState = require("./audio-context-state");

Object.keys(_audioContextState).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _audioContextState[key];
    }
  });
});

var _audioDestinationNodeConstructor = require("./audio-destination-node-constructor");

Object.keys(_audioDestinationNodeConstructor).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _audioDestinationNodeConstructor[key];
    }
  });
});

var _audioDestinationNodeConstructorFactory = require("./audio-destination-node-constructor-factory");

Object.keys(_audioDestinationNodeConstructorFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _audioDestinationNodeConstructorFactory[key];
    }
  });
});

var _audioDestinationNodeRendererFactory = require("./audio-destination-node-renderer-factory");

Object.keys(_audioDestinationNodeRendererFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _audioDestinationNodeRendererFactory[key];
    }
  });
});

var _audioListenerFactory = require("./audio-listener-factory");

Object.keys(_audioListenerFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _audioListenerFactory[key];
    }
  });
});

var _audioListenerFactoryFactory = require("./audio-listener-factory-factory");

Object.keys(_audioListenerFactoryFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _audioListenerFactoryFactory[key];
    }
  });
});

var _audioNodeConnections = require("./audio-node-connections");

Object.keys(_audioNodeConnections).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _audioNodeConnections[key];
    }
  });
});

var _audioNodeConnectionsStore = require("./audio-node-connections-store");

Object.keys(_audioNodeConnectionsStore).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _audioNodeConnectionsStore[key];
    }
  });
});

var _audioNodeConstructor = require("./audio-node-constructor");

Object.keys(_audioNodeConstructor).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _audioNodeConstructor[key];
    }
  });
});

var _audioNodeConstructorFactory = require("./audio-node-constructor-factory");

Object.keys(_audioNodeConstructorFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _audioNodeConstructorFactory[key];
    }
  });
});

var _audioNodeOutputConnection = require("./audio-node-output-connection");

Object.keys(_audioNodeOutputConnection).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _audioNodeOutputConnection[key];
    }
  });
});

var _audioNodeRenderer = require("./audio-node-renderer");

Object.keys(_audioNodeRenderer).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _audioNodeRenderer[key];
    }
  });
});

var _audioNodeStore = require("./audio-node-store");

Object.keys(_audioNodeStore).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _audioNodeStore[key];
    }
  });
});

var _audioParamAudioNodeStore = require("./audio-param-audio-node-store");

Object.keys(_audioParamAudioNodeStore).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _audioParamAudioNodeStore[key];
    }
  });
});

var _audioParamConnections = require("./audio-param-connections");

Object.keys(_audioParamConnections).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _audioParamConnections[key];
    }
  });
});

var _audioParamConnectionsStore = require("./audio-param-connections-store");

Object.keys(_audioParamConnectionsStore).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _audioParamConnectionsStore[key];
    }
  });
});

var _audioParamFactory = require("./audio-param-factory");

Object.keys(_audioParamFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _audioParamFactory[key];
    }
  });
});

var _audioParamFactoryFactory = require("./audio-param-factory-factory");

Object.keys(_audioParamFactoryFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _audioParamFactoryFactory[key];
    }
  });
});

var _audioParamMap = require("./audio-param-map");

Object.keys(_audioParamMap).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _audioParamMap[key];
    }
  });
});

var _audioParamOutputConnection = require("./audio-param-output-connection");

Object.keys(_audioParamOutputConnection).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _audioParamOutputConnection[key];
    }
  });
});

var _audioParamRendererFactory = require("./audio-param-renderer-factory");

Object.keys(_audioParamRendererFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _audioParamRendererFactory[key];
    }
  });
});

var _audioParamStore = require("./audio-param-store");

Object.keys(_audioParamStore).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _audioParamStore[key];
    }
  });
});

var _audioWorkletNodeConstructor = require("./audio-worklet-node-constructor");

Object.keys(_audioWorkletNodeConstructor).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _audioWorkletNodeConstructor[key];
    }
  });
});

var _audioWorkletNodeConstructorFactory = require("./audio-worklet-node-constructor-factory");

Object.keys(_audioWorkletNodeConstructorFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _audioWorkletNodeConstructorFactory[key];
    }
  });
});

var _audioWorkletNodeRendererFactory = require("./audio-worklet-node-renderer-factory");

Object.keys(_audioWorkletNodeRendererFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _audioWorkletNodeRendererFactory[key];
    }
  });
});

var _audioWorkletNodeRendererFactoryFactory = require("./audio-worklet-node-renderer-factory-factory");

Object.keys(_audioWorkletNodeRendererFactoryFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _audioWorkletNodeRendererFactoryFactory[key];
    }
  });
});

var _auxiliaryGainNodeStore = require("./auxiliary-gain-node-store");

Object.keys(_auxiliaryGainNodeStore).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _auxiliaryGainNodeStore[key];
    }
  });
});

var _baseAudioContextConstructor = require("./base-audio-context-constructor");

Object.keys(_baseAudioContextConstructor).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _baseAudioContextConstructor[key];
    }
  });
});

var _baseAudioContextConstructorFactory = require("./base-audio-context-constructor-factory");

Object.keys(_baseAudioContextConstructorFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _baseAudioContextConstructorFactory[key];
    }
  });
});

var _biquadFilterNodeConstructor = require("./biquad-filter-node-constructor");

Object.keys(_biquadFilterNodeConstructor).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _biquadFilterNodeConstructor[key];
    }
  });
});

var _biquadFilterNodeConstructorFactory = require("./biquad-filter-node-constructor-factory");

Object.keys(_biquadFilterNodeConstructorFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _biquadFilterNodeConstructorFactory[key];
    }
  });
});

var _biquadFilterNodeRendererFactory = require("./biquad-filter-node-renderer-factory");

Object.keys(_biquadFilterNodeRendererFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _biquadFilterNodeRendererFactory[key];
    }
  });
});

var _biquadFilterNodeRendererFactoryFactory = require("./biquad-filter-node-renderer-factory-factory");

Object.keys(_biquadFilterNodeRendererFactoryFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _biquadFilterNodeRendererFactoryFactory[key];
    }
  });
});

var _biquadFilterType = require("./biquad-filter-type");

Object.keys(_biquadFilterType).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _biquadFilterType[key];
    }
  });
});

var _channelCountMode = require("./channel-count-mode");

Object.keys(_channelCountMode).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _channelCountMode[key];
    }
  });
});

var _channelInterpretation = require("./channel-interpretation");

Object.keys(_channelInterpretation).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _channelInterpretation[key];
    }
  });
});

var _channelMergerNodeConstructor = require("./channel-merger-node-constructor");

Object.keys(_channelMergerNodeConstructor).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _channelMergerNodeConstructor[key];
    }
  });
});

var _channelMergerNodeConstructorFactory = require("./channel-merger-node-constructor-factory");

Object.keys(_channelMergerNodeConstructorFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _channelMergerNodeConstructorFactory[key];
    }
  });
});

var _channelMergerNodeRendererFactory = require("./channel-merger-node-renderer-factory");

Object.keys(_channelMergerNodeRendererFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _channelMergerNodeRendererFactory[key];
    }
  });
});

var _channelMergerNodeRendererFactoryFactory = require("./channel-merger-node-renderer-factory-factory");

Object.keys(_channelMergerNodeRendererFactoryFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _channelMergerNodeRendererFactoryFactory[key];
    }
  });
});

var _channelSplitterNodeConstructor = require("./channel-splitter-node-constructor");

Object.keys(_channelSplitterNodeConstructor).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _channelSplitterNodeConstructor[key];
    }
  });
});

var _channelSplitterNodeConstructorFactory = require("./channel-splitter-node-constructor-factory");

Object.keys(_channelSplitterNodeConstructorFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _channelSplitterNodeConstructorFactory[key];
    }
  });
});

var _channelSplitterNodeRendererFactory = require("./channel-splitter-node-renderer-factory");

Object.keys(_channelSplitterNodeRendererFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _channelSplitterNodeRendererFactory[key];
    }
  });
});

var _channelSplitterNodeRendererFactoryFactory = require("./channel-splitter-node-renderer-factory-factory");

Object.keys(_channelSplitterNodeRendererFactoryFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _channelSplitterNodeRendererFactoryFactory[key];
    }
  });
});

var _cacheTestResultFactory = require("./cache-test-result-factory");

Object.keys(_cacheTestResultFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _cacheTestResultFactory[key];
    }
  });
});

var _cacheTestResultFunction = require("./cache-test-result-function");

Object.keys(_cacheTestResultFunction).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _cacheTestResultFunction[key];
    }
  });
});

var _connectAudioParamFactory = require("./connect-audio-param-factory");

Object.keys(_connectAudioParamFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _connectAudioParamFactory[key];
    }
  });
});

var _connectAudioParamFunction = require("./connect-audio-param-function");

Object.keys(_connectAudioParamFunction).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _connectAudioParamFunction[key];
    }
  });
});

var _connectMultipleOutputsFactory = require("./connect-multiple-outputs-factory");

Object.keys(_connectMultipleOutputsFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _connectMultipleOutputsFactory[key];
    }
  });
});

var _connectMultipleOutputsFunction = require("./connect-multiple-outputs-function");

Object.keys(_connectMultipleOutputsFunction).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _connectMultipleOutputsFunction[key];
    }
  });
});

var _connectNativeAudioNodeToNativeAudioNodeFunction = require("./connect-native-audio-node-to-native-audio-node-function");

Object.keys(_connectNativeAudioNodeToNativeAudioNodeFunction).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _connectNativeAudioNodeToNativeAudioNodeFunction[key];
    }
  });
});

var _connectedNativeAudioBufferSourceNodeFactory = require("./connected-native-audio-buffer-source-node-factory");

Object.keys(_connectedNativeAudioBufferSourceNodeFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _connectedNativeAudioBufferSourceNodeFactory[key];
    }
  });
});

var _connectedNativeAudioBufferSourceNodeFactoryFactory = require("./connected-native-audio-buffer-source-node-factory-factory");

Object.keys(_connectedNativeAudioBufferSourceNodeFactoryFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _connectedNativeAudioBufferSourceNodeFactoryFactory[key];
    }
  });
});

var _constantSourceNodeConstructor = require("./constant-source-node-constructor");

Object.keys(_constantSourceNodeConstructor).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _constantSourceNodeConstructor[key];
    }
  });
});

var _constantSourceNodeConstructorFactory = require("./constant-source-node-constructor-factory");

Object.keys(_constantSourceNodeConstructorFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _constantSourceNodeConstructorFactory[key];
    }
  });
});

var _constantSourceNodeRenderer = require("./constant-source-node-renderer");

Object.keys(_constantSourceNodeRenderer).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _constantSourceNodeRenderer[key];
    }
  });
});

var _constantSourceNodeRendererFactory = require("./constant-source-node-renderer-factory");

Object.keys(_constantSourceNodeRendererFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _constantSourceNodeRendererFactory[key];
    }
  });
});

var _constantSourceNodeRendererFactoryFactory = require("./constant-source-node-renderer-factory-factory");

Object.keys(_constantSourceNodeRendererFactoryFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _constantSourceNodeRendererFactoryFactory[key];
    }
  });
});

var _constructor = require("./constructor");

Object.keys(_constructor).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _constructor[key];
    }
  });
});

var _context = require("./context");

Object.keys(_context).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _context[key];
    }
  });
});

var _contextStore = require("./context-store");

Object.keys(_contextStore).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _contextStore[key];
    }
  });
});

var _convertNumberToUnsignedLongFactory = require("./convert-number-to-unsigned-long-factory");

Object.keys(_convertNumberToUnsignedLongFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _convertNumberToUnsignedLongFactory[key];
    }
  });
});

var _convertNumberToUnsignedLongFunction = require("./convert-number-to-unsigned-long-function");

Object.keys(_convertNumberToUnsignedLongFunction).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _convertNumberToUnsignedLongFunction[key];
    }
  });
});

var _convolverNodeConstructor = require("./convolver-node-constructor");

Object.keys(_convolverNodeConstructor).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _convolverNodeConstructor[key];
    }
  });
});

var _convolverNodeConstructorFactory = require("./convolver-node-constructor-factory");

Object.keys(_convolverNodeConstructorFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _convolverNodeConstructorFactory[key];
    }
  });
});

var _convolverNodeRendererFactory = require("./convolver-node-renderer-factory");

Object.keys(_convolverNodeRendererFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _convolverNodeRendererFactory[key];
    }
  });
});

var _convolverNodeRendererFactoryFactory = require("./convolver-node-renderer-factory-factory");

Object.keys(_convolverNodeRendererFactoryFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _convolverNodeRendererFactoryFactory[key];
    }
  });
});

var _createNativeOfflineAudioContextFactory = require("./create-native-offline-audio-context-factory");

Object.keys(_createNativeOfflineAudioContextFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _createNativeOfflineAudioContextFactory[key];
    }
  });
});

var _createNativeOfflineAudioContextFunction = require("./create-native-offline-audio-context-function");

Object.keys(_createNativeOfflineAudioContextFunction).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _createNativeOfflineAudioContextFunction[key];
    }
  });
});

var _cycleCounters = require("./cycle-counters");

Object.keys(_cycleCounters).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _cycleCounters[key];
    }
  });
});

var _dataCloneErrorFactory = require("./data-clone-error-factory");

Object.keys(_dataCloneErrorFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _dataCloneErrorFactory[key];
    }
  });
});

var _decodeAudioDataFactory = require("./decode-audio-data-factory");

Object.keys(_decodeAudioDataFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _decodeAudioDataFactory[key];
    }
  });
});

var _decodeAudioDataFunction = require("./decode-audio-data-function");

Object.keys(_decodeAudioDataFunction).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _decodeAudioDataFunction[key];
    }
  });
});

var _decodeErrorCallback = require("./decode-error-callback");

Object.keys(_decodeErrorCallback).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _decodeErrorCallback[key];
    }
  });
});

var _decodeSuccessCallback = require("./decode-success-callback");

Object.keys(_decodeSuccessCallback).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _decodeSuccessCallback[key];
    }
  });
});

var _decrementCycleCounterFactory = require("./decrement-cycle-counter-factory");

Object.keys(_decrementCycleCounterFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _decrementCycleCounterFactory[key];
    }
  });
});

var _decrementCycleCounterFunction = require("./decrement-cycle-counter-function");

Object.keys(_decrementCycleCounterFunction).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _decrementCycleCounterFunction[key];
    }
  });
});

var _delayNodeConstructor = require("./delay-node-constructor");

Object.keys(_delayNodeConstructor).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _delayNodeConstructor[key];
    }
  });
});

var _delayNodeConstructorFactory = require("./delay-node-constructor-factory");

Object.keys(_delayNodeConstructorFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _delayNodeConstructorFactory[key];
    }
  });
});

var _delayNodeRendererFactory = require("./delay-node-renderer-factory");

Object.keys(_delayNodeRendererFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _delayNodeRendererFactory[key];
    }
  });
});

var _delayNodeRendererFactoryFactory = require("./delay-node-renderer-factory-factory");

Object.keys(_delayNodeRendererFactoryFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _delayNodeRendererFactoryFactory[key];
    }
  });
});

var _deleteUnrenderedAudioWorkletNodeFactory = require("./delete-unrendered-audio-worklet-node-factory");

Object.keys(_deleteUnrenderedAudioWorkletNodeFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _deleteUnrenderedAudioWorkletNodeFactory[key];
    }
  });
});

var _deleteUnrenderedAudioWorkletNodeFunction = require("./delete-unrendered-audio-worklet-node-function");

Object.keys(_deleteUnrenderedAudioWorkletNodeFunction).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _deleteUnrenderedAudioWorkletNodeFunction[key];
    }
  });
});

var _detectCyclesFactory = require("./detect-cycles-factory");

Object.keys(_detectCyclesFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _detectCyclesFactory[key];
    }
  });
});

var _detectCyclesFunction = require("./detect-cycles-function");

Object.keys(_detectCyclesFunction).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _detectCyclesFunction[key];
    }
  });
});

var _disconnectMultipleOutputsFactory = require("./disconnect-multiple-outputs-factory");

Object.keys(_disconnectMultipleOutputsFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _disconnectMultipleOutputsFactory[key];
    }
  });
});

var _disconnectMultipleOutputsFunction = require("./disconnect-multiple-outputs-function");

Object.keys(_disconnectMultipleOutputsFunction).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _disconnectMultipleOutputsFunction[key];
    }
  });
});

var _disconnectNativeAudioNodeFromNativeAudioNodeFunction = require("./disconnect-native-audio-node-from-native-audio-node-function");

Object.keys(_disconnectNativeAudioNodeFromNativeAudioNodeFunction).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _disconnectNativeAudioNodeFromNativeAudioNodeFunction[key];
    }
  });
});

var _distanceModelType = require("./distance-model-type");

Object.keys(_distanceModelType).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _distanceModelType[key];
    }
  });
});

var _dynamicsCompressorNodeConstructor = require("./dynamics-compressor-node-constructor");

Object.keys(_dynamicsCompressorNodeConstructor).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _dynamicsCompressorNodeConstructor[key];
    }
  });
});

var _dynamicsCompressorNodeConstructorFactory = require("./dynamics-compressor-node-constructor-factory");

Object.keys(_dynamicsCompressorNodeConstructorFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _dynamicsCompressorNodeConstructorFactory[key];
    }
  });
});

var _dynamicsCompressorNodeRendererFactory = require("./dynamics-compressor-node-renderer-factory");

Object.keys(_dynamicsCompressorNodeRendererFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _dynamicsCompressorNodeRendererFactory[key];
    }
  });
});

var _dynamicsCompressorNodeRendererFactoryFactory = require("./dynamics-compressor-node-renderer-factory-factory");

Object.keys(_dynamicsCompressorNodeRendererFactoryFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _dynamicsCompressorNodeRendererFactoryFactory[key];
    }
  });
});

var _encodingErrorFactory = require("./encoding-error-factory");

Object.keys(_encodingErrorFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _encodingErrorFactory[key];
    }
  });
});

var _errorEventHandler = require("./error-event-handler");

Object.keys(_errorEventHandler).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _errorEventHandler[key];
    }
  });
});

var _evaluateAudioWorkletGlobalScopeFunction = require("./evaluate-audio-worklet-global-scope-function");

Object.keys(_evaluateAudioWorkletGlobalScopeFunction).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _evaluateAudioWorkletGlobalScopeFunction[key];
    }
  });
});

var _evaluateSourceFactory = require("./evaluate-source-factory");

Object.keys(_evaluateSourceFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _evaluateSourceFactory[key];
    }
  });
});

var _evaluateSourceFunction = require("./evaluate-source-function");

Object.keys(_evaluateSourceFunction).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _evaluateSourceFunction[key];
    }
  });
});

var _eventHandler = require("./event-handler");

Object.keys(_eventHandler).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _eventHandler[key];
    }
  });
});

var _eventTargetConstructor = require("./event-target-constructor");

Object.keys(_eventTargetConstructor).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _eventTargetConstructor[key];
    }
  });
});

var _eventTargetConstructorFactory = require("./event-target-constructor-factory");

Object.keys(_eventTargetConstructorFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _eventTargetConstructorFactory[key];
    }
  });
});

var _exposeCurrentFrameAndCurrentTimeFactory = require("./expose-current-frame-and-current-time-factory");

Object.keys(_exposeCurrentFrameAndCurrentTimeFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _exposeCurrentFrameAndCurrentTimeFactory[key];
    }
  });
});

var _exposeCurrentFrameAndCurrentTimeFunction = require("./expose-current-frame-and-current-time-function");

Object.keys(_exposeCurrentFrameAndCurrentTimeFunction).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _exposeCurrentFrameAndCurrentTimeFunction[key];
    }
  });
});

var _fetchSourceFactory = require("./fetch-source-factory");

Object.keys(_fetchSourceFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _fetchSourceFactory[key];
    }
  });
});

var _fetchSourceFunction = require("./fetch-source-function");

Object.keys(_fetchSourceFunction).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _fetchSourceFunction[key];
    }
  });
});

var _gainNodeConstructor = require("./gain-node-constructor");

Object.keys(_gainNodeConstructor).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _gainNodeConstructor[key];
    }
  });
});

var _gainNodeConstructorFactory = require("./gain-node-constructor-factory");

Object.keys(_gainNodeConstructorFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _gainNodeConstructorFactory[key];
    }
  });
});

var _gainNodeRendererFactory = require("./gain-node-renderer-factory");

Object.keys(_gainNodeRendererFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _gainNodeRendererFactory[key];
    }
  });
});

var _gainNodeRendererFactoryFactory = require("./gain-node-renderer-factory-factory");

Object.keys(_gainNodeRendererFactoryFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _gainNodeRendererFactoryFactory[key];
    }
  });
});

var _getAudioNodeConnectionsFunction = require("./get-audio-node-connections-function");

Object.keys(_getAudioNodeConnectionsFunction).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _getAudioNodeConnectionsFunction[key];
    }
  });
});

var _getAudioNodeRendererFactory = require("./get-audio-node-renderer-factory");

Object.keys(_getAudioNodeRendererFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _getAudioNodeRendererFactory[key];
    }
  });
});

var _getAudioNodeRendererFunction = require("./get-audio-node-renderer-function");

Object.keys(_getAudioNodeRendererFunction).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _getAudioNodeRendererFunction[key];
    }
  });
});

var _getAudioParamConnectionsFunction = require("./get-audio-param-connections-function");

Object.keys(_getAudioParamConnectionsFunction).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _getAudioParamConnectionsFunction[key];
    }
  });
});

var _getAudioParamRendererFactory = require("./get-audio-param-renderer-factory");

Object.keys(_getAudioParamRendererFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _getAudioParamRendererFactory[key];
    }
  });
});

var _getAudioParamRendererFunction = require("./get-audio-param-renderer-function");

Object.keys(_getAudioParamRendererFunction).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _getAudioParamRendererFunction[key];
    }
  });
});

var _getBackupNativeContextFactory = require("./get-backup-native-context-factory");

Object.keys(_getBackupNativeContextFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _getBackupNativeContextFactory[key];
    }
  });
});

var _getBackupNativeContextFunction = require("./get-backup-native-context-function");

Object.keys(_getBackupNativeContextFunction).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _getBackupNativeContextFunction[key];
    }
  });
});

var _getNativeAudioNodeFunction = require("./get-native-audio-node-function");

Object.keys(_getNativeAudioNodeFunction).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _getNativeAudioNodeFunction[key];
    }
  });
});

var _getNativeAudioParamFunction = require("./get-native-audio-param-function");

Object.keys(_getNativeAudioParamFunction).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _getNativeAudioParamFunction[key];
    }
  });
});

var _getNativeContextFunction = require("./get-native-context-function");

Object.keys(_getNativeContextFunction).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _getNativeContextFunction[key];
    }
  });
});

var _getNativeContextFactory = require("./get-native-context-factory");

Object.keys(_getNativeContextFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _getNativeContextFactory[key];
    }
  });
});

var _getUnrenderedAudioWorkletNodesFactory = require("./get-unrendered-audio-worklet-nodes-factory");

Object.keys(_getUnrenderedAudioWorkletNodesFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _getUnrenderedAudioWorkletNodesFactory[key];
    }
  });
});

var _getUnrenderedAudioWorkletNodesFunction = require("./get-unrendered-audio-worklet-nodes-function");

Object.keys(_getUnrenderedAudioWorkletNodesFunction).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _getUnrenderedAudioWorkletNodesFunction[key];
    }
  });
});

var _getValueForKeyFunction = require("./get-value-for-key-function");

Object.keys(_getValueForKeyFunction).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _getValueForKeyFunction[key];
    }
  });
});

var _iirFilterNodeConstructor = require("./iir-filter-node-constructor");

Object.keys(_iirFilterNodeConstructor).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _iirFilterNodeConstructor[key];
    }
  });
});

var _iirFilterNodeConstructorFactory = require("./iir-filter-node-constructor-factory");

Object.keys(_iirFilterNodeConstructorFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _iirFilterNodeConstructorFactory[key];
    }
  });
});

var _iirFilterNodeRendererFactory = require("./iir-filter-node-renderer-factory");

Object.keys(_iirFilterNodeRendererFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _iirFilterNodeRendererFactory[key];
    }
  });
});

var _iirFilterNodeRendererFactoryFactory = require("./iir-filter-node-renderer-factory-factory");

Object.keys(_iirFilterNodeRendererFactoryFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _iirFilterNodeRendererFactoryFactory[key];
    }
  });
});

var _incrementCycleCounterFactory = require("./increment-cycle-counter-factory");

Object.keys(_incrementCycleCounterFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _incrementCycleCounterFactory[key];
    }
  });
});

var _incrementCycleCounterFactoryFactory = require("./increment-cycle-counter-factory-factory");

Object.keys(_incrementCycleCounterFactoryFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _incrementCycleCounterFactoryFactory[key];
    }
  });
});

var _incrementCycleCounterFunction = require("./increment-cycle-counter-function");

Object.keys(_incrementCycleCounterFunction).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _incrementCycleCounterFunction[key];
    }
  });
});

var _indexSizeErrorFactory = require("./index-size-error-factory");

Object.keys(_indexSizeErrorFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _indexSizeErrorFactory[key];
    }
  });
});

var _insertElementInSetFunction = require("./insert-element-in-set-function");

Object.keys(_insertElementInSetFunction).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _insertElementInSetFunction[key];
    }
  });
});

var _internalStateEventListener = require("./internal-state-event-listener");

Object.keys(_internalStateEventListener).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _internalStateEventListener[key];
    }
  });
});

var _invalidAccessErrorFactory = require("./invalid-access-error-factory");

Object.keys(_invalidAccessErrorFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _invalidAccessErrorFactory[key];
    }
  });
});

var _invalidStateErrorFactory = require("./invalid-state-error-factory");

Object.keys(_invalidStateErrorFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _invalidStateErrorFactory[key];
    }
  });
});

var _isActiveAudioNodeFunction = require("./is-active-audio-node-function");

Object.keys(_isActiveAudioNodeFunction).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _isActiveAudioNodeFunction[key];
    }
  });
});

var _isAnyAudioContextFactory = require("./is-any-audio-context-factory");

Object.keys(_isAnyAudioContextFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _isAnyAudioContextFactory[key];
    }
  });
});

var _isAnyAudioContextFunction = require("./is-any-audio-context-function");

Object.keys(_isAnyAudioContextFunction).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _isAnyAudioContextFunction[key];
    }
  });
});

var _isAnyAudioNodeFactory = require("./is-any-audio-node-factory");

Object.keys(_isAnyAudioNodeFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _isAnyAudioNodeFactory[key];
    }
  });
});

var _isAnyAudioNodeFunction = require("./is-any-audio-node-function");

Object.keys(_isAnyAudioNodeFunction).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _isAnyAudioNodeFunction[key];
    }
  });
});

var _isAnyAudioParamFactory = require("./is-any-audio-param-factory");

Object.keys(_isAnyAudioParamFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _isAnyAudioParamFactory[key];
    }
  });
});

var _isAnyAudioParamFunction = require("./is-any-audio-param-function");

Object.keys(_isAnyAudioParamFunction).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _isAnyAudioParamFunction[key];
    }
  });
});

var _isAnyOfflineAudioContextFactory = require("./is-any-offline-audio-context-factory");

Object.keys(_isAnyOfflineAudioContextFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _isAnyOfflineAudioContextFactory[key];
    }
  });
});

var _isAnyOfflineAudioContextFunction = require("./is-any-offline-audio-context-function");

Object.keys(_isAnyOfflineAudioContextFunction).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _isAnyOfflineAudioContextFunction[key];
    }
  });
});

var _isDcCurveFunction = require("./is-dc-curve-function");

Object.keys(_isDcCurveFunction).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _isDcCurveFunction[key];
    }
  });
});

var _isNativeAudioContextFactory = require("./is-native-audio-context-factory");

Object.keys(_isNativeAudioContextFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _isNativeAudioContextFactory[key];
    }
  });
});

var _isNativeAudioContextFunction = require("./is-native-audio-context-function");

Object.keys(_isNativeAudioContextFunction).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _isNativeAudioContextFunction[key];
    }
  });
});

var _isNativeAudioNodeFactory = require("./is-native-audio-node-factory");

Object.keys(_isNativeAudioNodeFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _isNativeAudioNodeFactory[key];
    }
  });
});

var _isNativeAudioNodeFunction = require("./is-native-audio-node-function");

Object.keys(_isNativeAudioNodeFunction).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _isNativeAudioNodeFunction[key];
    }
  });
});

var _isNativeAudioParamFactory = require("./is-native-audio-param-factory");

Object.keys(_isNativeAudioParamFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _isNativeAudioParamFactory[key];
    }
  });
});

var _isNativeAudioParamFunction = require("./is-native-audio-param-function");

Object.keys(_isNativeAudioParamFunction).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _isNativeAudioParamFunction[key];
    }
  });
});

var _isNativeContextFactory = require("./is-native-context-factory");

Object.keys(_isNativeContextFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _isNativeContextFactory[key];
    }
  });
});

var _isNativeContextFunction = require("./is-native-context-function");

Object.keys(_isNativeContextFunction).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _isNativeContextFunction[key];
    }
  });
});

var _isNativeOfflineAudioContextFactory = require("./is-native-offline-audio-context-factory");

Object.keys(_isNativeOfflineAudioContextFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _isNativeOfflineAudioContextFactory[key];
    }
  });
});

var _isNativeOfflineAudioContextFunction = require("./is-native-offline-audio-context-function");

Object.keys(_isNativeOfflineAudioContextFunction).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _isNativeOfflineAudioContextFunction[key];
    }
  });
});

var _isPartOfACycleFunction = require("./is-part-of-a-cycle-function");

Object.keys(_isPartOfACycleFunction).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _isPartOfACycleFunction[key];
    }
  });
});

var _isSecureContextFactory = require("./is-secure-context-factory");

Object.keys(_isSecureContextFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _isSecureContextFactory[key];
    }
  });
});

var _isSupportedPromiseFactory = require("./is-supported-promise-factory");

Object.keys(_isSupportedPromiseFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _isSupportedPromiseFactory[key];
    }
  });
});

var _mediaElementAudioSourceNodeConstructor = require("./media-element-audio-source-node-constructor");

Object.keys(_mediaElementAudioSourceNodeConstructor).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _mediaElementAudioSourceNodeConstructor[key];
    }
  });
});

var _mediaElementAudioSourceNodeConstructorFactory = require("./media-element-audio-source-node-constructor-factory");

Object.keys(_mediaElementAudioSourceNodeConstructorFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _mediaElementAudioSourceNodeConstructorFactory[key];
    }
  });
});

var _mediaStreamAudioDestinationNodeConstructor = require("./media-stream-audio-destination-node-constructor");

Object.keys(_mediaStreamAudioDestinationNodeConstructor).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _mediaStreamAudioDestinationNodeConstructor[key];
    }
  });
});

var _mediaStreamAudioDestinationNodeConstructorFactory = require("./media-stream-audio-destination-node-constructor-factory");

Object.keys(_mediaStreamAudioDestinationNodeConstructorFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _mediaStreamAudioDestinationNodeConstructorFactory[key];
    }
  });
});

var _mediaStreamAudioSourceNodeConstructor = require("./media-stream-audio-source-node-constructor");

Object.keys(_mediaStreamAudioSourceNodeConstructor).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _mediaStreamAudioSourceNodeConstructor[key];
    }
  });
});

var _mediaStreamAudioSourceNodeConstructorFactory = require("./media-stream-audio-source-node-constructor-factory");

Object.keys(_mediaStreamAudioSourceNodeConstructorFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _mediaStreamAudioSourceNodeConstructorFactory[key];
    }
  });
});

var _mediaStreamTrackAudioSourceNodeConstructor = require("./media-stream-track-audio-source-node-constructor");

Object.keys(_mediaStreamTrackAudioSourceNodeConstructor).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _mediaStreamTrackAudioSourceNodeConstructor[key];
    }
  });
});

var _mediaStreamTrackAudioSourceNodeConstructorFactory = require("./media-stream-track-audio-source-node-constructor-factory");

Object.keys(_mediaStreamTrackAudioSourceNodeConstructorFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _mediaStreamTrackAudioSourceNodeConstructorFactory[key];
    }
  });
});

var _minimalAudioContextConstructor = require("./minimal-audio-context-constructor");

Object.keys(_minimalAudioContextConstructor).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _minimalAudioContextConstructor[key];
    }
  });
});

var _minimalAudioContextConstructorFactory = require("./minimal-audio-context-constructor-factory");

Object.keys(_minimalAudioContextConstructorFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _minimalAudioContextConstructorFactory[key];
    }
  });
});

var _minimalBaseAudioContextConstructor = require("./minimal-base-audio-context-constructor");

Object.keys(_minimalBaseAudioContextConstructor).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _minimalBaseAudioContextConstructor[key];
    }
  });
});

var _minimalBaseAudioContextConstructorFactory = require("./minimal-base-audio-context-constructor-factory");

Object.keys(_minimalBaseAudioContextConstructorFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _minimalBaseAudioContextConstructorFactory[key];
    }
  });
});

var _minimalOfflineAudioContextConstructor = require("./minimal-offline-audio-context-constructor");

Object.keys(_minimalOfflineAudioContextConstructor).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _minimalOfflineAudioContextConstructor[key];
    }
  });
});

var _minimalOfflineAudioContextConstructorFactory = require("./minimal-offline-audio-context-constructor-factory");

Object.keys(_minimalOfflineAudioContextConstructorFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _minimalOfflineAudioContextConstructorFactory[key];
    }
  });
});

var _monitorConnectionsFactory = require("./monitor-connections-factory");

Object.keys(_monitorConnectionsFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _monitorConnectionsFactory[key];
    }
  });
});

var _monitorConnectionsFunction = require("./monitor-connections-function");

Object.keys(_monitorConnectionsFunction).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _monitorConnectionsFunction[key];
    }
  });
});

var _nativeAnalyserNode = require("./native-analyser-node");

Object.keys(_nativeAnalyserNode).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _nativeAnalyserNode[key];
    }
  });
});

var _nativeAnalyserNodeFactory = require("./native-analyser-node-factory");

Object.keys(_nativeAnalyserNodeFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _nativeAnalyserNodeFactory[key];
    }
  });
});

var _nativeAnalyserNodeFactoryFactory = require("./native-analyser-node-factory-factory");

Object.keys(_nativeAnalyserNodeFactoryFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _nativeAnalyserNodeFactoryFactory[key];
    }
  });
});

var _nativeAudioBuffer = require("./native-audio-buffer");

Object.keys(_nativeAudioBuffer).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _nativeAudioBuffer[key];
    }
  });
});

var _nativeAudioBufferConstructor = require("./native-audio-buffer-constructor");

Object.keys(_nativeAudioBufferConstructor).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _nativeAudioBufferConstructor[key];
    }
  });
});

var _nativeAudioBufferConstructorFactory = require("./native-audio-buffer-constructor-factory");

Object.keys(_nativeAudioBufferConstructorFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _nativeAudioBufferConstructorFactory[key];
    }
  });
});

var _nativeAudioBufferSourceNode = require("./native-audio-buffer-source-node");

Object.keys(_nativeAudioBufferSourceNode).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _nativeAudioBufferSourceNode[key];
    }
  });
});

var _nativeAudioBufferSourceNodeFactory = require("./native-audio-buffer-source-node-factory");

Object.keys(_nativeAudioBufferSourceNodeFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _nativeAudioBufferSourceNodeFactory[key];
    }
  });
});

var _nativeAudioBufferSourceNodeFactoryFactory = require("./native-audio-buffer-source-node-factory-factory");

Object.keys(_nativeAudioBufferSourceNodeFactoryFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _nativeAudioBufferSourceNodeFactoryFactory[key];
    }
  });
});

var _nativeAudioContext = require("./native-audio-context");

Object.keys(_nativeAudioContext).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _nativeAudioContext[key];
    }
  });
});

var _nativeAudioContextConstructor = require("./native-audio-context-constructor");

Object.keys(_nativeAudioContextConstructor).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _nativeAudioContextConstructor[key];
    }
  });
});

var _nativeAudioContextConstructorFactory = require("./native-audio-context-constructor-factory");

Object.keys(_nativeAudioContextConstructorFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _nativeAudioContextConstructorFactory[key];
    }
  });
});

var _nativeAudioDestinationNode = require("./native-audio-destination-node");

Object.keys(_nativeAudioDestinationNode).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _nativeAudioDestinationNode[key];
    }
  });
});

var _nativeAudioDestinationNodeFactory = require("./native-audio-destination-node-factory");

Object.keys(_nativeAudioDestinationNodeFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _nativeAudioDestinationNodeFactory[key];
    }
  });
});

var _nativeAudioDestinationNodeFactoryFactory = require("./native-audio-destination-node-factory-factory");

Object.keys(_nativeAudioDestinationNodeFactoryFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _nativeAudioDestinationNodeFactoryFactory[key];
    }
  });
});

var _nativeAudioListener = require("./native-audio-listener");

Object.keys(_nativeAudioListener).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _nativeAudioListener[key];
    }
  });
});

var _nativeAudioNode = require("./native-audio-node");

Object.keys(_nativeAudioNode).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _nativeAudioNode[key];
    }
  });
});

var _nativeAudioNodeFactory = require("./native-audio-node-factory");

Object.keys(_nativeAudioNodeFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _nativeAudioNodeFactory[key];
    }
  });
});

var _nativeAudioNodeFactoryFactory = require("./native-audio-node-factory-factory");

Object.keys(_nativeAudioNodeFactoryFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _nativeAudioNodeFactoryFactory[key];
    }
  });
});

var _nativeAudioParam = require("./native-audio-param");

Object.keys(_nativeAudioParam).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _nativeAudioParam[key];
    }
  });
});

var _nativeAudioParamMap = require("./native-audio-param-map");

Object.keys(_nativeAudioParamMap).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _nativeAudioParamMap[key];
    }
  });
});

var _nativeAudioWorklet = require("./native-audio-worklet");

Object.keys(_nativeAudioWorklet).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _nativeAudioWorklet[key];
    }
  });
});

var _nativeAudioWorkletNode = require("./native-audio-worklet-node");

Object.keys(_nativeAudioWorkletNode).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _nativeAudioWorkletNode[key];
    }
  });
});

var _nativeAudioWorkletNodeConstructor = require("./native-audio-worklet-node-constructor");

Object.keys(_nativeAudioWorkletNodeConstructor).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _nativeAudioWorkletNodeConstructor[key];
    }
  });
});

var _nativeAudioWorkletNodeConstructorFactory = require("./native-audio-worklet-node-constructor-factory");

Object.keys(_nativeAudioWorkletNodeConstructorFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _nativeAudioWorkletNodeConstructorFactory[key];
    }
  });
});

var _nativeAudioWorkletNodeFactory = require("./native-audio-worklet-node-factory");

Object.keys(_nativeAudioWorkletNodeFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _nativeAudioWorkletNodeFactory[key];
    }
  });
});

var _nativeAudioWorkletNodeFactoryFactory = require("./native-audio-worklet-node-factory-factory");

Object.keys(_nativeAudioWorkletNodeFactoryFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _nativeAudioWorkletNodeFactoryFactory[key];
    }
  });
});

var _nativeAudioWorkletNodeFakerFactory = require("./native-audio-worklet-node-faker-factory");

Object.keys(_nativeAudioWorkletNodeFakerFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _nativeAudioWorkletNodeFakerFactory[key];
    }
  });
});

var _nativeAudioWorkletNodeFakerFactoryFactory = require("./native-audio-worklet-node-faker-factory-factory");

Object.keys(_nativeAudioWorkletNodeFakerFactoryFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _nativeAudioWorkletNodeFakerFactoryFactory[key];
    }
  });
});

var _nativeAudioWorkletNodeOptions = require("./native-audio-worklet-node-options");

Object.keys(_nativeAudioWorkletNodeOptions).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _nativeAudioWorkletNodeOptions[key];
    }
  });
});

var _nativeBiquadFilterNode = require("./native-biquad-filter-node");

Object.keys(_nativeBiquadFilterNode).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _nativeBiquadFilterNode[key];
    }
  });
});

var _nativeBiquadFilterNodeFactory = require("./native-biquad-filter-node-factory");

Object.keys(_nativeBiquadFilterNodeFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _nativeBiquadFilterNodeFactory[key];
    }
  });
});

var _nativeBiquadFilterNodeFactoryFactory = require("./native-biquad-filter-node-factory-factory");

Object.keys(_nativeBiquadFilterNodeFactoryFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _nativeBiquadFilterNodeFactoryFactory[key];
    }
  });
});

var _nativeChannelMergerNode = require("./native-channel-merger-node");

Object.keys(_nativeChannelMergerNode).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _nativeChannelMergerNode[key];
    }
  });
});

var _nativeChannelMergerNodeFactory = require("./native-channel-merger-node-factory");

Object.keys(_nativeChannelMergerNodeFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _nativeChannelMergerNodeFactory[key];
    }
  });
});

var _nativeChannelMergerNodeFactoryFactory = require("./native-channel-merger-node-factory-factory");

Object.keys(_nativeChannelMergerNodeFactoryFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _nativeChannelMergerNodeFactoryFactory[key];
    }
  });
});

var _nativeChannelSplitterNode = require("./native-channel-splitter-node");

Object.keys(_nativeChannelSplitterNode).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _nativeChannelSplitterNode[key];
    }
  });
});

var _nativeChannelSplitterNodeFactory = require("./native-channel-splitter-node-factory");

Object.keys(_nativeChannelSplitterNodeFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _nativeChannelSplitterNodeFactory[key];
    }
  });
});

var _nativeChannelSplitterNodeFactoryFactory = require("./native-channel-splitter-node-factory-factory");

Object.keys(_nativeChannelSplitterNodeFactoryFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _nativeChannelSplitterNodeFactoryFactory[key];
    }
  });
});

var _nativeConstantSourceNode = require("./native-constant-source-node");

Object.keys(_nativeConstantSourceNode).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _nativeConstantSourceNode[key];
    }
  });
});

var _nativeConstantSourceNodeFactory = require("./native-constant-source-node-factory");

Object.keys(_nativeConstantSourceNodeFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _nativeConstantSourceNodeFactory[key];
    }
  });
});

var _nativeConstantSourceNodeFactoryFactory = require("./native-constant-source-node-factory-factory");

Object.keys(_nativeConstantSourceNodeFactoryFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _nativeConstantSourceNodeFactoryFactory[key];
    }
  });
});

var _nativeConstantSourceNodeFakerFactory = require("./native-constant-source-node-faker-factory");

Object.keys(_nativeConstantSourceNodeFakerFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _nativeConstantSourceNodeFakerFactory[key];
    }
  });
});

var _nativeConstantSourceNodeFakerFactoryFactory = require("./native-constant-source-node-faker-factory-factory");

Object.keys(_nativeConstantSourceNodeFakerFactoryFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _nativeConstantSourceNodeFakerFactoryFactory[key];
    }
  });
});

var _nativeContext = require("./native-context");

Object.keys(_nativeContext).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _nativeContext[key];
    }
  });
});

var _nativeConvolverNode = require("./native-convolver-node");

Object.keys(_nativeConvolverNode).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _nativeConvolverNode[key];
    }
  });
});

var _nativeConvolverNodeFactory = require("./native-convolver-node-factory");

Object.keys(_nativeConvolverNodeFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _nativeConvolverNodeFactory[key];
    }
  });
});

var _nativeConvolverNodeFactoryFactory = require("./native-convolver-node-factory-factory");

Object.keys(_nativeConvolverNodeFactoryFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _nativeConvolverNodeFactoryFactory[key];
    }
  });
});

var _nativeConvolverNodeFakerFactory = require("./native-convolver-node-faker-factory");

Object.keys(_nativeConvolverNodeFakerFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _nativeConvolverNodeFakerFactory[key];
    }
  });
});

var _nativeConvolverNodeFakerFactoryFactory = require("./native-convolver-node-faker-factory-factory");

Object.keys(_nativeConvolverNodeFakerFactoryFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _nativeConvolverNodeFakerFactoryFactory[key];
    }
  });
});

var _nativeDelayNodeFactory = require("./native-delay-node-factory");

Object.keys(_nativeDelayNodeFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _nativeDelayNodeFactory[key];
    }
  });
});

var _nativeDelayNodeFactoryFactory = require("./native-delay-node-factory-factory");

Object.keys(_nativeDelayNodeFactoryFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _nativeDelayNodeFactoryFactory[key];
    }
  });
});

var _nativeDelayNode = require("./native-delay-node");

Object.keys(_nativeDelayNode).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _nativeDelayNode[key];
    }
  });
});

var _nativeDynamicsCompressorNode = require("./native-dynamics-compressor-node");

Object.keys(_nativeDynamicsCompressorNode).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _nativeDynamicsCompressorNode[key];
    }
  });
});

var _nativeDynamicsCompressorNodeFactory = require("./native-dynamics-compressor-node-factory");

Object.keys(_nativeDynamicsCompressorNodeFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _nativeDynamicsCompressorNodeFactory[key];
    }
  });
});

var _nativeDynamicsCompressorNodeFactoryFactory = require("./native-dynamics-compressor-node-factory-factory");

Object.keys(_nativeDynamicsCompressorNodeFactoryFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _nativeDynamicsCompressorNodeFactoryFactory[key];
    }
  });
});

var _nativeEventTarget = require("./native-event-target");

Object.keys(_nativeEventTarget).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _nativeEventTarget[key];
    }
  });
});

var _nativeGainNode = require("./native-gain-node");

Object.keys(_nativeGainNode).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _nativeGainNode[key];
    }
  });
});

var _nativeGainNodeFactory = require("./native-gain-node-factory");

Object.keys(_nativeGainNodeFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _nativeGainNodeFactory[key];
    }
  });
});

var _nativeGainNodeFactoryFactory = require("./native-gain-node-factory-factory");

Object.keys(_nativeGainNodeFactoryFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _nativeGainNodeFactoryFactory[key];
    }
  });
});

var _nativeIirFilterNode = require("./native-iir-filter-node");

Object.keys(_nativeIirFilterNode).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _nativeIirFilterNode[key];
    }
  });
});

var _nativeIirFilterNodeFactory = require("./native-iir-filter-node-factory");

Object.keys(_nativeIirFilterNodeFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _nativeIirFilterNodeFactory[key];
    }
  });
});

var _nativeIirFilterNodeFactoryFactory = require("./native-iir-filter-node-factory-factory");

Object.keys(_nativeIirFilterNodeFactoryFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _nativeIirFilterNodeFactoryFactory[key];
    }
  });
});

var _nativeIirFilterNodeFakerFactory = require("./native-iir-filter-node-faker-factory");

Object.keys(_nativeIirFilterNodeFakerFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _nativeIirFilterNodeFakerFactory[key];
    }
  });
});

var _nativeIirFilterNodeFakerFactoryFactory = require("./native-iir-filter-node-faker-factory-factory");

Object.keys(_nativeIirFilterNodeFakerFactoryFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _nativeIirFilterNodeFakerFactoryFactory[key];
    }
  });
});

var _nativeMediaElementAudioSourceNode = require("./native-media-element-audio-source-node");

Object.keys(_nativeMediaElementAudioSourceNode).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _nativeMediaElementAudioSourceNode[key];
    }
  });
});

var _nativeMediaElementAudioSourceNodeFactory = require("./native-media-element-audio-source-node-factory");

Object.keys(_nativeMediaElementAudioSourceNodeFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _nativeMediaElementAudioSourceNodeFactory[key];
    }
  });
});

var _nativeMediaElementAudioSourceNodeFactoryFactory = require("./native-media-element-audio-source-node-factory-factory");

Object.keys(_nativeMediaElementAudioSourceNodeFactoryFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _nativeMediaElementAudioSourceNodeFactoryFactory[key];
    }
  });
});

var _nativeMediaStreamAudioDestinationNode = require("./native-media-stream-audio-destination-node");

Object.keys(_nativeMediaStreamAudioDestinationNode).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _nativeMediaStreamAudioDestinationNode[key];
    }
  });
});

var _nativeMediaStreamAudioDestinationNodeFactory = require("./native-media-stream-audio-destination-node-factory");

Object.keys(_nativeMediaStreamAudioDestinationNodeFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _nativeMediaStreamAudioDestinationNodeFactory[key];
    }
  });
});

var _nativeMediaStreamAudioDestinationNodeFactoryFactory = require("./native-media-stream-audio-destination-node-factory-factory");

Object.keys(_nativeMediaStreamAudioDestinationNodeFactoryFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _nativeMediaStreamAudioDestinationNodeFactoryFactory[key];
    }
  });
});

var _nativeMediaStreamAudioSourceNode = require("./native-media-stream-audio-source-node");

Object.keys(_nativeMediaStreamAudioSourceNode).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _nativeMediaStreamAudioSourceNode[key];
    }
  });
});

var _nativeMediaStreamAudioSourceNodeFactory = require("./native-media-stream-audio-source-node-factory");

Object.keys(_nativeMediaStreamAudioSourceNodeFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _nativeMediaStreamAudioSourceNodeFactory[key];
    }
  });
});

var _nativeMediaStreamAudioSourceNodeFactoryFactory = require("./native-media-stream-audio-source-node-factory-factory");

Object.keys(_nativeMediaStreamAudioSourceNodeFactoryFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _nativeMediaStreamAudioSourceNodeFactoryFactory[key];
    }
  });
});

var _nativeMediaStreamTrackAudioSourceNode = require("./native-media-stream-track-audio-source-node");

Object.keys(_nativeMediaStreamTrackAudioSourceNode).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _nativeMediaStreamTrackAudioSourceNode[key];
    }
  });
});

var _nativeMediaStreamTrackAudioSourceNodeFactory = require("./native-media-stream-track-audio-source-node-factory");

Object.keys(_nativeMediaStreamTrackAudioSourceNodeFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _nativeMediaStreamTrackAudioSourceNodeFactory[key];
    }
  });
});

var _nativeMediaStreamTrackAudioSourceNodeFactoryFactory = require("./native-media-stream-track-audio-source-node-factory-factory");

Object.keys(_nativeMediaStreamTrackAudioSourceNodeFactoryFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _nativeMediaStreamTrackAudioSourceNodeFactoryFactory[key];
    }
  });
});

var _nativeOfflineAudioContext = require("./native-offline-audio-context");

Object.keys(_nativeOfflineAudioContext).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _nativeOfflineAudioContext[key];
    }
  });
});

var _nativeOfflineAudioContextConstructor = require("./native-offline-audio-context-constructor");

Object.keys(_nativeOfflineAudioContextConstructor).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _nativeOfflineAudioContextConstructor[key];
    }
  });
});

var _nativeOfflineAudioContextConstructorFactory = require("./native-offline-audio-context-constructor-factory");

Object.keys(_nativeOfflineAudioContextConstructorFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _nativeOfflineAudioContextConstructorFactory[key];
    }
  });
});

var _nativeOscillatorNode = require("./native-oscillator-node");

Object.keys(_nativeOscillatorNode).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _nativeOscillatorNode[key];
    }
  });
});

var _nativeOscillatorNodeFactory = require("./native-oscillator-node-factory");

Object.keys(_nativeOscillatorNodeFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _nativeOscillatorNodeFactory[key];
    }
  });
});

var _nativeOscillatorNodeFactoryFactory = require("./native-oscillator-node-factory-factory");

Object.keys(_nativeOscillatorNodeFactoryFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _nativeOscillatorNodeFactoryFactory[key];
    }
  });
});

var _nativePannerNode = require("./native-panner-node");

Object.keys(_nativePannerNode).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _nativePannerNode[key];
    }
  });
});

var _nativePannerNodeFactory = require("./native-panner-node-factory");

Object.keys(_nativePannerNodeFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _nativePannerNodeFactory[key];
    }
  });
});

var _nativePannerNodeFactoryFactory = require("./native-panner-node-factory-factory");

Object.keys(_nativePannerNodeFactoryFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _nativePannerNodeFactoryFactory[key];
    }
  });
});

var _nativePannerNodeFakerFactory = require("./native-panner-node-faker-factory");

Object.keys(_nativePannerNodeFakerFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _nativePannerNodeFakerFactory[key];
    }
  });
});

var _nativePannerNodeFakerFactoryFactory = require("./native-panner-node-faker-factory-factory");

Object.keys(_nativePannerNodeFakerFactoryFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _nativePannerNodeFakerFactoryFactory[key];
    }
  });
});

var _nativePeriodicWave = require("./native-periodic-wave");

Object.keys(_nativePeriodicWave).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _nativePeriodicWave[key];
    }
  });
});

var _nativePeriodicWaveFactory = require("./native-periodic-wave-factory");

Object.keys(_nativePeriodicWaveFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _nativePeriodicWaveFactory[key];
    }
  });
});

var _nativePeriodicWaveFactoryFactory = require("./native-periodic-wave-factory-factory");

Object.keys(_nativePeriodicWaveFactoryFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _nativePeriodicWaveFactoryFactory[key];
    }
  });
});

var _nativeScriptProcessorNode = require("./native-script-processor-node");

Object.keys(_nativeScriptProcessorNode).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _nativeScriptProcessorNode[key];
    }
  });
});

var _nativeScriptProcessorNodeFactory = require("./native-script-processor-node-factory");

Object.keys(_nativeScriptProcessorNodeFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _nativeScriptProcessorNodeFactory[key];
    }
  });
});

var _nativeScriptProcessorNodeFactoryFactory = require("./native-script-processor-node-factory-factory");

Object.keys(_nativeScriptProcessorNodeFactoryFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _nativeScriptProcessorNodeFactoryFactory[key];
    }
  });
});

var _nativeStereoPannerNode = require("./native-stereo-panner-node");

Object.keys(_nativeStereoPannerNode).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _nativeStereoPannerNode[key];
    }
  });
});

var _nativeStereoPannerNodeFactory = require("./native-stereo-panner-node-factory");

Object.keys(_nativeStereoPannerNodeFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _nativeStereoPannerNodeFactory[key];
    }
  });
});

var _nativeStereoPannerNodeFactoryFactory = require("./native-stereo-panner-node-factory-factory");

Object.keys(_nativeStereoPannerNodeFactoryFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _nativeStereoPannerNodeFactoryFactory[key];
    }
  });
});

var _nativeStereoPannerNodeFakerFactory = require("./native-stereo-panner-node-faker-factory");

Object.keys(_nativeStereoPannerNodeFakerFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _nativeStereoPannerNodeFakerFactory[key];
    }
  });
});

var _nativeStereoPannerNodeFakerFactoryFactory = require("./native-stereo-panner-node-faker-factory-factory");

Object.keys(_nativeStereoPannerNodeFakerFactoryFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _nativeStereoPannerNodeFakerFactoryFactory[key];
    }
  });
});

var _nativeWaveShaperNode = require("./native-wave-shaper-node");

Object.keys(_nativeWaveShaperNode).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _nativeWaveShaperNode[key];
    }
  });
});

var _nativeWaveShaperNodeFactory = require("./native-wave-shaper-node-factory");

Object.keys(_nativeWaveShaperNodeFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _nativeWaveShaperNodeFactory[key];
    }
  });
});

var _nativeWaveShaperNodeFactoryFactory = require("./native-wave-shaper-node-factory-factory");

Object.keys(_nativeWaveShaperNodeFactoryFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _nativeWaveShaperNodeFactoryFactory[key];
    }
  });
});

var _nativeWaveShaperNodeFakerFactory = require("./native-wave-shaper-node-faker-factory");

Object.keys(_nativeWaveShaperNodeFakerFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _nativeWaveShaperNodeFakerFactory[key];
    }
  });
});

var _nativeWaveShaperNodeFakerFactoryFactory = require("./native-wave-shaper-node-faker-factory-factory");

Object.keys(_nativeWaveShaperNodeFakerFactoryFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _nativeWaveShaperNodeFakerFactoryFactory[key];
    }
  });
});

var _notSupportedErrorFactory = require("./not-supported-error-factory");

Object.keys(_notSupportedErrorFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _notSupportedErrorFactory[key];
    }
  });
});

var _offlineAudioContextConstructorFactory = require("./offline-audio-context-constructor-factory");

Object.keys(_offlineAudioContextConstructorFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _offlineAudioContextConstructorFactory[key];
    }
  });
});

var _oscillatorNodeConstructor = require("./oscillator-node-constructor");

Object.keys(_oscillatorNodeConstructor).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _oscillatorNodeConstructor[key];
    }
  });
});

var _oscillatorNodeConstructorFactory = require("./oscillator-node-constructor-factory");

Object.keys(_oscillatorNodeConstructorFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _oscillatorNodeConstructorFactory[key];
    }
  });
});

var _oscillatorNodeRenderer = require("./oscillator-node-renderer");

Object.keys(_oscillatorNodeRenderer).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _oscillatorNodeRenderer[key];
    }
  });
});

var _oscillatorNodeRendererFactory = require("./oscillator-node-renderer-factory");

Object.keys(_oscillatorNodeRendererFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _oscillatorNodeRendererFactory[key];
    }
  });
});

var _oscillatorNodeRendererFactoryFactory = require("./oscillator-node-renderer-factory-factory");

Object.keys(_oscillatorNodeRendererFactoryFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _oscillatorNodeRendererFactoryFactory[key];
    }
  });
});

var _oscillatorType = require("./oscillator-type");

Object.keys(_oscillatorType).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _oscillatorType[key];
    }
  });
});

var _outputConnection = require("./output-connection");

Object.keys(_outputConnection).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _outputConnection[key];
    }
  });
});

var _overSampleType = require("./over-sample-type");

Object.keys(_overSampleType).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _overSampleType[key];
    }
  });
});

var _overwriteAccessorsFunction = require("./overwrite-accessors-function");

Object.keys(_overwriteAccessorsFunction).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _overwriteAccessorsFunction[key];
    }
  });
});

var _pannerNodeConstructor = require("./panner-node-constructor");

Object.keys(_pannerNodeConstructor).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _pannerNodeConstructor[key];
    }
  });
});

var _pannerNodeConstructorFactory = require("./panner-node-constructor-factory");

Object.keys(_pannerNodeConstructorFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _pannerNodeConstructorFactory[key];
    }
  });
});

var _pannerNodeRendererFactory = require("./panner-node-renderer-factory");

Object.keys(_pannerNodeRendererFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _pannerNodeRendererFactory[key];
    }
  });
});

var _pannerNodeRendererFactoryFactory = require("./panner-node-renderer-factory-factory");

Object.keys(_pannerNodeRendererFactoryFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _pannerNodeRendererFactoryFactory[key];
    }
  });
});

var _panningModelType = require("./panning-model-type");

Object.keys(_panningModelType).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _panningModelType[key];
    }
  });
});

var _passiveAudioNodeInputConnection = require("./passive-audio-node-input-connection");

Object.keys(_passiveAudioNodeInputConnection).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _passiveAudioNodeInputConnection[key];
    }
  });
});

var _passiveAudioParamInputConnection = require("./passive-audio-param-input-connection");

Object.keys(_passiveAudioParamInputConnection).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _passiveAudioParamInputConnection[key];
    }
  });
});

var _periodicWaveConstructor = require("./periodic-wave-constructor");

Object.keys(_periodicWaveConstructor).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _periodicWaveConstructor[key];
    }
  });
});

var _periodicWaveConstructorFactory = require("./periodic-wave-constructor-factory");

Object.keys(_periodicWaveConstructorFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _periodicWaveConstructorFactory[key];
    }
  });
});

var _renderAutomationFactory = require("./render-automation-factory");

Object.keys(_renderAutomationFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _renderAutomationFactory[key];
    }
  });
});

var _renderAutomationFunction = require("./render-automation-function");

Object.keys(_renderAutomationFunction).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _renderAutomationFunction[key];
    }
  });
});

var _renderInputsOfAudioNodeFactory = require("./render-inputs-of-audio-node-factory");

Object.keys(_renderInputsOfAudioNodeFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _renderInputsOfAudioNodeFactory[key];
    }
  });
});

var _renderInputsOfAudioNodeFunction = require("./render-inputs-of-audio-node-function");

Object.keys(_renderInputsOfAudioNodeFunction).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _renderInputsOfAudioNodeFunction[key];
    }
  });
});

var _renderInputsOfAudioParamFactory = require("./render-inputs-of-audio-param-factory");

Object.keys(_renderInputsOfAudioParamFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _renderInputsOfAudioParamFactory[key];
    }
  });
});

var _renderInputsOfAudioParamFunction = require("./render-inputs-of-audio-param-function");

Object.keys(_renderInputsOfAudioParamFunction).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _renderInputsOfAudioParamFunction[key];
    }
  });
});

var _renderNativeOfflineAudioContextFactory = require("./render-native-offline-audio-context-factory");

Object.keys(_renderNativeOfflineAudioContextFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _renderNativeOfflineAudioContextFactory[key];
    }
  });
});

var _renderNativeOfflineAudioContextFunction = require("./render-native-offline-audio-context-function");

Object.keys(_renderNativeOfflineAudioContextFunction).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _renderNativeOfflineAudioContextFunction[key];
    }
  });
});

var _startRenderingFactory = require("./start-rendering-factory");

Object.keys(_startRenderingFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _startRenderingFactory[key];
    }
  });
});

var _startRenderingFunction = require("./start-rendering-function");

Object.keys(_startRenderingFunction).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _startRenderingFunction[key];
    }
  });
});

var _stereoPannerNodeConstructor = require("./stereo-panner-node-constructor");

Object.keys(_stereoPannerNodeConstructor).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _stereoPannerNodeConstructor[key];
    }
  });
});

var _stereoPannerNodeConstructorFactory = require("./stereo-panner-node-constructor-factory");

Object.keys(_stereoPannerNodeConstructorFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _stereoPannerNodeConstructorFactory[key];
    }
  });
});

var _stereoPannerNodeRendererFactoryFactory = require("./stereo-panner-node-renderer-factory-factory");

Object.keys(_stereoPannerNodeRendererFactoryFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _stereoPannerNodeRendererFactoryFactory[key];
    }
  });
});

var _stereoPannerNodeRendererFactory = require("./stereo-panner-node-renderer-factory");

Object.keys(_stereoPannerNodeRendererFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _stereoPannerNodeRendererFactory[key];
    }
  });
});

var _testAudioBufferCopyChannelMethodsSubarraySupportFactory = require("./test-audio-buffer-copy-channel-methods-subarray-support-factory");

Object.keys(_testAudioBufferCopyChannelMethodsSubarraySupportFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _testAudioBufferCopyChannelMethodsSubarraySupportFactory[key];
    }
  });
});

var _testAudioBufferConstructorSupportFactory = require("./test-audio-buffer-constructor-support-factory");

Object.keys(_testAudioBufferConstructorSupportFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _testAudioBufferConstructorSupportFactory[key];
    }
  });
});

var _testAudioBufferSourceNodeStartMethodConsecutiveCallsSupportFactory = require("./test-audio-buffer-source-node-start-method-consecutive-calls-support-factory");

Object.keys(_testAudioBufferSourceNodeStartMethodConsecutiveCallsSupportFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _testAudioBufferSourceNodeStartMethodConsecutiveCallsSupportFactory[key];
    }
  });
});

var _testAudioBufferSourceNodeStartMethodDurationParameterSupportFactory = require("./test-audio-buffer-source-node-start-method-duration-parameter-support-factory");

Object.keys(_testAudioBufferSourceNodeStartMethodDurationParameterSupportFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _testAudioBufferSourceNodeStartMethodDurationParameterSupportFactory[key];
    }
  });
});

var _testAudioBufferSourceNodeStartMethodOffsetClampingSupportFactory = require("./test-audio-buffer-source-node-start-method-offset-clamping-support-factory");

Object.keys(_testAudioBufferSourceNodeStartMethodOffsetClampingSupportFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _testAudioBufferSourceNodeStartMethodOffsetClampingSupportFactory[key];
    }
  });
});

var _testAudioBufferSourceNodeStopMethodNullifiedBufferSupportFactory = require("./test-audio-buffer-source-node-stop-method-nullified-buffer-support-factory");

Object.keys(_testAudioBufferSourceNodeStopMethodNullifiedBufferSupportFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _testAudioBufferSourceNodeStopMethodNullifiedBufferSupportFactory[key];
    }
  });
});

var _testAudioContextCloseMethodSupportFactory = require("./test-audio-context-close-method-support-factory");

Object.keys(_testAudioContextCloseMethodSupportFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _testAudioContextCloseMethodSupportFactory[key];
    }
  });
});

var _testAudioContextDecodeAudioDataMethodTypeErrorSupportFactory = require("./test-audio-context-decode-audio-data-method-type-error-support-factory");

Object.keys(_testAudioContextDecodeAudioDataMethodTypeErrorSupportFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _testAudioContextDecodeAudioDataMethodTypeErrorSupportFactory[key];
    }
  });
});

var _testAudioContextOptionsSupportFactory = require("./test-audio-context-options-support-factory");

Object.keys(_testAudioContextOptionsSupportFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _testAudioContextOptionsSupportFactory[key];
    }
  });
});

var _testAudioNodeConnectMethodSupportFactory = require("./test-audio-node-connect-method-support-factory");

Object.keys(_testAudioNodeConnectMethodSupportFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _testAudioNodeConnectMethodSupportFactory[key];
    }
  });
});

var _testAudioScheduledSourceNodeStartMethodConsecutiveCallsSupportFactory = require("./test-audio-scheduled-source-node-start-method-consecutive-calls-support-factory");

Object.keys(_testAudioScheduledSourceNodeStartMethodConsecutiveCallsSupportFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _testAudioScheduledSourceNodeStartMethodConsecutiveCallsSupportFactory[key];
    }
  });
});

var _testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupportFactory = require("./test-audio-scheduled-source-node-stop-method-consecutive-calls-support-factory");

Object.keys(_testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupportFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupportFactory[key];
    }
  });
});

var _testAudioScheduledSourceNodeStopMethodNegativeParametersSupportFactory = require("./test-audio-scheduled-source-node-stop-method-negative-parameters-support-factory");

Object.keys(_testAudioScheduledSourceNodeStopMethodNegativeParametersSupportFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _testAudioScheduledSourceNodeStopMethodNegativeParametersSupportFactory[key];
    }
  });
});

var _testAudioWorkletProcessorNoOutputsSupportFactory = require("./test-audio-worklet-processor-no-outputs-support-factory");

Object.keys(_testAudioWorkletProcessorNoOutputsSupportFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _testAudioWorkletProcessorNoOutputsSupportFactory[key];
    }
  });
});

var _testChannelMergerNodeChannelCountSupportFactory = require("./test-channel-merger-node-channel-count-support-factory");

Object.keys(_testChannelMergerNodeChannelCountSupportFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _testChannelMergerNodeChannelCountSupportFactory[key];
    }
  });
});

var _testConstantSourceNodeAccurateSchedulingSupportFactory = require("./test-constant-source-node-accurate-scheduling-support-factory");

Object.keys(_testConstantSourceNodeAccurateSchedulingSupportFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _testConstantSourceNodeAccurateSchedulingSupportFactory[key];
    }
  });
});

var _testConvolverNodeBufferReassignabilitySupportFactory = require("./test-convolver-node-buffer-reassignability-support-factory");

Object.keys(_testConvolverNodeBufferReassignabilitySupportFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _testConvolverNodeBufferReassignabilitySupportFactory[key];
    }
  });
});

var _testIsSecureContextSupportFactory = require("./test-is-secure-context-support-factory");

Object.keys(_testIsSecureContextSupportFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _testIsSecureContextSupportFactory[key];
    }
  });
});

var _testMediaStreamAudioSourceNodeMediaStreamWithoutAudioTrackSupport = require("./test-media-stream-audio-source-node-media-stream-without-audio-track-support");

Object.keys(_testMediaStreamAudioSourceNodeMediaStreamWithoutAudioTrackSupport).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _testMediaStreamAudioSourceNodeMediaStreamWithoutAudioTrackSupport[key];
    }
  });
});

var _testOfflineAudioContextCurrentTimeSupportFactory = require("./test-offline-audio-context-current-time-support-factory");

Object.keys(_testOfflineAudioContextCurrentTimeSupportFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _testOfflineAudioContextCurrentTimeSupportFactory[key];
    }
  });
});

var _testStereoPannerNodeDefaultValueSupportFactory = require("./test-stereo-panner-node-default-value-support-factory");

Object.keys(_testStereoPannerNodeDefaultValueSupportFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _testStereoPannerNodeDefaultValueSupportFactory[key];
    }
  });
});

var _typedArray = require("./typed-array");

Object.keys(_typedArray).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _typedArray[key];
    }
  });
});

var _unknownErrorFactory = require("./unknown-error-factory");

Object.keys(_unknownErrorFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _unknownErrorFactory[key];
    }
  });
});

var _unrenderedAudioWorkletNodeStore = require("./unrendered-audio-worklet-node-store");

Object.keys(_unrenderedAudioWorkletNodeStore).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _unrenderedAudioWorkletNodeStore[key];
    }
  });
});

var _unrenderedAudioWorkletNodes = require("./unrendered-audio-worklet-nodes");

Object.keys(_unrenderedAudioWorkletNodes).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _unrenderedAudioWorkletNodes[key];
    }
  });
});

var _waveShaperNodeConstructor = require("./wave-shaper-node-constructor");

Object.keys(_waveShaperNodeConstructor).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _waveShaperNodeConstructor[key];
    }
  });
});

var _waveShaperNodeConstructorFactory = require("./wave-shaper-node-constructor-factory");

Object.keys(_waveShaperNodeConstructorFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _waveShaperNodeConstructorFactory[key];
    }
  });
});

var _waveShaperNodeRendererFactoryFactory = require("./wave-shaper-node-renderer-factory-factory");

Object.keys(_waveShaperNodeRendererFactoryFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _waveShaperNodeRendererFactoryFactory[key];
    }
  });
});

var _waveShaperNodeRendererFactory = require("./wave-shaper-node-renderer-factory");

Object.keys(_waveShaperNodeRendererFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _waveShaperNodeRendererFactory[key];
    }
  });
});

var _windowFactory = require("./window-factory");

Object.keys(_windowFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _windowFactory[key];
    }
  });
});

var _wrapAudioBufferCopyChannelMethodsFactory = require("./wrap-audio-buffer-copy-channel-methods-factory");

Object.keys(_wrapAudioBufferCopyChannelMethodsFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _wrapAudioBufferCopyChannelMethodsFactory[key];
    }
  });
});

var _wrapAudioBufferCopyChannelMethodsFunction = require("./wrap-audio-buffer-copy-channel-methods-function");

Object.keys(_wrapAudioBufferCopyChannelMethodsFunction).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _wrapAudioBufferCopyChannelMethodsFunction[key];
    }
  });
});

var _wrapAudioBufferCopyChannelMethodsOutOfBoundsFactory = require("./wrap-audio-buffer-copy-channel-methods-out-of-bounds-factory");

Object.keys(_wrapAudioBufferCopyChannelMethodsOutOfBoundsFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _wrapAudioBufferCopyChannelMethodsOutOfBoundsFactory[key];
    }
  });
});

var _wrapAudioBufferCopyChannelMethodsOutOfBoundsFunction = require("./wrap-audio-buffer-copy-channel-methods-out-of-bounds-function");

Object.keys(_wrapAudioBufferCopyChannelMethodsOutOfBoundsFunction).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _wrapAudioBufferCopyChannelMethodsOutOfBoundsFunction[key];
    }
  });
});

var _wrapAudioBufferSourceNodeStartMethodOffsetClampingFunction = require("./wrap-audio-buffer-source-node-start-method-offset-clamping-function");

Object.keys(_wrapAudioBufferSourceNodeStartMethodOffsetClampingFunction).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _wrapAudioBufferSourceNodeStartMethodOffsetClampingFunction[key];
    }
  });
});

var _wrapAudioBufferSourceNodeStopMethodNullifiedBufferFactory = require("./wrap-audio-buffer-source-node-stop-method-nullified-buffer-factory");

Object.keys(_wrapAudioBufferSourceNodeStopMethodNullifiedBufferFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _wrapAudioBufferSourceNodeStopMethodNullifiedBufferFactory[key];
    }
  });
});

var _wrapAudioBufferSourceNodeStopMethodNullifiedBufferFunction = require("./wrap-audio-buffer-source-node-stop-method-nullified-buffer-function");

Object.keys(_wrapAudioBufferSourceNodeStopMethodNullifiedBufferFunction).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _wrapAudioBufferSourceNodeStopMethodNullifiedBufferFunction[key];
    }
  });
});

var _wrapAudioScheduledSourceNodeStopMethodConsecutiveCallsFactory = require("./wrap-audio-scheduled-source-node-stop-method-consecutive-calls-factory");

Object.keys(_wrapAudioScheduledSourceNodeStopMethodConsecutiveCallsFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _wrapAudioScheduledSourceNodeStopMethodConsecutiveCallsFactory[key];
    }
  });
});

var _wrapAudioScheduledSourceNodeStopMethodConsecutiveCallsFunction = require("./wrap-audio-scheduled-source-node-stop-method-consecutive-calls-function");

Object.keys(_wrapAudioScheduledSourceNodeStopMethodConsecutiveCallsFunction).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _wrapAudioScheduledSourceNodeStopMethodConsecutiveCallsFunction[key];
    }
  });
});

var _wrapChannelMergerNodeFactory = require("./wrap-channel-merger-node-factory");

Object.keys(_wrapChannelMergerNodeFactory).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _wrapChannelMergerNodeFactory[key];
    }
  });
});

var _wrapChannelMergerNodeFunction = require("./wrap-channel-merger-node-function");

Object.keys(_wrapChannelMergerNodeFunction).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _wrapChannelMergerNodeFunction[key];
    }
  });
});

var _wrapEventListenerFunction = require("./wrap-event-listener-function");

Object.keys(_wrapEventListenerFunction).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _wrapEventListenerFunction[key];
    }
  });
});
},{"./abort-error-factory":"../node_modules/standardized-audio-context/build/es2019/types/abort-error-factory.js","./active-input-connection":"../node_modules/standardized-audio-context/build/es2019/types/active-input-connection.js","./add-audio-node-connections-factory":"../node_modules/standardized-audio-context/build/es2019/types/add-audio-node-connections-factory.js","./add-audio-node-connections-function":"../node_modules/standardized-audio-context/build/es2019/types/add-audio-node-connections-function.js","./add-audio-param-connections-factory":"../node_modules/standardized-audio-context/build/es2019/types/add-audio-param-connections-factory.js","./add-audio-param-connections-function":"../node_modules/standardized-audio-context/build/es2019/types/add-audio-param-connections-function.js","./add-audio-worklet-module-factory":"../node_modules/standardized-audio-context/build/es2019/types/add-audio-worklet-module-factory.js","./add-audio-worklet-module-function":"../node_modules/standardized-audio-context/build/es2019/types/add-audio-worklet-module-function.js","./add-silent-connection-factory":"../node_modules/standardized-audio-context/build/es2019/types/add-silent-connection-factory.js","./add-silent-connection-function":"../node_modules/standardized-audio-context/build/es2019/types/add-silent-connection-function.js","./add-unrendered-audio-worklet-node-factory":"../node_modules/standardized-audio-context/build/es2019/types/add-unrendered-audio-worklet-node-factory.js","./add-unrendered-audio-worklet-node-function":"../node_modules/standardized-audio-context/build/es2019/types/add-unrendered-audio-worklet-node-function.js","./analyser-node-constructor":"../node_modules/standardized-audio-context/build/es2019/types/analyser-node-constructor.js","./analyser-node-constructor-factory":"../node_modules/standardized-audio-context/build/es2019/types/analyser-node-constructor-factory.js","./analyser-node-renderer-factory":"../node_modules/standardized-audio-context/build/es2019/types/analyser-node-renderer-factory.js","./analyser-node-renderer-factory-factory":"../node_modules/standardized-audio-context/build/es2019/types/analyser-node-renderer-factory-factory.js","./any-audio-buffer":"../node_modules/standardized-audio-context/build/es2019/types/any-audio-buffer.js","./any-context":"../node_modules/standardized-audio-context/build/es2019/types/any-context.js","./audio-buffer-constructor":"../node_modules/standardized-audio-context/build/es2019/types/audio-buffer-constructor.js","./audio-buffer-constructor-factory":"../node_modules/standardized-audio-context/build/es2019/types/audio-buffer-constructor-factory.js","./audio-buffer-source-node-constructor":"../node_modules/standardized-audio-context/build/es2019/types/audio-buffer-source-node-constructor.js","./audio-buffer-source-node-constructor-factory":"../node_modules/standardized-audio-context/build/es2019/types/audio-buffer-source-node-constructor-factory.js","./audio-buffer-source-node-renderer":"../node_modules/standardized-audio-context/build/es2019/types/audio-buffer-source-node-renderer.js","./audio-buffer-source-node-renderer-factory":"../node_modules/standardized-audio-context/build/es2019/types/audio-buffer-source-node-renderer-factory.js","./audio-buffer-source-node-renderer-factory-factory":"../node_modules/standardized-audio-context/build/es2019/types/audio-buffer-source-node-renderer-factory-factory.js","./audio-buffer-store":"../node_modules/standardized-audio-context/build/es2019/types/audio-buffer-store.js","./audio-context-constructor":"../node_modules/standardized-audio-context/build/es2019/types/audio-context-constructor.js","./audio-context-constructor-factory":"../node_modules/standardized-audio-context/build/es2019/types/audio-context-constructor-factory.js","./audio-context-latency-category":"../node_modules/standardized-audio-context/build/es2019/types/audio-context-latency-category.js","./audio-context-state":"../node_modules/standardized-audio-context/build/es2019/types/audio-context-state.js","./audio-destination-node-constructor":"../node_modules/standardized-audio-context/build/es2019/types/audio-destination-node-constructor.js","./audio-destination-node-constructor-factory":"../node_modules/standardized-audio-context/build/es2019/types/audio-destination-node-constructor-factory.js","./audio-destination-node-renderer-factory":"../node_modules/standardized-audio-context/build/es2019/types/audio-destination-node-renderer-factory.js","./audio-listener-factory":"../node_modules/standardized-audio-context/build/es2019/types/audio-listener-factory.js","./audio-listener-factory-factory":"../node_modules/standardized-audio-context/build/es2019/types/audio-listener-factory-factory.js","./audio-node-connections":"../node_modules/standardized-audio-context/build/es2019/types/audio-node-connections.js","./audio-node-connections-store":"../node_modules/standardized-audio-context/build/es2019/types/audio-node-connections-store.js","./audio-node-constructor":"../node_modules/standardized-audio-context/build/es2019/types/audio-node-constructor.js","./audio-node-constructor-factory":"../node_modules/standardized-audio-context/build/es2019/types/audio-node-constructor-factory.js","./audio-node-output-connection":"../node_modules/standardized-audio-context/build/es2019/types/audio-node-output-connection.js","./audio-node-renderer":"../node_modules/standardized-audio-context/build/es2019/types/audio-node-renderer.js","./audio-node-store":"../node_modules/standardized-audio-context/build/es2019/types/audio-node-store.js","./audio-param-audio-node-store":"../node_modules/standardized-audio-context/build/es2019/types/audio-param-audio-node-store.js","./audio-param-connections":"../node_modules/standardized-audio-context/build/es2019/types/audio-param-connections.js","./audio-param-connections-store":"../node_modules/standardized-audio-context/build/es2019/types/audio-param-connections-store.js","./audio-param-factory":"../node_modules/standardized-audio-context/build/es2019/types/audio-param-factory.js","./audio-param-factory-factory":"../node_modules/standardized-audio-context/build/es2019/types/audio-param-factory-factory.js","./audio-param-map":"../node_modules/standardized-audio-context/build/es2019/types/audio-param-map.js","./audio-param-output-connection":"../node_modules/standardized-audio-context/build/es2019/types/audio-param-output-connection.js","./audio-param-renderer-factory":"../node_modules/standardized-audio-context/build/es2019/types/audio-param-renderer-factory.js","./audio-param-store":"../node_modules/standardized-audio-context/build/es2019/types/audio-param-store.js","./audio-worklet-node-constructor":"../node_modules/standardized-audio-context/build/es2019/types/audio-worklet-node-constructor.js","./audio-worklet-node-constructor-factory":"../node_modules/standardized-audio-context/build/es2019/types/audio-worklet-node-constructor-factory.js","./audio-worklet-node-renderer-factory":"../node_modules/standardized-audio-context/build/es2019/types/audio-worklet-node-renderer-factory.js","./audio-worklet-node-renderer-factory-factory":"../node_modules/standardized-audio-context/build/es2019/types/audio-worklet-node-renderer-factory-factory.js","./auxiliary-gain-node-store":"../node_modules/standardized-audio-context/build/es2019/types/auxiliary-gain-node-store.js","./base-audio-context-constructor":"../node_modules/standardized-audio-context/build/es2019/types/base-audio-context-constructor.js","./base-audio-context-constructor-factory":"../node_modules/standardized-audio-context/build/es2019/types/base-audio-context-constructor-factory.js","./biquad-filter-node-constructor":"../node_modules/standardized-audio-context/build/es2019/types/biquad-filter-node-constructor.js","./biquad-filter-node-constructor-factory":"../node_modules/standardized-audio-context/build/es2019/types/biquad-filter-node-constructor-factory.js","./biquad-filter-node-renderer-factory":"../node_modules/standardized-audio-context/build/es2019/types/biquad-filter-node-renderer-factory.js","./biquad-filter-node-renderer-factory-factory":"../node_modules/standardized-audio-context/build/es2019/types/biquad-filter-node-renderer-factory-factory.js","./biquad-filter-type":"../node_modules/standardized-audio-context/build/es2019/types/biquad-filter-type.js","./channel-count-mode":"../node_modules/standardized-audio-context/build/es2019/types/channel-count-mode.js","./channel-interpretation":"../node_modules/standardized-audio-context/build/es2019/types/channel-interpretation.js","./channel-merger-node-constructor":"../node_modules/standardized-audio-context/build/es2019/types/channel-merger-node-constructor.js","./channel-merger-node-constructor-factory":"../node_modules/standardized-audio-context/build/es2019/types/channel-merger-node-constructor-factory.js","./channel-merger-node-renderer-factory":"../node_modules/standardized-audio-context/build/es2019/types/channel-merger-node-renderer-factory.js","./channel-merger-node-renderer-factory-factory":"../node_modules/standardized-audio-context/build/es2019/types/channel-merger-node-renderer-factory-factory.js","./channel-splitter-node-constructor":"../node_modules/standardized-audio-context/build/es2019/types/channel-splitter-node-constructor.js","./channel-splitter-node-constructor-factory":"../node_modules/standardized-audio-context/build/es2019/types/channel-splitter-node-constructor-factory.js","./channel-splitter-node-renderer-factory":"../node_modules/standardized-audio-context/build/es2019/types/channel-splitter-node-renderer-factory.js","./channel-splitter-node-renderer-factory-factory":"../node_modules/standardized-audio-context/build/es2019/types/channel-splitter-node-renderer-factory-factory.js","./cache-test-result-factory":"../node_modules/standardized-audio-context/build/es2019/types/cache-test-result-factory.js","./cache-test-result-function":"../node_modules/standardized-audio-context/build/es2019/types/cache-test-result-function.js","./connect-audio-param-factory":"../node_modules/standardized-audio-context/build/es2019/types/connect-audio-param-factory.js","./connect-audio-param-function":"../node_modules/standardized-audio-context/build/es2019/types/connect-audio-param-function.js","./connect-multiple-outputs-factory":"../node_modules/standardized-audio-context/build/es2019/types/connect-multiple-outputs-factory.js","./connect-multiple-outputs-function":"../node_modules/standardized-audio-context/build/es2019/types/connect-multiple-outputs-function.js","./connect-native-audio-node-to-native-audio-node-function":"../node_modules/standardized-audio-context/build/es2019/types/connect-native-audio-node-to-native-audio-node-function.js","./connected-native-audio-buffer-source-node-factory":"../node_modules/standardized-audio-context/build/es2019/types/connected-native-audio-buffer-source-node-factory.js","./connected-native-audio-buffer-source-node-factory-factory":"../node_modules/standardized-audio-context/build/es2019/types/connected-native-audio-buffer-source-node-factory-factory.js","./constant-source-node-constructor":"../node_modules/standardized-audio-context/build/es2019/types/constant-source-node-constructor.js","./constant-source-node-constructor-factory":"../node_modules/standardized-audio-context/build/es2019/types/constant-source-node-constructor-factory.js","./constant-source-node-renderer":"../node_modules/standardized-audio-context/build/es2019/types/constant-source-node-renderer.js","./constant-source-node-renderer-factory":"../node_modules/standardized-audio-context/build/es2019/types/constant-source-node-renderer-factory.js","./constant-source-node-renderer-factory-factory":"../node_modules/standardized-audio-context/build/es2019/types/constant-source-node-renderer-factory-factory.js","./constructor":"../node_modules/standardized-audio-context/build/es2019/types/constructor.js","./context":"../node_modules/standardized-audio-context/build/es2019/types/context.js","./context-store":"../node_modules/standardized-audio-context/build/es2019/types/context-store.js","./convert-number-to-unsigned-long-factory":"../node_modules/standardized-audio-context/build/es2019/types/convert-number-to-unsigned-long-factory.js","./convert-number-to-unsigned-long-function":"../node_modules/standardized-audio-context/build/es2019/types/convert-number-to-unsigned-long-function.js","./convolver-node-constructor":"../node_modules/standardized-audio-context/build/es2019/types/convolver-node-constructor.js","./convolver-node-constructor-factory":"../node_modules/standardized-audio-context/build/es2019/types/convolver-node-constructor-factory.js","./convolver-node-renderer-factory":"../node_modules/standardized-audio-context/build/es2019/types/convolver-node-renderer-factory.js","./convolver-node-renderer-factory-factory":"../node_modules/standardized-audio-context/build/es2019/types/convolver-node-renderer-factory-factory.js","./create-native-offline-audio-context-factory":"../node_modules/standardized-audio-context/build/es2019/types/create-native-offline-audio-context-factory.js","./create-native-offline-audio-context-function":"../node_modules/standardized-audio-context/build/es2019/types/create-native-offline-audio-context-function.js","./cycle-counters":"../node_modules/standardized-audio-context/build/es2019/types/cycle-counters.js","./data-clone-error-factory":"../node_modules/standardized-audio-context/build/es2019/types/data-clone-error-factory.js","./decode-audio-data-factory":"../node_modules/standardized-audio-context/build/es2019/types/decode-audio-data-factory.js","./decode-audio-data-function":"../node_modules/standardized-audio-context/build/es2019/types/decode-audio-data-function.js","./decode-error-callback":"../node_modules/standardized-audio-context/build/es2019/types/decode-error-callback.js","./decode-success-callback":"../node_modules/standardized-audio-context/build/es2019/types/decode-success-callback.js","./decrement-cycle-counter-factory":"../node_modules/standardized-audio-context/build/es2019/types/decrement-cycle-counter-factory.js","./decrement-cycle-counter-function":"../node_modules/standardized-audio-context/build/es2019/types/decrement-cycle-counter-function.js","./delay-node-constructor":"../node_modules/standardized-audio-context/build/es2019/types/delay-node-constructor.js","./delay-node-constructor-factory":"../node_modules/standardized-audio-context/build/es2019/types/delay-node-constructor-factory.js","./delay-node-renderer-factory":"../node_modules/standardized-audio-context/build/es2019/types/delay-node-renderer-factory.js","./delay-node-renderer-factory-factory":"../node_modules/standardized-audio-context/build/es2019/types/delay-node-renderer-factory-factory.js","./delete-unrendered-audio-worklet-node-factory":"../node_modules/standardized-audio-context/build/es2019/types/delete-unrendered-audio-worklet-node-factory.js","./delete-unrendered-audio-worklet-node-function":"../node_modules/standardized-audio-context/build/es2019/types/delete-unrendered-audio-worklet-node-function.js","./detect-cycles-factory":"../node_modules/standardized-audio-context/build/es2019/types/detect-cycles-factory.js","./detect-cycles-function":"../node_modules/standardized-audio-context/build/es2019/types/detect-cycles-function.js","./disconnect-multiple-outputs-factory":"../node_modules/standardized-audio-context/build/es2019/types/disconnect-multiple-outputs-factory.js","./disconnect-multiple-outputs-function":"../node_modules/standardized-audio-context/build/es2019/types/disconnect-multiple-outputs-function.js","./disconnect-native-audio-node-from-native-audio-node-function":"../node_modules/standardized-audio-context/build/es2019/types/disconnect-native-audio-node-from-native-audio-node-function.js","./distance-model-type":"../node_modules/standardized-audio-context/build/es2019/types/distance-model-type.js","./dynamics-compressor-node-constructor":"../node_modules/standardized-audio-context/build/es2019/types/dynamics-compressor-node-constructor.js","./dynamics-compressor-node-constructor-factory":"../node_modules/standardized-audio-context/build/es2019/types/dynamics-compressor-node-constructor-factory.js","./dynamics-compressor-node-renderer-factory":"../node_modules/standardized-audio-context/build/es2019/types/dynamics-compressor-node-renderer-factory.js","./dynamics-compressor-node-renderer-factory-factory":"../node_modules/standardized-audio-context/build/es2019/types/dynamics-compressor-node-renderer-factory-factory.js","./encoding-error-factory":"../node_modules/standardized-audio-context/build/es2019/types/encoding-error-factory.js","./error-event-handler":"../node_modules/standardized-audio-context/build/es2019/types/error-event-handler.js","./evaluate-audio-worklet-global-scope-function":"../node_modules/standardized-audio-context/build/es2019/types/evaluate-audio-worklet-global-scope-function.js","./evaluate-source-factory":"../node_modules/standardized-audio-context/build/es2019/types/evaluate-source-factory.js","./evaluate-source-function":"../node_modules/standardized-audio-context/build/es2019/types/evaluate-source-function.js","./event-handler":"../node_modules/standardized-audio-context/build/es2019/types/event-handler.js","./event-target-constructor":"../node_modules/standardized-audio-context/build/es2019/types/event-target-constructor.js","./event-target-constructor-factory":"../node_modules/standardized-audio-context/build/es2019/types/event-target-constructor-factory.js","./expose-current-frame-and-current-time-factory":"../node_modules/standardized-audio-context/build/es2019/types/expose-current-frame-and-current-time-factory.js","./expose-current-frame-and-current-time-function":"../node_modules/standardized-audio-context/build/es2019/types/expose-current-frame-and-current-time-function.js","./fetch-source-factory":"../node_modules/standardized-audio-context/build/es2019/types/fetch-source-factory.js","./fetch-source-function":"../node_modules/standardized-audio-context/build/es2019/types/fetch-source-function.js","./gain-node-constructor":"../node_modules/standardized-audio-context/build/es2019/types/gain-node-constructor.js","./gain-node-constructor-factory":"../node_modules/standardized-audio-context/build/es2019/types/gain-node-constructor-factory.js","./gain-node-renderer-factory":"../node_modules/standardized-audio-context/build/es2019/types/gain-node-renderer-factory.js","./gain-node-renderer-factory-factory":"../node_modules/standardized-audio-context/build/es2019/types/gain-node-renderer-factory-factory.js","./get-audio-node-connections-function":"../node_modules/standardized-audio-context/build/es2019/types/get-audio-node-connections-function.js","./get-audio-node-renderer-factory":"../node_modules/standardized-audio-context/build/es2019/types/get-audio-node-renderer-factory.js","./get-audio-node-renderer-function":"../node_modules/standardized-audio-context/build/es2019/types/get-audio-node-renderer-function.js","./get-audio-param-connections-function":"../node_modules/standardized-audio-context/build/es2019/types/get-audio-param-connections-function.js","./get-audio-param-renderer-factory":"../node_modules/standardized-audio-context/build/es2019/types/get-audio-param-renderer-factory.js","./get-audio-param-renderer-function":"../node_modules/standardized-audio-context/build/es2019/types/get-audio-param-renderer-function.js","./get-backup-native-context-factory":"../node_modules/standardized-audio-context/build/es2019/types/get-backup-native-context-factory.js","./get-backup-native-context-function":"../node_modules/standardized-audio-context/build/es2019/types/get-backup-native-context-function.js","./get-native-audio-node-function":"../node_modules/standardized-audio-context/build/es2019/types/get-native-audio-node-function.js","./get-native-audio-param-function":"../node_modules/standardized-audio-context/build/es2019/types/get-native-audio-param-function.js","./get-native-context-function":"../node_modules/standardized-audio-context/build/es2019/types/get-native-context-function.js","./get-native-context-factory":"../node_modules/standardized-audio-context/build/es2019/types/get-native-context-factory.js","./get-unrendered-audio-worklet-nodes-factory":"../node_modules/standardized-audio-context/build/es2019/types/get-unrendered-audio-worklet-nodes-factory.js","./get-unrendered-audio-worklet-nodes-function":"../node_modules/standardized-audio-context/build/es2019/types/get-unrendered-audio-worklet-nodes-function.js","./get-value-for-key-function":"../node_modules/standardized-audio-context/build/es2019/types/get-value-for-key-function.js","./iir-filter-node-constructor":"../node_modules/standardized-audio-context/build/es2019/types/iir-filter-node-constructor.js","./iir-filter-node-constructor-factory":"../node_modules/standardized-audio-context/build/es2019/types/iir-filter-node-constructor-factory.js","./iir-filter-node-renderer-factory":"../node_modules/standardized-audio-context/build/es2019/types/iir-filter-node-renderer-factory.js","./iir-filter-node-renderer-factory-factory":"../node_modules/standardized-audio-context/build/es2019/types/iir-filter-node-renderer-factory-factory.js","./increment-cycle-counter-factory":"../node_modules/standardized-audio-context/build/es2019/types/increment-cycle-counter-factory.js","./increment-cycle-counter-factory-factory":"../node_modules/standardized-audio-context/build/es2019/types/increment-cycle-counter-factory-factory.js","./increment-cycle-counter-function":"../node_modules/standardized-audio-context/build/es2019/types/increment-cycle-counter-function.js","./index-size-error-factory":"../node_modules/standardized-audio-context/build/es2019/types/index-size-error-factory.js","./insert-element-in-set-function":"../node_modules/standardized-audio-context/build/es2019/types/insert-element-in-set-function.js","./internal-state-event-listener":"../node_modules/standardized-audio-context/build/es2019/types/internal-state-event-listener.js","./invalid-access-error-factory":"../node_modules/standardized-audio-context/build/es2019/types/invalid-access-error-factory.js","./invalid-state-error-factory":"../node_modules/standardized-audio-context/build/es2019/types/invalid-state-error-factory.js","./is-active-audio-node-function":"../node_modules/standardized-audio-context/build/es2019/types/is-active-audio-node-function.js","./is-any-audio-context-factory":"../node_modules/standardized-audio-context/build/es2019/types/is-any-audio-context-factory.js","./is-any-audio-context-function":"../node_modules/standardized-audio-context/build/es2019/types/is-any-audio-context-function.js","./is-any-audio-node-factory":"../node_modules/standardized-audio-context/build/es2019/types/is-any-audio-node-factory.js","./is-any-audio-node-function":"../node_modules/standardized-audio-context/build/es2019/types/is-any-audio-node-function.js","./is-any-audio-param-factory":"../node_modules/standardized-audio-context/build/es2019/types/is-any-audio-param-factory.js","./is-any-audio-param-function":"../node_modules/standardized-audio-context/build/es2019/types/is-any-audio-param-function.js","./is-any-offline-audio-context-factory":"../node_modules/standardized-audio-context/build/es2019/types/is-any-offline-audio-context-factory.js","./is-any-offline-audio-context-function":"../node_modules/standardized-audio-context/build/es2019/types/is-any-offline-audio-context-function.js","./is-dc-curve-function":"../node_modules/standardized-audio-context/build/es2019/types/is-dc-curve-function.js","./is-native-audio-context-factory":"../node_modules/standardized-audio-context/build/es2019/types/is-native-audio-context-factory.js","./is-native-audio-context-function":"../node_modules/standardized-audio-context/build/es2019/types/is-native-audio-context-function.js","./is-native-audio-node-factory":"../node_modules/standardized-audio-context/build/es2019/types/is-native-audio-node-factory.js","./is-native-audio-node-function":"../node_modules/standardized-audio-context/build/es2019/types/is-native-audio-node-function.js","./is-native-audio-param-factory":"../node_modules/standardized-audio-context/build/es2019/types/is-native-audio-param-factory.js","./is-native-audio-param-function":"../node_modules/standardized-audio-context/build/es2019/types/is-native-audio-param-function.js","./is-native-context-factory":"../node_modules/standardized-audio-context/build/es2019/types/is-native-context-factory.js","./is-native-context-function":"../node_modules/standardized-audio-context/build/es2019/types/is-native-context-function.js","./is-native-offline-audio-context-factory":"../node_modules/standardized-audio-context/build/es2019/types/is-native-offline-audio-context-factory.js","./is-native-offline-audio-context-function":"../node_modules/standardized-audio-context/build/es2019/types/is-native-offline-audio-context-function.js","./is-part-of-a-cycle-function":"../node_modules/standardized-audio-context/build/es2019/types/is-part-of-a-cycle-function.js","./is-secure-context-factory":"../node_modules/standardized-audio-context/build/es2019/types/is-secure-context-factory.js","./is-supported-promise-factory":"../node_modules/standardized-audio-context/build/es2019/types/is-supported-promise-factory.js","./media-element-audio-source-node-constructor":"../node_modules/standardized-audio-context/build/es2019/types/media-element-audio-source-node-constructor.js","./media-element-audio-source-node-constructor-factory":"../node_modules/standardized-audio-context/build/es2019/types/media-element-audio-source-node-constructor-factory.js","./media-stream-audio-destination-node-constructor":"../node_modules/standardized-audio-context/build/es2019/types/media-stream-audio-destination-node-constructor.js","./media-stream-audio-destination-node-constructor-factory":"../node_modules/standardized-audio-context/build/es2019/types/media-stream-audio-destination-node-constructor-factory.js","./media-stream-audio-source-node-constructor":"../node_modules/standardized-audio-context/build/es2019/types/media-stream-audio-source-node-constructor.js","./media-stream-audio-source-node-constructor-factory":"../node_modules/standardized-audio-context/build/es2019/types/media-stream-audio-source-node-constructor-factory.js","./media-stream-track-audio-source-node-constructor":"../node_modules/standardized-audio-context/build/es2019/types/media-stream-track-audio-source-node-constructor.js","./media-stream-track-audio-source-node-constructor-factory":"../node_modules/standardized-audio-context/build/es2019/types/media-stream-track-audio-source-node-constructor-factory.js","./minimal-audio-context-constructor":"../node_modules/standardized-audio-context/build/es2019/types/minimal-audio-context-constructor.js","./minimal-audio-context-constructor-factory":"../node_modules/standardized-audio-context/build/es2019/types/minimal-audio-context-constructor-factory.js","./minimal-base-audio-context-constructor":"../node_modules/standardized-audio-context/build/es2019/types/minimal-base-audio-context-constructor.js","./minimal-base-audio-context-constructor-factory":"../node_modules/standardized-audio-context/build/es2019/types/minimal-base-audio-context-constructor-factory.js","./minimal-offline-audio-context-constructor":"../node_modules/standardized-audio-context/build/es2019/types/minimal-offline-audio-context-constructor.js","./minimal-offline-audio-context-constructor-factory":"../node_modules/standardized-audio-context/build/es2019/types/minimal-offline-audio-context-constructor-factory.js","./monitor-connections-factory":"../node_modules/standardized-audio-context/build/es2019/types/monitor-connections-factory.js","./monitor-connections-function":"../node_modules/standardized-audio-context/build/es2019/types/monitor-connections-function.js","./native-analyser-node":"../node_modules/standardized-audio-context/build/es2019/types/native-analyser-node.js","./native-analyser-node-factory":"../node_modules/standardized-audio-context/build/es2019/types/native-analyser-node-factory.js","./native-analyser-node-factory-factory":"../node_modules/standardized-audio-context/build/es2019/types/native-analyser-node-factory-factory.js","./native-audio-buffer":"../node_modules/standardized-audio-context/build/es2019/types/native-audio-buffer.js","./native-audio-buffer-constructor":"../node_modules/standardized-audio-context/build/es2019/types/native-audio-buffer-constructor.js","./native-audio-buffer-constructor-factory":"../node_modules/standardized-audio-context/build/es2019/types/native-audio-buffer-constructor-factory.js","./native-audio-buffer-source-node":"../node_modules/standardized-audio-context/build/es2019/types/native-audio-buffer-source-node.js","./native-audio-buffer-source-node-factory":"../node_modules/standardized-audio-context/build/es2019/types/native-audio-buffer-source-node-factory.js","./native-audio-buffer-source-node-factory-factory":"../node_modules/standardized-audio-context/build/es2019/types/native-audio-buffer-source-node-factory-factory.js","./native-audio-context":"../node_modules/standardized-audio-context/build/es2019/types/native-audio-context.js","./native-audio-context-constructor":"../node_modules/standardized-audio-context/build/es2019/types/native-audio-context-constructor.js","./native-audio-context-constructor-factory":"../node_modules/standardized-audio-context/build/es2019/types/native-audio-context-constructor-factory.js","./native-audio-destination-node":"../node_modules/standardized-audio-context/build/es2019/types/native-audio-destination-node.js","./native-audio-destination-node-factory":"../node_modules/standardized-audio-context/build/es2019/types/native-audio-destination-node-factory.js","./native-audio-destination-node-factory-factory":"../node_modules/standardized-audio-context/build/es2019/types/native-audio-destination-node-factory-factory.js","./native-audio-listener":"../node_modules/standardized-audio-context/build/es2019/types/native-audio-listener.js","./native-audio-node":"../node_modules/standardized-audio-context/build/es2019/types/native-audio-node.js","./native-audio-node-factory":"../node_modules/standardized-audio-context/build/es2019/types/native-audio-node-factory.js","./native-audio-node-factory-factory":"../node_modules/standardized-audio-context/build/es2019/types/native-audio-node-factory-factory.js","./native-audio-param":"../node_modules/standardized-audio-context/build/es2019/types/native-audio-param.js","./native-audio-param-map":"../node_modules/standardized-audio-context/build/es2019/types/native-audio-param-map.js","./native-audio-worklet":"../node_modules/standardized-audio-context/build/es2019/types/native-audio-worklet.js","./native-audio-worklet-node":"../node_modules/standardized-audio-context/build/es2019/types/native-audio-worklet-node.js","./native-audio-worklet-node-constructor":"../node_modules/standardized-audio-context/build/es2019/types/native-audio-worklet-node-constructor.js","./native-audio-worklet-node-constructor-factory":"../node_modules/standardized-audio-context/build/es2019/types/native-audio-worklet-node-constructor-factory.js","./native-audio-worklet-node-factory":"../node_modules/standardized-audio-context/build/es2019/types/native-audio-worklet-node-factory.js","./native-audio-worklet-node-factory-factory":"../node_modules/standardized-audio-context/build/es2019/types/native-audio-worklet-node-factory-factory.js","./native-audio-worklet-node-faker-factory":"../node_modules/standardized-audio-context/build/es2019/types/native-audio-worklet-node-faker-factory.js","./native-audio-worklet-node-faker-factory-factory":"../node_modules/standardized-audio-context/build/es2019/types/native-audio-worklet-node-faker-factory-factory.js","./native-audio-worklet-node-options":"../node_modules/standardized-audio-context/build/es2019/types/native-audio-worklet-node-options.js","./native-biquad-filter-node":"../node_modules/standardized-audio-context/build/es2019/types/native-biquad-filter-node.js","./native-biquad-filter-node-factory":"../node_modules/standardized-audio-context/build/es2019/types/native-biquad-filter-node-factory.js","./native-biquad-filter-node-factory-factory":"../node_modules/standardized-audio-context/build/es2019/types/native-biquad-filter-node-factory-factory.js","./native-channel-merger-node":"../node_modules/standardized-audio-context/build/es2019/types/native-channel-merger-node.js","./native-channel-merger-node-factory":"../node_modules/standardized-audio-context/build/es2019/types/native-channel-merger-node-factory.js","./native-channel-merger-node-factory-factory":"../node_modules/standardized-audio-context/build/es2019/types/native-channel-merger-node-factory-factory.js","./native-channel-splitter-node":"../node_modules/standardized-audio-context/build/es2019/types/native-channel-splitter-node.js","./native-channel-splitter-node-factory":"../node_modules/standardized-audio-context/build/es2019/types/native-channel-splitter-node-factory.js","./native-channel-splitter-node-factory-factory":"../node_modules/standardized-audio-context/build/es2019/types/native-channel-splitter-node-factory-factory.js","./native-constant-source-node":"../node_modules/standardized-audio-context/build/es2019/types/native-constant-source-node.js","./native-constant-source-node-factory":"../node_modules/standardized-audio-context/build/es2019/types/native-constant-source-node-factory.js","./native-constant-source-node-factory-factory":"../node_modules/standardized-audio-context/build/es2019/types/native-constant-source-node-factory-factory.js","./native-constant-source-node-faker-factory":"../node_modules/standardized-audio-context/build/es2019/types/native-constant-source-node-faker-factory.js","./native-constant-source-node-faker-factory-factory":"../node_modules/standardized-audio-context/build/es2019/types/native-constant-source-node-faker-factory-factory.js","./native-context":"../node_modules/standardized-audio-context/build/es2019/types/native-context.js","./native-convolver-node":"../node_modules/standardized-audio-context/build/es2019/types/native-convolver-node.js","./native-convolver-node-factory":"../node_modules/standardized-audio-context/build/es2019/types/native-convolver-node-factory.js","./native-convolver-node-factory-factory":"../node_modules/standardized-audio-context/build/es2019/types/native-convolver-node-factory-factory.js","./native-convolver-node-faker-factory":"../node_modules/standardized-audio-context/build/es2019/types/native-convolver-node-faker-factory.js","./native-convolver-node-faker-factory-factory":"../node_modules/standardized-audio-context/build/es2019/types/native-convolver-node-faker-factory-factory.js","./native-delay-node-factory":"../node_modules/standardized-audio-context/build/es2019/types/native-delay-node-factory.js","./native-delay-node-factory-factory":"../node_modules/standardized-audio-context/build/es2019/types/native-delay-node-factory-factory.js","./native-delay-node":"../node_modules/standardized-audio-context/build/es2019/types/native-delay-node.js","./native-dynamics-compressor-node":"../node_modules/standardized-audio-context/build/es2019/types/native-dynamics-compressor-node.js","./native-dynamics-compressor-node-factory":"../node_modules/standardized-audio-context/build/es2019/types/native-dynamics-compressor-node-factory.js","./native-dynamics-compressor-node-factory-factory":"../node_modules/standardized-audio-context/build/es2019/types/native-dynamics-compressor-node-factory-factory.js","./native-event-target":"../node_modules/standardized-audio-context/build/es2019/types/native-event-target.js","./native-gain-node":"../node_modules/standardized-audio-context/build/es2019/types/native-gain-node.js","./native-gain-node-factory":"../node_modules/standardized-audio-context/build/es2019/types/native-gain-node-factory.js","./native-gain-node-factory-factory":"../node_modules/standardized-audio-context/build/es2019/types/native-gain-node-factory-factory.js","./native-iir-filter-node":"../node_modules/standardized-audio-context/build/es2019/types/native-iir-filter-node.js","./native-iir-filter-node-factory":"../node_modules/standardized-audio-context/build/es2019/types/native-iir-filter-node-factory.js","./native-iir-filter-node-factory-factory":"../node_modules/standardized-audio-context/build/es2019/types/native-iir-filter-node-factory-factory.js","./native-iir-filter-node-faker-factory":"../node_modules/standardized-audio-context/build/es2019/types/native-iir-filter-node-faker-factory.js","./native-iir-filter-node-faker-factory-factory":"../node_modules/standardized-audio-context/build/es2019/types/native-iir-filter-node-faker-factory-factory.js","./native-media-element-audio-source-node":"../node_modules/standardized-audio-context/build/es2019/types/native-media-element-audio-source-node.js","./native-media-element-audio-source-node-factory":"../node_modules/standardized-audio-context/build/es2019/types/native-media-element-audio-source-node-factory.js","./native-media-element-audio-source-node-factory-factory":"../node_modules/standardized-audio-context/build/es2019/types/native-media-element-audio-source-node-factory-factory.js","./native-media-stream-audio-destination-node":"../node_modules/standardized-audio-context/build/es2019/types/native-media-stream-audio-destination-node.js","./native-media-stream-audio-destination-node-factory":"../node_modules/standardized-audio-context/build/es2019/types/native-media-stream-audio-destination-node-factory.js","./native-media-stream-audio-destination-node-factory-factory":"../node_modules/standardized-audio-context/build/es2019/types/native-media-stream-audio-destination-node-factory-factory.js","./native-media-stream-audio-source-node":"../node_modules/standardized-audio-context/build/es2019/types/native-media-stream-audio-source-node.js","./native-media-stream-audio-source-node-factory":"../node_modules/standardized-audio-context/build/es2019/types/native-media-stream-audio-source-node-factory.js","./native-media-stream-audio-source-node-factory-factory":"../node_modules/standardized-audio-context/build/es2019/types/native-media-stream-audio-source-node-factory-factory.js","./native-media-stream-track-audio-source-node":"../node_modules/standardized-audio-context/build/es2019/types/native-media-stream-track-audio-source-node.js","./native-media-stream-track-audio-source-node-factory":"../node_modules/standardized-audio-context/build/es2019/types/native-media-stream-track-audio-source-node-factory.js","./native-media-stream-track-audio-source-node-factory-factory":"../node_modules/standardized-audio-context/build/es2019/types/native-media-stream-track-audio-source-node-factory-factory.js","./native-offline-audio-context":"../node_modules/standardized-audio-context/build/es2019/types/native-offline-audio-context.js","./native-offline-audio-context-constructor":"../node_modules/standardized-audio-context/build/es2019/types/native-offline-audio-context-constructor.js","./native-offline-audio-context-constructor-factory":"../node_modules/standardized-audio-context/build/es2019/types/native-offline-audio-context-constructor-factory.js","./native-oscillator-node":"../node_modules/standardized-audio-context/build/es2019/types/native-oscillator-node.js","./native-oscillator-node-factory":"../node_modules/standardized-audio-context/build/es2019/types/native-oscillator-node-factory.js","./native-oscillator-node-factory-factory":"../node_modules/standardized-audio-context/build/es2019/types/native-oscillator-node-factory-factory.js","./native-panner-node":"../node_modules/standardized-audio-context/build/es2019/types/native-panner-node.js","./native-panner-node-factory":"../node_modules/standardized-audio-context/build/es2019/types/native-panner-node-factory.js","./native-panner-node-factory-factory":"../node_modules/standardized-audio-context/build/es2019/types/native-panner-node-factory-factory.js","./native-panner-node-faker-factory":"../node_modules/standardized-audio-context/build/es2019/types/native-panner-node-faker-factory.js","./native-panner-node-faker-factory-factory":"../node_modules/standardized-audio-context/build/es2019/types/native-panner-node-faker-factory-factory.js","./native-periodic-wave":"../node_modules/standardized-audio-context/build/es2019/types/native-periodic-wave.js","./native-periodic-wave-factory":"../node_modules/standardized-audio-context/build/es2019/types/native-periodic-wave-factory.js","./native-periodic-wave-factory-factory":"../node_modules/standardized-audio-context/build/es2019/types/native-periodic-wave-factory-factory.js","./native-script-processor-node":"../node_modules/standardized-audio-context/build/es2019/types/native-script-processor-node.js","./native-script-processor-node-factory":"../node_modules/standardized-audio-context/build/es2019/types/native-script-processor-node-factory.js","./native-script-processor-node-factory-factory":"../node_modules/standardized-audio-context/build/es2019/types/native-script-processor-node-factory-factory.js","./native-stereo-panner-node":"../node_modules/standardized-audio-context/build/es2019/types/native-stereo-panner-node.js","./native-stereo-panner-node-factory":"../node_modules/standardized-audio-context/build/es2019/types/native-stereo-panner-node-factory.js","./native-stereo-panner-node-factory-factory":"../node_modules/standardized-audio-context/build/es2019/types/native-stereo-panner-node-factory-factory.js","./native-stereo-panner-node-faker-factory":"../node_modules/standardized-audio-context/build/es2019/types/native-stereo-panner-node-faker-factory.js","./native-stereo-panner-node-faker-factory-factory":"../node_modules/standardized-audio-context/build/es2019/types/native-stereo-panner-node-faker-factory-factory.js","./native-wave-shaper-node":"../node_modules/standardized-audio-context/build/es2019/types/native-wave-shaper-node.js","./native-wave-shaper-node-factory":"../node_modules/standardized-audio-context/build/es2019/types/native-wave-shaper-node-factory.js","./native-wave-shaper-node-factory-factory":"../node_modules/standardized-audio-context/build/es2019/types/native-wave-shaper-node-factory-factory.js","./native-wave-shaper-node-faker-factory":"../node_modules/standardized-audio-context/build/es2019/types/native-wave-shaper-node-faker-factory.js","./native-wave-shaper-node-faker-factory-factory":"../node_modules/standardized-audio-context/build/es2019/types/native-wave-shaper-node-faker-factory-factory.js","./not-supported-error-factory":"../node_modules/standardized-audio-context/build/es2019/types/not-supported-error-factory.js","./offline-audio-context-constructor-factory":"../node_modules/standardized-audio-context/build/es2019/types/offline-audio-context-constructor-factory.js","./oscillator-node-constructor":"../node_modules/standardized-audio-context/build/es2019/types/oscillator-node-constructor.js","./oscillator-node-constructor-factory":"../node_modules/standardized-audio-context/build/es2019/types/oscillator-node-constructor-factory.js","./oscillator-node-renderer":"../node_modules/standardized-audio-context/build/es2019/types/oscillator-node-renderer.js","./oscillator-node-renderer-factory":"../node_modules/standardized-audio-context/build/es2019/types/oscillator-node-renderer-factory.js","./oscillator-node-renderer-factory-factory":"../node_modules/standardized-audio-context/build/es2019/types/oscillator-node-renderer-factory-factory.js","./oscillator-type":"../node_modules/standardized-audio-context/build/es2019/types/oscillator-type.js","./output-connection":"../node_modules/standardized-audio-context/build/es2019/types/output-connection.js","./over-sample-type":"../node_modules/standardized-audio-context/build/es2019/types/over-sample-type.js","./overwrite-accessors-function":"../node_modules/standardized-audio-context/build/es2019/types/overwrite-accessors-function.js","./panner-node-constructor":"../node_modules/standardized-audio-context/build/es2019/types/panner-node-constructor.js","./panner-node-constructor-factory":"../node_modules/standardized-audio-context/build/es2019/types/panner-node-constructor-factory.js","./panner-node-renderer-factory":"../node_modules/standardized-audio-context/build/es2019/types/panner-node-renderer-factory.js","./panner-node-renderer-factory-factory":"../node_modules/standardized-audio-context/build/es2019/types/panner-node-renderer-factory-factory.js","./panning-model-type":"../node_modules/standardized-audio-context/build/es2019/types/panning-model-type.js","./passive-audio-node-input-connection":"../node_modules/standardized-audio-context/build/es2019/types/passive-audio-node-input-connection.js","./passive-audio-param-input-connection":"../node_modules/standardized-audio-context/build/es2019/types/passive-audio-param-input-connection.js","./periodic-wave-constructor":"../node_modules/standardized-audio-context/build/es2019/types/periodic-wave-constructor.js","./periodic-wave-constructor-factory":"../node_modules/standardized-audio-context/build/es2019/types/periodic-wave-constructor-factory.js","./render-automation-factory":"../node_modules/standardized-audio-context/build/es2019/types/render-automation-factory.js","./render-automation-function":"../node_modules/standardized-audio-context/build/es2019/types/render-automation-function.js","./render-inputs-of-audio-node-factory":"../node_modules/standardized-audio-context/build/es2019/types/render-inputs-of-audio-node-factory.js","./render-inputs-of-audio-node-function":"../node_modules/standardized-audio-context/build/es2019/types/render-inputs-of-audio-node-function.js","./render-inputs-of-audio-param-factory":"../node_modules/standardized-audio-context/build/es2019/types/render-inputs-of-audio-param-factory.js","./render-inputs-of-audio-param-function":"../node_modules/standardized-audio-context/build/es2019/types/render-inputs-of-audio-param-function.js","./render-native-offline-audio-context-factory":"../node_modules/standardized-audio-context/build/es2019/types/render-native-offline-audio-context-factory.js","./render-native-offline-audio-context-function":"../node_modules/standardized-audio-context/build/es2019/types/render-native-offline-audio-context-function.js","./start-rendering-factory":"../node_modules/standardized-audio-context/build/es2019/types/start-rendering-factory.js","./start-rendering-function":"../node_modules/standardized-audio-context/build/es2019/types/start-rendering-function.js","./stereo-panner-node-constructor":"../node_modules/standardized-audio-context/build/es2019/types/stereo-panner-node-constructor.js","./stereo-panner-node-constructor-factory":"../node_modules/standardized-audio-context/build/es2019/types/stereo-panner-node-constructor-factory.js","./stereo-panner-node-renderer-factory-factory":"../node_modules/standardized-audio-context/build/es2019/types/stereo-panner-node-renderer-factory-factory.js","./stereo-panner-node-renderer-factory":"../node_modules/standardized-audio-context/build/es2019/types/stereo-panner-node-renderer-factory.js","./test-audio-buffer-copy-channel-methods-subarray-support-factory":"../node_modules/standardized-audio-context/build/es2019/types/test-audio-buffer-copy-channel-methods-subarray-support-factory.js","./test-audio-buffer-constructor-support-factory":"../node_modules/standardized-audio-context/build/es2019/types/test-audio-buffer-constructor-support-factory.js","./test-audio-buffer-source-node-start-method-consecutive-calls-support-factory":"../node_modules/standardized-audio-context/build/es2019/types/test-audio-buffer-source-node-start-method-consecutive-calls-support-factory.js","./test-audio-buffer-source-node-start-method-duration-parameter-support-factory":"../node_modules/standardized-audio-context/build/es2019/types/test-audio-buffer-source-node-start-method-duration-parameter-support-factory.js","./test-audio-buffer-source-node-start-method-offset-clamping-support-factory":"../node_modules/standardized-audio-context/build/es2019/types/test-audio-buffer-source-node-start-method-offset-clamping-support-factory.js","./test-audio-buffer-source-node-stop-method-nullified-buffer-support-factory":"../node_modules/standardized-audio-context/build/es2019/types/test-audio-buffer-source-node-stop-method-nullified-buffer-support-factory.js","./test-audio-context-close-method-support-factory":"../node_modules/standardized-audio-context/build/es2019/types/test-audio-context-close-method-support-factory.js","./test-audio-context-decode-audio-data-method-type-error-support-factory":"../node_modules/standardized-audio-context/build/es2019/types/test-audio-context-decode-audio-data-method-type-error-support-factory.js","./test-audio-context-options-support-factory":"../node_modules/standardized-audio-context/build/es2019/types/test-audio-context-options-support-factory.js","./test-audio-node-connect-method-support-factory":"../node_modules/standardized-audio-context/build/es2019/types/test-audio-node-connect-method-support-factory.js","./test-audio-scheduled-source-node-start-method-consecutive-calls-support-factory":"../node_modules/standardized-audio-context/build/es2019/types/test-audio-scheduled-source-node-start-method-consecutive-calls-support-factory.js","./test-audio-scheduled-source-node-stop-method-consecutive-calls-support-factory":"../node_modules/standardized-audio-context/build/es2019/types/test-audio-scheduled-source-node-stop-method-consecutive-calls-support-factory.js","./test-audio-scheduled-source-node-stop-method-negative-parameters-support-factory":"../node_modules/standardized-audio-context/build/es2019/types/test-audio-scheduled-source-node-stop-method-negative-parameters-support-factory.js","./test-audio-worklet-processor-no-outputs-support-factory":"../node_modules/standardized-audio-context/build/es2019/types/test-audio-worklet-processor-no-outputs-support-factory.js","./test-channel-merger-node-channel-count-support-factory":"../node_modules/standardized-audio-context/build/es2019/types/test-channel-merger-node-channel-count-support-factory.js","./test-constant-source-node-accurate-scheduling-support-factory":"../node_modules/standardized-audio-context/build/es2019/types/test-constant-source-node-accurate-scheduling-support-factory.js","./test-convolver-node-buffer-reassignability-support-factory":"../node_modules/standardized-audio-context/build/es2019/types/test-convolver-node-buffer-reassignability-support-factory.js","./test-is-secure-context-support-factory":"../node_modules/standardized-audio-context/build/es2019/types/test-is-secure-context-support-factory.js","./test-media-stream-audio-source-node-media-stream-without-audio-track-support":"../node_modules/standardized-audio-context/build/es2019/types/test-media-stream-audio-source-node-media-stream-without-audio-track-support.js","./test-offline-audio-context-current-time-support-factory":"../node_modules/standardized-audio-context/build/es2019/types/test-offline-audio-context-current-time-support-factory.js","./test-stereo-panner-node-default-value-support-factory":"../node_modules/standardized-audio-context/build/es2019/types/test-stereo-panner-node-default-value-support-factory.js","./typed-array":"../node_modules/standardized-audio-context/build/es2019/types/typed-array.js","./unknown-error-factory":"../node_modules/standardized-audio-context/build/es2019/types/unknown-error-factory.js","./unrendered-audio-worklet-node-store":"../node_modules/standardized-audio-context/build/es2019/types/unrendered-audio-worklet-node-store.js","./unrendered-audio-worklet-nodes":"../node_modules/standardized-audio-context/build/es2019/types/unrendered-audio-worklet-nodes.js","./wave-shaper-node-constructor":"../node_modules/standardized-audio-context/build/es2019/types/wave-shaper-node-constructor.js","./wave-shaper-node-constructor-factory":"../node_modules/standardized-audio-context/build/es2019/types/wave-shaper-node-constructor-factory.js","./wave-shaper-node-renderer-factory-factory":"../node_modules/standardized-audio-context/build/es2019/types/wave-shaper-node-renderer-factory-factory.js","./wave-shaper-node-renderer-factory":"../node_modules/standardized-audio-context/build/es2019/types/wave-shaper-node-renderer-factory.js","./window-factory":"../node_modules/standardized-audio-context/build/es2019/types/window-factory.js","./wrap-audio-buffer-copy-channel-methods-factory":"../node_modules/standardized-audio-context/build/es2019/types/wrap-audio-buffer-copy-channel-methods-factory.js","./wrap-audio-buffer-copy-channel-methods-function":"../node_modules/standardized-audio-context/build/es2019/types/wrap-audio-buffer-copy-channel-methods-function.js","./wrap-audio-buffer-copy-channel-methods-out-of-bounds-factory":"../node_modules/standardized-audio-context/build/es2019/types/wrap-audio-buffer-copy-channel-methods-out-of-bounds-factory.js","./wrap-audio-buffer-copy-channel-methods-out-of-bounds-function":"../node_modules/standardized-audio-context/build/es2019/types/wrap-audio-buffer-copy-channel-methods-out-of-bounds-function.js","./wrap-audio-buffer-source-node-start-method-offset-clamping-function":"../node_modules/standardized-audio-context/build/es2019/types/wrap-audio-buffer-source-node-start-method-offset-clamping-function.js","./wrap-audio-buffer-source-node-stop-method-nullified-buffer-factory":"../node_modules/standardized-audio-context/build/es2019/types/wrap-audio-buffer-source-node-stop-method-nullified-buffer-factory.js","./wrap-audio-buffer-source-node-stop-method-nullified-buffer-function":"../node_modules/standardized-audio-context/build/es2019/types/wrap-audio-buffer-source-node-stop-method-nullified-buffer-function.js","./wrap-audio-scheduled-source-node-stop-method-consecutive-calls-factory":"../node_modules/standardized-audio-context/build/es2019/types/wrap-audio-scheduled-source-node-stop-method-consecutive-calls-factory.js","./wrap-audio-scheduled-source-node-stop-method-consecutive-calls-function":"../node_modules/standardized-audio-context/build/es2019/types/wrap-audio-scheduled-source-node-stop-method-consecutive-calls-function.js","./wrap-channel-merger-node-factory":"../node_modules/standardized-audio-context/build/es2019/types/wrap-channel-merger-node-factory.js","./wrap-channel-merger-node-function":"../node_modules/standardized-audio-context/build/es2019/types/wrap-channel-merger-node-function.js","./wrap-event-listener-function":"../node_modules/standardized-audio-context/build/es2019/types/wrap-event-listener-function.js"}],"../node_modules/standardized-audio-context/build/es2019/module.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
var _exportNames = {
  AnalyserNode: true,
  AudioBuffer: true,
  AudioBufferSourceNode: true,
  addAudioWorkletModule: true,
  decodeAudioData: true,
  AudioContext: true,
  AudioWorkletNode: true,
  BiquadFilterNode: true,
  ChannelMergerNode: true,
  ChannelSplitterNode: true,
  ConvolverNode: true,
  ConstantSourceNode: true,
  DelayNode: true,
  DynamicsCompressorNode: true,
  GainNode: true,
  IIRFilterNode: true,
  MediaElementAudioSourceNode: true,
  MediaStreamAudioDestinationNode: true,
  MediaStreamAudioSourceNode: true,
  MediaStreamTrackAudioSourceNode: true,
  MinimalAudioContext: true,
  MinimalOfflineAudioContext: true,
  OfflineAudioContext: true,
  OscillatorNode: true,
  PannerNode: true,
  PeriodicWave: true,
  StereoPannerNode: true,
  WaveShaperNode: true,
  isAnyAudioContext: true,
  isAnyAudioNode: true,
  isAnyAudioParam: true,
  isAnyOfflineAudioContext: true,
  isSupported: true
};
exports.isSupported = exports.isAnyOfflineAudioContext = exports.isAnyAudioParam = exports.isAnyAudioNode = exports.isAnyAudioContext = exports.WaveShaperNode = exports.StereoPannerNode = exports.PeriodicWave = exports.PannerNode = exports.OscillatorNode = exports.OfflineAudioContext = exports.MinimalOfflineAudioContext = exports.MinimalAudioContext = exports.MediaStreamTrackAudioSourceNode = exports.MediaStreamAudioSourceNode = exports.MediaStreamAudioDestinationNode = exports.MediaElementAudioSourceNode = exports.IIRFilterNode = exports.GainNode = exports.DynamicsCompressorNode = exports.DelayNode = exports.ConstantSourceNode = exports.ConvolverNode = exports.ChannelSplitterNode = exports.ChannelMergerNode = exports.BiquadFilterNode = exports.AudioWorkletNode = exports.AudioContext = exports.decodeAudioData = exports.addAudioWorkletModule = exports.AudioBufferSourceNode = exports.AudioBuffer = exports.AnalyserNode = void 0;

var _automationEvents = require("automation-events");

var _abortError = require("./factories/abort-error");

var _addAudioNodeConnections = require("./factories/add-audio-node-connections");

var _addAudioParamConnections = require("./factories/add-audio-param-connections");

var _addAudioWorkletModule = require("./factories/add-audio-worklet-module");

var _addSilentConnection = require("./factories/add-silent-connection");

var _addUnrenderedAudioWorkletNode = require("./factories/add-unrendered-audio-worklet-node");

var _analyserNodeConstructor = require("./factories/analyser-node-constructor");

var _analyserNodeRendererFactory = require("./factories/analyser-node-renderer-factory");

var _audioBufferConstructor = require("./factories/audio-buffer-constructor");

var _audioBufferSourceNodeConstructor = require("./factories/audio-buffer-source-node-constructor");

var _audioBufferSourceNodeRendererFactory = require("./factories/audio-buffer-source-node-renderer-factory");

var _audioContextConstructor = require("./factories/audio-context-constructor");

var _audioDestinationNodeConstructor = require("./factories/audio-destination-node-constructor");

var _audioDestinationNodeRendererFactory = require("./factories/audio-destination-node-renderer-factory");

var _audioListenerFactory = require("./factories/audio-listener-factory");

var _audioNodeConstructor = require("./factories/audio-node-constructor");

var _audioParamFactory = require("./factories/audio-param-factory");

var _audioParamRenderer = require("./factories/audio-param-renderer");

var _audioWorkletNodeConstructor = require("./factories/audio-worklet-node-constructor");

var _audioWorkletNodeRendererFactory = require("./factories/audio-worklet-node-renderer-factory");

var _baseAudioContextConstructor = require("./factories/base-audio-context-constructor");

var _biquadFilterNodeConstructor = require("./factories/biquad-filter-node-constructor");

var _biquadFilterNodeRendererFactory = require("./factories/biquad-filter-node-renderer-factory");

var _cacheTestResult = require("./factories/cache-test-result");

var _channelMergerNodeConstructor = require("./factories/channel-merger-node-constructor");

var _channelMergerNodeRendererFactory = require("./factories/channel-merger-node-renderer-factory");

var _channelSplitterNodeConstructor = require("./factories/channel-splitter-node-constructor");

var _channelSplitterNodeRendererFactory = require("./factories/channel-splitter-node-renderer-factory");

var _connectAudioParam = require("./factories/connect-audio-param");

var _connectMultipleOutputs = require("./factories/connect-multiple-outputs");

var _connectedNativeAudioBufferSourceNodeFactory = require("./factories/connected-native-audio-buffer-source-node-factory");

var _constantSourceNodeConstructor = require("./factories/constant-source-node-constructor");

var _constantSourceNodeRendererFactory = require("./factories/constant-source-node-renderer-factory");

var _convertNumberToUnsignedLong = require("./factories/convert-number-to-unsigned-long");

var _convolverNodeConstructor = require("./factories/convolver-node-constructor");

var _convolverNodeRendererFactory = require("./factories/convolver-node-renderer-factory");

var _createNativeOfflineAudioContext = require("./factories/create-native-offline-audio-context");

var _dataCloneError = require("./factories/data-clone-error");

var _decodeAudioData = require("./factories/decode-audio-data");

var _decrementCycleCounter = require("./factories/decrement-cycle-counter");

var _delayNodeConstructor = require("./factories/delay-node-constructor");

var _delayNodeRendererFactory = require("./factories/delay-node-renderer-factory");

var _deleteUnrenderedAudioWorkletNode = require("./factories/delete-unrendered-audio-worklet-node");

var _detectCycles = require("./factories/detect-cycles");

var _disconnectMultipleOutputs = require("./factories/disconnect-multiple-outputs");

var _dynamicsCompressorNodeConstructor = require("./factories/dynamics-compressor-node-constructor");

var _dynamicsCompressorNodeRendererFactory = require("./factories/dynamics-compressor-node-renderer-factory");

var _encodingError = require("./factories/encoding-error");

var _evaluateSource = require("./factories/evaluate-source");

var _eventTargetConstructor = require("./factories/event-target-constructor");

var _exposeCurrentFrameAndCurrentTime = require("./factories/expose-current-frame-and-current-time");

var _fetchSource = require("./factories/fetch-source");

var _gainNodeConstructor = require("./factories/gain-node-constructor");

var _gainNodeRendererFactory = require("./factories/gain-node-renderer-factory");

var _getAudioNodeRenderer = require("./factories/get-audio-node-renderer");

var _getAudioParamRenderer = require("./factories/get-audio-param-renderer");

var _getBackupNativeContext = require("./factories/get-backup-native-context");

var _getNativeContext = require("./factories/get-native-context");

var _getUnrenderedAudioWorkletNodes = require("./factories/get-unrendered-audio-worklet-nodes");

var _iirFilterNodeConstructor = require("./factories/iir-filter-node-constructor");

var _iirFilterNodeRendererFactory = require("./factories/iir-filter-node-renderer-factory");

var _incrementCycleCounterFactory = require("./factories/increment-cycle-counter-factory");

var _indexSizeError = require("./factories/index-size-error");

var _invalidAccessError = require("./factories/invalid-access-error");

var _invalidStateError = require("./factories/invalid-state-error");

var _isAnyAudioContext = require("./factories/is-any-audio-context");

var _isAnyAudioNode = require("./factories/is-any-audio-node");

var _isAnyAudioParam = require("./factories/is-any-audio-param");

var _isAnyOfflineAudioContext = require("./factories/is-any-offline-audio-context");

var _isNativeAudioContext = require("./factories/is-native-audio-context");

var _isNativeAudioNode = require("./factories/is-native-audio-node");

var _isNativeAudioParam = require("./factories/is-native-audio-param");

var _isNativeContext = require("./factories/is-native-context");

var _isNativeOfflineAudioContext = require("./factories/is-native-offline-audio-context");

var _isSecureContext = require("./factories/is-secure-context");

var _isSupportedPromise = require("./factories/is-supported-promise");

var _mediaElementAudioSourceNodeConstructor = require("./factories/media-element-audio-source-node-constructor");

var _mediaStreamAudioDestinationNodeConstructor = require("./factories/media-stream-audio-destination-node-constructor");

var _mediaStreamAudioSourceNodeConstructor = require("./factories/media-stream-audio-source-node-constructor");

var _mediaStreamTrackAudioSourceNodeConstructor = require("./factories/media-stream-track-audio-source-node-constructor");

var _minimalAudioContextConstructor = require("./factories/minimal-audio-context-constructor");

var _minimalBaseAudioContextConstructor = require("./factories/minimal-base-audio-context-constructor");

var _minimalOfflineAudioContextConstructor = require("./factories/minimal-offline-audio-context-constructor");

var _monitorConnections = require("./factories/monitor-connections");

var _nativeAnalyserNodeFactory = require("./factories/native-analyser-node-factory");

var _nativeAudioBufferConstructor = require("./factories/native-audio-buffer-constructor");

var _nativeAudioBufferSourceNodeFactory = require("./factories/native-audio-buffer-source-node-factory");

var _nativeAudioContextConstructor = require("./factories/native-audio-context-constructor");

var _nativeAudioDestinationNode = require("./factories/native-audio-destination-node");

var _nativeAudioNodeFactory = require("./factories/native-audio-node-factory");

var _nativeAudioWorkletNodeConstructor = require("./factories/native-audio-worklet-node-constructor");

var _nativeAudioWorkletNodeFactory = require("./factories/native-audio-worklet-node-factory");

var _nativeAudioWorkletNodeFakerFactory = require("./factories/native-audio-worklet-node-faker-factory");

var _nativeBiquadFilterNodeFactory = require("./factories/native-biquad-filter-node-factory");

var _nativeChannelMergerNodeFactory = require("./factories/native-channel-merger-node-factory");

var _nativeChannelSplitterNodeFactory = require("./factories/native-channel-splitter-node-factory");

var _nativeConstantSourceNodeFactory = require("./factories/native-constant-source-node-factory");

var _nativeConstantSourceNodeFakerFactory = require("./factories/native-constant-source-node-faker-factory");

var _nativeConvolverNodeFactory = require("./factories/native-convolver-node-factory");

var _nativeConvolverNodeFakerFactory = require("./factories/native-convolver-node-faker-factory");

var _nativeDelayNodeFactory = require("./factories/native-delay-node-factory");

var _nativeDynamicsCompressorNodeFactory = require("./factories/native-dynamics-compressor-node-factory");

var _nativeGainNodeFactory = require("./factories/native-gain-node-factory");

var _nativeIirFilterNodeFactory = require("./factories/native-iir-filter-node-factory");

var _nativeIirFilterNodeFakerFactory = require("./factories/native-iir-filter-node-faker-factory");

var _nativeMediaElementAudioSourceNodeFactory = require("./factories/native-media-element-audio-source-node-factory");

var _nativeMediaStreamAudioDestinationNodeFactory = require("./factories/native-media-stream-audio-destination-node-factory");

var _nativeMediaStreamAudioSourceNodeFactory = require("./factories/native-media-stream-audio-source-node-factory");

var _nativeMediaStreamTrackAudioSourceNodeFactory = require("./factories/native-media-stream-track-audio-source-node-factory");

var _nativeOfflineAudioContextConstructor = require("./factories/native-offline-audio-context-constructor");

var _nativeOscillatorNodeFactory = require("./factories/native-oscillator-node-factory");

var _nativePannerNodeFactory = require("./factories/native-panner-node-factory");

var _nativePannerNodeFakerFactory = require("./factories/native-panner-node-faker-factory");

var _nativePeriodicWaveFactory = require("./factories/native-periodic-wave-factory");

var _nativeScriptProcessorNodeFactory = require("./factories/native-script-processor-node-factory");

var _nativeStereoPannerNodeFactory = require("./factories/native-stereo-panner-node-factory");

var _nativeStereoPannerNodeFakerFactory = require("./factories/native-stereo-panner-node-faker-factory");

var _nativeWaveShaperNodeFactory = require("./factories/native-wave-shaper-node-factory");

var _nativeWaveShaperNodeFakerFactory = require("./factories/native-wave-shaper-node-faker-factory");

var _notSupportedError = require("./factories/not-supported-error");

var _offlineAudioContextConstructor = require("./factories/offline-audio-context-constructor");

var _oscillatorNodeConstructor = require("./factories/oscillator-node-constructor");

var _oscillatorNodeRendererFactory = require("./factories/oscillator-node-renderer-factory");

var _pannerNodeConstructor = require("./factories/panner-node-constructor");

var _pannerNodeRendererFactory = require("./factories/panner-node-renderer-factory");

var _periodicWaveConstructor = require("./factories/periodic-wave-constructor");

var _renderAutomation = require("./factories/render-automation");

var _renderInputsOfAudioNode = require("./factories/render-inputs-of-audio-node");

var _renderInputsOfAudioParam = require("./factories/render-inputs-of-audio-param");

var _renderNativeOfflineAudioContext = require("./factories/render-native-offline-audio-context");

var _startRendering = require("./factories/start-rendering");

var _stereoPannerNodeConstructor = require("./factories/stereo-panner-node-constructor");

var _stereoPannerNodeRendererFactory = require("./factories/stereo-panner-node-renderer-factory");

var _testAudioBufferConstructorSupport = require("./factories/test-audio-buffer-constructor-support");

var _testAudioBufferCopyChannelMethodsSubarraySupport = require("./factories/test-audio-buffer-copy-channel-methods-subarray-support");

var _testAudioBufferSourceNodeStartMethodConsecutiveCallsSupport = require("./factories/test-audio-buffer-source-node-start-method-consecutive-calls-support");

var _testAudioBufferSourceNodeStartMethodDurationParameterSupport = require("./factories/test-audio-buffer-source-node-start-method-duration-parameter-support");

var _testAudioBufferSourceNodeStartMethodOffsetClampingSupport = require("./factories/test-audio-buffer-source-node-start-method-offset-clamping-support");

var _testAudioBufferSourceNodeStopMethodNullifiedBufferSupport = require("./factories/test-audio-buffer-source-node-stop-method-nullified-buffer-support");

var _testAudioContextCloseMethodSupport = require("./factories/test-audio-context-close-method-support");

var _testAudioContextDecodeAudioDataMethodTypeErrorSupport = require("./factories/test-audio-context-decode-audio-data-method-type-error-support");

var _testAudioContextOptionsSupport = require("./factories/test-audio-context-options-support");

var _testAudioNodeConnectMethodSupport = require("./factories/test-audio-node-connect-method-support");

var _testAudioScheduledSourceNodeStartMethodNegativeParametersSupport = require("./factories/test-audio-scheduled-source-node-start-method-negative-parameters-support");

var _testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport = require("./factories/test-audio-scheduled-source-node-stop-method-consecutive-calls-support");

var _testAudioScheduledSourceNodeStopMethodNegativeParametersSupport = require("./factories/test-audio-scheduled-source-node-stop-method-negative-parameters-support");

var _testAudioWorkletProcessorNoOutputsSupport = require("./factories/test-audio-worklet-processor-no-outputs-support");

var _testChannelMergerNodeChannelCountSupport = require("./factories/test-channel-merger-node-channel-count-support");

var _testConstantSourceNodeAccurateSchedulingSupport = require("./factories/test-constant-source-node-accurate-scheduling-support");

var _testConvolverNodeBufferReassignabilitySupport = require("./factories/test-convolver-node-buffer-reassignability-support");

var _testIsSecureContextSupport = require("./factories/test-is-secure-context-support");

var _testMediaStreamAudioSourceNodeMediaStreamWithoutAudioTrackSupport = require("./factories/test-media-stream-audio-source-node-media-stream-without-audio-track-support");

var _testOfflineAudioContextCurrentTimeSupport = require("./factories/test-offline-audio-context-current-time-support");

var _testStereoPannerNodeDefaultValueSupport = require("./factories/test-stereo-panner-node-default-value-support");

var _unknownError = require("./factories/unknown-error");

var _waveShaperNodeConstructor = require("./factories/wave-shaper-node-constructor");

var _waveShaperNodeRendererFactory = require("./factories/wave-shaper-node-renderer-factory");

var _window = require("./factories/window");

var _wrapAudioBufferCopyChannelMethods = require("./factories/wrap-audio-buffer-copy-channel-methods");

var _wrapAudioBufferCopyChannelMethodsOutOfBounds = require("./factories/wrap-audio-buffer-copy-channel-methods-out-of-bounds");

var _wrapAudioBufferSourceNodeStopMethodNullifiedBuffer = require("./factories/wrap-audio-buffer-source-node-stop-method-nullified-buffer");

var _wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls = require("./factories/wrap-audio-scheduled-source-node-stop-method-consecutive-calls");

var _wrapChannelMergerNode = require("./factories/wrap-channel-merger-node");

var _globals = require("./globals");

var _connectNativeAudioNodeToNativeAudioNode = require("./helpers/connect-native-audio-node-to-native-audio-node");

var _disconnectNativeAudioNodeFromNativeAudioNode = require("./helpers/disconnect-native-audio-node-from-native-audio-node");

var _getAudioNodeConnections = require("./helpers/get-audio-node-connections");

var _getAudioParamConnections = require("./helpers/get-audio-param-connections");

var _getNativeAudioNode = require("./helpers/get-native-audio-node");

var _getNativeAudioParam = require("./helpers/get-native-audio-param");

var _getValueForKey = require("./helpers/get-value-for-key");

var _insertElementInSet = require("./helpers/insert-element-in-set");

var _isActiveAudioNode = require("./helpers/is-active-audio-node");

var _isDcCurve = require("./helpers/is-dc-curve");

var _isPartOfACycle = require("./helpers/is-part-of-a-cycle");

var _overwriteAccessors = require("./helpers/overwrite-accessors");

var _testAudioBufferCopyChannelMethodsOutOfBoundsSupport = require("./helpers/test-audio-buffer-copy-channel-methods-out-of-bounds-support");

var _testPromiseSupport = require("./helpers/test-promise-support");

var _testTransferablesSupport = require("./helpers/test-transferables-support");

var _wrapAudioBufferSourceNodeStartMethodOffsetClamping = require("./helpers/wrap-audio-buffer-source-node-start-method-offset-clamping");

var _wrapEventListener = require("./helpers/wrap-event-listener");

var _index = require("./interfaces/index");

Object.keys(_index).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index[key];
    }
  });
});

var _index2 = require("./types/index");

Object.keys(_index2).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index2[key];
    }
  });
});

/*
 * @todo Explicitly referencing the barrel file seems to be necessary when enabling the
 * isolatedModules compiler option.
 */
const cacheTestResult = (0, _cacheTestResult.createCacheTestResult)(new Map(), new WeakMap());
const window = (0, _window.createWindow)();
const nativeOfflineAudioContextConstructor = (0, _nativeOfflineAudioContextConstructor.createNativeOfflineAudioContextConstructor)(window);
const isNativeOfflineAudioContext = (0, _isNativeOfflineAudioContext.createIsNativeOfflineAudioContext)(nativeOfflineAudioContextConstructor);
const nativeAudioContextConstructor = (0, _nativeAudioContextConstructor.createNativeAudioContextConstructor)(window);
const getBackupNativeContext = (0, _getBackupNativeContext.createGetBackupNativeContext)(isNativeOfflineAudioContext, nativeAudioContextConstructor, nativeOfflineAudioContextConstructor);
const createNativeAudioNode = (0, _nativeAudioNodeFactory.createNativeAudioNodeFactory)(getBackupNativeContext);
const createNativeAnalyserNode = (0, _nativeAnalyserNodeFactory.createNativeAnalyserNodeFactory)(cacheTestResult, _indexSizeError.createIndexSizeError, createNativeAudioNode);
const getAudioNodeRenderer = (0, _getAudioNodeRenderer.createGetAudioNodeRenderer)(_getAudioNodeConnections.getAudioNodeConnections);
const renderInputsOfAudioNode = (0, _renderInputsOfAudioNode.createRenderInputsOfAudioNode)(_getAudioNodeConnections.getAudioNodeConnections, getAudioNodeRenderer, _isPartOfACycle.isPartOfACycle);
const createAnalyserNodeRenderer = (0, _analyserNodeRendererFactory.createAnalyserNodeRendererFactory)(createNativeAnalyserNode, _getNativeAudioNode.getNativeAudioNode, renderInputsOfAudioNode);
const auxiliaryGainNodeStore = new WeakMap();
const getNativeContext = (0, _getNativeContext.createGetNativeContext)(_globals.CONTEXT_STORE);
const audioParamAudioNodeStore = new WeakMap();
const eventTargetConstructor = (0, _eventTargetConstructor.createEventTargetConstructor)(_wrapEventListener.wrapEventListener);
const isNativeAudioContext = (0, _isNativeAudioContext.createIsNativeAudioContext)(nativeAudioContextConstructor);
const isNativeAudioNode = (0, _isNativeAudioNode.createIsNativeAudioNode)(window);
const isNativeAudioParam = (0, _isNativeAudioParam.createIsNativeAudioParam)(window);
const audioNodeConstructor = (0, _audioNodeConstructor.createAudioNodeConstructor)((0, _addAudioNodeConnections.createAddAudioNodeConnections)(_globals.AUDIO_NODE_CONNECTIONS_STORE), auxiliaryGainNodeStore, cacheTestResult, (0, _incrementCycleCounterFactory.createIncrementCycleCounterFactory)(_globals.CYCLE_COUNTERS, _disconnectNativeAudioNodeFromNativeAudioNode.disconnectNativeAudioNodeFromNativeAudioNode, _getAudioNodeConnections.getAudioNodeConnections, _getNativeAudioNode.getNativeAudioNode, _getNativeAudioParam.getNativeAudioParam, _isActiveAudioNode.isActiveAudioNode), _indexSizeError.createIndexSizeError, _invalidAccessError.createInvalidAccessError, _notSupportedError.createNotSupportedError, (0, _decrementCycleCounter.createDecrementCycleCounter)(_connectNativeAudioNodeToNativeAudioNode.connectNativeAudioNodeToNativeAudioNode, _globals.CYCLE_COUNTERS, _getAudioNodeConnections.getAudioNodeConnections, _getNativeAudioNode.getNativeAudioNode, _getNativeAudioParam.getNativeAudioParam, getNativeContext, _isActiveAudioNode.isActiveAudioNode, isNativeOfflineAudioContext), (0, _detectCycles.createDetectCycles)(audioParamAudioNodeStore, _getAudioNodeConnections.getAudioNodeConnections, _getValueForKey.getValueForKey), eventTargetConstructor, getNativeContext, isNativeAudioContext, isNativeAudioNode, isNativeAudioParam, isNativeOfflineAudioContext);
const analyserNodeConstructor = (0, _analyserNodeConstructor.createAnalyserNodeConstructor)(audioNodeConstructor, createAnalyserNodeRenderer, _indexSizeError.createIndexSizeError, createNativeAnalyserNode, getNativeContext, isNativeOfflineAudioContext);
exports.AnalyserNode = analyserNodeConstructor;
const audioBufferStore = new WeakSet();
const nativeAudioBufferConstructor = (0, _nativeAudioBufferConstructor.createNativeAudioBufferConstructor)(window);
const convertNumberToUnsignedLong = (0, _convertNumberToUnsignedLong.createConvertNumberToUnsignedLong)(new Uint32Array(1));
const wrapAudioBufferCopyChannelMethods = (0, _wrapAudioBufferCopyChannelMethods.createWrapAudioBufferCopyChannelMethods)(convertNumberToUnsignedLong, _indexSizeError.createIndexSizeError);
const wrapAudioBufferCopyChannelMethodsOutOfBounds = (0, _wrapAudioBufferCopyChannelMethodsOutOfBounds.createWrapAudioBufferCopyChannelMethodsOutOfBounds)(convertNumberToUnsignedLong);
const audioBufferConstructor = (0, _audioBufferConstructor.createAudioBufferConstructor)(audioBufferStore, cacheTestResult, _notSupportedError.createNotSupportedError, nativeAudioBufferConstructor, nativeOfflineAudioContextConstructor, (0, _testAudioBufferConstructorSupport.createTestAudioBufferConstructorSupport)(nativeAudioBufferConstructor), wrapAudioBufferCopyChannelMethods, wrapAudioBufferCopyChannelMethodsOutOfBounds);
exports.AudioBuffer = audioBufferConstructor;
const createNativeGainNode = (0, _nativeGainNodeFactory.createNativeGainNodeFactory)(createNativeAudioNode);
const addSilentConnection = (0, _addSilentConnection.createAddSilentConnection)(createNativeGainNode);
const testAudioScheduledSourceNodeStartMethodNegativeParametersSupport = (0, _testAudioScheduledSourceNodeStartMethodNegativeParametersSupport.createTestAudioScheduledSourceNodeStartMethodNegativeParametersSupport)(createNativeAudioNode);
const testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport = (0, _testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport.createTestAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport)(createNativeAudioNode);
const testAudioScheduledSourceNodeStopMethodNegativeParametersSupport = (0, _testAudioScheduledSourceNodeStopMethodNegativeParametersSupport.createTestAudioScheduledSourceNodeStopMethodNegativeParametersSupport)(createNativeAudioNode);
const wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls = (0, _wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls.createWrapAudioScheduledSourceNodeStopMethodConsecutiveCalls)(createNativeAudioNode);
const renderInputsOfAudioParam = (0, _renderInputsOfAudioParam.createRenderInputsOfAudioParam)(getAudioNodeRenderer, _getAudioParamConnections.getAudioParamConnections, _isPartOfACycle.isPartOfACycle);
const connectAudioParam = (0, _connectAudioParam.createConnectAudioParam)(renderInputsOfAudioParam);
const createNativeAudioBufferSourceNode = (0, _nativeAudioBufferSourceNodeFactory.createNativeAudioBufferSourceNodeFactory)(addSilentConnection, cacheTestResult, createNativeAudioNode, (0, _testAudioBufferSourceNodeStartMethodConsecutiveCallsSupport.createTestAudioBufferSourceNodeStartMethodConsecutiveCallsSupport)(createNativeAudioNode), (0, _testAudioBufferSourceNodeStartMethodDurationParameterSupport.createTestAudioBufferSourceNodeStartMethodDurationParameterSupport)(nativeOfflineAudioContextConstructor), (0, _testAudioBufferSourceNodeStartMethodOffsetClampingSupport.createTestAudioBufferSourceNodeStartMethodOffsetClampingSupport)(createNativeAudioNode), (0, _testAudioBufferSourceNodeStopMethodNullifiedBufferSupport.createTestAudioBufferSourceNodeStopMethodNullifiedBufferSupport)(createNativeAudioNode), testAudioScheduledSourceNodeStartMethodNegativeParametersSupport, testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport, testAudioScheduledSourceNodeStopMethodNegativeParametersSupport, _wrapAudioBufferSourceNodeStartMethodOffsetClamping.wrapAudioBufferSourceNodeStartMethodOffsetClamping, (0, _wrapAudioBufferSourceNodeStopMethodNullifiedBuffer.createWrapAudioBufferSourceNodeStopMethodNullifiedBuffer)(_overwriteAccessors.overwriteAccessors), wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls);
const renderAutomation = (0, _renderAutomation.createRenderAutomation)((0, _getAudioParamRenderer.createGetAudioParamRenderer)(_getAudioParamConnections.getAudioParamConnections), renderInputsOfAudioParam);
const createAudioBufferSourceNodeRenderer = (0, _audioBufferSourceNodeRendererFactory.createAudioBufferSourceNodeRendererFactory)(connectAudioParam, createNativeAudioBufferSourceNode, _getNativeAudioNode.getNativeAudioNode, renderAutomation, renderInputsOfAudioNode);
const createAudioParam = (0, _audioParamFactory.createAudioParamFactory)((0, _addAudioParamConnections.createAddAudioParamConnections)(_globals.AUDIO_PARAM_CONNECTIONS_STORE), audioParamAudioNodeStore, _globals.AUDIO_PARAM_STORE, _audioParamRenderer.createAudioParamRenderer, _automationEvents.createCancelAndHoldAutomationEvent, _automationEvents.createCancelScheduledValuesAutomationEvent, _automationEvents.createExponentialRampToValueAutomationEvent, _automationEvents.createLinearRampToValueAutomationEvent, _automationEvents.createSetTargetAutomationEvent, _automationEvents.createSetValueAutomationEvent, _automationEvents.createSetValueCurveAutomationEvent, nativeAudioContextConstructor);
const audioBufferSourceNodeConstructor = (0, _audioBufferSourceNodeConstructor.createAudioBufferSourceNodeConstructor)(audioNodeConstructor, createAudioBufferSourceNodeRenderer, createAudioParam, _invalidStateError.createInvalidStateError, createNativeAudioBufferSourceNode, getNativeContext, isNativeOfflineAudioContext, _wrapEventListener.wrapEventListener);
exports.AudioBufferSourceNode = audioBufferSourceNodeConstructor;
const audioDestinationNodeConstructor = (0, _audioDestinationNodeConstructor.createAudioDestinationNodeConstructor)(audioNodeConstructor, _audioDestinationNodeRendererFactory.createAudioDestinationNodeRenderer, _indexSizeError.createIndexSizeError, _invalidStateError.createInvalidStateError, (0, _nativeAudioDestinationNode.createNativeAudioDestinationNodeFactory)(createNativeGainNode, _overwriteAccessors.overwriteAccessors), getNativeContext, isNativeOfflineAudioContext, renderInputsOfAudioNode);
const createNativeBiquadFilterNode = (0, _nativeBiquadFilterNodeFactory.createNativeBiquadFilterNodeFactory)(createNativeAudioNode);
const createBiquadFilterNodeRenderer = (0, _biquadFilterNodeRendererFactory.createBiquadFilterNodeRendererFactory)(connectAudioParam, createNativeBiquadFilterNode, _getNativeAudioNode.getNativeAudioNode, renderAutomation, renderInputsOfAudioNode);
const biquadFilterNodeConstructor = (0, _biquadFilterNodeConstructor.createBiquadFilterNodeConstructor)(audioNodeConstructor, createAudioParam, createBiquadFilterNodeRenderer, _invalidAccessError.createInvalidAccessError, createNativeBiquadFilterNode, getNativeContext, isNativeOfflineAudioContext);
exports.BiquadFilterNode = biquadFilterNodeConstructor;
const monitorConnections = (0, _monitorConnections.createMonitorConnections)(_insertElementInSet.insertElementInSet, isNativeAudioNode);
const wrapChannelMergerNode = (0, _wrapChannelMergerNode.createWrapChannelMergerNode)(_invalidStateError.createInvalidStateError, createNativeAudioNode, monitorConnections);
const createNativeChannelMergerNode = (0, _nativeChannelMergerNodeFactory.createNativeChannelMergerNodeFactory)(createNativeAudioNode, wrapChannelMergerNode);
const createChannelMergerNodeRenderer = (0, _channelMergerNodeRendererFactory.createChannelMergerNodeRendererFactory)(createNativeChannelMergerNode, _getNativeAudioNode.getNativeAudioNode, renderInputsOfAudioNode);
const channelMergerNodeConstructor = (0, _channelMergerNodeConstructor.createChannelMergerNodeConstructor)(audioNodeConstructor, createChannelMergerNodeRenderer, createNativeChannelMergerNode, getNativeContext, isNativeOfflineAudioContext);
exports.ChannelMergerNode = channelMergerNodeConstructor;
const createNativeChannelSplitterNode = (0, _nativeChannelSplitterNodeFactory.createNativeChannelSplitterNodeFactory)(createNativeAudioNode);
const createChannelSplitterNodeRenderer = (0, _channelSplitterNodeRendererFactory.createChannelSplitterNodeRendererFactory)(createNativeChannelSplitterNode, _getNativeAudioNode.getNativeAudioNode, renderInputsOfAudioNode);
const channelSplitterNodeConstructor = (0, _channelSplitterNodeConstructor.createChannelSplitterNodeConstructor)(audioNodeConstructor, createChannelSplitterNodeRenderer, createNativeChannelSplitterNode, getNativeContext, isNativeOfflineAudioContext);
exports.ChannelSplitterNode = channelSplitterNodeConstructor;
const createNativeConstantSourceNodeFaker = (0, _nativeConstantSourceNodeFakerFactory.createNativeConstantSourceNodeFakerFactory)(addSilentConnection, createNativeAudioBufferSourceNode, createNativeGainNode, monitorConnections);
const createNativeConstantSourceNode = (0, _nativeConstantSourceNodeFactory.createNativeConstantSourceNodeFactory)(addSilentConnection, cacheTestResult, createNativeAudioNode, createNativeConstantSourceNodeFaker, testAudioScheduledSourceNodeStartMethodNegativeParametersSupport, testAudioScheduledSourceNodeStopMethodNegativeParametersSupport);
const createConstantSourceNodeRenderer = (0, _constantSourceNodeRendererFactory.createConstantSourceNodeRendererFactory)(connectAudioParam, createNativeConstantSourceNode, _getNativeAudioNode.getNativeAudioNode, renderAutomation, renderInputsOfAudioNode);
const constantSourceNodeConstructor = (0, _constantSourceNodeConstructor.createConstantSourceNodeConstructor)(audioNodeConstructor, createAudioParam, createConstantSourceNodeRenderer, createNativeConstantSourceNode, getNativeContext, isNativeOfflineAudioContext, _wrapEventListener.wrapEventListener);
exports.ConstantSourceNode = constantSourceNodeConstructor;
const createNativeConvolverNodeFaker = (0, _nativeConvolverNodeFakerFactory.createNativeConvolverNodeFakerFactory)(createNativeAudioNode, createNativeGainNode, monitorConnections);
const createNativeConvolverNode = (0, _nativeConvolverNodeFactory.createNativeConvolverNodeFactory)(createNativeAudioNode, createNativeConvolverNodeFaker, _notSupportedError.createNotSupportedError, _overwriteAccessors.overwriteAccessors);
const createConvolverNodeRenderer = (0, _convolverNodeRendererFactory.createConvolverNodeRendererFactory)(createNativeConvolverNode, _getNativeAudioNode.getNativeAudioNode, renderInputsOfAudioNode);
const convolverNodeConstructor = (0, _convolverNodeConstructor.createConvolverNodeConstructor)(audioNodeConstructor, createConvolverNodeRenderer, createNativeConvolverNode, getNativeContext, isNativeOfflineAudioContext);
exports.ConvolverNode = convolverNodeConstructor;
const createNativeDelayNode = (0, _nativeDelayNodeFactory.createNativeDelayNodeFactory)(createNativeAudioNode);
const createDelayNodeRenderer = (0, _delayNodeRendererFactory.createDelayNodeRendererFactory)(connectAudioParam, createNativeDelayNode, _getNativeAudioNode.getNativeAudioNode, renderAutomation, renderInputsOfAudioNode);
const delayNodeConstructor = (0, _delayNodeConstructor.createDelayNodeConstructor)(audioNodeConstructor, createAudioParam, createDelayNodeRenderer, createNativeDelayNode, getNativeContext, isNativeOfflineAudioContext);
exports.DelayNode = delayNodeConstructor;
const createNativeDynamicsCompressorNode = (0, _nativeDynamicsCompressorNodeFactory.createNativeDynamicsCompressorNodeFactory)(createNativeAudioNode, _notSupportedError.createNotSupportedError);
const createDynamicsCompressorNodeRenderer = (0, _dynamicsCompressorNodeRendererFactory.createDynamicsCompressorNodeRendererFactory)(connectAudioParam, createNativeDynamicsCompressorNode, _getNativeAudioNode.getNativeAudioNode, renderAutomation, renderInputsOfAudioNode);
const dynamicsCompressorNodeConstructor = (0, _dynamicsCompressorNodeConstructor.createDynamicsCompressorNodeConstructor)(audioNodeConstructor, createAudioParam, createDynamicsCompressorNodeRenderer, createNativeDynamicsCompressorNode, _notSupportedError.createNotSupportedError, getNativeContext, isNativeOfflineAudioContext);
exports.DynamicsCompressorNode = dynamicsCompressorNodeConstructor;
const createGainNodeRenderer = (0, _gainNodeRendererFactory.createGainNodeRendererFactory)(connectAudioParam, createNativeGainNode, _getNativeAudioNode.getNativeAudioNode, renderAutomation, renderInputsOfAudioNode);
const gainNodeConstructor = (0, _gainNodeConstructor.createGainNodeConstructor)(audioNodeConstructor, createAudioParam, createGainNodeRenderer, createNativeGainNode, getNativeContext, isNativeOfflineAudioContext);
exports.GainNode = gainNodeConstructor;
const createNativeScriptProcessorNode = (0, _nativeScriptProcessorNodeFactory.createNativeScriptProcessorNodeFactory)(createNativeAudioNode);
const createNativeIIRFilterNodeFaker = (0, _nativeIirFilterNodeFakerFactory.createNativeIIRFilterNodeFakerFactory)(_invalidAccessError.createInvalidAccessError, _invalidStateError.createInvalidStateError, createNativeScriptProcessorNode, _notSupportedError.createNotSupportedError);
const renderNativeOfflineAudioContext = (0, _renderNativeOfflineAudioContext.createRenderNativeOfflineAudioContext)(cacheTestResult, createNativeGainNode, createNativeScriptProcessorNode, (0, _testOfflineAudioContextCurrentTimeSupport.createTestOfflineAudioContextCurrentTimeSupport)(createNativeGainNode, nativeOfflineAudioContextConstructor));
const createIIRFilterNodeRenderer = (0, _iirFilterNodeRendererFactory.createIIRFilterNodeRendererFactory)(createNativeAudioBufferSourceNode, createNativeAudioNode, _getNativeAudioNode.getNativeAudioNode, nativeOfflineAudioContextConstructor, renderInputsOfAudioNode, renderNativeOfflineAudioContext);
const createNativeIIRFilterNode = (0, _nativeIirFilterNodeFactory.createNativeIIRFilterNodeFactory)(createNativeAudioNode, createNativeIIRFilterNodeFaker);
const iIRFilterNodeConstructor = (0, _iirFilterNodeConstructor.createIIRFilterNodeConstructor)(audioNodeConstructor, createNativeIIRFilterNode, createIIRFilterNodeRenderer, getNativeContext, isNativeOfflineAudioContext);
exports.IIRFilterNode = iIRFilterNodeConstructor;
const createAudioListener = (0, _audioListenerFactory.createAudioListenerFactory)(createAudioParam, createNativeChannelMergerNode, createNativeConstantSourceNode, createNativeScriptProcessorNode, isNativeOfflineAudioContext);
const unrenderedAudioWorkletNodeStore = new WeakMap();
const minimalBaseAudioContextConstructor = (0, _minimalBaseAudioContextConstructor.createMinimalBaseAudioContextConstructor)(audioDestinationNodeConstructor, createAudioListener, eventTargetConstructor, isNativeOfflineAudioContext, unrenderedAudioWorkletNodeStore, _wrapEventListener.wrapEventListener);
const createNativeOscillatorNode = (0, _nativeOscillatorNodeFactory.createNativeOscillatorNodeFactory)(addSilentConnection, cacheTestResult, createNativeAudioNode, testAudioScheduledSourceNodeStartMethodNegativeParametersSupport, testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport, testAudioScheduledSourceNodeStopMethodNegativeParametersSupport, wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls);
const createOscillatorNodeRenderer = (0, _oscillatorNodeRendererFactory.createOscillatorNodeRendererFactory)(connectAudioParam, createNativeOscillatorNode, _getNativeAudioNode.getNativeAudioNode, renderAutomation, renderInputsOfAudioNode);
const oscillatorNodeConstructor = (0, _oscillatorNodeConstructor.createOscillatorNodeConstructor)(audioNodeConstructor, createAudioParam, _invalidStateError.createInvalidStateError, createNativeOscillatorNode, createOscillatorNodeRenderer, getNativeContext, isNativeOfflineAudioContext, _wrapEventListener.wrapEventListener);
exports.OscillatorNode = oscillatorNodeConstructor;
const createConnectedNativeAudioBufferSourceNode = (0, _connectedNativeAudioBufferSourceNodeFactory.createConnectedNativeAudioBufferSourceNodeFactory)(createNativeAudioBufferSourceNode);
const createNativeWaveShaperNodeFaker = (0, _nativeWaveShaperNodeFakerFactory.createNativeWaveShaperNodeFakerFactory)(createConnectedNativeAudioBufferSourceNode, _invalidStateError.createInvalidStateError, createNativeAudioNode, createNativeGainNode, _isDcCurve.isDCCurve, monitorConnections);
const createNativeWaveShaperNode = (0, _nativeWaveShaperNodeFactory.createNativeWaveShaperNodeFactory)(createConnectedNativeAudioBufferSourceNode, _invalidStateError.createInvalidStateError, createNativeAudioNode, createNativeWaveShaperNodeFaker, _isDcCurve.isDCCurve, monitorConnections, _overwriteAccessors.overwriteAccessors);
const createNativePannerNodeFaker = (0, _nativePannerNodeFakerFactory.createNativePannerNodeFakerFactory)(_connectNativeAudioNodeToNativeAudioNode.connectNativeAudioNodeToNativeAudioNode, _invalidStateError.createInvalidStateError, createNativeAudioNode, createNativeChannelMergerNode, createNativeGainNode, createNativeScriptProcessorNode, createNativeWaveShaperNode, _notSupportedError.createNotSupportedError, _disconnectNativeAudioNodeFromNativeAudioNode.disconnectNativeAudioNodeFromNativeAudioNode, monitorConnections);
const createNativePannerNode = (0, _nativePannerNodeFactory.createNativePannerNodeFactory)(createNativeAudioNode, createNativePannerNodeFaker);
const createPannerNodeRenderer = (0, _pannerNodeRendererFactory.createPannerNodeRendererFactory)(connectAudioParam, createNativeChannelMergerNode, createNativeConstantSourceNode, createNativeGainNode, createNativePannerNode, _getNativeAudioNode.getNativeAudioNode, nativeOfflineAudioContextConstructor, renderAutomation, renderInputsOfAudioNode, renderNativeOfflineAudioContext);
const pannerNodeConstructor = (0, _pannerNodeConstructor.createPannerNodeConstructor)(audioNodeConstructor, createAudioParam, createNativePannerNode, createPannerNodeRenderer, getNativeContext, isNativeOfflineAudioContext);
exports.PannerNode = pannerNodeConstructor;
const createNativePeriodicWave = (0, _nativePeriodicWaveFactory.createNativePeriodicWaveFactory)(getBackupNativeContext);
const periodicWaveConstructor = (0, _periodicWaveConstructor.createPeriodicWaveConstructor)(createNativePeriodicWave, getNativeContext, new WeakSet());
exports.PeriodicWave = periodicWaveConstructor;
const nativeStereoPannerNodeFakerFactory = (0, _nativeStereoPannerNodeFakerFactory.createNativeStereoPannerNodeFakerFactory)(createNativeChannelMergerNode, createNativeChannelSplitterNode, createNativeGainNode, createNativeWaveShaperNode, _notSupportedError.createNotSupportedError, monitorConnections);
const createNativeStereoPannerNode = (0, _nativeStereoPannerNodeFactory.createNativeStereoPannerNodeFactory)(createNativeAudioNode, nativeStereoPannerNodeFakerFactory, _notSupportedError.createNotSupportedError);
const createStereoPannerNodeRenderer = (0, _stereoPannerNodeRendererFactory.createStereoPannerNodeRendererFactory)(connectAudioParam, createNativeStereoPannerNode, _getNativeAudioNode.getNativeAudioNode, renderAutomation, renderInputsOfAudioNode);
const stereoPannerNodeConstructor = (0, _stereoPannerNodeConstructor.createStereoPannerNodeConstructor)(audioNodeConstructor, createAudioParam, createNativeStereoPannerNode, createStereoPannerNodeRenderer, getNativeContext, isNativeOfflineAudioContext);
exports.StereoPannerNode = stereoPannerNodeConstructor;
const createWaveShaperNodeRenderer = (0, _waveShaperNodeRendererFactory.createWaveShaperNodeRendererFactory)(createNativeWaveShaperNode, _getNativeAudioNode.getNativeAudioNode, renderInputsOfAudioNode);
const waveShaperNodeConstructor = (0, _waveShaperNodeConstructor.createWaveShaperNodeConstructor)(audioNodeConstructor, _invalidStateError.createInvalidStateError, createNativeWaveShaperNode, createWaveShaperNodeRenderer, getNativeContext, isNativeOfflineAudioContext);
exports.WaveShaperNode = waveShaperNodeConstructor;
const isSecureContext = (0, _isSecureContext.createIsSecureContext)(window);
const exposeCurrentFrameAndCurrentTime = (0, _exposeCurrentFrameAndCurrentTime.createExposeCurrentFrameAndCurrentTime)(window); // The addAudioWorkletModule() function is only available in a SecureContext.

const addAudioWorkletModule = isSecureContext ? (0, _addAudioWorkletModule.createAddAudioWorkletModule)(_notSupportedError.createNotSupportedError, (0, _evaluateSource.createEvaluateSource)(window), exposeCurrentFrameAndCurrentTime, (0, _fetchSource.createFetchSource)(_abortError.createAbortError), getBackupNativeContext, getNativeContext, new WeakMap(), new WeakMap(), // @todo window is guaranteed to be defined because isSecureContext checks that as well.
window) : undefined;
exports.addAudioWorkletModule = addAudioWorkletModule;
const isNativeContext = (0, _isNativeContext.createIsNativeContext)(isNativeAudioContext, isNativeOfflineAudioContext);
const decodeAudioData = (0, _decodeAudioData.createDecodeAudioData)(audioBufferStore, cacheTestResult, _dataCloneError.createDataCloneError, _encodingError.createEncodingError, new WeakSet(), getNativeContext, isNativeContext, isNativeOfflineAudioContext, nativeOfflineAudioContextConstructor, _testAudioBufferCopyChannelMethodsOutOfBoundsSupport.testAudioBufferCopyChannelMethodsOutOfBoundsSupport, _testPromiseSupport.testPromiseSupport, wrapAudioBufferCopyChannelMethods, wrapAudioBufferCopyChannelMethodsOutOfBounds);
exports.decodeAudioData = decodeAudioData;
const baseAudioContextConstructor = (0, _baseAudioContextConstructor.createBaseAudioContextConstructor)(addAudioWorkletModule, analyserNodeConstructor, audioBufferConstructor, audioBufferSourceNodeConstructor, biquadFilterNodeConstructor, channelMergerNodeConstructor, channelSplitterNodeConstructor, constantSourceNodeConstructor, convolverNodeConstructor, decodeAudioData, delayNodeConstructor, dynamicsCompressorNodeConstructor, gainNodeConstructor, iIRFilterNodeConstructor, minimalBaseAudioContextConstructor, oscillatorNodeConstructor, pannerNodeConstructor, periodicWaveConstructor, stereoPannerNodeConstructor, waveShaperNodeConstructor);
const createNativeMediaElementAudioSourceNode = (0, _nativeMediaElementAudioSourceNodeFactory.createNativeMediaElementAudioSourceNodeFactory)(createNativeAudioNode);
const mediaElementAudioSourceNodeConstructor = (0, _mediaElementAudioSourceNodeConstructor.createMediaElementAudioSourceNodeConstructor)(audioNodeConstructor, createNativeMediaElementAudioSourceNode, getNativeContext, isNativeOfflineAudioContext);
exports.MediaElementAudioSourceNode = mediaElementAudioSourceNodeConstructor;
const createNativeMediaStreamAudioDestinationNode = (0, _nativeMediaStreamAudioDestinationNodeFactory.createNativeMediaStreamAudioDestinationNodeFactory)(createNativeAudioNode, _notSupportedError.createNotSupportedError);
const mediaStreamAudioDestinationNodeConstructor = (0, _mediaStreamAudioDestinationNodeConstructor.createMediaStreamAudioDestinationNodeConstructor)(audioNodeConstructor, createNativeMediaStreamAudioDestinationNode, getNativeContext, isNativeOfflineAudioContext);
exports.MediaStreamAudioDestinationNode = mediaStreamAudioDestinationNodeConstructor;
const createNativeMediaStreamAudioSourceNode = (0, _nativeMediaStreamAudioSourceNodeFactory.createNativeMediaStreamAudioSourceNodeFactory)(createNativeAudioNode);
const mediaStreamAudioSourceNodeConstructor = (0, _mediaStreamAudioSourceNodeConstructor.createMediaStreamAudioSourceNodeConstructor)(audioNodeConstructor, createNativeMediaStreamAudioSourceNode, getNativeContext, isNativeOfflineAudioContext);
exports.MediaStreamAudioSourceNode = mediaStreamAudioSourceNodeConstructor;
const createNativeMediaStreamTrackAudioSourceNode = (0, _nativeMediaStreamTrackAudioSourceNodeFactory.createNativeMediaStreamTrackAudioSourceNodeFactory)(_invalidStateError.createInvalidStateError, createNativeAudioNode, isNativeOfflineAudioContext);
const mediaStreamTrackAudioSourceNodeConstructor = (0, _mediaStreamTrackAudioSourceNodeConstructor.createMediaStreamTrackAudioSourceNodeConstructor)(audioNodeConstructor, createNativeMediaStreamTrackAudioSourceNode, getNativeContext);
exports.MediaStreamTrackAudioSourceNode = mediaStreamTrackAudioSourceNodeConstructor;
const audioContextConstructor = (0, _audioContextConstructor.createAudioContextConstructor)(baseAudioContextConstructor, _invalidStateError.createInvalidStateError, _notSupportedError.createNotSupportedError, _unknownError.createUnknownError, mediaElementAudioSourceNodeConstructor, mediaStreamAudioDestinationNodeConstructor, mediaStreamAudioSourceNodeConstructor, mediaStreamTrackAudioSourceNodeConstructor, nativeAudioContextConstructor);
exports.AudioContext = audioContextConstructor;
const getUnrenderedAudioWorkletNodes = (0, _getUnrenderedAudioWorkletNodes.createGetUnrenderedAudioWorkletNodes)(unrenderedAudioWorkletNodeStore);
const addUnrenderedAudioWorkletNode = (0, _addUnrenderedAudioWorkletNode.createAddUnrenderedAudioWorkletNode)(getUnrenderedAudioWorkletNodes);
const connectMultipleOutputs = (0, _connectMultipleOutputs.createConnectMultipleOutputs)(_indexSizeError.createIndexSizeError);
const deleteUnrenderedAudioWorkletNode = (0, _deleteUnrenderedAudioWorkletNode.createDeleteUnrenderedAudioWorkletNode)(getUnrenderedAudioWorkletNodes);
const disconnectMultipleOutputs = (0, _disconnectMultipleOutputs.createDisconnectMultipleOutputs)(_indexSizeError.createIndexSizeError);
const createNativeAudioWorkletNodeFaker = (0, _nativeAudioWorkletNodeFakerFactory.createNativeAudioWorkletNodeFakerFactory)(auxiliaryGainNodeStore, connectMultipleOutputs, _indexSizeError.createIndexSizeError, _invalidStateError.createInvalidStateError, createNativeChannelMergerNode, createNativeChannelSplitterNode, createNativeConstantSourceNode, createNativeGainNode, createNativeScriptProcessorNode, _notSupportedError.createNotSupportedError, disconnectMultipleOutputs, exposeCurrentFrameAndCurrentTime, monitorConnections);
const createNativeAudioWorkletNode = (0, _nativeAudioWorkletNodeFactory.createNativeAudioWorkletNodeFactory)(_invalidStateError.createInvalidStateError, createNativeAudioNode, createNativeAudioWorkletNodeFaker, createNativeGainNode, _notSupportedError.createNotSupportedError, monitorConnections);
const nativeAudioWorkletNodeConstructor = (0, _nativeAudioWorkletNodeConstructor.createNativeAudioWorkletNodeConstructor)(window);
const createAudioWorkletNodeRenderer = (0, _audioWorkletNodeRendererFactory.createAudioWorkletNodeRendererFactory)(connectAudioParam, connectMultipleOutputs, createNativeAudioBufferSourceNode, createNativeChannelMergerNode, createNativeChannelSplitterNode, createNativeConstantSourceNode, createNativeGainNode, deleteUnrenderedAudioWorkletNode, disconnectMultipleOutputs, exposeCurrentFrameAndCurrentTime, _getNativeAudioNode.getNativeAudioNode, nativeAudioWorkletNodeConstructor, nativeOfflineAudioContextConstructor, renderAutomation, renderInputsOfAudioNode, renderNativeOfflineAudioContext); // The AudioWorkletNode constructor is only available in a SecureContext.

const audioWorkletNodeConstructor = isSecureContext ? (0, _audioWorkletNodeConstructor.createAudioWorkletNodeConstructor)(addUnrenderedAudioWorkletNode, audioNodeConstructor, createAudioParam, createAudioWorkletNodeRenderer, createNativeAudioWorkletNode, getNativeContext, isNativeOfflineAudioContext, nativeAudioWorkletNodeConstructor, _wrapEventListener.wrapEventListener) : undefined;
exports.AudioWorkletNode = audioWorkletNodeConstructor;
const minimalAudioContextConstructor = (0, _minimalAudioContextConstructor.createMinimalAudioContextConstructor)(_invalidStateError.createInvalidStateError, _notSupportedError.createNotSupportedError, _unknownError.createUnknownError, minimalBaseAudioContextConstructor, nativeAudioContextConstructor);
exports.MinimalAudioContext = minimalAudioContextConstructor;
const createNativeOfflineAudioContext = (0, _createNativeOfflineAudioContext.createCreateNativeOfflineAudioContext)(_notSupportedError.createNotSupportedError, nativeOfflineAudioContextConstructor);
const startRendering = (0, _startRendering.createStartRendering)(audioBufferStore, cacheTestResult, getAudioNodeRenderer, getUnrenderedAudioWorkletNodes, renderNativeOfflineAudioContext, _testAudioBufferCopyChannelMethodsOutOfBoundsSupport.testAudioBufferCopyChannelMethodsOutOfBoundsSupport, wrapAudioBufferCopyChannelMethods, wrapAudioBufferCopyChannelMethodsOutOfBounds);
const minimalOfflineAudioContextConstructor = (0, _minimalOfflineAudioContextConstructor.createMinimalOfflineAudioContextConstructor)(cacheTestResult, _invalidStateError.createInvalidStateError, createNativeOfflineAudioContext, minimalBaseAudioContextConstructor, startRendering);
exports.MinimalOfflineAudioContext = minimalOfflineAudioContextConstructor;
const offlineAudioContextConstructor = (0, _offlineAudioContextConstructor.createOfflineAudioContextConstructor)(baseAudioContextConstructor, cacheTestResult, _invalidStateError.createInvalidStateError, createNativeOfflineAudioContext, startRendering);
exports.OfflineAudioContext = offlineAudioContextConstructor;
const isAnyAudioContext = (0, _isAnyAudioContext.createIsAnyAudioContext)(_globals.CONTEXT_STORE, isNativeAudioContext);
exports.isAnyAudioContext = isAnyAudioContext;
const isAnyAudioNode = (0, _isAnyAudioNode.createIsAnyAudioNode)(_globals.AUDIO_NODE_STORE, isNativeAudioNode);
exports.isAnyAudioNode = isAnyAudioNode;
const isAnyAudioParam = (0, _isAnyAudioParam.createIsAnyAudioParam)(_globals.AUDIO_PARAM_STORE, isNativeAudioParam);
exports.isAnyAudioParam = isAnyAudioParam;
const isAnyOfflineAudioContext = (0, _isAnyOfflineAudioContext.createIsAnyOfflineAudioContext)(_globals.CONTEXT_STORE, isNativeOfflineAudioContext);
exports.isAnyOfflineAudioContext = isAnyOfflineAudioContext;

const isSupported = () => (0, _isSupportedPromise.createIsSupportedPromise)(cacheTestResult, (0, _testAudioBufferCopyChannelMethodsSubarraySupport.createTestAudioBufferCopyChannelMethodsSubarraySupport)(nativeOfflineAudioContextConstructor), (0, _testAudioContextCloseMethodSupport.createTestAudioContextCloseMethodSupport)(nativeAudioContextConstructor), (0, _testAudioContextDecodeAudioDataMethodTypeErrorSupport.createTestAudioContextDecodeAudioDataMethodTypeErrorSupport)(nativeOfflineAudioContextConstructor), (0, _testAudioContextOptionsSupport.createTestAudioContextOptionsSupport)(nativeAudioContextConstructor), (0, _testAudioNodeConnectMethodSupport.createTestAudioNodeConnectMethodSupport)(nativeOfflineAudioContextConstructor), (0, _testAudioWorkletProcessorNoOutputsSupport.createTestAudioWorkletProcessorNoOutputsSupport)(nativeAudioWorkletNodeConstructor, nativeOfflineAudioContextConstructor), (0, _testChannelMergerNodeChannelCountSupport.createTestChannelMergerNodeChannelCountSupport)(createNativeAudioNode, nativeOfflineAudioContextConstructor), (0, _testConstantSourceNodeAccurateSchedulingSupport.createTestConstantSourceNodeAccurateSchedulingSupport)(createNativeAudioNode, nativeOfflineAudioContextConstructor), (0, _testConvolverNodeBufferReassignabilitySupport.createTestConvolverNodeBufferReassignabilitySupport)(nativeOfflineAudioContextConstructor), (0, _testIsSecureContextSupport.createTestIsSecureContextSupport)(window), (0, _testMediaStreamAudioSourceNodeMediaStreamWithoutAudioTrackSupport.createTestMediaStreamAudioSourceNodeMediaStreamWithoutAudioTrackSupport)(nativeAudioContextConstructor), (0, _testStereoPannerNodeDefaultValueSupport.createTestStereoPannerNodeDefaultValueSupport)(nativeOfflineAudioContextConstructor), _testTransferablesSupport.testTransferablesSupport);

exports.isSupported = isSupported;
},{"automation-events":"../node_modules/automation-events/build/es5/bundle.js","./factories/abort-error":"../node_modules/standardized-audio-context/build/es2019/factories/abort-error.js","./factories/add-audio-node-connections":"../node_modules/standardized-audio-context/build/es2019/factories/add-audio-node-connections.js","./factories/add-audio-param-connections":"../node_modules/standardized-audio-context/build/es2019/factories/add-audio-param-connections.js","./factories/add-audio-worklet-module":"../node_modules/standardized-audio-context/build/es2019/factories/add-audio-worklet-module.js","./factories/add-silent-connection":"../node_modules/standardized-audio-context/build/es2019/factories/add-silent-connection.js","./factories/add-unrendered-audio-worklet-node":"../node_modules/standardized-audio-context/build/es2019/factories/add-unrendered-audio-worklet-node.js","./factories/analyser-node-constructor":"../node_modules/standardized-audio-context/build/es2019/factories/analyser-node-constructor.js","./factories/analyser-node-renderer-factory":"../node_modules/standardized-audio-context/build/es2019/factories/analyser-node-renderer-factory.js","./factories/audio-buffer-constructor":"../node_modules/standardized-audio-context/build/es2019/factories/audio-buffer-constructor.js","./factories/audio-buffer-source-node-constructor":"../node_modules/standardized-audio-context/build/es2019/factories/audio-buffer-source-node-constructor.js","./factories/audio-buffer-source-node-renderer-factory":"../node_modules/standardized-audio-context/build/es2019/factories/audio-buffer-source-node-renderer-factory.js","./factories/audio-context-constructor":"../node_modules/standardized-audio-context/build/es2019/factories/audio-context-constructor.js","./factories/audio-destination-node-constructor":"../node_modules/standardized-audio-context/build/es2019/factories/audio-destination-node-constructor.js","./factories/audio-destination-node-renderer-factory":"../node_modules/standardized-audio-context/build/es2019/factories/audio-destination-node-renderer-factory.js","./factories/audio-listener-factory":"../node_modules/standardized-audio-context/build/es2019/factories/audio-listener-factory.js","./factories/audio-node-constructor":"../node_modules/standardized-audio-context/build/es2019/factories/audio-node-constructor.js","./factories/audio-param-factory":"../node_modules/standardized-audio-context/build/es2019/factories/audio-param-factory.js","./factories/audio-param-renderer":"../node_modules/standardized-audio-context/build/es2019/factories/audio-param-renderer.js","./factories/audio-worklet-node-constructor":"../node_modules/standardized-audio-context/build/es2019/factories/audio-worklet-node-constructor.js","./factories/audio-worklet-node-renderer-factory":"../node_modules/standardized-audio-context/build/es2019/factories/audio-worklet-node-renderer-factory.js","./factories/base-audio-context-constructor":"../node_modules/standardized-audio-context/build/es2019/factories/base-audio-context-constructor.js","./factories/biquad-filter-node-constructor":"../node_modules/standardized-audio-context/build/es2019/factories/biquad-filter-node-constructor.js","./factories/biquad-filter-node-renderer-factory":"../node_modules/standardized-audio-context/build/es2019/factories/biquad-filter-node-renderer-factory.js","./factories/cache-test-result":"../node_modules/standardized-audio-context/build/es2019/factories/cache-test-result.js","./factories/channel-merger-node-constructor":"../node_modules/standardized-audio-context/build/es2019/factories/channel-merger-node-constructor.js","./factories/channel-merger-node-renderer-factory":"../node_modules/standardized-audio-context/build/es2019/factories/channel-merger-node-renderer-factory.js","./factories/channel-splitter-node-constructor":"../node_modules/standardized-audio-context/build/es2019/factories/channel-splitter-node-constructor.js","./factories/channel-splitter-node-renderer-factory":"../node_modules/standardized-audio-context/build/es2019/factories/channel-splitter-node-renderer-factory.js","./factories/connect-audio-param":"../node_modules/standardized-audio-context/build/es2019/factories/connect-audio-param.js","./factories/connect-multiple-outputs":"../node_modules/standardized-audio-context/build/es2019/factories/connect-multiple-outputs.js","./factories/connected-native-audio-buffer-source-node-factory":"../node_modules/standardized-audio-context/build/es2019/factories/connected-native-audio-buffer-source-node-factory.js","./factories/constant-source-node-constructor":"../node_modules/standardized-audio-context/build/es2019/factories/constant-source-node-constructor.js","./factories/constant-source-node-renderer-factory":"../node_modules/standardized-audio-context/build/es2019/factories/constant-source-node-renderer-factory.js","./factories/convert-number-to-unsigned-long":"../node_modules/standardized-audio-context/build/es2019/factories/convert-number-to-unsigned-long.js","./factories/convolver-node-constructor":"../node_modules/standardized-audio-context/build/es2019/factories/convolver-node-constructor.js","./factories/convolver-node-renderer-factory":"../node_modules/standardized-audio-context/build/es2019/factories/convolver-node-renderer-factory.js","./factories/create-native-offline-audio-context":"../node_modules/standardized-audio-context/build/es2019/factories/create-native-offline-audio-context.js","./factories/data-clone-error":"../node_modules/standardized-audio-context/build/es2019/factories/data-clone-error.js","./factories/decode-audio-data":"../node_modules/standardized-audio-context/build/es2019/factories/decode-audio-data.js","./factories/decrement-cycle-counter":"../node_modules/standardized-audio-context/build/es2019/factories/decrement-cycle-counter.js","./factories/delay-node-constructor":"../node_modules/standardized-audio-context/build/es2019/factories/delay-node-constructor.js","./factories/delay-node-renderer-factory":"../node_modules/standardized-audio-context/build/es2019/factories/delay-node-renderer-factory.js","./factories/delete-unrendered-audio-worklet-node":"../node_modules/standardized-audio-context/build/es2019/factories/delete-unrendered-audio-worklet-node.js","./factories/detect-cycles":"../node_modules/standardized-audio-context/build/es2019/factories/detect-cycles.js","./factories/disconnect-multiple-outputs":"../node_modules/standardized-audio-context/build/es2019/factories/disconnect-multiple-outputs.js","./factories/dynamics-compressor-node-constructor":"../node_modules/standardized-audio-context/build/es2019/factories/dynamics-compressor-node-constructor.js","./factories/dynamics-compressor-node-renderer-factory":"../node_modules/standardized-audio-context/build/es2019/factories/dynamics-compressor-node-renderer-factory.js","./factories/encoding-error":"../node_modules/standardized-audio-context/build/es2019/factories/encoding-error.js","./factories/evaluate-source":"../node_modules/standardized-audio-context/build/es2019/factories/evaluate-source.js","./factories/event-target-constructor":"../node_modules/standardized-audio-context/build/es2019/factories/event-target-constructor.js","./factories/expose-current-frame-and-current-time":"../node_modules/standardized-audio-context/build/es2019/factories/expose-current-frame-and-current-time.js","./factories/fetch-source":"../node_modules/standardized-audio-context/build/es2019/factories/fetch-source.js","./factories/gain-node-constructor":"../node_modules/standardized-audio-context/build/es2019/factories/gain-node-constructor.js","./factories/gain-node-renderer-factory":"../node_modules/standardized-audio-context/build/es2019/factories/gain-node-renderer-factory.js","./factories/get-audio-node-renderer":"../node_modules/standardized-audio-context/build/es2019/factories/get-audio-node-renderer.js","./factories/get-audio-param-renderer":"../node_modules/standardized-audio-context/build/es2019/factories/get-audio-param-renderer.js","./factories/get-backup-native-context":"../node_modules/standardized-audio-context/build/es2019/factories/get-backup-native-context.js","./factories/get-native-context":"../node_modules/standardized-audio-context/build/es2019/factories/get-native-context.js","./factories/get-unrendered-audio-worklet-nodes":"../node_modules/standardized-audio-context/build/es2019/factories/get-unrendered-audio-worklet-nodes.js","./factories/iir-filter-node-constructor":"../node_modules/standardized-audio-context/build/es2019/factories/iir-filter-node-constructor.js","./factories/iir-filter-node-renderer-factory":"../node_modules/standardized-audio-context/build/es2019/factories/iir-filter-node-renderer-factory.js","./factories/increment-cycle-counter-factory":"../node_modules/standardized-audio-context/build/es2019/factories/increment-cycle-counter-factory.js","./factories/index-size-error":"../node_modules/standardized-audio-context/build/es2019/factories/index-size-error.js","./factories/invalid-access-error":"../node_modules/standardized-audio-context/build/es2019/factories/invalid-access-error.js","./factories/invalid-state-error":"../node_modules/standardized-audio-context/build/es2019/factories/invalid-state-error.js","./factories/is-any-audio-context":"../node_modules/standardized-audio-context/build/es2019/factories/is-any-audio-context.js","./factories/is-any-audio-node":"../node_modules/standardized-audio-context/build/es2019/factories/is-any-audio-node.js","./factories/is-any-audio-param":"../node_modules/standardized-audio-context/build/es2019/factories/is-any-audio-param.js","./factories/is-any-offline-audio-context":"../node_modules/standardized-audio-context/build/es2019/factories/is-any-offline-audio-context.js","./factories/is-native-audio-context":"../node_modules/standardized-audio-context/build/es2019/factories/is-native-audio-context.js","./factories/is-native-audio-node":"../node_modules/standardized-audio-context/build/es2019/factories/is-native-audio-node.js","./factories/is-native-audio-param":"../node_modules/standardized-audio-context/build/es2019/factories/is-native-audio-param.js","./factories/is-native-context":"../node_modules/standardized-audio-context/build/es2019/factories/is-native-context.js","./factories/is-native-offline-audio-context":"../node_modules/standardized-audio-context/build/es2019/factories/is-native-offline-audio-context.js","./factories/is-secure-context":"../node_modules/standardized-audio-context/build/es2019/factories/is-secure-context.js","./factories/is-supported-promise":"../node_modules/standardized-audio-context/build/es2019/factories/is-supported-promise.js","./factories/media-element-audio-source-node-constructor":"../node_modules/standardized-audio-context/build/es2019/factories/media-element-audio-source-node-constructor.js","./factories/media-stream-audio-destination-node-constructor":"../node_modules/standardized-audio-context/build/es2019/factories/media-stream-audio-destination-node-constructor.js","./factories/media-stream-audio-source-node-constructor":"../node_modules/standardized-audio-context/build/es2019/factories/media-stream-audio-source-node-constructor.js","./factories/media-stream-track-audio-source-node-constructor":"../node_modules/standardized-audio-context/build/es2019/factories/media-stream-track-audio-source-node-constructor.js","./factories/minimal-audio-context-constructor":"../node_modules/standardized-audio-context/build/es2019/factories/minimal-audio-context-constructor.js","./factories/minimal-base-audio-context-constructor":"../node_modules/standardized-audio-context/build/es2019/factories/minimal-base-audio-context-constructor.js","./factories/minimal-offline-audio-context-constructor":"../node_modules/standardized-audio-context/build/es2019/factories/minimal-offline-audio-context-constructor.js","./factories/monitor-connections":"../node_modules/standardized-audio-context/build/es2019/factories/monitor-connections.js","./factories/native-analyser-node-factory":"../node_modules/standardized-audio-context/build/es2019/factories/native-analyser-node-factory.js","./factories/native-audio-buffer-constructor":"../node_modules/standardized-audio-context/build/es2019/factories/native-audio-buffer-constructor.js","./factories/native-audio-buffer-source-node-factory":"../node_modules/standardized-audio-context/build/es2019/factories/native-audio-buffer-source-node-factory.js","./factories/native-audio-context-constructor":"../node_modules/standardized-audio-context/build/es2019/factories/native-audio-context-constructor.js","./factories/native-audio-destination-node":"../node_modules/standardized-audio-context/build/es2019/factories/native-audio-destination-node.js","./factories/native-audio-node-factory":"../node_modules/standardized-audio-context/build/es2019/factories/native-audio-node-factory.js","./factories/native-audio-worklet-node-constructor":"../node_modules/standardized-audio-context/build/es2019/factories/native-audio-worklet-node-constructor.js","./factories/native-audio-worklet-node-factory":"../node_modules/standardized-audio-context/build/es2019/factories/native-audio-worklet-node-factory.js","./factories/native-audio-worklet-node-faker-factory":"../node_modules/standardized-audio-context/build/es2019/factories/native-audio-worklet-node-faker-factory.js","./factories/native-biquad-filter-node-factory":"../node_modules/standardized-audio-context/build/es2019/factories/native-biquad-filter-node-factory.js","./factories/native-channel-merger-node-factory":"../node_modules/standardized-audio-context/build/es2019/factories/native-channel-merger-node-factory.js","./factories/native-channel-splitter-node-factory":"../node_modules/standardized-audio-context/build/es2019/factories/native-channel-splitter-node-factory.js","./factories/native-constant-source-node-factory":"../node_modules/standardized-audio-context/build/es2019/factories/native-constant-source-node-factory.js","./factories/native-constant-source-node-faker-factory":"../node_modules/standardized-audio-context/build/es2019/factories/native-constant-source-node-faker-factory.js","./factories/native-convolver-node-factory":"../node_modules/standardized-audio-context/build/es2019/factories/native-convolver-node-factory.js","./factories/native-convolver-node-faker-factory":"../node_modules/standardized-audio-context/build/es2019/factories/native-convolver-node-faker-factory.js","./factories/native-delay-node-factory":"../node_modules/standardized-audio-context/build/es2019/factories/native-delay-node-factory.js","./factories/native-dynamics-compressor-node-factory":"../node_modules/standardized-audio-context/build/es2019/factories/native-dynamics-compressor-node-factory.js","./factories/native-gain-node-factory":"../node_modules/standardized-audio-context/build/es2019/factories/native-gain-node-factory.js","./factories/native-iir-filter-node-factory":"../node_modules/standardized-audio-context/build/es2019/factories/native-iir-filter-node-factory.js","./factories/native-iir-filter-node-faker-factory":"../node_modules/standardized-audio-context/build/es2019/factories/native-iir-filter-node-faker-factory.js","./factories/native-media-element-audio-source-node-factory":"../node_modules/standardized-audio-context/build/es2019/factories/native-media-element-audio-source-node-factory.js","./factories/native-media-stream-audio-destination-node-factory":"../node_modules/standardized-audio-context/build/es2019/factories/native-media-stream-audio-destination-node-factory.js","./factories/native-media-stream-audio-source-node-factory":"../node_modules/standardized-audio-context/build/es2019/factories/native-media-stream-audio-source-node-factory.js","./factories/native-media-stream-track-audio-source-node-factory":"../node_modules/standardized-audio-context/build/es2019/factories/native-media-stream-track-audio-source-node-factory.js","./factories/native-offline-audio-context-constructor":"../node_modules/standardized-audio-context/build/es2019/factories/native-offline-audio-context-constructor.js","./factories/native-oscillator-node-factory":"../node_modules/standardized-audio-context/build/es2019/factories/native-oscillator-node-factory.js","./factories/native-panner-node-factory":"../node_modules/standardized-audio-context/build/es2019/factories/native-panner-node-factory.js","./factories/native-panner-node-faker-factory":"../node_modules/standardized-audio-context/build/es2019/factories/native-panner-node-faker-factory.js","./factories/native-periodic-wave-factory":"../node_modules/standardized-audio-context/build/es2019/factories/native-periodic-wave-factory.js","./factories/native-script-processor-node-factory":"../node_modules/standardized-audio-context/build/es2019/factories/native-script-processor-node-factory.js","./factories/native-stereo-panner-node-factory":"../node_modules/standardized-audio-context/build/es2019/factories/native-stereo-panner-node-factory.js","./factories/native-stereo-panner-node-faker-factory":"../node_modules/standardized-audio-context/build/es2019/factories/native-stereo-panner-node-faker-factory.js","./factories/native-wave-shaper-node-factory":"../node_modules/standardized-audio-context/build/es2019/factories/native-wave-shaper-node-factory.js","./factories/native-wave-shaper-node-faker-factory":"../node_modules/standardized-audio-context/build/es2019/factories/native-wave-shaper-node-faker-factory.js","./factories/not-supported-error":"../node_modules/standardized-audio-context/build/es2019/factories/not-supported-error.js","./factories/offline-audio-context-constructor":"../node_modules/standardized-audio-context/build/es2019/factories/offline-audio-context-constructor.js","./factories/oscillator-node-constructor":"../node_modules/standardized-audio-context/build/es2019/factories/oscillator-node-constructor.js","./factories/oscillator-node-renderer-factory":"../node_modules/standardized-audio-context/build/es2019/factories/oscillator-node-renderer-factory.js","./factories/panner-node-constructor":"../node_modules/standardized-audio-context/build/es2019/factories/panner-node-constructor.js","./factories/panner-node-renderer-factory":"../node_modules/standardized-audio-context/build/es2019/factories/panner-node-renderer-factory.js","./factories/periodic-wave-constructor":"../node_modules/standardized-audio-context/build/es2019/factories/periodic-wave-constructor.js","./factories/render-automation":"../node_modules/standardized-audio-context/build/es2019/factories/render-automation.js","./factories/render-inputs-of-audio-node":"../node_modules/standardized-audio-context/build/es2019/factories/render-inputs-of-audio-node.js","./factories/render-inputs-of-audio-param":"../node_modules/standardized-audio-context/build/es2019/factories/render-inputs-of-audio-param.js","./factories/render-native-offline-audio-context":"../node_modules/standardized-audio-context/build/es2019/factories/render-native-offline-audio-context.js","./factories/start-rendering":"../node_modules/standardized-audio-context/build/es2019/factories/start-rendering.js","./factories/stereo-panner-node-constructor":"../node_modules/standardized-audio-context/build/es2019/factories/stereo-panner-node-constructor.js","./factories/stereo-panner-node-renderer-factory":"../node_modules/standardized-audio-context/build/es2019/factories/stereo-panner-node-renderer-factory.js","./factories/test-audio-buffer-constructor-support":"../node_modules/standardized-audio-context/build/es2019/factories/test-audio-buffer-constructor-support.js","./factories/test-audio-buffer-copy-channel-methods-subarray-support":"../node_modules/standardized-audio-context/build/es2019/factories/test-audio-buffer-copy-channel-methods-subarray-support.js","./factories/test-audio-buffer-source-node-start-method-consecutive-calls-support":"../node_modules/standardized-audio-context/build/es2019/factories/test-audio-buffer-source-node-start-method-consecutive-calls-support.js","./factories/test-audio-buffer-source-node-start-method-duration-parameter-support":"../node_modules/standardized-audio-context/build/es2019/factories/test-audio-buffer-source-node-start-method-duration-parameter-support.js","./factories/test-audio-buffer-source-node-start-method-offset-clamping-support":"../node_modules/standardized-audio-context/build/es2019/factories/test-audio-buffer-source-node-start-method-offset-clamping-support.js","./factories/test-audio-buffer-source-node-stop-method-nullified-buffer-support":"../node_modules/standardized-audio-context/build/es2019/factories/test-audio-buffer-source-node-stop-method-nullified-buffer-support.js","./factories/test-audio-context-close-method-support":"../node_modules/standardized-audio-context/build/es2019/factories/test-audio-context-close-method-support.js","./factories/test-audio-context-decode-audio-data-method-type-error-support":"../node_modules/standardized-audio-context/build/es2019/factories/test-audio-context-decode-audio-data-method-type-error-support.js","./factories/test-audio-context-options-support":"../node_modules/standardized-audio-context/build/es2019/factories/test-audio-context-options-support.js","./factories/test-audio-node-connect-method-support":"../node_modules/standardized-audio-context/build/es2019/factories/test-audio-node-connect-method-support.js","./factories/test-audio-scheduled-source-node-start-method-negative-parameters-support":"../node_modules/standardized-audio-context/build/es2019/factories/test-audio-scheduled-source-node-start-method-negative-parameters-support.js","./factories/test-audio-scheduled-source-node-stop-method-consecutive-calls-support":"../node_modules/standardized-audio-context/build/es2019/factories/test-audio-scheduled-source-node-stop-method-consecutive-calls-support.js","./factories/test-audio-scheduled-source-node-stop-method-negative-parameters-support":"../node_modules/standardized-audio-context/build/es2019/factories/test-audio-scheduled-source-node-stop-method-negative-parameters-support.js","./factories/test-audio-worklet-processor-no-outputs-support":"../node_modules/standardized-audio-context/build/es2019/factories/test-audio-worklet-processor-no-outputs-support.js","./factories/test-channel-merger-node-channel-count-support":"../node_modules/standardized-audio-context/build/es2019/factories/test-channel-merger-node-channel-count-support.js","./factories/test-constant-source-node-accurate-scheduling-support":"../node_modules/standardized-audio-context/build/es2019/factories/test-constant-source-node-accurate-scheduling-support.js","./factories/test-convolver-node-buffer-reassignability-support":"../node_modules/standardized-audio-context/build/es2019/factories/test-convolver-node-buffer-reassignability-support.js","./factories/test-is-secure-context-support":"../node_modules/standardized-audio-context/build/es2019/factories/test-is-secure-context-support.js","./factories/test-media-stream-audio-source-node-media-stream-without-audio-track-support":"../node_modules/standardized-audio-context/build/es2019/factories/test-media-stream-audio-source-node-media-stream-without-audio-track-support.js","./factories/test-offline-audio-context-current-time-support":"../node_modules/standardized-audio-context/build/es2019/factories/test-offline-audio-context-current-time-support.js","./factories/test-stereo-panner-node-default-value-support":"../node_modules/standardized-audio-context/build/es2019/factories/test-stereo-panner-node-default-value-support.js","./factories/unknown-error":"../node_modules/standardized-audio-context/build/es2019/factories/unknown-error.js","./factories/wave-shaper-node-constructor":"../node_modules/standardized-audio-context/build/es2019/factories/wave-shaper-node-constructor.js","./factories/wave-shaper-node-renderer-factory":"../node_modules/standardized-audio-context/build/es2019/factories/wave-shaper-node-renderer-factory.js","./factories/window":"../node_modules/standardized-audio-context/build/es2019/factories/window.js","./factories/wrap-audio-buffer-copy-channel-methods":"../node_modules/standardized-audio-context/build/es2019/factories/wrap-audio-buffer-copy-channel-methods.js","./factories/wrap-audio-buffer-copy-channel-methods-out-of-bounds":"../node_modules/standardized-audio-context/build/es2019/factories/wrap-audio-buffer-copy-channel-methods-out-of-bounds.js","./factories/wrap-audio-buffer-source-node-stop-method-nullified-buffer":"../node_modules/standardized-audio-context/build/es2019/factories/wrap-audio-buffer-source-node-stop-method-nullified-buffer.js","./factories/wrap-audio-scheduled-source-node-stop-method-consecutive-calls":"../node_modules/standardized-audio-context/build/es2019/factories/wrap-audio-scheduled-source-node-stop-method-consecutive-calls.js","./factories/wrap-channel-merger-node":"../node_modules/standardized-audio-context/build/es2019/factories/wrap-channel-merger-node.js","./globals":"../node_modules/standardized-audio-context/build/es2019/globals.js","./helpers/connect-native-audio-node-to-native-audio-node":"../node_modules/standardized-audio-context/build/es2019/helpers/connect-native-audio-node-to-native-audio-node.js","./helpers/disconnect-native-audio-node-from-native-audio-node":"../node_modules/standardized-audio-context/build/es2019/helpers/disconnect-native-audio-node-from-native-audio-node.js","./helpers/get-audio-node-connections":"../node_modules/standardized-audio-context/build/es2019/helpers/get-audio-node-connections.js","./helpers/get-audio-param-connections":"../node_modules/standardized-audio-context/build/es2019/helpers/get-audio-param-connections.js","./helpers/get-native-audio-node":"../node_modules/standardized-audio-context/build/es2019/helpers/get-native-audio-node.js","./helpers/get-native-audio-param":"../node_modules/standardized-audio-context/build/es2019/helpers/get-native-audio-param.js","./helpers/get-value-for-key":"../node_modules/standardized-audio-context/build/es2019/helpers/get-value-for-key.js","./helpers/insert-element-in-set":"../node_modules/standardized-audio-context/build/es2019/helpers/insert-element-in-set.js","./helpers/is-active-audio-node":"../node_modules/standardized-audio-context/build/es2019/helpers/is-active-audio-node.js","./helpers/is-dc-curve":"../node_modules/standardized-audio-context/build/es2019/helpers/is-dc-curve.js","./helpers/is-part-of-a-cycle":"../node_modules/standardized-audio-context/build/es2019/helpers/is-part-of-a-cycle.js","./helpers/overwrite-accessors":"../node_modules/standardized-audio-context/build/es2019/helpers/overwrite-accessors.js","./helpers/test-audio-buffer-copy-channel-methods-out-of-bounds-support":"../node_modules/standardized-audio-context/build/es2019/helpers/test-audio-buffer-copy-channel-methods-out-of-bounds-support.js","./helpers/test-promise-support":"../node_modules/standardized-audio-context/build/es2019/helpers/test-promise-support.js","./helpers/test-transferables-support":"../node_modules/standardized-audio-context/build/es2019/helpers/test-transferables-support.js","./helpers/wrap-audio-buffer-source-node-start-method-offset-clamping":"../node_modules/standardized-audio-context/build/es2019/helpers/wrap-audio-buffer-source-node-start-method-offset-clamping.js","./helpers/wrap-event-listener":"../node_modules/standardized-audio-context/build/es2019/helpers/wrap-event-listener.js","./interfaces/index":"../node_modules/standardized-audio-context/build/es2019/interfaces/index.js","./types/index":"../node_modules/standardized-audio-context/build/es2019/types/index.js"}],"../node_modules/tone/build/esm/core/util/Debug.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.assert = assert;
exports.assertRange = assertRange;
exports.assertContextRunning = assertContextRunning;
exports.setLogger = setLogger;
exports.log = log;
exports.warn = warn;

/**
 * Assert that the statement is true, otherwise invoke the error.
 * @param statement
 * @param error The message which is passed into an Error
 */
function assert(statement, error) {
  if (!statement) {
    throw new Error(error);
  }
}
/**
 * Make sure that the given value is within the range
 */


function assertRange(value, gte, lte = Infinity) {
  if (!(gte <= value && value <= lte)) {
    throw new RangeError(`Value must be within [${gte}, ${lte}], got: ${value}`);
  }
}
/**
 * Make sure that the given value is within the range
 */


function assertContextRunning(context) {
  // add a warning if the context is not started
  if (!context.isOffline && context.state !== "running") {
    warn("The AudioContext is \"suspended\". Invoke Tone.start() from a user action to start the audio.");
  }
}
/**
 * The default logger is the console
 */


let defaultLogger = console;
/**
 * Set the logging interface
 */

function setLogger(logger) {
  defaultLogger = logger;
}
/**
 * Log anything
 */


function log(...args) {
  defaultLogger.log(...args);
}
/**
 * Warn anything
 */


function warn(...args) {
  defaultLogger.warn(...args);
}
},{}],"../node_modules/tone/build/esm/core/util/TypeCheck.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isUndef = isUndef;
exports.isDefined = isDefined;
exports.isFunction = isFunction;
exports.isNumber = isNumber;
exports.isObject = isObject;
exports.isBoolean = isBoolean;
exports.isArray = isArray;
exports.isString = isString;
exports.isNote = isNote;

/**
 * Test if the arg is undefined
 */
function isUndef(arg) {
  return typeof arg === "undefined";
}
/**
 * Test if the arg is not undefined
 */


function isDefined(arg) {
  return !isUndef(arg);
}
/**
 * Test if the arg is a function
 */


function isFunction(arg) {
  return typeof arg === "function";
}
/**
 * Test if the argument is a number.
 */


function isNumber(arg) {
  return typeof arg === "number";
}
/**
 * Test if the given argument is an object literal (i.e. `{}`);
 */


function isObject(arg) {
  return Object.prototype.toString.call(arg) === "[object Object]" && arg.constructor === Object;
}
/**
 * Test if the argument is a boolean.
 */


function isBoolean(arg) {
  return typeof arg === "boolean";
}
/**
 * Test if the argument is an Array
 */


function isArray(arg) {
  return Array.isArray(arg);
}
/**
 * Test if the argument is a string.
 */


function isString(arg) {
  return typeof arg === "string";
}
/**
 * Test if the argument is in the form of a note in scientific pitch notation.
 * e.g. "C4"
 */


function isNote(arg) {
  return isString(arg) && /^([a-g]{1}(?:b|#|x|bb)?)(-?[0-9]+)/i.test(arg);
}
},{}],"../node_modules/tone/build/esm/core/context/AudioContext.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createAudioContext = createAudioContext;
exports.createOfflineAudioContext = createOfflineAudioContext;
exports.createAudioWorkletNode = createAudioWorkletNode;
Object.defineProperty(exports, "supported", {
  enumerable: true,
  get: function () {
    return _standardizedAudioContext.isSupported;
  }
});
exports.hasAudioContext = exports.theWindow = void 0;

var _standardizedAudioContext = require("standardized-audio-context");

var _Debug = require("../util/Debug");

var _TypeCheck = require("../util/TypeCheck");

/**
 * Create a new AudioContext
 */
function createAudioContext(options) {
  return new _standardizedAudioContext.AudioContext(options);
}
/**
 * Create a new OfflineAudioContext
 */


function createOfflineAudioContext(channels, length, sampleRate) {
  return new _standardizedAudioContext.OfflineAudioContext(channels, length, sampleRate);
}
/**
 * A reference to the window object
 * @hidden
 */


const theWindow = typeof self === "object" ? self : null;
/**
 * If the browser has a window object which has an AudioContext
 * @hidden
 */

exports.theWindow = theWindow;
const hasAudioContext = theWindow && (theWindow.hasOwnProperty("AudioContext") || theWindow.hasOwnProperty("webkitAudioContext"));
exports.hasAudioContext = hasAudioContext;

function createAudioWorkletNode(context, name, options) {
  (0, _Debug.assert)((0, _TypeCheck.isDefined)(_standardizedAudioContext.AudioWorkletNode), "This node only works in a secure context (https or localhost)"); // @ts-ignore

  return new _standardizedAudioContext.AudioWorkletNode(context, name, options);
}
/**
 * This promise resolves to a boolean which indicates if the
 * functionality is supported within the currently used browse.
 * Taken from [standardized-audio-context](https://github.com/chrisguttandin/standardized-audio-context#issupported)
 */
},{"standardized-audio-context":"../node_modules/standardized-audio-context/build/es2019/module.js","../util/Debug":"../node_modules/tone/build/esm/core/util/Debug.js","../util/TypeCheck":"../node_modules/tone/build/esm/core/util/TypeCheck.js"}],"../node_modules/tslib/tslib.es6.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.__extends = __extends;
exports.__rest = __rest;
exports.__decorate = __decorate;
exports.__param = __param;
exports.__metadata = __metadata;
exports.__awaiter = __awaiter;
exports.__generator = __generator;
exports.__createBinding = __createBinding;
exports.__exportStar = __exportStar;
exports.__values = __values;
exports.__read = __read;
exports.__spread = __spread;
exports.__spreadArrays = __spreadArrays;
exports.__await = __await;
exports.__asyncGenerator = __asyncGenerator;
exports.__asyncDelegator = __asyncDelegator;
exports.__asyncValues = __asyncValues;
exports.__makeTemplateObject = __makeTemplateObject;
exports.__importStar = __importStar;
exports.__importDefault = __importDefault;
exports.__classPrivateFieldGet = __classPrivateFieldGet;
exports.__classPrivateFieldSet = __classPrivateFieldSet;
exports.__assign = void 0;

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

/* global Reflect, Promise */
var extendStatics = function (d, b) {
  extendStatics = Object.setPrototypeOf || {
    __proto__: []
  } instanceof Array && function (d, b) {
    d.__proto__ = b;
  } || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
  };

  return extendStatics(d, b);
};

function __extends(d, b) {
  extendStatics(d, b);

  function __() {
    this.constructor = d;
  }

  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

var __assign = function () {
  exports.__assign = __assign = Object.assign || function __assign(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];

      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
    }

    return t;
  };

  return __assign.apply(this, arguments);
};

exports.__assign = __assign;

function __rest(s, e) {
  var t = {};

  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];

  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
}

function __decorate(decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
}

function __param(paramIndex, decorator) {
  return function (target, key) {
    decorator(target, key, paramIndex);
  };
}

function __metadata(metadataKey, metadataValue) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}

function __awaiter(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function (resolve) {
      resolve(value);
    });
  }

  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }

    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }

    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }

    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}

function __generator(thisArg, body) {
  var _ = {
    label: 0,
    sent: function () {
      if (t[0] & 1) throw t[1];
      return t[1];
    },
    trys: [],
    ops: []
  },
      f,
      y,
      t,
      g;
  return g = {
    next: verb(0),
    "throw": verb(1),
    "return": verb(2)
  }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
    return this;
  }), g;

  function verb(n) {
    return function (v) {
      return step([n, v]);
    };
  }

  function step(op) {
    if (f) throw new TypeError("Generator is already executing.");

    while (_) try {
      if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
      if (y = 0, t) op = [op[0] & 2, t.value];

      switch (op[0]) {
        case 0:
        case 1:
          t = op;
          break;

        case 4:
          _.label++;
          return {
            value: op[1],
            done: false
          };

        case 5:
          _.label++;
          y = op[1];
          op = [0];
          continue;

        case 7:
          op = _.ops.pop();

          _.trys.pop();

          continue;

        default:
          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
            _ = 0;
            continue;
          }

          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
            _.label = op[1];
            break;
          }

          if (op[0] === 6 && _.label < t[1]) {
            _.label = t[1];
            t = op;
            break;
          }

          if (t && _.label < t[2]) {
            _.label = t[2];

            _.ops.push(op);

            break;
          }

          if (t[2]) _.ops.pop();

          _.trys.pop();

          continue;
      }

      op = body.call(thisArg, _);
    } catch (e) {
      op = [6, e];
      y = 0;
    } finally {
      f = t = 0;
    }

    if (op[0] & 5) throw op[1];
    return {
      value: op[0] ? op[1] : void 0,
      done: true
    };
  }
}

function __createBinding(o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  o[k2] = m[k];
}

function __exportStar(m, exports) {
  for (var p in m) if (p !== "default" && !exports.hasOwnProperty(p)) exports[p] = m[p];
}

function __values(o) {
  var s = typeof Symbol === "function" && Symbol.iterator,
      m = s && o[s],
      i = 0;
  if (m) return m.call(o);
  if (o && typeof o.length === "number") return {
    next: function () {
      if (o && i >= o.length) o = void 0;
      return {
        value: o && o[i++],
        done: !o
      };
    }
  };
  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}

function __read(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m) return o;
  var i = m.call(o),
      r,
      ar = [],
      e;

  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
  } catch (error) {
    e = {
      error: error
    };
  } finally {
    try {
      if (r && !r.done && (m = i["return"])) m.call(i);
    } finally {
      if (e) throw e.error;
    }
  }

  return ar;
}

function __spread() {
  for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));

  return ar;
}

function __spreadArrays() {
  for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;

  for (var r = Array(s), k = 0, i = 0; i < il; i++) for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) r[k] = a[j];

  return r;
}

;

function __await(v) {
  return this instanceof __await ? (this.v = v, this) : new __await(v);
}

function __asyncGenerator(thisArg, _arguments, generator) {
  if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
  var g = generator.apply(thisArg, _arguments || []),
      i,
      q = [];
  return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () {
    return this;
  }, i;

  function verb(n) {
    if (g[n]) i[n] = function (v) {
      return new Promise(function (a, b) {
        q.push([n, v, a, b]) > 1 || resume(n, v);
      });
    };
  }

  function resume(n, v) {
    try {
      step(g[n](v));
    } catch (e) {
      settle(q[0][3], e);
    }
  }

  function step(r) {
    r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
  }

  function fulfill(value) {
    resume("next", value);
  }

  function reject(value) {
    resume("throw", value);
  }

  function settle(f, v) {
    if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);
  }
}

function __asyncDelegator(o) {
  var i, p;
  return i = {}, verb("next"), verb("throw", function (e) {
    throw e;
  }), verb("return"), i[Symbol.iterator] = function () {
    return this;
  }, i;

  function verb(n, f) {
    i[n] = o[n] ? function (v) {
      return (p = !p) ? {
        value: __await(o[n](v)),
        done: n === "return"
      } : f ? f(v) : v;
    } : f;
  }
}

function __asyncValues(o) {
  if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
  var m = o[Symbol.asyncIterator],
      i;
  return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () {
    return this;
  }, i);

  function verb(n) {
    i[n] = o[n] && function (v) {
      return new Promise(function (resolve, reject) {
        v = o[n](v), settle(resolve, reject, v.done, v.value);
      });
    };
  }

  function settle(resolve, reject, d, v) {
    Promise.resolve(v).then(function (v) {
      resolve({
        value: v,
        done: d
      });
    }, reject);
  }
}

function __makeTemplateObject(cooked, raw) {
  if (Object.defineProperty) {
    Object.defineProperty(cooked, "raw", {
      value: raw
    });
  } else {
    cooked.raw = raw;
  }

  return cooked;
}

;

function __importStar(mod) {
  if (mod && mod.__esModule) return mod;
  var result = {};
  if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
  result.default = mod;
  return result;
}

function __importDefault(mod) {
  return mod && mod.__esModule ? mod : {
    default: mod
  };
}

function __classPrivateFieldGet(receiver, privateMap) {
  if (!privateMap.has(receiver)) {
    throw new TypeError("attempted to get private field on non-instance");
  }

  return privateMap.get(receiver);
}

function __classPrivateFieldSet(receiver, privateMap, value) {
  if (!privateMap.has(receiver)) {
    throw new TypeError("attempted to set private field on non-instance");
  }

  privateMap.set(receiver, value);
  return value;
}
},{}],"../node_modules/tone/build/esm/core/clock/Ticker.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Ticker = void 0;

/**
 * A class which provides a reliable callback using either
 * a Web Worker, or if that isn't supported, falls back to setTimeout.
 */
class Ticker {
  constructor(callback, type, updateInterval) {
    this._callback = callback;
    this._type = type;
    this._updateInterval = updateInterval; // create the clock source for the first time

    this._createClock();
  }
  /**
   * Generate a web worker
   */


  _createWorker() {
    const blob = new Blob([
    /* javascript */
    `
			// the initial timeout time
			let timeoutTime =  ${(this._updateInterval * 1000).toFixed(1)};
			// onmessage callback
			self.onmessage = function(msg){
				timeoutTime = parseInt(msg.data);
			};
			// the tick function which posts a message
			// and schedules a new tick
			function tick(){
				setTimeout(tick, timeoutTime);
				self.postMessage('tick');
			}
			// call tick initially
			tick();
			`], {
      type: "text/javascript"
    });
    const blobUrl = URL.createObjectURL(blob);
    const worker = new Worker(blobUrl);
    worker.onmessage = this._callback.bind(this);
    this._worker = worker;
  }
  /**
   * Create a timeout loop
   */


  _createTimeout() {
    this._timeout = setTimeout(() => {
      this._createTimeout();

      this._callback();
    }, this._updateInterval * 1000);
  }
  /**
   * Create the clock source.
   */


  _createClock() {
    if (this._type === "worker") {
      try {
        this._createWorker();
      } catch (e) {
        // workers not supported, fallback to timeout
        this._type = "timeout";

        this._createClock();
      }
    } else if (this._type === "timeout") {
      this._createTimeout();
    }
  }
  /**
   * Clean up the current clock source
   */


  _disposeClock() {
    if (this._timeout) {
      clearTimeout(this._timeout);
      this._timeout = 0;
    }

    if (this._worker) {
      this._worker.terminate();

      this._worker.onmessage = null;
    }
  }
  /**
   * The rate in seconds the ticker will update
   */


  get updateInterval() {
    return this._updateInterval;
  }

  set updateInterval(interval) {
    this._updateInterval = Math.max(interval, 128 / 44100);

    if (this._type === "worker") {
      this._worker.postMessage(Math.max(interval * 1000, 1));
    }
  }
  /**
   * The type of the ticker, either a worker or a timeout
   */


  get type() {
    return this._type;
  }

  set type(type) {
    this._disposeClock();

    this._type = type;

    this._createClock();
  }
  /**
   * Clean up
   */


  dispose() {
    this._disposeClock();
  }

}

exports.Ticker = Ticker;
},{}],"../node_modules/tone/build/esm/core/util/AdvancedTypeCheck.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isAudioParam = isAudioParam;
exports.isAudioNode = isAudioNode;
exports.isOfflineAudioContext = isOfflineAudioContext;
exports.isAudioContext = isAudioContext;
exports.isAudioBuffer = isAudioBuffer;

var _standardizedAudioContext = require("standardized-audio-context");

/**
 * Test if the given value is an instanceof AudioParam
 */
function isAudioParam(arg) {
  return (0, _standardizedAudioContext.isAnyAudioParam)(arg);
}
/**
 * Test if the given value is an instanceof AudioNode
 */


function isAudioNode(arg) {
  return (0, _standardizedAudioContext.isAnyAudioNode)(arg);
}
/**
 * Test if the arg is instanceof an OfflineAudioContext
 */


function isOfflineAudioContext(arg) {
  return (0, _standardizedAudioContext.isAnyOfflineAudioContext)(arg);
}
/**
 * Test if the arg is an instanceof AudioContext
 */


function isAudioContext(arg) {
  return (0, _standardizedAudioContext.isAnyAudioContext)(arg);
}
/**
 * Test if the arg is instanceof an AudioBuffer
 */


function isAudioBuffer(arg) {
  return arg instanceof AudioBuffer;
}
},{"standardized-audio-context":"../node_modules/standardized-audio-context/build/es2019/module.js"}],"../node_modules/tone/build/esm/core/util/Defaults.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.deepMerge = deepMerge;
exports.deepEquals = deepEquals;
exports.optionsFromArguments = optionsFromArguments;
exports.getDefaultsFromInstance = getDefaultsFromInstance;
exports.defaultArg = defaultArg;
exports.omitFromObject = omitFromObject;

var _AdvancedTypeCheck = require("./AdvancedTypeCheck");

var _TypeCheck = require("./TypeCheck");

/**
 * Some objects should not be merged
 */
function noCopy(key, arg) {
  return key === "value" || (0, _AdvancedTypeCheck.isAudioParam)(arg) || (0, _AdvancedTypeCheck.isAudioNode)(arg) || (0, _AdvancedTypeCheck.isAudioBuffer)(arg);
}

function deepMerge(target, ...sources) {
  if (!sources.length) {
    return target;
  }

  const source = sources.shift();

  if ((0, _TypeCheck.isObject)(target) && (0, _TypeCheck.isObject)(source)) {
    for (const key in source) {
      if (noCopy(key, source[key])) {
        target[key] = source[key];
      } else if ((0, _TypeCheck.isObject)(source[key])) {
        if (!target[key]) {
          Object.assign(target, {
            [key]: {}
          });
        }

        deepMerge(target[key], source[key]);
      } else {
        Object.assign(target, {
          [key]: source[key]
        });
      }
    }
  } // @ts-ignore


  return deepMerge(target, ...sources);
}
/**
 * Returns true if the two arrays have the same value for each of the elements
 */


function deepEquals(arrayA, arrayB) {
  return arrayA.length === arrayB.length && arrayA.every((element, index) => arrayB[index] === element);
}
/**
 * Convert an args array into an object.
 */


function optionsFromArguments(defaults, argsArray, keys = [], objKey) {
  const opts = {};
  const args = Array.from(argsArray); // if the first argument is an object and has an object key

  if ((0, _TypeCheck.isObject)(args[0]) && objKey && !Reflect.has(args[0], objKey)) {
    // if it's not part of the defaults
    const partOfDefaults = Object.keys(args[0]).some(key => Reflect.has(defaults, key));

    if (!partOfDefaults) {
      // merge that key
      deepMerge(opts, {
        [objKey]: args[0]
      }); // remove the obj key from the keys

      keys.splice(keys.indexOf(objKey), 1); // shift the first argument off

      args.shift();
    }
  }

  if (args.length === 1 && (0, _TypeCheck.isObject)(args[0])) {
    deepMerge(opts, args[0]);
  } else {
    for (let i = 0; i < keys.length; i++) {
      if ((0, _TypeCheck.isDefined)(args[i])) {
        opts[keys[i]] = args[i];
      }
    }
  }

  return deepMerge(defaults, opts);
}
/**
 * Return this instances default values by calling Constructor.getDefaults()
 */


function getDefaultsFromInstance(instance) {
  return instance.constructor.getDefaults();
}
/**
 * Returns the fallback if the given object is undefined.
 * Take an array of arguments and return a formatted options object.
 */


function defaultArg(given, fallback) {
  if ((0, _TypeCheck.isUndef)(given)) {
    return fallback;
  } else {
    return given;
  }
}
/**
 * Remove all of the properties belonging to omit from obj.
 */


function omitFromObject(obj, omit) {
  omit.forEach(prop => {
    if (Reflect.has(obj, prop)) {
      delete obj[prop];
    }
  });
  return obj;
}
},{"./AdvancedTypeCheck":"../node_modules/tone/build/esm/core/util/AdvancedTypeCheck.js","./TypeCheck":"../node_modules/tone/build/esm/core/util/TypeCheck.js"}],"../node_modules/tone/build/esm/core/Tone.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Tone = void 0;

var _version = require("../version");

var _AudioContext = require("./context/AudioContext");

var _Debug = require("./util/Debug");

/**
 * Tone.js
 * @author Yotam Mann
 * @license http://opensource.org/licenses/MIT MIT License
 * @copyright 2014-2019 Yotam Mann
 */

/**
 * @class  Tone is the base class of all other classes.
 * @constructor
 */
class Tone {
  constructor() {
    //-------------------------------------
    // 	DEBUGGING
    //-------------------------------------

    /**
     * Set this debug flag to log all events that happen in this class.
     */
    this.debug = false; //-------------------------------------
    // 	DISPOSING
    //-------------------------------------

    /**
     * Indicates if the instance was disposed
     */

    this._wasDisposed = false;
  }
  /**
   * Returns all of the default options belonging to the class.
   */


  static getDefaults() {
    return {};
  }
  /**
   * Prints the outputs to the console log for debugging purposes.
   * Prints the contents only if either the object has a property
   * called `debug` set to true, or a variable called TONE_DEBUG_CLASS
   * is set to the name of the class.
   * @example
   * const osc = new Tone.Oscillator();
   * // prints all logs originating from this oscillator
   * osc.debug = true;
   * // calls to start/stop will print in the console
   * osc.start();
   */


  log(...args) {
    // if the object is either set to debug = true
    // or if there is a string on the Tone.global.with the class name
    if (this.debug || _AudioContext.theWindow && this.toString() === _AudioContext.theWindow.TONE_DEBUG_CLASS) {
      (0, _Debug.log)(this, ...args);
    }
  }
  /**
   * disconnect and dispose.
   */


  dispose() {
    this._wasDisposed = true;
    return this;
  }
  /**
   * Indicates if the instance was disposed. 'Disposing' an
   * instance means that all of the Web Audio nodes that were
   * created for the instance are disconnected and freed for garbage collection.
   */


  get disposed() {
    return this._wasDisposed;
  }
  /**
   * Convert the class to a string
   * @example
   * const osc = new Tone.Oscillator();
   * console.log(osc.toString());
   */


  toString() {
    return this.name;
  }

}
/**
 * The version number semver
 */


exports.Tone = Tone;
Tone.version = _version.version;
},{"../version":"../node_modules/tone/build/esm/version.js","./context/AudioContext":"../node_modules/tone/build/esm/core/context/AudioContext.js","./util/Debug":"../node_modules/tone/build/esm/core/util/Debug.js"}],"../node_modules/tone/build/esm/core/util/Math.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.GT = GT;
exports.GTE = GTE;
exports.LT = LT;
exports.EQ = EQ;
exports.clamp = clamp;

/**
 * The threshold for correctness for operators. Less than one sample even
 * at very high sampling rates (e.g. `1e-6 < 1 / 192000`).
 */
const EPSILON = 1e-6;
/**
 * Test if A is greater than B
 */

function GT(a, b) {
  return a > b + EPSILON;
}
/**
 * Test if A is greater than or equal to B
 */


function GTE(a, b) {
  return GT(a, b) || EQ(a, b);
}
/**
 * Test if A is less than B
 */


function LT(a, b) {
  return a + EPSILON < b;
}
/**
 * Test if A is less than B
 */


function EQ(a, b) {
  return Math.abs(a - b) < EPSILON;
}
/**
 * Clamp the value within the given range
 */


function clamp(value, min, max) {
  return Math.max(Math.min(value, max), min);
}
},{}],"../node_modules/tone/build/esm/core/util/Timeline.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Timeline = void 0;

var _Tone = require("../Tone");

var _Defaults = require("./Defaults");

var _Debug = require("./Debug");

var _Math = require("./Math");

/**
 * A Timeline class for scheduling and maintaining state
 * along a timeline. All events must have a "time" property.
 * Internally, events are stored in time order for fast
 * retrieval.
 */
class Timeline extends _Tone.Tone {
  constructor() {
    super();
    this.name = "Timeline";
    /**
     * The array of scheduled timeline events
     */

    this._timeline = [];
    const options = (0, _Defaults.optionsFromArguments)(Timeline.getDefaults(), arguments, ["memory"]);
    this.memory = options.memory;
    this.increasing = options.increasing;
  }

  static getDefaults() {
    return {
      memory: Infinity,
      increasing: false
    };
  }
  /**
   * The number of items in the timeline.
   */


  get length() {
    return this._timeline.length;
  }
  /**
   * Insert an event object onto the timeline. Events must have a "time" attribute.
   * @param event  The event object to insert into the timeline.
   */


  add(event) {
    // the event needs to have a time attribute
    (0, _Debug.assert)(Reflect.has(event, "time"), "Timeline: events must have a time attribute");
    event.time = event.time.valueOf();

    if (this.increasing && this.length) {
      const lastValue = this._timeline[this.length - 1];
      (0, _Debug.assert)((0, _Math.GTE)(event.time, lastValue.time), "The time must be greater than or equal to the last scheduled time");

      this._timeline.push(event);
    } else {
      const index = this._search(event.time);

      this._timeline.splice(index + 1, 0, event);
    } // if the length is more than the memory, remove the previous ones


    if (this.length > this.memory) {
      const diff = this.length - this.memory;

      this._timeline.splice(0, diff);
    }

    return this;
  }
  /**
   * Remove an event from the timeline.
   * @param  {Object}  event  The event object to remove from the list.
   * @returns {Timeline} this
   */


  remove(event) {
    const index = this._timeline.indexOf(event);

    if (index !== -1) {
      this._timeline.splice(index, 1);
    }

    return this;
  }
  /**
   * Get the nearest event whose time is less than or equal to the given time.
   * @param  time  The time to query.
   */


  get(time, param = "time") {
    const index = this._search(time, param);

    if (index !== -1) {
      return this._timeline[index];
    } else {
      return null;
    }
  }
  /**
   * Return the first event in the timeline without removing it
   * @returns {Object} The first event object
   */


  peek() {
    return this._timeline[0];
  }
  /**
   * Return the first event in the timeline and remove it
   */


  shift() {
    return this._timeline.shift();
  }
  /**
   * Get the event which is scheduled after the given time.
   * @param  time  The time to query.
   */


  getAfter(time, param = "time") {
    const index = this._search(time, param);

    if (index + 1 < this._timeline.length) {
      return this._timeline[index + 1];
    } else {
      return null;
    }
  }
  /**
   * Get the event before the event at the given time.
   * @param  time  The time to query.
   */


  getBefore(time) {
    const len = this._timeline.length; // if it's after the last item, return the last item

    if (len > 0 && this._timeline[len - 1].time < time) {
      return this._timeline[len - 1];
    }

    const index = this._search(time);

    if (index - 1 >= 0) {
      return this._timeline[index - 1];
    } else {
      return null;
    }
  }
  /**
   * Cancel events at and after the given time
   * @param  after  The time to query.
   */


  cancel(after) {
    if (this._timeline.length > 1) {
      let index = this._search(after);

      if (index >= 0) {
        if ((0, _Math.EQ)(this._timeline[index].time, after)) {
          // get the first item with that time
          for (let i = index; i >= 0; i--) {
            if ((0, _Math.EQ)(this._timeline[i].time, after)) {
              index = i;
            } else {
              break;
            }
          }

          this._timeline = this._timeline.slice(0, index);
        } else {
          this._timeline = this._timeline.slice(0, index + 1);
        }
      } else {
        this._timeline = [];
      }
    } else if (this._timeline.length === 1) {
      // the first item's time
      if ((0, _Math.GTE)(this._timeline[0].time, after)) {
        this._timeline = [];
      }
    }

    return this;
  }
  /**
   * Cancel events before or equal to the given time.
   * @param  time  The time to cancel before.
   */


  cancelBefore(time) {
    const index = this._search(time);

    if (index >= 0) {
      this._timeline = this._timeline.slice(index + 1);
    }

    return this;
  }
  /**
   * Returns the previous event if there is one. null otherwise
   * @param  event The event to find the previous one of
   * @return The event right before the given event
   */


  previousEvent(event) {
    const index = this._timeline.indexOf(event);

    if (index > 0) {
      return this._timeline[index - 1];
    } else {
      return null;
    }
  }
  /**
   * Does a binary search on the timeline array and returns the
   * nearest event index whose time is after or equal to the given time.
   * If a time is searched before the first index in the timeline, -1 is returned.
   * If the time is after the end, the index of the last item is returned.
   */


  _search(time, param = "time") {
    if (this._timeline.length === 0) {
      return -1;
    }

    let beginning = 0;
    const len = this._timeline.length;
    let end = len;

    if (len > 0 && this._timeline[len - 1][param] <= time) {
      return len - 1;
    }

    while (beginning < end) {
      // calculate the midpoint for roughly equal partition
      let midPoint = Math.floor(beginning + (end - beginning) / 2);
      const event = this._timeline[midPoint];
      const nextEvent = this._timeline[midPoint + 1];

      if ((0, _Math.EQ)(event[param], time)) {
        // choose the last one that has the same time
        for (let i = midPoint; i < this._timeline.length; i++) {
          const testEvent = this._timeline[i];

          if ((0, _Math.EQ)(testEvent[param], time)) {
            midPoint = i;
          } else {
            break;
          }
        }

        return midPoint;
      } else if ((0, _Math.LT)(event[param], time) && (0, _Math.GT)(nextEvent[param], time)) {
        return midPoint;
      } else if ((0, _Math.GT)(event[param], time)) {
        // search lower
        end = midPoint;
      } else {
        // search upper
        beginning = midPoint + 1;
      }
    }

    return -1;
  }
  /**
   * Internal iterator. Applies extra safety checks for
   * removing items from the array.
   */


  _iterate(callback, lowerBound = 0, upperBound = this._timeline.length - 1) {
    this._timeline.slice(lowerBound, upperBound + 1).forEach(callback);
  }
  /**
   * Iterate over everything in the array
   * @param  callback The callback to invoke with every item
   */


  forEach(callback) {
    this._iterate(callback);

    return this;
  }
  /**
   * Iterate over everything in the array at or before the given time.
   * @param  time The time to check if items are before
   * @param  callback The callback to invoke with every item
   */


  forEachBefore(time, callback) {
    // iterate over the items in reverse so that removing an item doesn't break things
    const upperBound = this._search(time);

    if (upperBound !== -1) {
      this._iterate(callback, 0, upperBound);
    }

    return this;
  }
  /**
   * Iterate over everything in the array after the given time.
   * @param  time The time to check if items are before
   * @param  callback The callback to invoke with every item
   */


  forEachAfter(time, callback) {
    // iterate over the items in reverse so that removing an item doesn't break things
    const lowerBound = this._search(time);

    this._iterate(callback, lowerBound + 1);

    return this;
  }
  /**
   * Iterate over everything in the array between the startTime and endTime.
   * The timerange is inclusive of the startTime, but exclusive of the endTime.
   * range = [startTime, endTime).
   * @param  startTime The time to check if items are before
   * @param  endTime The end of the test interval.
   * @param  callback The callback to invoke with every item
   */


  forEachBetween(startTime, endTime, callback) {
    let lowerBound = this._search(startTime);

    let upperBound = this._search(endTime);

    if (lowerBound !== -1 && upperBound !== -1) {
      if (this._timeline[lowerBound].time !== startTime) {
        lowerBound += 1;
      } // exclusive of the end time


      if (this._timeline[upperBound].time === endTime) {
        upperBound -= 1;
      }

      this._iterate(callback, lowerBound, upperBound);
    } else if (lowerBound === -1) {
      this._iterate(callback, 0, upperBound);
    }

    return this;
  }
  /**
   * Iterate over everything in the array at or after the given time. Similar to
   * forEachAfter, but includes the item(s) at the given time.
   * @param  time The time to check if items are before
   * @param  callback The callback to invoke with every item
   */


  forEachFrom(time, callback) {
    // iterate over the items in reverse so that removing an item doesn't break things
    let lowerBound = this._search(time); // work backwards until the event time is less than time


    while (lowerBound >= 0 && this._timeline[lowerBound].time >= time) {
      lowerBound--;
    }

    this._iterate(callback, lowerBound + 1);

    return this;
  }
  /**
   * Iterate over everything in the array at the given time
   * @param  time The time to check if items are before
   * @param  callback The callback to invoke with every item
   */


  forEachAtTime(time, callback) {
    // iterate over the items in reverse so that removing an item doesn't break things
    const upperBound = this._search(time);

    if (upperBound !== -1 && (0, _Math.EQ)(this._timeline[upperBound].time, time)) {
      let lowerBound = upperBound;

      for (let i = upperBound; i >= 0; i--) {
        if ((0, _Math.EQ)(this._timeline[i].time, time)) {
          lowerBound = i;
        } else {
          break;
        }
      }

      this._iterate(event => {
        callback(event);
      }, lowerBound, upperBound);
    }

    return this;
  }
  /**
   * Clean up.
   */


  dispose() {
    super.dispose();
    this._timeline = [];
    return this;
  }

}

exports.Timeline = Timeline;
},{"../Tone":"../node_modules/tone/build/esm/core/Tone.js","./Defaults":"../node_modules/tone/build/esm/core/util/Defaults.js","./Debug":"../node_modules/tone/build/esm/core/util/Debug.js","./Math":"../node_modules/tone/build/esm/core/util/Math.js"}],"../node_modules/tone/build/esm/core/context/ContextInitialization.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.onContextInit = onContextInit;
exports.initializeContext = initializeContext;
exports.onContextClose = onContextClose;
exports.closeContext = closeContext;
//-------------------------------------
// INITIALIZING NEW CONTEXT
//-------------------------------------

/**
 * Array of callbacks to invoke when a new context is created
 */
const notifyNewContext = [];
/**
 * Used internally to setup a new Context
 */

function onContextInit(cb) {
  notifyNewContext.push(cb);
}
/**
 * Invoke any classes which need to also be initialized when a new context is created.
 */


function initializeContext(ctx) {
  // add any additional modules
  notifyNewContext.forEach(cb => cb(ctx));
}
/**
 * Array of callbacks to invoke when a new context is created
 */


const notifyCloseContext = [];
/**
 * Used internally to tear down a Context
 */

function onContextClose(cb) {
  notifyCloseContext.push(cb);
}

function closeContext(ctx) {
  // add any additional modules
  notifyCloseContext.forEach(cb => cb(ctx));
}
},{}],"../node_modules/tone/build/esm/core/util/Emitter.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Emitter = void 0;

var _Tone = require("../Tone");

var _TypeCheck = require("./TypeCheck");

/**
 * Emitter gives classes which extend it
 * the ability to listen for and emit events.
 * Inspiration and reference from Jerome Etienne's [MicroEvent](https://github.com/jeromeetienne/microevent.js).
 * MIT (c) 2011 Jerome Etienne.
 */
class Emitter extends _Tone.Tone {
  constructor() {
    super(...arguments);
    this.name = "Emitter";
  }
  /**
   * Bind a callback to a specific event.
   * @param  event     The name of the event to listen for.
   * @param  callback  The callback to invoke when the event is emitted
   */


  on(event, callback) {
    // split the event
    const events = event.split(/\W+/);
    events.forEach(eventName => {
      if ((0, _TypeCheck.isUndef)(this._events)) {
        this._events = {};
      }

      if (!this._events.hasOwnProperty(eventName)) {
        this._events[eventName] = [];
      }

      this._events[eventName].push(callback);
    });
    return this;
  }
  /**
   * Bind a callback which is only invoked once
   * @param  event     The name of the event to listen for.
   * @param  callback  The callback to invoke when the event is emitted
   */


  once(event, callback) {
    const boundCallback = (...args) => {
      // invoke the callback
      callback(...args); // remove the event

      this.off(event, boundCallback);
    };

    this.on(event, boundCallback);
    return this;
  }
  /**
   * Remove the event listener.
   * @param  event     The event to stop listening to.
   * @param  callback  The callback which was bound to the event with Emitter.on.
   *                   If no callback is given, all callbacks events are removed.
   */


  off(event, callback) {
    const events = event.split(/\W+/);
    events.forEach(eventName => {
      if ((0, _TypeCheck.isUndef)(this._events)) {
        this._events = {};
      }

      if (this._events.hasOwnProperty(event)) {
        if ((0, _TypeCheck.isUndef)(callback)) {
          this._events[event] = [];
        } else {
          const eventList = this._events[event];

          for (let i = 0; i < eventList.length; i++) {
            if (eventList[i] === callback) {
              eventList.splice(i, 1);
            }
          }
        }
      }
    });
    return this;
  }
  /**
   * Invoke all of the callbacks bound to the event
   * with any arguments passed in.
   * @param  event  The name of the event.
   * @param args The arguments to pass to the functions listening.
   */


  emit(event, ...args) {
    if (this._events) {
      if (this._events.hasOwnProperty(event)) {
        const eventList = this._events[event].slice(0);

        for (let i = 0, len = eventList.length; i < len; i++) {
          eventList[i].apply(this, args);
        }
      }
    }

    return this;
  }
  /**
   * Add Emitter functions (on/off/emit) to the object
   */


  static mixin(constr) {
    // instance._events = {};
    ["on", "once", "off", "emit"].forEach(name => {
      const property = Object.getOwnPropertyDescriptor(Emitter.prototype, name);
      Object.defineProperty(constr.prototype, name, property);
    });
  }
  /**
   * Clean up
   */


  dispose() {
    super.dispose();
    this._events = undefined;
    return this;
  }

}

exports.Emitter = Emitter;
},{"../Tone":"../node_modules/tone/build/esm/core/Tone.js","./TypeCheck":"../node_modules/tone/build/esm/core/util/TypeCheck.js"}],"../node_modules/tone/build/esm/core/context/BaseContext.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BaseContext = void 0;

var _Emitter = require("../util/Emitter");

class BaseContext extends _Emitter.Emitter {
  constructor() {
    super(...arguments);
    this.isOffline = false;
  }

}

exports.BaseContext = BaseContext;
},{"../util/Emitter":"../node_modules/tone/build/esm/core/util/Emitter.js"}],"../node_modules/tone/build/esm/core/context/Context.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Context = void 0;

var _tslib = require("tslib");

var _Ticker = require("../clock/Ticker");

var _AdvancedTypeCheck = require("../util/AdvancedTypeCheck");

var _Defaults = require("../util/Defaults");

var _Timeline = require("../util/Timeline");

var _TypeCheck = require("../util/TypeCheck");

var _AudioContext = require("./AudioContext");

var _ContextInitialization = require("./ContextInitialization");

var _BaseContext = require("./BaseContext");

var _Debug = require("../util/Debug");

/**
 * Wrapper around the native AudioContext.
 * @category Core
 */
class Context extends _BaseContext.BaseContext {
  constructor() {
    super();
    this.name = "Context";
    /**
     * An object containing all of the constants AudioBufferSourceNodes
     */

    this._constants = new Map();
    /**
     * All of the setTimeout events.
     */

    this._timeouts = new _Timeline.Timeline();
    /**
     * The timeout id counter
     */

    this._timeoutIds = 0;
    /**
     * Private indicator if the context has been initialized
     */

    this._initialized = false;
    /**
     * Indicates if the context is an OfflineAudioContext or an AudioContext
     */

    this.isOffline = false; //--------------------------------------------
    // AUDIO WORKLET
    //--------------------------------------------

    /**
     * Maps a module name to promise of the addModule method
     */

    this._workletModules = new Map();
    const options = (0, _Defaults.optionsFromArguments)(Context.getDefaults(), arguments, ["context"]);

    if (options.context) {
      this._context = options.context;
    } else {
      this._context = (0, _AudioContext.createAudioContext)({
        latencyHint: options.latencyHint
      });
    }

    this._ticker = new _Ticker.Ticker(this.emit.bind(this, "tick"), options.clockSource, options.updateInterval);
    this.on("tick", this._timeoutLoop.bind(this)); // fwd events from the context

    this._context.onstatechange = () => {
      this.emit("statechange", this.state);
    };

    this._setLatencyHint(options.latencyHint);

    this.lookAhead = options.lookAhead;
  }

  static getDefaults() {
    return {
      clockSource: "worker",
      latencyHint: "interactive",
      lookAhead: 0.1,
      updateInterval: 0.05
    };
  }
  /**
   * Finish setting up the context. **You usually do not need to do this manually.**
   */


  initialize() {
    if (!this._initialized) {
      // add any additional modules
      (0, _ContextInitialization.initializeContext)(this);
      this._initialized = true;
    }

    return this;
  } //---------------------------
  // BASE AUDIO CONTEXT METHODS
  //---------------------------


  createAnalyser() {
    return this._context.createAnalyser();
  }

  createOscillator() {
    return this._context.createOscillator();
  }

  createBufferSource() {
    return this._context.createBufferSource();
  }

  createBiquadFilter() {
    return this._context.createBiquadFilter();
  }

  createBuffer(numberOfChannels, length, sampleRate) {
    return this._context.createBuffer(numberOfChannels, length, sampleRate);
  }

  createChannelMerger(numberOfInputs) {
    return this._context.createChannelMerger(numberOfInputs);
  }

  createChannelSplitter(numberOfOutputs) {
    return this._context.createChannelSplitter(numberOfOutputs);
  }

  createConstantSource() {
    return this._context.createConstantSource();
  }

  createConvolver() {
    return this._context.createConvolver();
  }

  createDelay(maxDelayTime) {
    return this._context.createDelay(maxDelayTime);
  }

  createDynamicsCompressor() {
    return this._context.createDynamicsCompressor();
  }

  createGain() {
    return this._context.createGain();
  }

  createIIRFilter(feedForward, feedback) {
    // @ts-ignore
    return this._context.createIIRFilter(feedForward, feedback);
  }

  createPanner() {
    return this._context.createPanner();
  }

  createPeriodicWave(real, imag, constraints) {
    return this._context.createPeriodicWave(real, imag, constraints);
  }

  createStereoPanner() {
    return this._context.createStereoPanner();
  }

  createWaveShaper() {
    return this._context.createWaveShaper();
  }

  createMediaStreamSource(stream) {
    (0, _Debug.assert)((0, _AdvancedTypeCheck.isAudioContext)(this._context), "Not available if OfflineAudioContext");
    const context = this._context;
    return context.createMediaStreamSource(stream);
  }

  createMediaStreamDestination() {
    (0, _Debug.assert)((0, _AdvancedTypeCheck.isAudioContext)(this._context), "Not available if OfflineAudioContext");
    const context = this._context;
    return context.createMediaStreamDestination();
  }

  decodeAudioData(audioData) {
    return this._context.decodeAudioData(audioData);
  }
  /**
   * The current time in seconds of the AudioContext.
   */


  get currentTime() {
    return this._context.currentTime;
  }
  /**
   * The current time in seconds of the AudioContext.
   */


  get state() {
    return this._context.state;
  }
  /**
   * The current time in seconds of the AudioContext.
   */


  get sampleRate() {
    return this._context.sampleRate;
  }
  /**
   * The listener
   */


  get listener() {
    this.initialize();
    return this._listener;
  }

  set listener(l) {
    (0, _Debug.assert)(!this._initialized, "The listener cannot be set after initialization.");
    this._listener = l;
  }
  /**
   * There is only one Transport per Context. It is created on initialization.
   */


  get transport() {
    this.initialize();
    return this._transport;
  }

  set transport(t) {
    (0, _Debug.assert)(!this._initialized, "The transport cannot be set after initialization.");
    this._transport = t;
  }
  /**
   * This is the Draw object for the context which is useful for synchronizing the draw frame with the Tone.js clock.
   */


  get draw() {
    this.initialize();
    return this._draw;
  }

  set draw(d) {
    (0, _Debug.assert)(!this._initialized, "Draw cannot be set after initialization.");
    this._draw = d;
  }
  /**
   * A reference to the Context's destination node.
   */


  get destination() {
    this.initialize();
    return this._destination;
  }

  set destination(d) {
    (0, _Debug.assert)(!this._initialized, "The destination cannot be set after initialization.");
    this._destination = d;
  }
  /**
   * Create an audio worklet node from a name and options. The module
   * must first be loaded using [[addAudioWorkletModule]].
   */


  createAudioWorkletNode(name, options) {
    return (0, _AudioContext.createAudioWorkletNode)(this.rawContext, name, options);
  }
  /**
   * Add an AudioWorkletProcessor module
   * @param url The url of the module
   * @param name The name of the module
   */


  addAudioWorkletModule(url, name) {
    return (0, _tslib.__awaiter)(this, void 0, void 0, function* () {
      (0, _Debug.assert)((0, _TypeCheck.isDefined)(this.rawContext.audioWorklet), "AudioWorkletNode is only available in a secure context (https or localhost)");

      if (!this._workletModules.has(name)) {
        this._workletModules.set(name, this.rawContext.audioWorklet.addModule(url));
      }

      yield this._workletModules.get(name);
    });
  }
  /**
   * Returns a promise which resolves when all of the worklets have been loaded on this context
   */


  workletsAreReady() {
    return (0, _tslib.__awaiter)(this, void 0, void 0, function* () {
      const promises = [];

      this._workletModules.forEach(promise => promises.push(promise));

      yield Promise.all(promises);
    });
  } //---------------------------
  // TICKER
  //---------------------------

  /**
   * How often the interval callback is invoked.
   * This number corresponds to how responsive the scheduling
   * can be. context.updateInterval + context.lookAhead gives you the
   * total latency between scheduling an event and hearing it.
   */


  get updateInterval() {
    return this._ticker.updateInterval;
  }

  set updateInterval(interval) {
    this._ticker.updateInterval = interval;
  }
  /**
   * What the source of the clock is, either "worker" (default),
   * "timeout", or "offline" (none).
   */


  get clockSource() {
    return this._ticker.type;
  }

  set clockSource(type) {
    this._ticker.type = type;
  }
  /**
   * The type of playback, which affects tradeoffs between audio
   * output latency and responsiveness.
   * In addition to setting the value in seconds, the latencyHint also
   * accepts the strings "interactive" (prioritizes low latency),
   * "playback" (prioritizes sustained playback), "balanced" (balances
   * latency and performance).
   * @example
   * // prioritize sustained playback
   * const context = new Tone.Context({ latencyHint: "playback" });
   * // set this context as the global Context
   * Tone.setContext(context);
   */


  get latencyHint() {
    return this._latencyHint;
  }
  /**
   * Update the lookAhead and updateInterval based on the latencyHint
   */


  _setLatencyHint(hint) {
    let lookAheadValue = 0;
    this._latencyHint = hint;

    if ((0, _TypeCheck.isString)(hint)) {
      switch (hint) {
        case "interactive":
          lookAheadValue = 0.1;
          break;

        case "playback":
          lookAheadValue = 0.5;
          break;

        case "balanced":
          lookAheadValue = 0.25;
          break;
      }
    }

    this.lookAhead = lookAheadValue;
    this.updateInterval = lookAheadValue / 2;
  }
  /**
   * The unwrapped AudioContext or OfflineAudioContext
   */


  get rawContext() {
    return this._context;
  }
  /**
   * The current audio context time plus a short [[lookAhead]].
   */


  now() {
    return this._context.currentTime + this.lookAhead;
  }
  /**
   * The current audio context time without the [[lookAhead]].
   * In most cases it is better to use [[now]] instead of [[immediate]] since
   * with [[now]] the [[lookAhead]] is applied equally to _all_ components including internal components,
   * to making sure that everything is scheduled in sync. Mixing [[now]] and [[immediate]]
   * can cause some timing issues. If no lookAhead is desired, you can set the [[lookAhead]] to `0`.
   */


  immediate() {
    return this._context.currentTime;
  }
  /**
   * Starts the audio context from a suspended state. This is required
   * to initially start the AudioContext. See [[Tone.start]]
   */


  resume() {
    if (this._context.state === "suspended" && (0, _AdvancedTypeCheck.isAudioContext)(this._context)) {
      return this._context.resume();
    } else {
      return Promise.resolve();
    }
  }
  /**
   * Close the context. Once closed, the context can no longer be used and
   * any AudioNodes created from the context will be silent.
   */


  close() {
    return (0, _tslib.__awaiter)(this, void 0, void 0, function* () {
      if ((0, _AdvancedTypeCheck.isAudioContext)(this._context)) {
        yield this._context.close();
      }

      if (this._initialized) {
        (0, _ContextInitialization.closeContext)(this);
      }
    });
  }
  /**
   * **Internal** Generate a looped buffer at some constant value.
   */


  getConstant(val) {
    if (this._constants.has(val)) {
      return this._constants.get(val);
    } else {
      const buffer = this._context.createBuffer(1, 128, this._context.sampleRate);

      const arr = buffer.getChannelData(0);

      for (let i = 0; i < arr.length; i++) {
        arr[i] = val;
      }

      const constant = this._context.createBufferSource();

      constant.channelCount = 1;
      constant.channelCountMode = "explicit";
      constant.buffer = buffer;
      constant.loop = true;
      constant.start(0);

      this._constants.set(val, constant);

      return constant;
    }
  }
  /**
   * Clean up. Also closes the audio context.
   */


  dispose() {
    super.dispose();

    this._ticker.dispose();

    this._timeouts.dispose();

    Object.keys(this._constants).map(val => this._constants[val].disconnect());
    return this;
  } //---------------------------
  // TIMEOUTS
  //---------------------------

  /**
   * The private loop which keeps track of the context scheduled timeouts
   * Is invoked from the clock source
   */


  _timeoutLoop() {
    const now = this.now();

    let firstEvent = this._timeouts.peek();

    while (this._timeouts.length && firstEvent && firstEvent.time <= now) {
      // invoke the callback
      firstEvent.callback(); // shift the first event off

      this._timeouts.shift(); // get the next one


      firstEvent = this._timeouts.peek();
    }
  }
  /**
   * A setTimeout which is guaranteed by the clock source.
   * Also runs in the offline context.
   * @param  fn       The callback to invoke
   * @param  timeout  The timeout in seconds
   * @returns ID to use when invoking Context.clearTimeout
   */


  setTimeout(fn, timeout) {
    this._timeoutIds++;
    const now = this.now();

    this._timeouts.add({
      callback: fn,
      id: this._timeoutIds,
      time: now + timeout
    });

    return this._timeoutIds;
  }
  /**
   * Clears a previously scheduled timeout with Tone.context.setTimeout
   * @param  id  The ID returned from setTimeout
   */


  clearTimeout(id) {
    this._timeouts.forEach(event => {
      if (event.id === id) {
        this._timeouts.remove(event);
      }
    });

    return this;
  }
  /**
   * Clear the function scheduled by [[setInterval]]
   */


  clearInterval(id) {
    return this.clearTimeout(id);
  }
  /**
   * Adds a repeating event to the context's callback clock
   */


  setInterval(fn, interval) {
    const id = ++this._timeoutIds;

    const intervalFn = () => {
      const now = this.now();

      this._timeouts.add({
        callback: () => {
          // invoke the callback
          fn(); // invoke the event to repeat it

          intervalFn();
        },
        id,
        time: now + interval
      });
    }; // kick it off


    intervalFn();
    return id;
  }

}

exports.Context = Context;
},{"tslib":"../node_modules/tslib/tslib.es6.js","../clock/Ticker":"../node_modules/tone/build/esm/core/clock/Ticker.js","../util/AdvancedTypeCheck":"../node_modules/tone/build/esm/core/util/AdvancedTypeCheck.js","../util/Defaults":"../node_modules/tone/build/esm/core/util/Defaults.js","../util/Timeline":"../node_modules/tone/build/esm/core/util/Timeline.js","../util/TypeCheck":"../node_modules/tone/build/esm/core/util/TypeCheck.js","./AudioContext":"../node_modules/tone/build/esm/core/context/AudioContext.js","./ContextInitialization":"../node_modules/tone/build/esm/core/context/ContextInitialization.js","./BaseContext":"../node_modules/tone/build/esm/core/context/BaseContext.js","../util/Debug":"../node_modules/tone/build/esm/core/util/Debug.js"}],"../node_modules/tone/build/esm/core/context/DummyContext.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DummyContext = void 0;

var _tslib = require("tslib");

var _BaseContext = require("./BaseContext");

class DummyContext extends _BaseContext.BaseContext {
  constructor() {
    super(...arguments);
    this.lookAhead = 0;
    this.latencyHint = 0;
    this.isOffline = false;
  } //---------------------------
  // BASE AUDIO CONTEXT METHODS
  //---------------------------


  createAnalyser() {
    return {};
  }

  createOscillator() {
    return {};
  }

  createBufferSource() {
    return {};
  }

  createBiquadFilter() {
    return {};
  }

  createBuffer(_numberOfChannels, _length, _sampleRate) {
    return {};
  }

  createChannelMerger(_numberOfInputs) {
    return {};
  }

  createChannelSplitter(_numberOfOutputs) {
    return {};
  }

  createConstantSource() {
    return {};
  }

  createConvolver() {
    return {};
  }

  createDelay(_maxDelayTime) {
    return {};
  }

  createDynamicsCompressor() {
    return {};
  }

  createGain() {
    return {};
  }

  createIIRFilter(_feedForward, _feedback) {
    return {};
  }

  createPanner() {
    return {};
  }

  createPeriodicWave(_real, _imag, _constraints) {
    return {};
  }

  createStereoPanner() {
    return {};
  }

  createWaveShaper() {
    return {};
  }

  createMediaStreamSource(_stream) {
    return {};
  }

  createMediaStreamDestination() {
    return {};
  }

  decodeAudioData(_audioData) {
    return Promise.resolve({});
  } //---------------------------
  // TONE AUDIO CONTEXT METHODS
  //---------------------------


  createAudioWorkletNode(_name, _options) {
    return {};
  }

  get rawContext() {
    return {};
  }

  addAudioWorkletModule(_url, _name) {
    return (0, _tslib.__awaiter)(this, void 0, void 0, function* () {
      return Promise.resolve();
    });
  }

  resume() {
    return Promise.resolve();
  }

  setTimeout(_fn, _timeout) {
    return 0;
  }

  clearTimeout(_id) {
    return this;
  }

  setInterval(_fn, _interval) {
    return 0;
  }

  clearInterval(_id) {
    return this;
  }

  getConstant(_val) {
    return {};
  }

  get currentTime() {
    return 0;
  }

  get state() {
    return {};
  }

  get sampleRate() {
    return 0;
  }

  get listener() {
    return {};
  }

  get transport() {
    return {};
  }

  get draw() {
    return {};
  }

  set draw(_d) {}

  get destination() {
    return {};
  }

  set destination(_d) {}

  now() {
    return 0;
  }

  immediate() {
    return 0;
  }

}

exports.DummyContext = DummyContext;
},{"tslib":"../node_modules/tslib/tslib.es6.js","./BaseContext":"../node_modules/tone/build/esm/core/context/BaseContext.js"}],"../node_modules/tone/build/esm/core/util/Interface.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.readOnly = readOnly;
exports.writable = writable;
exports.noOp = void 0;

var _TypeCheck = require("./TypeCheck");

/**
 * Make the property not writable using `defineProperty`. Internal use only.
 */
function readOnly(target, property) {
  if ((0, _TypeCheck.isArray)(property)) {
    property.forEach(str => readOnly(target, str));
  } else {
    Object.defineProperty(target, property, {
      enumerable: true,
      writable: false
    });
  }
}
/**
 * Make an attribute writeable. Internal use only.
 */


function writable(target, property) {
  if ((0, _TypeCheck.isArray)(property)) {
    property.forEach(str => writable(target, str));
  } else {
    Object.defineProperty(target, property, {
      writable: true
    });
  }
}

const noOp = () => {// no operation here!
};

exports.noOp = noOp;
},{"./TypeCheck":"../node_modules/tone/build/esm/core/util/TypeCheck.js"}],"../node_modules/tone/build/esm/core/context/ToneAudioBuffer.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ToneAudioBuffer = void 0;

var _tslib = require("tslib");

var _Global = require("../Global");

var _Tone = require("../Tone");

var _AdvancedTypeCheck = require("../util/AdvancedTypeCheck");

var _Defaults = require("../util/Defaults");

var _Interface = require("../util/Interface");

var _TypeCheck = require("../util/TypeCheck");

var _Debug = require("../util/Debug");

/**
 * AudioBuffer loading and storage. ToneAudioBuffer is used internally by all
 * classes that make requests for audio files such as Tone.Player,
 * Tone.Sampler and Tone.Convolver.
 * Aside from load callbacks from individual buffers, ToneAudioBuffer
 * provides events which keep track of the loading progress
 * of _all_ of the buffers. These are ToneAudioBuffer.on("load" / "progress" / "error")
 * @example
 * const buffer = new Tone.ToneAudioBuffer("https://tonejs.github.io/audio/casio/A1.mp3", () => {
 * 	console.log("loaded");
 * });
 * @category Core
 */
class ToneAudioBuffer extends _Tone.Tone {
  constructor() {
    super();
    this.name = "ToneAudioBuffer";
    /**
     * Callback when the buffer is loaded.
     */

    this.onload = _Interface.noOp;
    const options = (0, _Defaults.optionsFromArguments)(ToneAudioBuffer.getDefaults(), arguments, ["url", "onload", "onerror"]);
    this.reverse = options.reverse;
    this.onload = options.onload;

    if (options.url && (0, _AdvancedTypeCheck.isAudioBuffer)(options.url) || options.url instanceof ToneAudioBuffer) {
      this.set(options.url);
    } else if ((0, _TypeCheck.isString)(options.url)) {
      // initiate the download
      this.load(options.url).catch(options.onerror);
    }
  }

  static getDefaults() {
    return {
      onerror: _Interface.noOp,
      onload: _Interface.noOp,
      reverse: false
    };
  }
  /**
   * The sample rate of the AudioBuffer
   */


  get sampleRate() {
    if (this._buffer) {
      return this._buffer.sampleRate;
    } else {
      return (0, _Global.getContext)().sampleRate;
    }
  }
  /**
   * Pass in an AudioBuffer or ToneAudioBuffer to set the value of this buffer.
   */


  set(buffer) {
    if (buffer instanceof ToneAudioBuffer) {
      // if it's loaded, set it
      if (buffer.loaded) {
        this._buffer = buffer.get();
      } else {
        // otherwise when it's loaded, invoke it's callback
        buffer.onload = () => {
          this.set(buffer);
          this.onload(this);
        };
      }
    } else {
      this._buffer = buffer;
    } // reverse it initially


    if (this._reversed) {
      this._reverse();
    }

    return this;
  }
  /**
   * The audio buffer stored in the object.
   */


  get() {
    return this._buffer;
  }
  /**
   * Makes an fetch request for the selected url then decodes the file as an audio buffer.
   * Invokes the callback once the audio buffer loads.
   * @param url The url of the buffer to load. filetype support depends on the browser.
   * @returns A Promise which resolves with this ToneAudioBuffer
   */


  load(url) {
    return (0, _tslib.__awaiter)(this, void 0, void 0, function* () {
      const doneLoading = ToneAudioBuffer.load(url).then(audioBuffer => {
        this.set(audioBuffer); // invoke the onload method

        this.onload(this);
      });
      ToneAudioBuffer.downloads.push(doneLoading);

      try {
        yield doneLoading;
      } finally {
        // remove the downloaded file
        const index = ToneAudioBuffer.downloads.indexOf(doneLoading);
        ToneAudioBuffer.downloads.splice(index, 1);
      }

      return this;
    });
  }
  /**
   * clean up
   */


  dispose() {
    super.dispose();
    this._buffer = undefined;
    return this;
  }
  /**
   * Set the audio buffer from the array.
   * To create a multichannel AudioBuffer, pass in a multidimensional array.
   * @param array The array to fill the audio buffer
   */


  fromArray(array) {
    const isMultidimensional = (0, _TypeCheck.isArray)(array) && array[0].length > 0;
    const channels = isMultidimensional ? array.length : 1;
    const len = isMultidimensional ? array[0].length : array.length;
    const context = (0, _Global.getContext)();
    const buffer = context.createBuffer(channels, len, context.sampleRate);
    const multiChannelArray = !isMultidimensional && channels === 1 ? [array] : array;

    for (let c = 0; c < channels; c++) {
      buffer.copyToChannel(multiChannelArray[c], c);
    }

    this._buffer = buffer;
    return this;
  }
  /**
   * Sums multiple channels into 1 channel
   * @param chanNum Optionally only copy a single channel from the array.
   */


  toMono(chanNum) {
    if ((0, _TypeCheck.isNumber)(chanNum)) {
      this.fromArray(this.toArray(chanNum));
    } else {
      let outputArray = new Float32Array(this.length);
      const numChannels = this.numberOfChannels;

      for (let channel = 0; channel < numChannels; channel++) {
        const channelArray = this.toArray(channel);

        for (let i = 0; i < channelArray.length; i++) {
          outputArray[i] += channelArray[i];
        }
      } // divide by the number of channels


      outputArray = outputArray.map(sample => sample / numChannels);
      this.fromArray(outputArray);
    }

    return this;
  }
  /**
   * Get the buffer as an array. Single channel buffers will return a 1-dimensional
   * Float32Array, and multichannel buffers will return multidimensional arrays.
   * @param channel Optionally only copy a single channel from the array.
   */


  toArray(channel) {
    if ((0, _TypeCheck.isNumber)(channel)) {
      return this.getChannelData(channel);
    } else if (this.numberOfChannels === 1) {
      return this.toArray(0);
    } else {
      const ret = [];

      for (let c = 0; c < this.numberOfChannels; c++) {
        ret[c] = this.getChannelData(c);
      }

      return ret;
    }
  }
  /**
   * Returns the Float32Array representing the PCM audio data for the specific channel.
   * @param  channel  The channel number to return
   * @return The audio as a TypedArray
   */


  getChannelData(channel) {
    if (this._buffer) {
      return this._buffer.getChannelData(channel);
    } else {
      return new Float32Array(0);
    }
  }
  /**
   * Cut a subsection of the array and return a buffer of the
   * subsection. Does not modify the original buffer
   * @param start The time to start the slice
   * @param end The end time to slice. If none is given will default to the end of the buffer
   */


  slice(start, end = this.duration) {
    const startSamples = Math.floor(start * this.sampleRate);
    const endSamples = Math.floor(end * this.sampleRate);
    (0, _Debug.assert)(startSamples < endSamples, "The start time must be less than the end time");
    const length = endSamples - startSamples;
    const retBuffer = (0, _Global.getContext)().createBuffer(this.numberOfChannels, length, this.sampleRate);

    for (let channel = 0; channel < this.numberOfChannels; channel++) {
      retBuffer.copyToChannel(this.getChannelData(channel).subarray(startSamples, endSamples), channel);
    }

    return new ToneAudioBuffer(retBuffer);
  }
  /**
   * Reverse the buffer.
   */


  _reverse() {
    if (this.loaded) {
      for (let i = 0; i < this.numberOfChannels; i++) {
        this.getChannelData(i).reverse();
      }
    }

    return this;
  }
  /**
   * If the buffer is loaded or not
   */


  get loaded() {
    return this.length > 0;
  }
  /**
   * The duration of the buffer in seconds.
   */


  get duration() {
    if (this._buffer) {
      return this._buffer.duration;
    } else {
      return 0;
    }
  }
  /**
   * The length of the buffer in samples
   */


  get length() {
    if (this._buffer) {
      return this._buffer.length;
    } else {
      return 0;
    }
  }
  /**
   * The number of discrete audio channels. Returns 0 if no buffer is loaded.
   */


  get numberOfChannels() {
    if (this._buffer) {
      return this._buffer.numberOfChannels;
    } else {
      return 0;
    }
  }
  /**
   * Reverse the buffer.
   */


  get reverse() {
    return this._reversed;
  }

  set reverse(rev) {
    if (this._reversed !== rev) {
      this._reversed = rev;

      this._reverse();
    }
  }
  /**
   * Create a ToneAudioBuffer from the array. To create a multichannel AudioBuffer,
   * pass in a multidimensional array.
   * @param array The array to fill the audio buffer
   * @return A ToneAudioBuffer created from the array
   */


  static fromArray(array) {
    return new ToneAudioBuffer().fromArray(array);
  }
  /**
   * Creates a ToneAudioBuffer from a URL, returns a promise which resolves to a ToneAudioBuffer
   * @param  url The url to load.
   * @return A promise which resolves to a ToneAudioBuffer
   */


  static fromUrl(url) {
    return (0, _tslib.__awaiter)(this, void 0, void 0, function* () {
      const buffer = new ToneAudioBuffer();
      return yield buffer.load(url);
    });
  }
  /**
   * Loads a url using fetch and returns the AudioBuffer.
   */


  static load(url) {
    return (0, _tslib.__awaiter)(this, void 0, void 0, function* () {
      // test if the url contains multiple extensions
      const matches = url.match(/\[(.+\|?)+\]$/);

      if (matches) {
        const extensions = matches[1].split("|");
        let extension = extensions[0];

        for (const ext of extensions) {
          if (ToneAudioBuffer.supportsType(ext)) {
            extension = ext;
            break;
          }
        }

        url = url.replace(matches[0], extension);
      } // make sure there is a slash between the baseUrl and the url


      const baseUrl = ToneAudioBuffer.baseUrl === "" || ToneAudioBuffer.baseUrl.endsWith("/") ? ToneAudioBuffer.baseUrl : ToneAudioBuffer.baseUrl + "/";
      const response = yield fetch(baseUrl + url);

      if (!response.ok) {
        throw new Error(`could not load url: ${url}`);
      }

      const arrayBuffer = yield response.arrayBuffer();
      const audioBuffer = yield (0, _Global.getContext)().decodeAudioData(arrayBuffer);
      return audioBuffer;
    });
  }
  /**
   * Checks a url's extension to see if the current browser can play that file type.
   * @param url The url/extension to test
   * @return If the file extension can be played
   * @static
   * @example
   * Tone.ToneAudioBuffer.supportsType("wav"); // returns true
   * Tone.ToneAudioBuffer.supportsType("path/to/file.wav"); // returns true
   */


  static supportsType(url) {
    const extensions = url.split(".");
    const extension = extensions[extensions.length - 1];
    const response = document.createElement("audio").canPlayType("audio/" + extension);
    return response !== "";
  }
  /**
   * Returns a Promise which resolves when all of the buffers have loaded
   */


  static loaded() {
    return (0, _tslib.__awaiter)(this, void 0, void 0, function* () {
      // this makes sure that the function is always async
      yield Promise.resolve();

      while (ToneAudioBuffer.downloads.length) {
        yield ToneAudioBuffer.downloads[0];
      }
    });
  }

} //-------------------------------------
// STATIC METHODS
//-------------------------------------

/**
 * A path which is prefixed before every url.
 */


exports.ToneAudioBuffer = ToneAudioBuffer;
ToneAudioBuffer.baseUrl = "";
/**
 * All of the downloads
 */

ToneAudioBuffer.downloads = [];
},{"tslib":"../node_modules/tslib/tslib.es6.js","../Global":"../node_modules/tone/build/esm/core/Global.js","../Tone":"../node_modules/tone/build/esm/core/Tone.js","../util/AdvancedTypeCheck":"../node_modules/tone/build/esm/core/util/AdvancedTypeCheck.js","../util/Defaults":"../node_modules/tone/build/esm/core/util/Defaults.js","../util/Interface":"../node_modules/tone/build/esm/core/util/Interface.js","../util/TypeCheck":"../node_modules/tone/build/esm/core/util/TypeCheck.js","../util/Debug":"../node_modules/tone/build/esm/core/util/Debug.js"}],"../node_modules/tone/build/esm/core/context/OfflineContext.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.OfflineContext = void 0;

var _tslib = require("tslib");

var _AudioContext = require("../context/AudioContext");

var _Context = require("../context/Context");

var _AdvancedTypeCheck = require("../util/AdvancedTypeCheck");

var _ToneAudioBuffer = require("./ToneAudioBuffer");

/**
 * Wrapper around the OfflineAudioContext
 * @category Core
 * @example
 * // generate a single channel, 0.5 second buffer
 * const context = new Tone.OfflineContext(1, 0.5, 44100);
 * const osc = new Tone.Oscillator({ context });
 * context.render().then(buffer => {
 * 	console.log(buffer.numberOfChannels, buffer.duration);
 * });
 */
class OfflineContext extends _Context.Context {
  constructor() {
    super({
      clockSource: "offline",
      context: (0, _AdvancedTypeCheck.isOfflineAudioContext)(arguments[0]) ? arguments[0] : (0, _AudioContext.createOfflineAudioContext)(arguments[0], arguments[1] * arguments[2], arguments[2]),
      lookAhead: 0,
      updateInterval: (0, _AdvancedTypeCheck.isOfflineAudioContext)(arguments[0]) ? 128 / arguments[0].sampleRate : 128 / arguments[2]
    });
    this.name = "OfflineContext";
    /**
     * An artificial clock source
     */

    this._currentTime = 0;
    this.isOffline = true;
    this._duration = (0, _AdvancedTypeCheck.isOfflineAudioContext)(arguments[0]) ? arguments[0].length / arguments[0].sampleRate : arguments[1];
  }
  /**
   * Override the now method to point to the internal clock time
   */


  now() {
    return this._currentTime;
  }
  /**
   * Same as this.now()
   */


  get currentTime() {
    return this._currentTime;
  }
  /**
   * Render just the clock portion of the audio context.
   */


  _renderClock(asynchronous) {
    return (0, _tslib.__awaiter)(this, void 0, void 0, function* () {
      let index = 0;

      while (this._duration - this._currentTime >= 0) {
        // invoke all the callbacks on that time
        this.emit("tick"); // increment the clock in block-sized chunks

        this._currentTime += 128 / this.sampleRate; // yield once a second of audio

        index++;
        const yieldEvery = Math.floor(this.sampleRate / 128);

        if (asynchronous && index % yieldEvery === 0) {
          yield new Promise(done => setTimeout(done, 1));
        }
      }
    });
  }
  /**
   * Render the output of the OfflineContext
   * @param asynchronous If the clock should be rendered asynchronously, which will not block the main thread, but be slightly slower.
   */


  render(asynchronous = true) {
    return (0, _tslib.__awaiter)(this, void 0, void 0, function* () {
      yield this.workletsAreReady();
      yield this._renderClock(asynchronous);
      const buffer = yield this._context.startRendering();
      return new _ToneAudioBuffer.ToneAudioBuffer(buffer);
    });
  }
  /**
   * Close the context
   */


  close() {
    return Promise.resolve();
  }

}

exports.OfflineContext = OfflineContext;
},{"tslib":"../node_modules/tslib/tslib.es6.js","../context/AudioContext":"../node_modules/tone/build/esm/core/context/AudioContext.js","../context/Context":"../node_modules/tone/build/esm/core/context/Context.js","../util/AdvancedTypeCheck":"../node_modules/tone/build/esm/core/util/AdvancedTypeCheck.js","./ToneAudioBuffer":"../node_modules/tone/build/esm/core/context/ToneAudioBuffer.js"}],"../node_modules/tone/build/esm/core/Global.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getContext = getContext;
exports.setContext = setContext;
exports.start = start;

var _version = require("../version");

var _AudioContext = require("./context/AudioContext");

var _Context = require("./context/Context");

var _DummyContext = require("./context/DummyContext");

var _OfflineContext = require("./context/OfflineContext");

var _AdvancedTypeCheck = require("./util/AdvancedTypeCheck");

/**
 * This dummy context is used to avoid throwing immediate errors when importing in Node.js
 */
const dummyContext = new _DummyContext.DummyContext();
/**
 * The global audio context which is getable and assignable through
 * getContext and setContext
 */

let globalContext = dummyContext;
/**
 * Returns the default system-wide [[Context]]
 * @category Core
 */

function getContext() {
  if (globalContext === dummyContext && _AudioContext.hasAudioContext) {
    setContext(new _Context.Context());
  }

  return globalContext;
}
/**
 * Set the default audio context
 * @category Core
 */


function setContext(context) {
  if ((0, _AdvancedTypeCheck.isAudioContext)(context)) {
    globalContext = new _Context.Context(context);
  } else if ((0, _AdvancedTypeCheck.isOfflineAudioContext)(context)) {
    globalContext = new _OfflineContext.OfflineContext(context);
  } else {
    globalContext = context;
  }
}
/**
 * Most browsers will not play _any_ audio until a user
 * clicks something (like a play button). Invoke this method
 * on a click or keypress event handler to start the audio context.
 * More about the Autoplay policy
 * [here](https://developers.google.com/web/updates/2017/09/autoplay-policy-changes#webaudio)
 * @example
 * document.querySelector("button").addEventListener("click", async () => {
 * 	await Tone.start();
 * 	console.log("context started");
 * });
 * @category Core
 */


function start() {
  return globalContext.resume();
}
/**
 * Log Tone.js + version in the console.
 */


if (_AudioContext.theWindow && !_AudioContext.theWindow.TONE_SILENCE_LOGGING) {
  let prefix = "v";

  if (_version.version === "dev") {
    prefix = "";
  }

  const printString = ` * Tone.js ${prefix}${_version.version} * `; // eslint-disable-next-line no-console

  console.log(`%c${printString}`, "background: #000; color: #fff");
}
},{"../version":"../node_modules/tone/build/esm/version.js","./context/AudioContext":"../node_modules/tone/build/esm/core/context/AudioContext.js","./context/Context":"../node_modules/tone/build/esm/core/context/Context.js","./context/DummyContext":"../node_modules/tone/build/esm/core/context/DummyContext.js","./context/OfflineContext":"../node_modules/tone/build/esm/core/context/OfflineContext.js","./util/AdvancedTypeCheck":"../node_modules/tone/build/esm/core/util/AdvancedTypeCheck.js"}],"../node_modules/tone/build/esm/core/type/Conversions.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.equalPowerScale = equalPowerScale;
exports.dbToGain = dbToGain;
exports.gainToDb = gainToDb;
exports.intervalToFrequencyRatio = intervalToFrequencyRatio;
exports.getA4 = getA4;
exports.setA4 = setA4;
exports.ftom = ftom;
exports.ftomf = ftomf;
exports.mtof = mtof;

/**
 * Equal power gain scale. Good for cross-fading.
 * @param  percent (0-1)
 */
function equalPowerScale(percent) {
  const piFactor = 0.5 * Math.PI;
  return Math.sin(percent * piFactor);
}
/**
 * Convert decibels into gain.
 */


function dbToGain(db) {
  return Math.pow(10, db / 20);
}
/**
 * Convert gain to decibels.
 */


function gainToDb(gain) {
  return 20 * (Math.log(gain) / Math.LN10);
}
/**
 * Convert an interval (in semitones) to a frequency ratio.
 * @param interval the number of semitones above the base note
 * @example
 * Tone.intervalToFrequencyRatio(0); // 1
 * Tone.intervalToFrequencyRatio(12); // 2
 * Tone.intervalToFrequencyRatio(-12); // 0.5
 */


function intervalToFrequencyRatio(interval) {
  return Math.pow(2, interval / 12);
}
/**
 * The Global [concert tuning pitch](https://en.wikipedia.org/wiki/Concert_pitch) which is used
 * to generate all the other pitch values from notes. A4's values in Hertz.
 */


let A4 = 440;

function getA4() {
  return A4;
}

function setA4(freq) {
  A4 = freq;
}
/**
 * Convert a frequency value to a MIDI note.
 * @param frequency The value to frequency value to convert.
 * @example
 * Tone.ftom(440); // returns 69
 */


function ftom(frequency) {
  return Math.round(ftomf(frequency));
}
/**
 * Convert a frequency to a floating point midi value
 */


function ftomf(frequency) {
  return 69 + 12 * Math.log2(frequency / A4);
}
/**
 * Convert a MIDI note to frequency value.
 * @param  midi The midi number to convert.
 * @return The corresponding frequency value
 * @example
 * Tone.mtof(69); // 440
 */


function mtof(midi) {
  return A4 * Math.pow(2, (midi - 69) / 12);
}
},{}],"../node_modules/tone/build/esm/core/type/TimeBase.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TimeBaseClass = void 0;

var _Tone = require("../Tone");

var _TypeCheck = require("../util/TypeCheck");

/**
 * TimeBase is a flexible encoding of time which can be evaluated to and from a string.
 */
class TimeBaseClass extends _Tone.Tone {
  /**
   * @param context The context associated with the time value. Used to compute
   * Transport and context-relative timing.
   * @param  value  The time value as a number, string or object
   * @param  units  Unit values
   */
  constructor(context, value, units) {
    super();
    /**
     * The default units
     */

    this.defaultUnits = "s";
    this._val = value;
    this._units = units;
    this.context = context;
    this._expressions = this._getExpressions();
  }
  /**
   * All of the time encoding expressions
   */


  _getExpressions() {
    return {
      hz: {
        method: value => {
          return this._frequencyToUnits(parseFloat(value));
        },
        regexp: /^(\d+(?:\.\d+)?)hz$/i
      },
      i: {
        method: value => {
          return this._ticksToUnits(parseInt(value, 10));
        },
        regexp: /^(\d+)i$/i
      },
      m: {
        method: value => {
          return this._beatsToUnits(parseInt(value, 10) * this._getTimeSignature());
        },
        regexp: /^(\d+)m$/i
      },
      n: {
        method: (value, dot) => {
          const numericValue = parseInt(value, 10);
          const scalar = dot === "." ? 1.5 : 1;

          if (numericValue === 1) {
            return this._beatsToUnits(this._getTimeSignature()) * scalar;
          } else {
            return this._beatsToUnits(4 / numericValue) * scalar;
          }
        },
        regexp: /^(\d+)n(\.?)$/i
      },
      number: {
        method: value => {
          return this._expressions[this.defaultUnits].method.call(this, value);
        },
        regexp: /^(\d+(?:\.\d+)?)$/
      },
      s: {
        method: value => {
          return this._secondsToUnits(parseFloat(value));
        },
        regexp: /^(\d+(?:\.\d+)?)s$/
      },
      samples: {
        method: value => {
          return parseInt(value, 10) / this.context.sampleRate;
        },
        regexp: /^(\d+)samples$/
      },
      t: {
        method: value => {
          const numericValue = parseInt(value, 10);
          return this._beatsToUnits(8 / (Math.floor(numericValue) * 3));
        },
        regexp: /^(\d+)t$/i
      },
      tr: {
        method: (m, q, s) => {
          let total = 0;

          if (m && m !== "0") {
            total += this._beatsToUnits(this._getTimeSignature() * parseFloat(m));
          }

          if (q && q !== "0") {
            total += this._beatsToUnits(parseFloat(q));
          }

          if (s && s !== "0") {
            total += this._beatsToUnits(parseFloat(s) / 4);
          }

          return total;
        },
        regexp: /^(\d+(?:\.\d+)?):(\d+(?:\.\d+)?):?(\d+(?:\.\d+)?)?$/
      }
    };
  } //-------------------------------------
  // 	VALUE OF
  //-------------------------------------

  /**
   * Evaluate the time value. Returns the time in seconds.
   */


  valueOf() {
    if (this._val instanceof TimeBaseClass) {
      this.fromType(this._val);
    }

    if ((0, _TypeCheck.isUndef)(this._val)) {
      return this._noArg();
    } else if ((0, _TypeCheck.isString)(this._val) && (0, _TypeCheck.isUndef)(this._units)) {
      for (const units in this._expressions) {
        if (this._expressions[units].regexp.test(this._val.trim())) {
          this._units = units;
          break;
        }
      }
    } else if ((0, _TypeCheck.isObject)(this._val)) {
      let total = 0;

      for (const typeName in this._val) {
        if ((0, _TypeCheck.isDefined)(this._val[typeName])) {
          const quantity = this._val[typeName]; // @ts-ignore

          const time = new this.constructor(this.context, typeName).valueOf() * quantity;
          total += time;
        }
      }

      return total;
    }

    if ((0, _TypeCheck.isDefined)(this._units)) {
      const expr = this._expressions[this._units];

      const matching = this._val.toString().trim().match(expr.regexp);

      if (matching) {
        return expr.method.apply(this, matching.slice(1));
      } else {
        return expr.method.call(this, this._val);
      }
    } else if ((0, _TypeCheck.isString)(this._val)) {
      return parseFloat(this._val);
    } else {
      return this._val;
    }
  } //-------------------------------------
  // 	UNIT CONVERSIONS
  //-------------------------------------

  /**
   * Returns the value of a frequency in the current units
   */


  _frequencyToUnits(freq) {
    return 1 / freq;
  }
  /**
   * Return the value of the beats in the current units
   */


  _beatsToUnits(beats) {
    return 60 / this._getBpm() * beats;
  }
  /**
   * Returns the value of a second in the current units
   */


  _secondsToUnits(seconds) {
    return seconds;
  }
  /**
   * Returns the value of a tick in the current time units
   */


  _ticksToUnits(ticks) {
    return ticks * this._beatsToUnits(1) / this._getPPQ();
  }
  /**
   * With no arguments, return 'now'
   */


  _noArg() {
    return this._now();
  } //-------------------------------------
  // 	TEMPO CONVERSIONS
  //-------------------------------------

  /**
   * Return the bpm
   */


  _getBpm() {
    return this.context.transport.bpm.value;
  }
  /**
   * Return the timeSignature
   */


  _getTimeSignature() {
    return this.context.transport.timeSignature;
  }
  /**
   * Return the PPQ or 192 if Transport is not available
   */


  _getPPQ() {
    return this.context.transport.PPQ;
  } //-------------------------------------
  // 	CONVERSION INTERFACE
  //-------------------------------------

  /**
   * Coerce a time type into this units type.
   * @param type Any time type units
   */


  fromType(type) {
    this._units = undefined;

    switch (this.defaultUnits) {
      case "s":
        this._val = type.toSeconds();
        break;

      case "i":
        this._val = type.toTicks();
        break;

      case "hz":
        this._val = type.toFrequency();
        break;

      case "midi":
        this._val = type.toMidi();
        break;
    }

    return this;
  }
  /**
   * Return the value in hertz
   */


  toFrequency() {
    return 1 / this.toSeconds();
  }
  /**
   * Return the time in samples
   */


  toSamples() {
    return this.toSeconds() * this.context.sampleRate;
  }
  /**
   * Return the time in milliseconds.
   */


  toMilliseconds() {
    return this.toSeconds() * 1000;
  }

}

exports.TimeBaseClass = TimeBaseClass;
},{"../Tone":"../node_modules/tone/build/esm/core/Tone.js","../util/TypeCheck":"../node_modules/tone/build/esm/core/util/TypeCheck.js"}],"../node_modules/tone/build/esm/core/type/Time.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Time = Time;
exports.TimeClass = void 0;

var _Global = require("../Global");

var _Conversions = require("./Conversions");

var _TimeBase = require("./TimeBase");

/**
 * TimeClass is a primitive type for encoding and decoding Time values.
 * TimeClass can be passed into the parameter of any method which takes time as an argument.
 * @param  val    The time value.
 * @param  units  The units of the value.
 * @example
 * const time = Tone.Time("4n"); // a quarter note
 * @category Unit
 */
class TimeClass extends _TimeBase.TimeBaseClass {
  constructor() {
    super(...arguments);
    this.name = "TimeClass";
  }

  _getExpressions() {
    return Object.assign(super._getExpressions(), {
      now: {
        method: capture => {
          return this._now() + new this.constructor(this.context, capture).valueOf();
        },
        regexp: /^\+(.+)/
      },
      quantize: {
        method: capture => {
          const quantTo = new TimeClass(this.context, capture).valueOf();
          return this._secondsToUnits(this.context.transport.nextSubdivision(quantTo));
        },
        regexp: /^@(.+)/
      }
    });
  }
  /**
   * Quantize the time by the given subdivision. Optionally add a
   * percentage which will move the time value towards the ideal
   * quantized value by that percentage.
   * @param  subdiv    The subdivision to quantize to
   * @param  percent  Move the time value towards the quantized value by a percentage.
   * @example
   * Tone.Time(21).quantize(2); // returns 22
   * Tone.Time(0.6).quantize("4n", 0.5); // returns 0.55
   */


  quantize(subdiv, percent = 1) {
    const subdivision = new this.constructor(this.context, subdiv).valueOf();
    const value = this.valueOf();
    const multiple = Math.round(value / subdivision);
    const ideal = multiple * subdivision;
    const diff = ideal - value;
    return value + diff * percent;
  } //-------------------------------------
  // CONVERSIONS
  //-------------------------------------

  /**
   * Convert a Time to Notation. The notation values are will be the
   * closest representation between 1m to 128th note.
   * @return {Notation}
   * @example
   * // if the Transport is at 120bpm:
   * Tone.Time(2).toNotation(); // returns "1m"
   */


  toNotation() {
    const time = this.toSeconds();
    const testNotations = ["1m"];

    for (let power = 1; power < 9; power++) {
      const subdiv = Math.pow(2, power);
      testNotations.push(subdiv + "n.");
      testNotations.push(subdiv + "n");
      testNotations.push(subdiv + "t");
    }

    testNotations.push("0"); // find the closets notation representation

    let closest = testNotations[0];
    let closestSeconds = new TimeClass(this.context, testNotations[0]).toSeconds();
    testNotations.forEach(notation => {
      const notationSeconds = new TimeClass(this.context, notation).toSeconds();

      if (Math.abs(notationSeconds - time) < Math.abs(closestSeconds - time)) {
        closest = notation;
        closestSeconds = notationSeconds;
      }
    });
    return closest;
  }
  /**
   * Return the time encoded as Bars:Beats:Sixteenths.
   */


  toBarsBeatsSixteenths() {
    const quarterTime = this._beatsToUnits(1);

    let quarters = this.valueOf() / quarterTime;
    quarters = parseFloat(quarters.toFixed(4));
    const measures = Math.floor(quarters / this._getTimeSignature());
    let sixteenths = quarters % 1 * 4;
    quarters = Math.floor(quarters) % this._getTimeSignature();
    const sixteenthString = sixteenths.toString();

    if (sixteenthString.length > 3) {
      // the additional parseFloat removes insignificant trailing zeroes
      sixteenths = parseFloat(parseFloat(sixteenthString).toFixed(3));
    }

    const progress = [measures, quarters, sixteenths];
    return progress.join(":");
  }
  /**
   * Return the time in ticks.
   */


  toTicks() {
    const quarterTime = this._beatsToUnits(1);

    const quarters = this.valueOf() / quarterTime;
    return Math.round(quarters * this._getPPQ());
  }
  /**
   * Return the time in seconds.
   */


  toSeconds() {
    return this.valueOf();
  }
  /**
   * Return the value as a midi note.
   */


  toMidi() {
    return (0, _Conversions.ftom)(this.toFrequency());
  }

  _now() {
    return this.context.now();
  }

}
/**
 * Create a TimeClass from a time string or number. The time is computed against the
 * global Tone.Context. To use a specific context, use [[TimeClass]]
 * @param value A value which represents time
 * @param units The value's units if they can't be inferred by the value.
 * @category Unit
 * @example
 * const time = Tone.Time("4n").toSeconds();
 * console.log(time);
 * @example
 * const note = Tone.Time(1).toNotation();
 * console.log(note);
 * @example
 * const freq = Tone.Time(0.5).toFrequency();
 * console.log(freq);
 */


exports.TimeClass = TimeClass;

function Time(value, units) {
  return new TimeClass((0, _Global.getContext)(), value, units);
}
},{"../Global":"../node_modules/tone/build/esm/core/Global.js","./Conversions":"../node_modules/tone/build/esm/core/type/Conversions.js","./TimeBase":"../node_modules/tone/build/esm/core/type/TimeBase.js"}],"../node_modules/tone/build/esm/core/type/Frequency.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Frequency = Frequency;
exports.FrequencyClass = void 0;

var _Global = require("../Global");

var _Conversions = require("./Conversions");

var _Time = require("./Time");

/**
 * Frequency is a primitive type for encoding Frequency values.
 * Eventually all time values are evaluated to hertz using the `valueOf` method.
 * @example
 * Tone.Frequency("C3"); // 261
 * Tone.Frequency(38, "midi");
 * Tone.Frequency("C3").transpose(4);
 * @category Unit
 */
class FrequencyClass extends _Time.TimeClass {
  constructor() {
    super(...arguments);
    this.name = "Frequency";
    this.defaultUnits = "hz";
  }
  /**
   * The [concert tuning pitch](https://en.wikipedia.org/wiki/Concert_pitch) which is used
   * to generate all the other pitch values from notes. A4's values in Hertz.
   */


  static get A4() {
    return (0, _Conversions.getA4)();
  }

  static set A4(freq) {
    (0, _Conversions.setA4)(freq);
  } //-------------------------------------
  // 	AUGMENT BASE EXPRESSIONS
  //-------------------------------------


  _getExpressions() {
    return Object.assign({}, super._getExpressions(), {
      midi: {
        regexp: /^(\d+(?:\.\d+)?midi)/,

        method(value) {
          if (this.defaultUnits === "midi") {
            return value;
          } else {
            return FrequencyClass.mtof(value);
          }
        }

      },
      note: {
        regexp: /^([a-g]{1}(?:b|#|x|bb)?)(-?[0-9]+)/i,

        method(pitch, octave) {
          const index = noteToScaleIndex[pitch.toLowerCase()];
          const noteNumber = index + (parseInt(octave, 10) + 1) * 12;

          if (this.defaultUnits === "midi") {
            return noteNumber;
          } else {
            return FrequencyClass.mtof(noteNumber);
          }
        }

      },
      tr: {
        regexp: /^(\d+(?:\.\d+)?):(\d+(?:\.\d+)?):?(\d+(?:\.\d+)?)?/,

        method(m, q, s) {
          let total = 1;

          if (m && m !== "0") {
            total *= this._beatsToUnits(this._getTimeSignature() * parseFloat(m));
          }

          if (q && q !== "0") {
            total *= this._beatsToUnits(parseFloat(q));
          }

          if (s && s !== "0") {
            total *= this._beatsToUnits(parseFloat(s) / 4);
          }

          return total;
        }

      }
    });
  } //-------------------------------------
  // 	EXPRESSIONS
  //-------------------------------------

  /**
   * Transposes the frequency by the given number of semitones.
   * @return  A new transposed frequency
   * @example
   * Tone.Frequency("A4").transpose(3); // "C5"
   */


  transpose(interval) {
    return new FrequencyClass(this.context, this.valueOf() * (0, _Conversions.intervalToFrequencyRatio)(interval));
  }
  /**
   * Takes an array of semitone intervals and returns
   * an array of frequencies transposed by those intervals.
   * @return  Returns an array of Frequencies
   * @example
   * Tone.Frequency("A4").harmonize([0, 3, 7]); // ["A4", "C5", "E5"]
   */


  harmonize(intervals) {
    return intervals.map(interval => {
      return this.transpose(interval);
    });
  } //-------------------------------------
  // 	UNIT CONVERSIONS
  //-------------------------------------

  /**
   * Return the value of the frequency as a MIDI note
   * @example
   * Tone.Frequency("C4").toMidi(); // 60
   */


  toMidi() {
    return (0, _Conversions.ftom)(this.valueOf());
  }
  /**
   * Return the value of the frequency in Scientific Pitch Notation
   * @example
   * Tone.Frequency(69, "midi").toNote(); // "A4"
   */


  toNote() {
    const freq = this.toFrequency();
    const log = Math.log2(freq / FrequencyClass.A4);
    let noteNumber = Math.round(12 * log) + 57;
    const octave = Math.floor(noteNumber / 12);

    if (octave < 0) {
      noteNumber += -12 * octave;
    }

    const noteName = scaleIndexToNote[noteNumber % 12];
    return noteName + octave.toString();
  }
  /**
   * Return the duration of one cycle in seconds.
   */


  toSeconds() {
    return 1 / super.toSeconds();
  }
  /**
   * Return the duration of one cycle in ticks
   */


  toTicks() {
    const quarterTime = this._beatsToUnits(1);

    const quarters = this.valueOf() / quarterTime;
    return Math.floor(quarters * this._getPPQ());
  } //-------------------------------------
  // 	UNIT CONVERSIONS HELPERS
  //-------------------------------------

  /**
   * With no arguments, return 0
   */


  _noArg() {
    return 0;
  }
  /**
   * Returns the value of a frequency in the current units
   */


  _frequencyToUnits(freq) {
    return freq;
  }
  /**
   * Returns the value of a tick in the current time units
   */


  _ticksToUnits(ticks) {
    return 1 / (ticks * 60 / (this._getBpm() * this._getPPQ()));
  }
  /**
   * Return the value of the beats in the current units
   */


  _beatsToUnits(beats) {
    return 1 / super._beatsToUnits(beats);
  }
  /**
   * Returns the value of a second in the current units
   */


  _secondsToUnits(seconds) {
    return 1 / seconds;
  }
  /**
   * Convert a MIDI note to frequency value.
   * @param  midi The midi number to convert.
   * @return The corresponding frequency value
   */


  static mtof(midi) {
    return (0, _Conversions.mtof)(midi);
  }
  /**
   * Convert a frequency value to a MIDI note.
   * @param frequency The value to frequency value to convert.
   */


  static ftom(frequency) {
    return (0, _Conversions.ftom)(frequency);
  }

} //-------------------------------------
// 	FREQUENCY CONVERSIONS
//-------------------------------------

/**
 * Note to scale index.
 * @hidden
 */


exports.FrequencyClass = FrequencyClass;
const noteToScaleIndex = {
  cbb: -2,
  cb: -1,
  c: 0,
  "c#": 1,
  cx: 2,
  dbb: 0,
  db: 1,
  d: 2,
  "d#": 3,
  dx: 4,
  ebb: 2,
  eb: 3,
  e: 4,
  "e#": 5,
  ex: 6,
  fbb: 3,
  fb: 4,
  f: 5,
  "f#": 6,
  fx: 7,
  gbb: 5,
  gb: 6,
  g: 7,
  "g#": 8,
  gx: 9,
  abb: 7,
  ab: 8,
  a: 9,
  "a#": 10,
  ax: 11,
  bbb: 9,
  bb: 10,
  b: 11,
  "b#": 12,
  bx: 13
};
/**
 * scale index to note (sharps)
 * @hidden
 */

const scaleIndexToNote = ["C", "C#", "D", "D#", "E", "F", "F#", "G", "G#", "A", "A#", "B"];
/**
 * Convert a value into a FrequencyClass object.
 * @category Unit
 * @example
 * const midi = Tone.Frequency("C3").toMidi();
 * console.log(midi);
 * @example
 * const hertz = Tone.Frequency(38, "midi").toFrequency();
 * console.log(hertz);
 */

function Frequency(value, units) {
  return new FrequencyClass((0, _Global.getContext)(), value, units);
}
},{"../Global":"../node_modules/tone/build/esm/core/Global.js","./Conversions":"../node_modules/tone/build/esm/core/type/Conversions.js","./Time":"../node_modules/tone/build/esm/core/type/Time.js"}],"../node_modules/tone/build/esm/core/type/TransportTime.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TransportTime = TransportTime;
exports.TransportTimeClass = void 0;

var _Global = require("../Global");

var _Time = require("./Time");

/**
 * TransportTime is a the time along the Transport's
 * timeline. It is similar to Tone.Time, but instead of evaluating
 * against the AudioContext's clock, it is evaluated against
 * the Transport's position. See [TransportTime wiki](https://github.com/Tonejs/Tone.js/wiki/TransportTime).
 * @category Unit
 */
class TransportTimeClass extends _Time.TimeClass {
  constructor() {
    super(...arguments);
    this.name = "TransportTime";
  }
  /**
   * Return the current time in whichever context is relevant
   */


  _now() {
    return this.context.transport.seconds;
  }

}
/**
 * TransportTime is a the time along the Transport's
 * timeline. It is similar to [[Time]], but instead of evaluating
 * against the AudioContext's clock, it is evaluated against
 * the Transport's position. See [TransportTime wiki](https://github.com/Tonejs/Tone.js/wiki/TransportTime).
 * @category Unit
 */


exports.TransportTimeClass = TransportTimeClass;

function TransportTime(value, units) {
  return new TransportTimeClass((0, _Global.getContext)(), value, units);
}
},{"../Global":"../node_modules/tone/build/esm/core/Global.js","./Time":"../node_modules/tone/build/esm/core/type/Time.js"}],"../node_modules/tone/build/esm/core/context/ToneWithContext.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ToneWithContext = void 0;

var _Global = require("../Global");

var _Tone = require("../Tone");

var _Frequency = require("../type/Frequency");

var _Time = require("../type/Time");

var _TransportTime = require("../type/TransportTime");

var _Defaults = require("../util/Defaults");

var _TypeCheck = require("../util/TypeCheck");

/**
 * The Base class for all nodes that have an AudioContext.
 */
class ToneWithContext extends _Tone.Tone {
  constructor() {
    super();
    const options = (0, _Defaults.optionsFromArguments)(ToneWithContext.getDefaults(), arguments, ["context"]);

    if (this.defaultContext) {
      this.context = this.defaultContext;
    } else {
      this.context = options.context;
    }
  }

  static getDefaults() {
    return {
      context: (0, _Global.getContext)()
    };
  }
  /**
   * Return the current time of the Context clock plus the lookAhead.
   * @example
   * setInterval(() => {
   * 	console.log(Tone.now());
   * }, 100);
   */


  now() {
    return this.context.currentTime + this.context.lookAhead;
  }
  /**
   * Return the current time of the Context clock without any lookAhead.
   * @example
   * setInterval(() => {
   * 	console.log(Tone.immediate());
   * }, 100);
   */


  immediate() {
    return this.context.currentTime;
  }
  /**
   * The duration in seconds of one sample.
   * @example
   * console.log(Tone.Transport.sampleTime);
   */


  get sampleTime() {
    return 1 / this.context.sampleRate;
  }
  /**
   * The number of seconds of 1 processing block (128 samples)
   * @example
   * console.log(Tone.Destination.blockTime);
   */


  get blockTime() {
    return 128 / this.context.sampleRate;
  }
  /**
   * Convert the incoming time to seconds
   * @example
   * const gain = new Tone.Gain();
   * console.log(gain.toSeconds("4n"));
   */


  toSeconds(time) {
    return new _Time.TimeClass(this.context, time).toSeconds();
  }
  /**
   * Convert the input to a frequency number
   * @example
   * const gain = new Tone.Gain();
   * console.log(gain.toFrequency("4n"));
   */


  toFrequency(freq) {
    return new _Frequency.FrequencyClass(this.context, freq).toFrequency();
  }
  /**
   * Convert the input time into ticks
   * @example
   * const gain = new Tone.Gain();
   * console.log(gain.toTicks("4n"));
   */


  toTicks(time) {
    return new _TransportTime.TransportTimeClass(this.context, time).toTicks();
  } //-------------------------------------
  // 	GET/SET
  //-------------------------------------

  /**
   * Get a subset of the properties which are in the partial props
   */


  _getPartialProperties(props) {
    const options = this.get(); // remove attributes from the prop that are not in the partial

    Object.keys(options).forEach(name => {
      if ((0, _TypeCheck.isUndef)(props[name])) {
        delete options[name];
      }
    });
    return options;
  }
  /**
   * Get the object's attributes.
   * @example
   * const osc = new Tone.Oscillator();
   * console.log(osc.get());
   */


  get() {
    const defaults = (0, _Defaults.getDefaultsFromInstance)(this);
    Object.keys(defaults).forEach(attribute => {
      if (Reflect.has(this, attribute)) {
        const member = this[attribute];

        if ((0, _TypeCheck.isDefined)(member) && (0, _TypeCheck.isDefined)(member.value) && (0, _TypeCheck.isDefined)(member.setValueAtTime)) {
          defaults[attribute] = member.value;
        } else if (member instanceof ToneWithContext) {
          defaults[attribute] = member._getPartialProperties(defaults[attribute]); // otherwise make sure it's a serializable type
        } else if ((0, _TypeCheck.isArray)(member) || (0, _TypeCheck.isNumber)(member) || (0, _TypeCheck.isString)(member) || (0, _TypeCheck.isBoolean)(member)) {
          defaults[attribute] = member;
        } else {
          // remove all undefined and unserializable attributes
          delete defaults[attribute];
        }
      }
    });
    return defaults;
  }
  /**
   * Set multiple properties at once with an object.
   * @example
   * const filter = new Tone.Filter();
   * // set values using an object
   * filter.set({
   * 	frequency: 300,
   * 	type: "highpass"
   * });
   */


  set(props) {
    Object.keys(props).forEach(attribute => {
      if (Reflect.has(this, attribute) && (0, _TypeCheck.isDefined)(this[attribute])) {
        if (this[attribute] && (0, _TypeCheck.isDefined)(this[attribute].value) && (0, _TypeCheck.isDefined)(this[attribute].setValueAtTime)) {
          // small optimization
          if (this[attribute].value !== props[attribute]) {
            this[attribute].value = props[attribute];
          }
        } else if (this[attribute] instanceof ToneWithContext) {
          this[attribute].set(props[attribute]);
        } else {
          this[attribute] = props[attribute];
        }
      }
    });
    return this;
  }

}

exports.ToneWithContext = ToneWithContext;
},{"../Global":"../node_modules/tone/build/esm/core/Global.js","../Tone":"../node_modules/tone/build/esm/core/Tone.js","../type/Frequency":"../node_modules/tone/build/esm/core/type/Frequency.js","../type/Time":"../node_modules/tone/build/esm/core/type/Time.js","../type/TransportTime":"../node_modules/tone/build/esm/core/type/TransportTime.js","../util/Defaults":"../node_modules/tone/build/esm/core/util/Defaults.js","../util/TypeCheck":"../node_modules/tone/build/esm/core/util/TypeCheck.js"}],"../node_modules/tone/build/esm/core/util/StateTimeline.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.StateTimeline = void 0;

var _Timeline = require("./Timeline");

var _Debug = require("./Debug");

/**
 * A Timeline State. Provides the methods: `setStateAtTime("state", time)` and `getValueAtTime(time)`
 * @param initial The initial state of the StateTimeline.  Defaults to `undefined`
 */
class StateTimeline extends _Timeline.Timeline {
  constructor(initial = "stopped") {
    super();
    this.name = "StateTimeline";
    this._initial = initial;
    this.setStateAtTime(this._initial, 0);
  }
  /**
   * Returns the scheduled state scheduled before or at
   * the given time.
   * @param  time  The time to query.
   * @return  The name of the state input in setStateAtTime.
   */


  getValueAtTime(time) {
    const event = this.get(time);

    if (event !== null) {
      return event.state;
    } else {
      return this._initial;
    }
  }
  /**
   * Add a state to the timeline.
   * @param  state The name of the state to set.
   * @param  time  The time to query.
   * @param options Any additional options that are needed in the timeline.
   */


  setStateAtTime(state, time, options) {
    (0, _Debug.assertRange)(time, 0);
    this.add(Object.assign({}, options, {
      state,
      time
    }));
    return this;
  }
  /**
   * Return the event before the time with the given state
   * @param  state The state to look for
   * @param  time  When to check before
   * @return  The event with the given state before the time
   */


  getLastState(state, time) {
    // time = this.toSeconds(time);
    const index = this._search(time);

    for (let i = index; i >= 0; i--) {
      const event = this._timeline[i];

      if (event.state === state) {
        return event;
      }
    }
  }
  /**
   * Return the event after the time with the given state
   * @param  state The state to look for
   * @param  time  When to check from
   * @return  The event with the given state after the time
   */


  getNextState(state, time) {
    // time = this.toSeconds(time);
    const index = this._search(time);

    if (index !== -1) {
      for (let i = index; i < this._timeline.length; i++) {
        const event = this._timeline[i];

        if (event.state === state) {
          return event;
        }
      }
    }
  }

}

exports.StateTimeline = StateTimeline;
},{"./Timeline":"../node_modules/tone/build/esm/core/util/Timeline.js","./Debug":"../node_modules/tone/build/esm/core/util/Debug.js"}],"../node_modules/tone/build/esm/core/context/Param.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Param = void 0;

var _Conversions = require("../type/Conversions");

var _AdvancedTypeCheck = require("../util/AdvancedTypeCheck");

var _Defaults = require("../util/Defaults");

var _Timeline = require("../util/Timeline");

var _TypeCheck = require("../util/TypeCheck");

var _ToneWithContext = require("./ToneWithContext");

var _Math = require("../util/Math");

var _Debug = require("../util/Debug");

/**
 * Param wraps the native Web Audio's AudioParam to provide
 * additional unit conversion functionality. It also
 * serves as a base-class for classes which have a single,
 * automatable parameter.
 */
class Param extends _ToneWithContext.ToneWithContext {
  constructor() {
    super((0, _Defaults.optionsFromArguments)(Param.getDefaults(), arguments, ["param", "units", "convert"]));
    this.name = "Param";
    this.overridden = false;
    /**
     * The minimum output value
     */

    this._minOutput = 1e-7;
    const options = (0, _Defaults.optionsFromArguments)(Param.getDefaults(), arguments, ["param", "units", "convert"]);
    (0, _Debug.assert)((0, _TypeCheck.isDefined)(options.param) && ((0, _AdvancedTypeCheck.isAudioParam)(options.param) || options.param instanceof Param), "param must be an AudioParam");

    while (!(0, _AdvancedTypeCheck.isAudioParam)(options.param)) {
      options.param = options.param._param;
    }

    this._swappable = (0, _TypeCheck.isDefined)(options.swappable) ? options.swappable : false;

    if (this._swappable) {
      this.input = this.context.createGain(); // initialize

      this._param = options.param;
      this.input.connect(this._param);
    } else {
      this._param = this.input = options.param;
    }

    this._events = new _Timeline.Timeline(1000);
    this._initialValue = this._param.defaultValue;
    this.units = options.units;
    this.convert = options.convert;
    this._minValue = options.minValue;
    this._maxValue = options.maxValue; // if the value is defined, set it immediately

    if ((0, _TypeCheck.isDefined)(options.value) && options.value !== this._toType(this._initialValue)) {
      this.setValueAtTime(options.value, 0);
    }
  }

  static getDefaults() {
    return Object.assign(_ToneWithContext.ToneWithContext.getDefaults(), {
      convert: true,
      units: "number"
    });
  }

  get value() {
    const now = this.now();
    return this.getValueAtTime(now);
  }

  set value(value) {
    this.cancelScheduledValues(this.now());
    this.setValueAtTime(value, this.now());
  }

  get minValue() {
    // if it's not the default minValue, return it
    if ((0, _TypeCheck.isDefined)(this._minValue)) {
      return this._minValue;
    } else if (this.units === "time" || this.units === "frequency" || this.units === "normalRange" || this.units === "positive" || this.units === "transportTime" || this.units === "ticks" || this.units === "bpm" || this.units === "hertz" || this.units === "samples") {
      return 0;
    } else if (this.units === "audioRange") {
      return -1;
    } else if (this.units === "decibels") {
      return -Infinity;
    } else {
      return this._param.minValue;
    }
  }

  get maxValue() {
    if ((0, _TypeCheck.isDefined)(this._maxValue)) {
      return this._maxValue;
    } else if (this.units === "normalRange" || this.units === "audioRange") {
      return 1;
    } else {
      return this._param.maxValue;
    }
  }
  /**
   * Type guard based on the unit name
   */


  _is(arg, type) {
    return this.units === type;
  }
  /**
   * Make sure the value is always in the defined range
   */


  _assertRange(value) {
    if ((0, _TypeCheck.isDefined)(this.maxValue) && (0, _TypeCheck.isDefined)(this.minValue)) {
      (0, _Debug.assertRange)(value, this._fromType(this.minValue), this._fromType(this.maxValue));
    }

    return value;
  }
  /**
   * Convert the given value from the type specified by Param.units
   * into the destination value (such as Gain or Frequency).
   */


  _fromType(val) {
    if (this.convert && !this.overridden) {
      if (this._is(val, "time")) {
        return this.toSeconds(val);
      } else if (this._is(val, "decibels")) {
        return (0, _Conversions.dbToGain)(val);
      } else if (this._is(val, "frequency")) {
        return this.toFrequency(val);
      } else {
        return val;
      }
    } else if (this.overridden) {
      // if it's overridden, should only schedule 0s
      return 0;
    } else {
      return val;
    }
  }
  /**
   * Convert the parameters value into the units specified by Param.units.
   */


  _toType(val) {
    if (this.convert && this.units === "decibels") {
      return (0, _Conversions.gainToDb)(val);
    } else {
      return val;
    }
  } //-------------------------------------
  // ABSTRACT PARAM INTERFACE
  // all docs are generated from ParamInterface.ts
  //-------------------------------------


  setValueAtTime(value, time) {
    const computedTime = this.toSeconds(time);

    const numericValue = this._fromType(value);

    (0, _Debug.assert)(isFinite(numericValue) && isFinite(computedTime), `Invalid argument(s) to setValueAtTime: ${JSON.stringify(value)}, ${JSON.stringify(time)}`);

    this._assertRange(numericValue);

    this.log(this.units, "setValueAtTime", value, computedTime);

    this._events.add({
      time: computedTime,
      type: "setValueAtTime",
      value: numericValue
    });

    this._param.setValueAtTime(numericValue, computedTime);

    return this;
  }

  getValueAtTime(time) {
    const computedTime = Math.max(this.toSeconds(time), 0);

    const after = this._events.getAfter(computedTime);

    const before = this._events.get(computedTime);

    let value = this._initialValue; // if it was set by

    if (before === null) {
      value = this._initialValue;
    } else if (before.type === "setTargetAtTime" && (after === null || after.type === "setValueAtTime")) {
      const previous = this._events.getBefore(before.time);

      let previousVal;

      if (previous === null) {
        previousVal = this._initialValue;
      } else {
        previousVal = previous.value;
      }

      if (before.type === "setTargetAtTime") {
        value = this._exponentialApproach(before.time, previousVal, before.value, before.constant, computedTime);
      }
    } else if (after === null) {
      value = before.value;
    } else if (after.type === "linearRampToValueAtTime" || after.type === "exponentialRampToValueAtTime") {
      let beforeValue = before.value;

      if (before.type === "setTargetAtTime") {
        const previous = this._events.getBefore(before.time);

        if (previous === null) {
          beforeValue = this._initialValue;
        } else {
          beforeValue = previous.value;
        }
      }

      if (after.type === "linearRampToValueAtTime") {
        value = this._linearInterpolate(before.time, beforeValue, after.time, after.value, computedTime);
      } else {
        value = this._exponentialInterpolate(before.time, beforeValue, after.time, after.value, computedTime);
      }
    } else {
      value = before.value;
    }

    return this._toType(value);
  }

  setRampPoint(time) {
    time = this.toSeconds(time);
    let currentVal = this.getValueAtTime(time);
    this.cancelAndHoldAtTime(time);

    if (this._fromType(currentVal) === 0) {
      currentVal = this._toType(this._minOutput);
    }

    this.setValueAtTime(currentVal, time);
    return this;
  }

  linearRampToValueAtTime(value, endTime) {
    const numericValue = this._fromType(value);

    const computedTime = this.toSeconds(endTime);
    (0, _Debug.assert)(isFinite(numericValue) && isFinite(computedTime), `Invalid argument(s) to linearRampToValueAtTime: ${JSON.stringify(value)}, ${JSON.stringify(endTime)}`);

    this._assertRange(numericValue);

    this._events.add({
      time: computedTime,
      type: "linearRampToValueAtTime",
      value: numericValue
    });

    this.log(this.units, "linearRampToValueAtTime", value, computedTime);

    this._param.linearRampToValueAtTime(numericValue, computedTime);

    return this;
  }

  exponentialRampToValueAtTime(value, endTime) {
    let numericValue = this._fromType(value);

    numericValue = Math.max(this._minOutput, numericValue);

    this._assertRange(numericValue);

    const computedTime = this.toSeconds(endTime);
    (0, _Debug.assert)(isFinite(numericValue) && isFinite(computedTime), `Invalid argument(s) to exponentialRampToValueAtTime: ${JSON.stringify(value)}, ${JSON.stringify(endTime)}`); // store the event

    this._events.add({
      time: computedTime,
      type: "exponentialRampToValueAtTime",
      value: numericValue
    });

    this.log(this.units, "exponentialRampToValueAtTime", value, computedTime);

    this._param.exponentialRampToValueAtTime(numericValue, computedTime);

    return this;
  }

  exponentialRampTo(value, rampTime, startTime) {
    startTime = this.toSeconds(startTime);
    this.setRampPoint(startTime);
    this.exponentialRampToValueAtTime(value, startTime + this.toSeconds(rampTime));
    return this;
  }

  linearRampTo(value, rampTime, startTime) {
    startTime = this.toSeconds(startTime);
    this.setRampPoint(startTime);
    this.linearRampToValueAtTime(value, startTime + this.toSeconds(rampTime));
    return this;
  }

  targetRampTo(value, rampTime, startTime) {
    startTime = this.toSeconds(startTime);
    this.setRampPoint(startTime);
    this.exponentialApproachValueAtTime(value, startTime, rampTime);
    return this;
  }

  exponentialApproachValueAtTime(value, time, rampTime) {
    time = this.toSeconds(time);
    rampTime = this.toSeconds(rampTime);
    const timeConstant = Math.log(rampTime + 1) / Math.log(200);
    this.setTargetAtTime(value, time, timeConstant); // at 90% start a linear ramp to the final value

    this.cancelAndHoldAtTime(time + rampTime * 0.9);
    this.linearRampToValueAtTime(value, time + rampTime);
    return this;
  }

  setTargetAtTime(value, startTime, timeConstant) {
    const numericValue = this._fromType(value); // The value will never be able to approach without timeConstant > 0.


    (0, _Debug.assert)(isFinite(timeConstant) && timeConstant > 0, "timeConstant must be a number greater than 0");
    const computedTime = this.toSeconds(startTime);

    this._assertRange(numericValue);

    (0, _Debug.assert)(isFinite(numericValue) && isFinite(computedTime), `Invalid argument(s) to setTargetAtTime: ${JSON.stringify(value)}, ${JSON.stringify(startTime)}`);

    this._events.add({
      constant: timeConstant,
      time: computedTime,
      type: "setTargetAtTime",
      value: numericValue
    });

    this.log(this.units, "setTargetAtTime", value, computedTime, timeConstant);

    this._param.setTargetAtTime(numericValue, computedTime, timeConstant);

    return this;
  }

  setValueCurveAtTime(values, startTime, duration, scaling = 1) {
    duration = this.toSeconds(duration);
    startTime = this.toSeconds(startTime);
    const startingValue = this._fromType(values[0]) * scaling;
    this.setValueAtTime(this._toType(startingValue), startTime);
    const segTime = duration / (values.length - 1);

    for (let i = 1; i < values.length; i++) {
      const numericValue = this._fromType(values[i]) * scaling;
      this.linearRampToValueAtTime(this._toType(numericValue), startTime + i * segTime);
    }

    return this;
  }

  cancelScheduledValues(time) {
    const computedTime = this.toSeconds(time);
    (0, _Debug.assert)(isFinite(computedTime), `Invalid argument to cancelScheduledValues: ${JSON.stringify(time)}`);

    this._events.cancel(computedTime);

    this._param.cancelScheduledValues(computedTime);

    this.log(this.units, "cancelScheduledValues", computedTime);
    return this;
  }

  cancelAndHoldAtTime(time) {
    const computedTime = this.toSeconds(time);

    const valueAtTime = this._fromType(this.getValueAtTime(computedTime)); // remove the schedule events


    (0, _Debug.assert)(isFinite(computedTime), `Invalid argument to cancelAndHoldAtTime: ${JSON.stringify(time)}`);
    this.log(this.units, "cancelAndHoldAtTime", computedTime, "value=" + valueAtTime); // if there is an event at the given computedTime
    // and that even is not a "set"

    const before = this._events.get(computedTime);

    const after = this._events.getAfter(computedTime);

    if (before && (0, _Math.EQ)(before.time, computedTime)) {
      // remove everything after
      if (after) {
        this._param.cancelScheduledValues(after.time);

        this._events.cancel(after.time);
      } else {
        this._param.cancelAndHoldAtTime(computedTime);

        this._events.cancel(computedTime + this.sampleTime);
      }
    } else if (after) {
      this._param.cancelScheduledValues(after.time); // cancel the next event(s)


      this._events.cancel(after.time);

      if (after.type === "linearRampToValueAtTime") {
        this.linearRampToValueAtTime(this._toType(valueAtTime), computedTime);
      } else if (after.type === "exponentialRampToValueAtTime") {
        this.exponentialRampToValueAtTime(this._toType(valueAtTime), computedTime);
      }
    } // set the value at the given time


    this._events.add({
      time: computedTime,
      type: "setValueAtTime",
      value: valueAtTime
    });

    this._param.setValueAtTime(valueAtTime, computedTime);

    return this;
  }

  rampTo(value, rampTime = 0.1, startTime) {
    if (this.units === "frequency" || this.units === "bpm" || this.units === "decibels") {
      this.exponentialRampTo(value, rampTime, startTime);
    } else {
      this.linearRampTo(value, rampTime, startTime);
    }

    return this;
  }
  /**
   * Apply all of the previously scheduled events to the passed in Param or AudioParam.
   * The applied values will start at the context's current time and schedule
   * all of the events which are scheduled on this Param onto the passed in param.
   */


  apply(param) {
    const now = this.context.currentTime; // set the param's value at the current time and schedule everything else

    param.setValueAtTime(this.getValueAtTime(now), now); // if the previous event was a curve, then set the rest of it

    const previousEvent = this._events.get(now);

    if (previousEvent && previousEvent.type === "setTargetAtTime") {
      // approx it until the next event with linear ramps
      const nextEvent = this._events.getAfter(previousEvent.time); // or for 2 seconds if there is no event


      const endTime = nextEvent ? nextEvent.time : now + 2;
      const subdivisions = (endTime - now) / 10;

      for (let i = now; i < endTime; i += subdivisions) {
        param.linearRampToValueAtTime(this.getValueAtTime(i), i);
      }
    }

    this._events.forEachAfter(this.context.currentTime, event => {
      if (event.type === "cancelScheduledValues") {
        param.cancelScheduledValues(event.time);
      } else if (event.type === "setTargetAtTime") {
        param.setTargetAtTime(event.value, event.time, event.constant);
      } else {
        param[event.type](event.value, event.time);
      }
    });

    return this;
  }
  /**
   * Replace the Param's internal AudioParam. Will apply scheduled curves
   * onto the parameter and replace the connections.
   */


  setParam(param) {
    (0, _Debug.assert)(this._swappable, "The Param must be assigned as 'swappable' in the constructor");
    const input = this.input;
    input.disconnect(this._param);
    this.apply(param);
    this._param = param;
    input.connect(this._param);
    return this;
  }

  dispose() {
    super.dispose();

    this._events.dispose();

    return this;
  }

  get defaultValue() {
    return this._toType(this._param.defaultValue);
  } //-------------------------------------
  // 	AUTOMATION CURVE CALCULATIONS
  // 	MIT License, copyright (c) 2014 Jordan Santell
  //-------------------------------------
  // Calculates the the value along the curve produced by setTargetAtTime


  _exponentialApproach(t0, v0, v1, timeConstant, t) {
    return v1 + (v0 - v1) * Math.exp(-(t - t0) / timeConstant);
  } // Calculates the the value along the curve produced by linearRampToValueAtTime


  _linearInterpolate(t0, v0, t1, v1, t) {
    return v0 + (v1 - v0) * ((t - t0) / (t1 - t0));
  } // Calculates the the value along the curve produced by exponentialRampToValueAtTime


  _exponentialInterpolate(t0, v0, t1, v1, t) {
    return v0 * Math.pow(v1 / v0, (t - t0) / (t1 - t0));
  }

}

exports.Param = Param;
},{"../type/Conversions":"../node_modules/tone/build/esm/core/type/Conversions.js","../util/AdvancedTypeCheck":"../node_modules/tone/build/esm/core/util/AdvancedTypeCheck.js","../util/Defaults":"../node_modules/tone/build/esm/core/util/Defaults.js","../util/Timeline":"../node_modules/tone/build/esm/core/util/Timeline.js","../util/TypeCheck":"../node_modules/tone/build/esm/core/util/TypeCheck.js","./ToneWithContext":"../node_modules/tone/build/esm/core/context/ToneWithContext.js","../util/Math":"../node_modules/tone/build/esm/core/util/Math.js","../util/Debug":"../node_modules/tone/build/esm/core/util/Debug.js"}],"../node_modules/tone/build/esm/core/context/ToneAudioNode.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.connectSeries = connectSeries;
exports.connect = connect;
exports.disconnect = disconnect;
exports.ToneAudioNode = void 0;

var _AdvancedTypeCheck = require("../util/AdvancedTypeCheck");

var _TypeCheck = require("../util/TypeCheck");

var _Param = require("./Param");

var _ToneWithContext = require("./ToneWithContext");

var _Debug = require("../util/Debug");

/**
 * ToneAudioNode is the base class for classes which process audio.
 */
class ToneAudioNode extends _ToneWithContext.ToneWithContext {
  constructor() {
    super(...arguments);
    /**
     * The name of the class
     */

    this.name = "ToneAudioNode";
    /**
     * List all of the node that must be set to match the ChannelProperties
     */

    this._internalChannels = [];
  }
  /**
   * The number of inputs feeding into the AudioNode.
   * For source nodes, this will be 0.
   * @example
   * const node = new Tone.Gain();
   * console.log(node.numberOfInputs);
   */


  get numberOfInputs() {
    if ((0, _TypeCheck.isDefined)(this.input)) {
      if ((0, _AdvancedTypeCheck.isAudioParam)(this.input) || this.input instanceof _Param.Param) {
        return 1;
      } else {
        return this.input.numberOfInputs;
      }
    } else {
      return 0;
    }
  }
  /**
   * The number of outputs of the AudioNode.
   * @example
   * const node = new Tone.Gain();
   * console.log(node.numberOfOutputs);
   */


  get numberOfOutputs() {
    if ((0, _TypeCheck.isDefined)(this.output)) {
      return this.output.numberOfOutputs;
    } else {
      return 0;
    }
  } //-------------------------------------
  // AUDIO PROPERTIES
  //-------------------------------------

  /**
   * Used to decide which nodes to get/set properties on
   */


  _isAudioNode(node) {
    return (0, _TypeCheck.isDefined)(node) && (node instanceof ToneAudioNode || (0, _AdvancedTypeCheck.isAudioNode)(node));
  }
  /**
   * Get all of the audio nodes (either internal or input/output) which together
   * make up how the class node responds to channel input/output
   */


  _getInternalNodes() {
    const nodeList = this._internalChannels.slice(0);

    if (this._isAudioNode(this.input)) {
      nodeList.push(this.input);
    }

    if (this._isAudioNode(this.output)) {
      if (this.input !== this.output) {
        nodeList.push(this.output);
      }
    }

    return nodeList;
  }
  /**
   * Set the audio options for this node such as channelInterpretation
   * channelCount, etc.
   * @param options
   */


  _setChannelProperties(options) {
    const nodeList = this._getInternalNodes();

    nodeList.forEach(node => {
      node.channelCount = options.channelCount;
      node.channelCountMode = options.channelCountMode;
      node.channelInterpretation = options.channelInterpretation;
    });
  }
  /**
   * Get the current audio options for this node such as channelInterpretation
   * channelCount, etc.
   */


  _getChannelProperties() {
    const nodeList = this._getInternalNodes();

    (0, _Debug.assert)(nodeList.length > 0, "ToneAudioNode does not have any internal nodes"); // use the first node to get properties
    // they should all be the same

    const node = nodeList[0];
    return {
      channelCount: node.channelCount,
      channelCountMode: node.channelCountMode,
      channelInterpretation: node.channelInterpretation
    };
  }
  /**
   * channelCount is the number of channels used when up-mixing and down-mixing
   * connections to any inputs to the node. The default value is 2 except for
   * specific nodes where its value is specially determined.
   */


  get channelCount() {
    return this._getChannelProperties().channelCount;
  }

  set channelCount(channelCount) {
    const props = this._getChannelProperties(); // merge it with the other properties


    this._setChannelProperties(Object.assign(props, {
      channelCount
    }));
  }
  /**
   * channelCountMode determines how channels will be counted when up-mixing and
   * down-mixing connections to any inputs to the node.
   * The default value is "max". This attribute has no effect for nodes with no inputs.
   * * "max" - computedNumberOfChannels is the maximum of the number of channels of all connections to an input. In this mode channelCount is ignored.
   * * "clamped-max" - computedNumberOfChannels is determined as for "max" and then clamped to a maximum value of the given channelCount.
   * * "explicit" - computedNumberOfChannels is the exact value as specified by the channelCount.
   */


  get channelCountMode() {
    return this._getChannelProperties().channelCountMode;
  }

  set channelCountMode(channelCountMode) {
    const props = this._getChannelProperties(); // merge it with the other properties


    this._setChannelProperties(Object.assign(props, {
      channelCountMode
    }));
  }
  /**
   * channelInterpretation determines how individual channels will be treated
   * when up-mixing and down-mixing connections to any inputs to the node.
   * The default value is "speakers".
   */


  get channelInterpretation() {
    return this._getChannelProperties().channelInterpretation;
  }

  set channelInterpretation(channelInterpretation) {
    const props = this._getChannelProperties(); // merge it with the other properties


    this._setChannelProperties(Object.assign(props, {
      channelInterpretation
    }));
  } //-------------------------------------
  // CONNECTIONS
  //-------------------------------------

  /**
   * connect the output of a ToneAudioNode to an AudioParam, AudioNode, or ToneAudioNode
   * @param destination The output to connect to
   * @param outputNum The output to connect from
   * @param inputNum The input to connect to
   */


  connect(destination, outputNum = 0, inputNum = 0) {
    connect(this, destination, outputNum, inputNum);
    return this;
  }
  /**
   * Connect the output to the context's destination node.
   * @example
   * const osc = new Tone.Oscillator("C2").start();
   * osc.toDestination();
   */


  toDestination() {
    this.connect(this.context.destination);
    return this;
  }
  /**
   * Connect the output to the context's destination node.
   * See [[toDestination]]
   * @deprecated
   */


  toMaster() {
    (0, _Debug.warn)("toMaster() has been renamed toDestination()");
    return this.toDestination();
  }
  /**
   * disconnect the output
   */


  disconnect(destination, outputNum = 0, inputNum = 0) {
    disconnect(this, destination, outputNum, inputNum);
    return this;
  }
  /**
   * Connect the output of this node to the rest of the nodes in series.
   * @example
   * const player = new Tone.Player("https://tonejs.github.io/audio/drum-samples/handdrum-loop.mp3");
   * player.autostart = true;
   * const filter = new Tone.AutoFilter(4).start();
   * const distortion = new Tone.Distortion(0.5);
   * // connect the player to the filter, distortion and then to the master output
   * player.chain(filter, distortion, Tone.Destination);
   */


  chain(...nodes) {
    connectSeries(this, ...nodes);
    return this;
  }
  /**
   * connect the output of this node to the rest of the nodes in parallel.
   * @example
   * const player = new Tone.Player("https://tonejs.github.io/audio/drum-samples/conga-rhythm.mp3");
   * player.autostart = true;
   * const pitchShift = new Tone.PitchShift(4).toDestination();
   * const filter = new Tone.Filter("G5").toDestination();
   * // connect a node to the pitch shift and filter in parallel
   * player.fan(pitchShift, filter);
   */


  fan(...nodes) {
    nodes.forEach(node => this.connect(node));
    return this;
  }
  /**
   * Dispose and disconnect
   */


  dispose() {
    super.dispose();

    if ((0, _TypeCheck.isDefined)(this.input)) {
      if (this.input instanceof ToneAudioNode) {
        this.input.dispose();
      } else if ((0, _AdvancedTypeCheck.isAudioNode)(this.input)) {
        this.input.disconnect();
      }
    }

    if ((0, _TypeCheck.isDefined)(this.output)) {
      if (this.output instanceof ToneAudioNode) {
        this.output.dispose();
      } else if ((0, _AdvancedTypeCheck.isAudioNode)(this.output)) {
        this.output.disconnect();
      }
    }

    this._internalChannels = [];
    return this;
  }

} //-------------------------------------
// CONNECTIONS
//-------------------------------------

/**
 * connect together all of the arguments in series
 * @param nodes
 */


exports.ToneAudioNode = ToneAudioNode;

function connectSeries(...nodes) {
  const first = nodes.shift();
  nodes.reduce((prev, current) => {
    if (prev instanceof ToneAudioNode) {
      prev.connect(current);
    } else if ((0, _AdvancedTypeCheck.isAudioNode)(prev)) {
      connect(prev, current);
    }

    return current;
  }, first);
}
/**
 * Connect two nodes together so that signal flows from the
 * first node to the second. Optionally specify the input and output channels.
 * @param srcNode The source node
 * @param dstNode The destination node
 * @param outputNumber The output channel of the srcNode
 * @param inputNumber The input channel of the dstNode
 */


function connect(srcNode, dstNode, outputNumber = 0, inputNumber = 0) {
  (0, _Debug.assert)((0, _TypeCheck.isDefined)(srcNode), "Cannot connect from undefined node");
  (0, _Debug.assert)((0, _TypeCheck.isDefined)(dstNode), "Cannot connect to undefined node");

  if (dstNode instanceof ToneAudioNode || (0, _AdvancedTypeCheck.isAudioNode)(dstNode)) {
    (0, _Debug.assert)(dstNode.numberOfInputs > 0, "Cannot connect to node with no inputs");
  }

  (0, _Debug.assert)(srcNode.numberOfOutputs > 0, "Cannot connect from node with no outputs"); // resolve the input of the dstNode

  while (dstNode instanceof ToneAudioNode || dstNode instanceof _Param.Param) {
    if ((0, _TypeCheck.isDefined)(dstNode.input)) {
      dstNode = dstNode.input;
    }
  }

  while (srcNode instanceof ToneAudioNode) {
    if ((0, _TypeCheck.isDefined)(srcNode.output)) {
      srcNode = srcNode.output;
    }
  } // make the connection


  if ((0, _AdvancedTypeCheck.isAudioParam)(dstNode)) {
    srcNode.connect(dstNode, outputNumber);
  } else {
    srcNode.connect(dstNode, outputNumber, inputNumber);
  }
}
/**
 * Disconnect a node from all nodes or optionally include a destination node and input/output channels.
 * @param srcNode The source node
 * @param dstNode The destination node
 * @param outputNumber The output channel of the srcNode
 * @param inputNumber The input channel of the dstNode
 */


function disconnect(srcNode, dstNode, outputNumber = 0, inputNumber = 0) {
  // resolve the destination node
  if ((0, _TypeCheck.isDefined)(dstNode)) {
    while (dstNode instanceof ToneAudioNode) {
      dstNode = dstNode.input;
    }
  } // resolve the src node


  while (!(0, _AdvancedTypeCheck.isAudioNode)(srcNode)) {
    if ((0, _TypeCheck.isDefined)(srcNode.output)) {
      srcNode = srcNode.output;
    }
  }

  if ((0, _AdvancedTypeCheck.isAudioParam)(dstNode)) {
    srcNode.disconnect(dstNode, outputNumber);
  } else if ((0, _AdvancedTypeCheck.isAudioNode)(dstNode)) {
    srcNode.disconnect(dstNode, outputNumber, inputNumber);
  } else {
    srcNode.disconnect();
  }
}
},{"../util/AdvancedTypeCheck":"../node_modules/tone/build/esm/core/util/AdvancedTypeCheck.js","../util/TypeCheck":"../node_modules/tone/build/esm/core/util/TypeCheck.js","./Param":"../node_modules/tone/build/esm/core/context/Param.js","./ToneWithContext":"../node_modules/tone/build/esm/core/context/ToneWithContext.js","../util/Debug":"../node_modules/tone/build/esm/core/util/Debug.js"}],"../node_modules/tone/build/esm/core/context/Gain.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Gain = void 0;

var _Param = require("../context/Param");

var _Defaults = require("../util/Defaults");

var _Interface = require("../util/Interface");

var _ToneAudioNode = require("./ToneAudioNode");

/**
 * A thin wrapper around the Native Web Audio GainNode.
 * The GainNode is a basic building block of the Web Audio
 * API and is useful for routing audio and adjusting gains.
 * @category Core
 * @example
 * return Tone.Offline(() => {
 * 	const gainNode = new Tone.Gain(0).toDestination();
 * 	const osc = new Tone.Oscillator(30).connect(gainNode).start();
 * 	gainNode.gain.rampTo(1, 0.1);
 * 	gainNode.gain.rampTo(0, 0.4, 0.2);
 * }, 0.7, 1);
 */
class Gain extends _ToneAudioNode.ToneAudioNode {
  constructor() {
    super((0, _Defaults.optionsFromArguments)(Gain.getDefaults(), arguments, ["gain", "units"]));
    this.name = "Gain";
    /**
     * The wrapped GainNode.
     */

    this._gainNode = this.context.createGain(); // input = output

    this.input = this._gainNode;
    this.output = this._gainNode;
    const options = (0, _Defaults.optionsFromArguments)(Gain.getDefaults(), arguments, ["gain", "units"]);
    this.gain = new _Param.Param({
      context: this.context,
      convert: options.convert,
      param: this._gainNode.gain,
      units: options.units,
      value: options.gain,
      minValue: options.minValue,
      maxValue: options.maxValue
    });
    (0, _Interface.readOnly)(this, "gain");
  }

  static getDefaults() {
    return Object.assign(_ToneAudioNode.ToneAudioNode.getDefaults(), {
      convert: true,
      gain: 1,
      units: "gain"
    });
  }
  /**
   * Clean up.
   */


  dispose() {
    super.dispose();

    this._gainNode.disconnect();

    this.gain.dispose();
    return this;
  }

}

exports.Gain = Gain;
},{"../context/Param":"../node_modules/tone/build/esm/core/context/Param.js","../util/Defaults":"../node_modules/tone/build/esm/core/util/Defaults.js","../util/Interface":"../node_modules/tone/build/esm/core/util/Interface.js","./ToneAudioNode":"../node_modules/tone/build/esm/core/context/ToneAudioNode.js"}],"../node_modules/tone/build/esm/source/OneShotSource.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.OneShotSource = void 0;

var _Gain = require("../core/context/Gain");

var _ToneAudioNode = require("../core/context/ToneAudioNode");

var _Interface = require("../core/util/Interface");

var _Debug = require("../core/util/Debug");

/**
 * Base class for fire-and-forget nodes
 */
class OneShotSource extends _ToneAudioNode.ToneAudioNode {
  constructor(options) {
    super(options);
    /**
     * The callback to invoke after the
     * source is done playing.
     */

    this.onended = _Interface.noOp;
    /**
     * The start time
     */

    this._startTime = -1;
    /**
     * The stop time
     */

    this._stopTime = -1;
    /**
     * The id of the timeout
     */

    this._timeout = -1;
    /**
     * The public output node
     */

    this.output = new _Gain.Gain({
      context: this.context,
      gain: 0
    });
    /**
     * The output gain node.
     */

    this._gainNode = this.output;
    /**
     * Get the playback state at the given time
     */

    this.getStateAtTime = function (time) {
      const computedTime = this.toSeconds(time);

      if (this._startTime !== -1 && computedTime >= this._startTime && (this._stopTime === -1 || computedTime <= this._stopTime)) {
        return "started";
      } else {
        return "stopped";
      }
    };

    this._fadeIn = options.fadeIn;
    this._fadeOut = options.fadeOut;
    this._curve = options.curve;
    this.onended = options.onended;
  }

  static getDefaults() {
    return Object.assign(_ToneAudioNode.ToneAudioNode.getDefaults(), {
      curve: "linear",
      fadeIn: 0,
      fadeOut: 0,
      onended: _Interface.noOp
    });
  }
  /**
   * Start the source at the given time
   * @param  time When to start the source
   */


  _startGain(time, gain = 1) {
    (0, _Debug.assert)(this._startTime === -1, "Source cannot be started more than once"); // apply a fade in envelope

    const fadeInTime = this.toSeconds(this._fadeIn); // record the start time

    this._startTime = time + fadeInTime;
    this._startTime = Math.max(this._startTime, this.context.currentTime); // schedule the envelope

    if (fadeInTime > 0) {
      this._gainNode.gain.setValueAtTime(0, time);

      if (this._curve === "linear") {
        this._gainNode.gain.linearRampToValueAtTime(gain, time + fadeInTime);
      } else {
        this._gainNode.gain.exponentialApproachValueAtTime(gain, time, fadeInTime);
      }
    } else {
      this._gainNode.gain.setValueAtTime(gain, time);
    }

    return this;
  }
  /**
   * Stop the source node at the given time.
   * @param time When to stop the source
   */


  stop(time) {
    this.log("stop", time);

    this._stopGain(this.toSeconds(time));

    return this;
  }
  /**
   * Stop the source at the given time
   * @param  time When to stop the source
   */


  _stopGain(time) {
    (0, _Debug.assert)(this._startTime !== -1, "'start' must be called before 'stop'"); // cancel the previous stop

    this.cancelStop(); // the fadeOut time

    const fadeOutTime = this.toSeconds(this._fadeOut); // schedule the stop callback

    this._stopTime = this.toSeconds(time) + fadeOutTime;
    this._stopTime = Math.max(this._stopTime, this.context.currentTime);

    if (fadeOutTime > 0) {
      // start the fade out curve at the given time
      if (this._curve === "linear") {
        this._gainNode.gain.linearRampTo(0, fadeOutTime, time);
      } else {
        this._gainNode.gain.targetRampTo(0, fadeOutTime, time);
      }
    } else {
      // stop any ongoing ramps, and set the value to 0
      this._gainNode.gain.cancelAndHoldAtTime(time);

      this._gainNode.gain.setValueAtTime(0, time);
    }

    this.context.clearTimeout(this._timeout);
    this._timeout = this.context.setTimeout(() => {
      // allow additional time for the exponential curve to fully decay
      const additionalTail = this._curve === "exponential" ? fadeOutTime * 2 : 0;

      this._stopSource(this.now() + additionalTail);

      this._onended();
    }, this._stopTime - this.context.currentTime);
    return this;
  }
  /**
   * Invoke the onended callback
   */


  _onended() {
    if (this.onended !== _Interface.noOp) {
      this.onended(this); // overwrite onended to make sure it only is called once

      this.onended = _Interface.noOp; // dispose when it's ended to free up for garbage collection only in the online context

      if (!this.context.isOffline) {
        const disposeCallback = () => this.dispose(); // @ts-ignore


        if (typeof window.requestIdleCallback !== "undefined") {
          // @ts-ignore
          window.requestIdleCallback(disposeCallback);
        } else {
          setTimeout(disposeCallback, 1000);
        }
      }
    }
  }
  /**
   * Get the playback state at the current time
   */


  get state() {
    return this.getStateAtTime(this.now());
  }
  /**
   * Cancel a scheduled stop event
   */


  cancelStop() {
    this.log("cancelStop");
    (0, _Debug.assert)(this._startTime !== -1, "Source is not started"); // cancel the stop envelope

    this._gainNode.gain.cancelScheduledValues(this._startTime + this.sampleTime);

    this.context.clearTimeout(this._timeout);
    this._stopTime = -1;
    return this;
  }

  dispose() {
    super.dispose();

    this._gainNode.disconnect();

    return this;
  }

}

exports.OneShotSource = OneShotSource;
},{"../core/context/Gain":"../node_modules/tone/build/esm/core/context/Gain.js","../core/context/ToneAudioNode":"../node_modules/tone/build/esm/core/context/ToneAudioNode.js","../core/util/Interface":"../node_modules/tone/build/esm/core/util/Interface.js","../core/util/Debug":"../node_modules/tone/build/esm/core/util/Debug.js"}],"../node_modules/tone/build/esm/signal/ToneConstantSource.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ToneConstantSource = void 0;

var _ToneAudioNode = require("../core/context/ToneAudioNode");

var _Param = require("../core/context/Param");

var _Defaults = require("../core/util/Defaults");

var _OneShotSource = require("../source/OneShotSource");

/**
 * Wrapper around the native fire-and-forget ConstantSource.
 * Adds the ability to reschedule the stop method.
 * @category Signal
 */
class ToneConstantSource extends _OneShotSource.OneShotSource {
  constructor() {
    super((0, _Defaults.optionsFromArguments)(ToneConstantSource.getDefaults(), arguments, ["offset"]));
    this.name = "ToneConstantSource";
    /**
     * The signal generator
     */

    this._source = this.context.createConstantSource();
    const options = (0, _Defaults.optionsFromArguments)(ToneConstantSource.getDefaults(), arguments, ["offset"]);
    (0, _ToneAudioNode.connect)(this._source, this._gainNode);
    this.offset = new _Param.Param({
      context: this.context,
      convert: options.convert,
      param: this._source.offset,
      units: options.units,
      value: options.offset,
      minValue: options.minValue,
      maxValue: options.maxValue
    });
  }

  static getDefaults() {
    return Object.assign(_OneShotSource.OneShotSource.getDefaults(), {
      convert: true,
      offset: 1,
      units: "number"
    });
  }
  /**
   * Start the source node at the given time
   * @param  time When to start the source
   */


  start(time) {
    const computedTime = this.toSeconds(time);
    this.log("start", computedTime);

    this._startGain(computedTime);

    this._source.start(computedTime);

    return this;
  }

  _stopSource(time) {
    this._source.stop(time);
  }

  dispose() {
    super.dispose();

    if (this.state === "started") {
      this.stop();
    }

    this._source.disconnect();

    this.offset.dispose();
    return this;
  }

}

exports.ToneConstantSource = ToneConstantSource;
},{"../core/context/ToneAudioNode":"../node_modules/tone/build/esm/core/context/ToneAudioNode.js","../core/context/Param":"../node_modules/tone/build/esm/core/context/Param.js","../core/util/Defaults":"../node_modules/tone/build/esm/core/util/Defaults.js","../source/OneShotSource":"../node_modules/tone/build/esm/source/OneShotSource.js"}],"../node_modules/tone/build/esm/signal/Signal.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.connectSignal = connectSignal;
exports.Signal = void 0;

var _Param = require("../core/context/Param");

var _ToneAudioNode = require("../core/context/ToneAudioNode");

var _AdvancedTypeCheck = require("../core/util/AdvancedTypeCheck");

var _Defaults = require("../core/util/Defaults");

var _ToneConstantSource = require("./ToneConstantSource");

/**
 * A signal is an audio-rate value. Tone.Signal is a core component of the library.
 * Unlike a number, Signals can be scheduled with sample-level accuracy. Tone.Signal
 * has all of the methods available to native Web Audio
 * [AudioParam](http://webaudio.github.io/web-audio-api/#the-audioparam-interface)
 * as well as additional conveniences. Read more about working with signals
 * [here](https://github.com/Tonejs/Tone.js/wiki/Signals).
 *
 * @example
 * const osc = new Tone.Oscillator().toDestination().start();
 * // a scheduleable signal which can be connected to control an AudioParam or another Signal
 * const signal = new Tone.Signal({
 * 	value: "C4",
 * 	units: "frequency"
 * }).connect(osc.frequency);
 * // the scheduled ramp controls the connected signal
 * signal.rampTo("C2", 4, "+0.5");
 * @category Signal
 */
class Signal extends _ToneAudioNode.ToneAudioNode {
  constructor() {
    super((0, _Defaults.optionsFromArguments)(Signal.getDefaults(), arguments, ["value", "units"]));
    this.name = "Signal";
    /**
     * Indicates if the value should be overridden on connection.
     */

    this.override = true;
    const options = (0, _Defaults.optionsFromArguments)(Signal.getDefaults(), arguments, ["value", "units"]);
    this.output = this._constantSource = new _ToneConstantSource.ToneConstantSource({
      context: this.context,
      convert: options.convert,
      offset: options.value,
      units: options.units,
      minValue: options.minValue,
      maxValue: options.maxValue
    });

    this._constantSource.start(0);

    this.input = this._param = this._constantSource.offset;
  }

  static getDefaults() {
    return Object.assign(_ToneAudioNode.ToneAudioNode.getDefaults(), {
      convert: true,
      units: "number",
      value: 0
    });
  }

  connect(destination, outputNum = 0, inputNum = 0) {
    // start it only when connected to something
    connectSignal(this, destination, outputNum, inputNum);
    return this;
  }

  dispose() {
    super.dispose();

    this._param.dispose();

    this._constantSource.dispose();

    return this;
  } //-------------------------------------
  // ABSTRACT PARAM INTERFACE
  // just a proxy for the ConstantSourceNode's offset AudioParam
  // all docs are generated from AbstractParam.ts
  //-------------------------------------


  setValueAtTime(value, time) {
    this._param.setValueAtTime(value, time);

    return this;
  }

  getValueAtTime(time) {
    return this._param.getValueAtTime(time);
  }

  setRampPoint(time) {
    this._param.setRampPoint(time);

    return this;
  }

  linearRampToValueAtTime(value, time) {
    this._param.linearRampToValueAtTime(value, time);

    return this;
  }

  exponentialRampToValueAtTime(value, time) {
    this._param.exponentialRampToValueAtTime(value, time);

    return this;
  }

  exponentialRampTo(value, rampTime, startTime) {
    this._param.exponentialRampTo(value, rampTime, startTime);

    return this;
  }

  linearRampTo(value, rampTime, startTime) {
    this._param.linearRampTo(value, rampTime, startTime);

    return this;
  }

  targetRampTo(value, rampTime, startTime) {
    this._param.targetRampTo(value, rampTime, startTime);

    return this;
  }

  exponentialApproachValueAtTime(value, time, rampTime) {
    this._param.exponentialApproachValueAtTime(value, time, rampTime);

    return this;
  }

  setTargetAtTime(value, startTime, timeConstant) {
    this._param.setTargetAtTime(value, startTime, timeConstant);

    return this;
  }

  setValueCurveAtTime(values, startTime, duration, scaling) {
    this._param.setValueCurveAtTime(values, startTime, duration, scaling);

    return this;
  }

  cancelScheduledValues(time) {
    this._param.cancelScheduledValues(time);

    return this;
  }

  cancelAndHoldAtTime(time) {
    this._param.cancelAndHoldAtTime(time);

    return this;
  }

  rampTo(value, rampTime, startTime) {
    this._param.rampTo(value, rampTime, startTime);

    return this;
  }

  get value() {
    return this._param.value;
  }

  set value(value) {
    this._param.value = value;
  }

  get convert() {
    return this._param.convert;
  }

  set convert(convert) {
    this._param.convert = convert;
  }

  get units() {
    return this._param.units;
  }

  get overridden() {
    return this._param.overridden;
  }

  set overridden(overridden) {
    this._param.overridden = overridden;
  }

  get maxValue() {
    return this._param.maxValue;
  }

  get minValue() {
    return this._param.minValue;
  }
  /**
   * See [[Param.apply]].
   */


  apply(param) {
    this._param.apply(param);

    return this;
  }

}
/**
 * When connecting from a signal, it's necessary to zero out the node destination
 * node if that node is also a signal. If the destination is not 0, then the values
 * will be summed. This method insures that the output of the destination signal will
 * be the same as the source signal, making the destination signal a pass through node.
 * @param signal The output signal to connect from
 * @param destination the destination to connect to
 * @param outputNum the optional output number
 * @param inputNum the input number
 */


exports.Signal = Signal;

function connectSignal(signal, destination, outputNum, inputNum) {
  if (destination instanceof _Param.Param || (0, _AdvancedTypeCheck.isAudioParam)(destination) || destination instanceof Signal && destination.override) {
    // cancel changes
    destination.cancelScheduledValues(0); // reset the value

    destination.setValueAtTime(0, 0); // mark the value as overridden

    if (destination instanceof Signal) {
      destination.overridden = true;
    }
  }

  (0, _ToneAudioNode.connect)(signal, destination, outputNum, inputNum);
}
},{"../core/context/Param":"../node_modules/tone/build/esm/core/context/Param.js","../core/context/ToneAudioNode":"../node_modules/tone/build/esm/core/context/ToneAudioNode.js","../core/util/AdvancedTypeCheck":"../node_modules/tone/build/esm/core/util/AdvancedTypeCheck.js","../core/util/Defaults":"../node_modules/tone/build/esm/core/util/Defaults.js","./ToneConstantSource":"../node_modules/tone/build/esm/signal/ToneConstantSource.js"}],"../node_modules/tone/build/esm/core/clock/TickParam.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TickParam = void 0;

var _Param = require("../context/Param");

var _Defaults = require("../util/Defaults");

var _Timeline = require("../util/Timeline");

var _TypeCheck = require("../util/TypeCheck");

/**
 * A Param class just for computing ticks. Similar to the [[Param]] class,
 * but offers conversion to BPM values as well as ability to compute tick
 * duration and elapsed ticks
 */
class TickParam extends _Param.Param {
  constructor() {
    super((0, _Defaults.optionsFromArguments)(TickParam.getDefaults(), arguments, ["value"]));
    this.name = "TickParam";
    /**
     * The timeline which tracks all of the automations.
     */

    this._events = new _Timeline.Timeline(Infinity);
    /**
     * The internal holder for the multiplier value
     */

    this._multiplier = 1;
    const options = (0, _Defaults.optionsFromArguments)(TickParam.getDefaults(), arguments, ["value"]); // set the multiplier

    this._multiplier = options.multiplier; // clear the ticks from the beginning

    this._events.cancel(0); // set an initial event


    this._events.add({
      ticks: 0,
      time: 0,
      type: "setValueAtTime",
      value: this._fromType(options.value)
    });

    this.setValueAtTime(options.value, 0);
  }

  static getDefaults() {
    return Object.assign(_Param.Param.getDefaults(), {
      multiplier: 1,
      units: "hertz",
      value: 1
    });
  }

  setTargetAtTime(value, time, constant) {
    // approximate it with multiple linear ramps
    time = this.toSeconds(time);
    this.setRampPoint(time);

    const computedValue = this._fromType(value); // start from previously scheduled value


    const prevEvent = this._events.get(time);

    const segments = Math.round(Math.max(1 / constant, 1));

    for (let i = 0; i <= segments; i++) {
      const segTime = constant * i + time;

      const rampVal = this._exponentialApproach(prevEvent.time, prevEvent.value, computedValue, constant, segTime);

      this.linearRampToValueAtTime(this._toType(rampVal), segTime);
    }

    return this;
  }

  setValueAtTime(value, time) {
    const computedTime = this.toSeconds(time);
    super.setValueAtTime(value, time);

    const event = this._events.get(computedTime);

    const previousEvent = this._events.previousEvent(event);

    const ticksUntilTime = this._getTicksUntilEvent(previousEvent, computedTime);

    event.ticks = Math.max(ticksUntilTime, 0);
    return this;
  }

  linearRampToValueAtTime(value, time) {
    const computedTime = this.toSeconds(time);
    super.linearRampToValueAtTime(value, time);

    const event = this._events.get(computedTime);

    const previousEvent = this._events.previousEvent(event);

    const ticksUntilTime = this._getTicksUntilEvent(previousEvent, computedTime);

    event.ticks = Math.max(ticksUntilTime, 0);
    return this;
  }

  exponentialRampToValueAtTime(value, time) {
    // aproximate it with multiple linear ramps
    time = this.toSeconds(time);

    const computedVal = this._fromType(value); // start from previously scheduled value


    const prevEvent = this._events.get(time); // approx 10 segments per second


    const segments = Math.round(Math.max((time - prevEvent.time) * 10, 1));
    const segmentDur = (time - prevEvent.time) / segments;

    for (let i = 0; i <= segments; i++) {
      const segTime = segmentDur * i + prevEvent.time;

      const rampVal = this._exponentialInterpolate(prevEvent.time, prevEvent.value, time, computedVal, segTime);

      this.linearRampToValueAtTime(this._toType(rampVal), segTime);
    }

    return this;
  }
  /**
   * Returns the tick value at the time. Takes into account
   * any automation curves scheduled on the signal.
   * @param  event The time to get the tick count at
   * @return The number of ticks which have elapsed at the time given any automations.
   */


  _getTicksUntilEvent(event, time) {
    if (event === null) {
      event = {
        ticks: 0,
        time: 0,
        type: "setValueAtTime",
        value: 0
      };
    } else if ((0, _TypeCheck.isUndef)(event.ticks)) {
      const previousEvent = this._events.previousEvent(event);

      event.ticks = this._getTicksUntilEvent(previousEvent, event.time);
    }

    const val0 = this._fromType(this.getValueAtTime(event.time));

    let val1 = this._fromType(this.getValueAtTime(time)); // if it's right on the line, take the previous value


    const onTheLineEvent = this._events.get(time);

    if (onTheLineEvent && onTheLineEvent.time === time && onTheLineEvent.type === "setValueAtTime") {
      val1 = this._fromType(this.getValueAtTime(time - this.sampleTime));
    }

    return 0.5 * (time - event.time) * (val0 + val1) + event.ticks;
  }
  /**
   * Returns the tick value at the time. Takes into account
   * any automation curves scheduled on the signal.
   * @param  time The time to get the tick count at
   * @return The number of ticks which have elapsed at the time given any automations.
   */


  getTicksAtTime(time) {
    const computedTime = this.toSeconds(time);

    const event = this._events.get(computedTime);

    return Math.max(this._getTicksUntilEvent(event, computedTime), 0);
  }
  /**
   * Return the elapsed time of the number of ticks from the given time
   * @param ticks The number of ticks to calculate
   * @param  time The time to get the next tick from
   * @return The duration of the number of ticks from the given time in seconds
   */


  getDurationOfTicks(ticks, time) {
    const computedTime = this.toSeconds(time);
    const currentTick = this.getTicksAtTime(time);
    return this.getTimeOfTick(currentTick + ticks) - computedTime;
  }
  /**
   * Given a tick, returns the time that tick occurs at.
   * @return The time that the tick occurs.
   */


  getTimeOfTick(tick) {
    const before = this._events.get(tick, "ticks");

    const after = this._events.getAfter(tick, "ticks");

    if (before && before.ticks === tick) {
      return before.time;
    } else if (before && after && after.type === "linearRampToValueAtTime" && before.value !== after.value) {
      const val0 = this._fromType(this.getValueAtTime(before.time));

      const val1 = this._fromType(this.getValueAtTime(after.time));

      const delta = (val1 - val0) / (after.time - before.time);
      const k = Math.sqrt(Math.pow(val0, 2) - 2 * delta * (before.ticks - tick));
      const sol1 = (-val0 + k) / delta;
      const sol2 = (-val0 - k) / delta;
      return (sol1 > 0 ? sol1 : sol2) + before.time;
    } else if (before) {
      if (before.value === 0) {
        return Infinity;
      } else {
        return before.time + (tick - before.ticks) / before.value;
      }
    } else {
      return tick / this._initialValue;
    }
  }
  /**
   * Convert some number of ticks their the duration in seconds accounting
   * for any automation curves starting at the given time.
   * @param  ticks The number of ticks to convert to seconds.
   * @param  when  When along the automation timeline to convert the ticks.
   * @return The duration in seconds of the ticks.
   */


  ticksToTime(ticks, when) {
    return this.getDurationOfTicks(ticks, when);
  }
  /**
   * The inverse of [[ticksToTime]]. Convert a duration in
   * seconds to the corresponding number of ticks accounting for any
   * automation curves starting at the given time.
   * @param  duration The time interval to convert to ticks.
   * @param  when When along the automation timeline to convert the ticks.
   * @return The duration in ticks.
   */


  timeToTicks(duration, when) {
    const computedTime = this.toSeconds(when);
    const computedDuration = this.toSeconds(duration);
    const startTicks = this.getTicksAtTime(computedTime);
    const endTicks = this.getTicksAtTime(computedTime + computedDuration);
    return endTicks - startTicks;
  }
  /**
   * Convert from the type when the unit value is BPM
   */


  _fromType(val) {
    if (this.units === "bpm" && this.multiplier) {
      return 1 / (60 / val / this.multiplier);
    } else {
      return super._fromType(val);
    }
  }
  /**
   * Special case of type conversion where the units === "bpm"
   */


  _toType(val) {
    if (this.units === "bpm" && this.multiplier) {
      return val / this.multiplier * 60;
    } else {
      return super._toType(val);
    }
  }
  /**
   * A multiplier on the bpm value. Useful for setting a PPQ relative to the base frequency value.
   */


  get multiplier() {
    return this._multiplier;
  }

  set multiplier(m) {
    // get and reset the current value with the new multiplier
    // might be necessary to clear all the previous values
    const currentVal = this.value;
    this._multiplier = m;
    this.cancelScheduledValues(0);
    this.setValueAtTime(currentVal, 0);
  }

}

exports.TickParam = TickParam;
},{"../context/Param":"../node_modules/tone/build/esm/core/context/Param.js","../util/Defaults":"../node_modules/tone/build/esm/core/util/Defaults.js","../util/Timeline":"../node_modules/tone/build/esm/core/util/Timeline.js","../util/TypeCheck":"../node_modules/tone/build/esm/core/util/TypeCheck.js"}],"../node_modules/tone/build/esm/core/clock/TickSignal.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TickSignal = void 0;

var _Signal = require("../../signal/Signal");

var _Defaults = require("../util/Defaults");

var _TickParam = require("./TickParam");

/**
 * TickSignal extends Tone.Signal, but adds the capability
 * to calculate the number of elapsed ticks. exponential and target curves
 * are approximated with multiple linear ramps.
 *
 * Thank you Bruno Dias, H. Sofia Pinto, and David M. Matos,
 * for your [WAC paper](https://smartech.gatech.edu/bitstream/handle/1853/54588/WAC2016-49.pdf)
 * describing integrating timing functions for tempo calculations.
 */
class TickSignal extends _Signal.Signal {
  constructor() {
    super((0, _Defaults.optionsFromArguments)(TickSignal.getDefaults(), arguments, ["value"]));
    this.name = "TickSignal";
    const options = (0, _Defaults.optionsFromArguments)(TickSignal.getDefaults(), arguments, ["value"]);
    this.input = this._param = new _TickParam.TickParam({
      context: this.context,
      convert: options.convert,
      multiplier: options.multiplier,
      param: this._constantSource.offset,
      units: options.units,
      value: options.value
    });
  }

  static getDefaults() {
    return Object.assign(_Signal.Signal.getDefaults(), {
      multiplier: 1,
      units: "hertz",
      value: 1
    });
  }

  ticksToTime(ticks, when) {
    return this._param.ticksToTime(ticks, when);
  }

  timeToTicks(duration, when) {
    return this._param.timeToTicks(duration, when);
  }

  getTimeOfTick(tick) {
    return this._param.getTimeOfTick(tick);
  }

  getDurationOfTicks(ticks, time) {
    return this._param.getDurationOfTicks(ticks, time);
  }

  getTicksAtTime(time) {
    return this._param.getTicksAtTime(time);
  }
  /**
   * A multiplier on the bpm value. Useful for setting a PPQ relative to the base frequency value.
   */


  get multiplier() {
    return this._param.multiplier;
  }

  set multiplier(m) {
    this._param.multiplier = m;
  }

  dispose() {
    super.dispose();

    this._param.dispose();

    return this;
  }

}

exports.TickSignal = TickSignal;
},{"../../signal/Signal":"../node_modules/tone/build/esm/signal/Signal.js","../util/Defaults":"../node_modules/tone/build/esm/core/util/Defaults.js","./TickParam":"../node_modules/tone/build/esm/core/clock/TickParam.js"}],"../node_modules/tone/build/esm/core/clock/TickSource.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TickSource = void 0;

var _ToneWithContext = require("../context/ToneWithContext");

var _Defaults = require("../util/Defaults");

var _Interface = require("../util/Interface");

var _StateTimeline = require("../util/StateTimeline");

var _Timeline = require("../util/Timeline");

var _TypeCheck = require("../util/TypeCheck");

var _TickSignal = require("./TickSignal");

var _Math = require("../util/Math");

/**
 * Uses [TickSignal](TickSignal) to track elapsed ticks with complex automation curves.
 */
class TickSource extends _ToneWithContext.ToneWithContext {
  constructor() {
    super((0, _Defaults.optionsFromArguments)(TickSource.getDefaults(), arguments, ["frequency"]));
    this.name = "TickSource";
    /**
     * The state timeline
     */

    this._state = new _StateTimeline.StateTimeline();
    /**
     * The offset values of the ticks
     */

    this._tickOffset = new _Timeline.Timeline();
    const options = (0, _Defaults.optionsFromArguments)(TickSource.getDefaults(), arguments, ["frequency"]);
    this.frequency = new _TickSignal.TickSignal({
      context: this.context,
      units: options.units,
      value: options.frequency
    });
    (0, _Interface.readOnly)(this, "frequency"); // set the initial state

    this._state.setStateAtTime("stopped", 0); // add the first event


    this.setTicksAtTime(0, 0);
  }

  static getDefaults() {
    return Object.assign({
      frequency: 1,
      units: "hertz"
    }, _ToneWithContext.ToneWithContext.getDefaults());
  }
  /**
   * Returns the playback state of the source, either "started", "stopped" or "paused".
   */


  get state() {
    return this.getStateAtTime(this.now());
  }
  /**
   * Start the clock at the given time. Optionally pass in an offset
   * of where to start the tick counter from.
   * @param  time    The time the clock should start
   * @param offset The number of ticks to start the source at
   */


  start(time, offset) {
    const computedTime = this.toSeconds(time);

    if (this._state.getValueAtTime(computedTime) !== "started") {
      this._state.setStateAtTime("started", computedTime);

      if ((0, _TypeCheck.isDefined)(offset)) {
        this.setTicksAtTime(offset, computedTime);
      }
    }

    return this;
  }
  /**
   * Stop the clock. Stopping the clock resets the tick counter to 0.
   * @param time The time when the clock should stop.
   */


  stop(time) {
    const computedTime = this.toSeconds(time); // cancel the previous stop

    if (this._state.getValueAtTime(computedTime) === "stopped") {
      const event = this._state.get(computedTime);

      if (event && event.time > 0) {
        this._tickOffset.cancel(event.time);

        this._state.cancel(event.time);
      }
    }

    this._state.cancel(computedTime);

    this._state.setStateAtTime("stopped", computedTime);

    this.setTicksAtTime(0, computedTime);
    return this;
  }
  /**
   * Pause the clock. Pausing does not reset the tick counter.
   * @param time The time when the clock should stop.
   */


  pause(time) {
    const computedTime = this.toSeconds(time);

    if (this._state.getValueAtTime(computedTime) === "started") {
      this._state.setStateAtTime("paused", computedTime);
    }

    return this;
  }
  /**
   * Cancel start/stop/pause and setTickAtTime events scheduled after the given time.
   * @param time When to clear the events after
   */


  cancel(time) {
    time = this.toSeconds(time);

    this._state.cancel(time);

    this._tickOffset.cancel(time);

    return this;
  }
  /**
   * Get the elapsed ticks at the given time
   * @param  time  When to get the tick value
   * @return The number of ticks
   */


  getTicksAtTime(time) {
    const computedTime = this.toSeconds(time);

    const stopEvent = this._state.getLastState("stopped", computedTime); // this event allows forEachBetween to iterate until the current time


    const tmpEvent = {
      state: "paused",
      time: computedTime
    };

    this._state.add(tmpEvent); // keep track of the previous offset event


    let lastState = stopEvent;
    let elapsedTicks = 0; // iterate through all the events since the last stop

    this._state.forEachBetween(stopEvent.time, computedTime + this.sampleTime, e => {
      let periodStartTime = lastState.time; // if there is an offset event in this period use that

      const offsetEvent = this._tickOffset.get(e.time);

      if (offsetEvent && offsetEvent.time >= lastState.time) {
        elapsedTicks = offsetEvent.ticks;
        periodStartTime = offsetEvent.time;
      }

      if (lastState.state === "started" && e.state !== "started") {
        elapsedTicks += this.frequency.getTicksAtTime(e.time) - this.frequency.getTicksAtTime(periodStartTime);
      }

      lastState = e;
    }); // remove the temporary event


    this._state.remove(tmpEvent); // return the ticks


    return elapsedTicks;
  }
  /**
   * The number of times the callback was invoked. Starts counting at 0
   * and increments after the callback was invoked. Returns -1 when stopped.
   */


  get ticks() {
    return this.getTicksAtTime(this.now());
  }

  set ticks(t) {
    this.setTicksAtTime(t, this.now());
  }
  /**
   * The time since ticks=0 that the TickSource has been running. Accounts
   * for tempo curves
   */


  get seconds() {
    return this.getSecondsAtTime(this.now());
  }

  set seconds(s) {
    const now = this.now();
    const ticks = this.frequency.timeToTicks(s, now);
    this.setTicksAtTime(ticks, now);
  }
  /**
   * Return the elapsed seconds at the given time.
   * @param  time  When to get the elapsed seconds
   * @return  The number of elapsed seconds
   */


  getSecondsAtTime(time) {
    time = this.toSeconds(time);

    const stopEvent = this._state.getLastState("stopped", time); // this event allows forEachBetween to iterate until the current time


    const tmpEvent = {
      state: "paused",
      time
    };

    this._state.add(tmpEvent); // keep track of the previous offset event


    let lastState = stopEvent;
    let elapsedSeconds = 0; // iterate through all the events since the last stop

    this._state.forEachBetween(stopEvent.time, time + this.sampleTime, e => {
      let periodStartTime = lastState.time; // if there is an offset event in this period use that

      const offsetEvent = this._tickOffset.get(e.time);

      if (offsetEvent && offsetEvent.time >= lastState.time) {
        elapsedSeconds = offsetEvent.seconds;
        periodStartTime = offsetEvent.time;
      }

      if (lastState.state === "started" && e.state !== "started") {
        elapsedSeconds += e.time - periodStartTime;
      }

      lastState = e;
    }); // remove the temporary event


    this._state.remove(tmpEvent); // return the ticks


    return elapsedSeconds;
  }
  /**
   * Set the clock's ticks at the given time.
   * @param  ticks The tick value to set
   * @param  time  When to set the tick value
   */


  setTicksAtTime(ticks, time) {
    time = this.toSeconds(time);

    this._tickOffset.cancel(time);

    this._tickOffset.add({
      seconds: this.frequency.getDurationOfTicks(ticks, time),
      ticks,
      time
    });

    return this;
  }
  /**
   * Returns the scheduled state at the given time.
   * @param  time  The time to query.
   */


  getStateAtTime(time) {
    time = this.toSeconds(time);
    return this._state.getValueAtTime(time);
  }
  /**
   * Get the time of the given tick. The second argument
   * is when to test before. Since ticks can be set (with setTicksAtTime)
   * there may be multiple times for a given tick value.
   * @param  tick The tick number.
   * @param  before When to measure the tick value from.
   * @return The time of the tick
   */


  getTimeOfTick(tick, before = this.now()) {
    const offset = this._tickOffset.get(before);

    const event = this._state.get(before);

    const startTime = Math.max(offset.time, event.time);
    const absoluteTicks = this.frequency.getTicksAtTime(startTime) + tick - offset.ticks;
    return this.frequency.getTimeOfTick(absoluteTicks);
  }
  /**
   * Invoke the callback event at all scheduled ticks between the
   * start time and the end time
   * @param  startTime  The beginning of the search range
   * @param  endTime    The end of the search range
   * @param  callback   The callback to invoke with each tick
   */


  forEachTickBetween(startTime, endTime, callback) {
    // only iterate through the sections where it is "started"
    let lastStateEvent = this._state.get(startTime);

    this._state.forEachBetween(startTime, endTime, event => {
      if (lastStateEvent && lastStateEvent.state === "started" && event.state !== "started") {
        this.forEachTickBetween(Math.max(lastStateEvent.time, startTime), event.time - this.sampleTime, callback);
      }

      lastStateEvent = event;
    });

    let error = null;

    if (lastStateEvent && lastStateEvent.state === "started") {
      const maxStartTime = Math.max(lastStateEvent.time, startTime); // figure out the difference between the frequency ticks and the

      const startTicks = this.frequency.getTicksAtTime(maxStartTime);
      const ticksAtStart = this.frequency.getTicksAtTime(lastStateEvent.time);
      const diff = startTicks - ticksAtStart;
      let offset = Math.ceil(diff) - diff; // guard against floating point issues

      offset = (0, _Math.EQ)(offset, 1) ? 0 : offset;
      let nextTickTime = this.frequency.getTimeOfTick(startTicks + offset);

      while (nextTickTime < endTime) {
        try {
          callback(nextTickTime, Math.round(this.getTicksAtTime(nextTickTime)));
        } catch (e) {
          error = e;
          break;
        }

        nextTickTime += this.frequency.getDurationOfTicks(1, nextTickTime);
      }
    }

    if (error) {
      throw error;
    }

    return this;
  }
  /**
   * Clean up
   */


  dispose() {
    super.dispose();

    this._state.dispose();

    this._tickOffset.dispose();

    this.frequency.dispose();
    return this;
  }

}

exports.TickSource = TickSource;
},{"../context/ToneWithContext":"../node_modules/tone/build/esm/core/context/ToneWithContext.js","../util/Defaults":"../node_modules/tone/build/esm/core/util/Defaults.js","../util/Interface":"../node_modules/tone/build/esm/core/util/Interface.js","../util/StateTimeline":"../node_modules/tone/build/esm/core/util/StateTimeline.js","../util/Timeline":"../node_modules/tone/build/esm/core/util/Timeline.js","../util/TypeCheck":"../node_modules/tone/build/esm/core/util/TypeCheck.js","./TickSignal":"../node_modules/tone/build/esm/core/clock/TickSignal.js","../util/Math":"../node_modules/tone/build/esm/core/util/Math.js"}],"../node_modules/tone/build/esm/core/clock/Clock.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Clock = void 0;

var _ToneWithContext = require("../context/ToneWithContext");

var _Defaults = require("../util/Defaults");

var _Emitter = require("../util/Emitter");

var _Interface = require("../util/Interface");

var _StateTimeline = require("../util/StateTimeline");

var _TickSource = require("./TickSource");

var _Debug = require("../util/Debug");

/**
 * A sample accurate clock which provides a callback at the given rate.
 * While the callback is not sample-accurate (it is still susceptible to
 * loose JS timing), the time passed in as the argument to the callback
 * is precise. For most applications, it is better to use Tone.Transport
 * instead of the Clock by itself since you can synchronize multiple callbacks.
 * @example
 * // the callback will be invoked approximately once a second
 * // and will print the time exactly once a second apart.
 * const clock = new Tone.Clock(time => {
 * 	console.log(time);
 * }, 1);
 * clock.start();
 * @category Core
 */
class Clock extends _ToneWithContext.ToneWithContext {
  constructor() {
    super((0, _Defaults.optionsFromArguments)(Clock.getDefaults(), arguments, ["callback", "frequency"]));
    this.name = "Clock";
    /**
     * The callback function to invoke at the scheduled tick.
     */

    this.callback = _Interface.noOp;
    /**
     * The last time the loop callback was invoked
     */

    this._lastUpdate = 0;
    /**
     * Keep track of the playback state
     */

    this._state = new _StateTimeline.StateTimeline("stopped");
    /**
     * Context bound reference to the _loop method
     * This is necessary to remove the event in the end.
     */

    this._boundLoop = this._loop.bind(this);
    const options = (0, _Defaults.optionsFromArguments)(Clock.getDefaults(), arguments, ["callback", "frequency"]);
    this.callback = options.callback;
    this._tickSource = new _TickSource.TickSource({
      context: this.context,
      frequency: options.frequency,
      units: options.units
    });
    this._lastUpdate = 0;
    this.frequency = this._tickSource.frequency;
    (0, _Interface.readOnly)(this, "frequency"); // add an initial state

    this._state.setStateAtTime("stopped", 0); // bind a callback to the worker thread


    this.context.on("tick", this._boundLoop);
  }

  static getDefaults() {
    return Object.assign(_ToneWithContext.ToneWithContext.getDefaults(), {
      callback: _Interface.noOp,
      frequency: 1,
      units: "hertz"
    });
  }
  /**
   * Returns the playback state of the source, either "started", "stopped" or "paused".
   */


  get state() {
    return this._state.getValueAtTime(this.now());
  }
  /**
   * Start the clock at the given time. Optionally pass in an offset
   * of where to start the tick counter from.
   * @param  time    The time the clock should start
   * @param offset  Where the tick counter starts counting from.
   */


  start(time, offset) {
    // make sure the context is running
    (0, _Debug.assertContextRunning)(this.context); // start the loop

    const computedTime = this.toSeconds(time);
    this.log("start", computedTime);

    if (this._state.getValueAtTime(computedTime) !== "started") {
      this._state.setStateAtTime("started", computedTime);

      this._tickSource.start(computedTime, offset);

      if (computedTime < this._lastUpdate) {
        this.emit("start", computedTime, offset);
      }
    }

    return this;
  }
  /**
   * Stop the clock. Stopping the clock resets the tick counter to 0.
   * @param time The time when the clock should stop.
   * @example
   * const clock = new Tone.Clock(time => {
   * 	console.log(time);
   * }, 1);
   * clock.start();
   * // stop the clock after 10 seconds
   * clock.stop("+10");
   */


  stop(time) {
    const computedTime = this.toSeconds(time);
    this.log("stop", computedTime);

    this._state.cancel(computedTime);

    this._state.setStateAtTime("stopped", computedTime);

    this._tickSource.stop(computedTime);

    if (computedTime < this._lastUpdate) {
      this.emit("stop", computedTime);
    }

    return this;
  }
  /**
   * Pause the clock. Pausing does not reset the tick counter.
   * @param time The time when the clock should stop.
   */


  pause(time) {
    const computedTime = this.toSeconds(time);

    if (this._state.getValueAtTime(computedTime) === "started") {
      this._state.setStateAtTime("paused", computedTime);

      this._tickSource.pause(computedTime);

      if (computedTime < this._lastUpdate) {
        this.emit("pause", computedTime);
      }
    }

    return this;
  }
  /**
   * The number of times the callback was invoked. Starts counting at 0
   * and increments after the callback was invoked.
   */


  get ticks() {
    return Math.ceil(this.getTicksAtTime(this.now()));
  }

  set ticks(t) {
    this._tickSource.ticks = t;
  }
  /**
   * The time since ticks=0 that the Clock has been running. Accounts for tempo curves
   */


  get seconds() {
    return this._tickSource.seconds;
  }

  set seconds(s) {
    this._tickSource.seconds = s;
  }
  /**
   * Return the elapsed seconds at the given time.
   * @param  time  When to get the elapsed seconds
   * @return  The number of elapsed seconds
   */


  getSecondsAtTime(time) {
    return this._tickSource.getSecondsAtTime(time);
  }
  /**
   * Set the clock's ticks at the given time.
   * @param  ticks The tick value to set
   * @param  time  When to set the tick value
   */


  setTicksAtTime(ticks, time) {
    this._tickSource.setTicksAtTime(ticks, time);

    return this;
  }
  /**
   * Get the time of the given tick. The second argument
   * is when to test before. Since ticks can be set (with setTicksAtTime)
   * there may be multiple times for a given tick value.
   * @param  tick The tick number.
   * @param  before When to measure the tick value from.
   * @return The time of the tick
   */


  getTimeOfTick(tick, before = this.now()) {
    return this._tickSource.getTimeOfTick(tick, before);
  }
  /**
   * Get the clock's ticks at the given time.
   * @param  time  When to get the tick value
   * @return The tick value at the given time.
   */


  getTicksAtTime(time) {
    return this._tickSource.getTicksAtTime(time);
  }
  /**
   * Get the time of the next tick
   * @param  offset The tick number.
   */


  nextTickTime(offset, when) {
    const computedTime = this.toSeconds(when);
    const currentTick = this.getTicksAtTime(computedTime);
    return this._tickSource.getTimeOfTick(currentTick + offset, computedTime);
  }
  /**
   * The scheduling loop.
   */


  _loop() {
    const startTime = this._lastUpdate;
    const endTime = this.now();
    this._lastUpdate = endTime;
    this.log("loop", startTime, endTime);

    if (startTime !== endTime) {
      // the state change events
      this._state.forEachBetween(startTime, endTime, e => {
        switch (e.state) {
          case "started":
            const offset = this._tickSource.getTicksAtTime(e.time);

            this.emit("start", e.time, offset);
            break;

          case "stopped":
            if (e.time !== 0) {
              this.emit("stop", e.time);
            }

            break;

          case "paused":
            this.emit("pause", e.time);
            break;
        }
      }); // the tick callbacks


      this._tickSource.forEachTickBetween(startTime, endTime, (time, ticks) => {
        this.callback(time, ticks);
      });
    }
  }
  /**
   * Returns the scheduled state at the given time.
   * @param  time  The time to query.
   * @return  The name of the state input in setStateAtTime.
   * @example
   * const clock = new Tone.Clock();
   * clock.start("+0.1");
   * clock.getStateAtTime("+0.1"); // returns "started"
   */


  getStateAtTime(time) {
    const computedTime = this.toSeconds(time);
    return this._state.getValueAtTime(computedTime);
  }
  /**
   * Clean up
   */


  dispose() {
    super.dispose();
    this.context.off("tick", this._boundLoop);

    this._tickSource.dispose();

    this._state.dispose();

    return this;
  }

}

exports.Clock = Clock;

_Emitter.Emitter.mixin(Clock);
},{"../context/ToneWithContext":"../node_modules/tone/build/esm/core/context/ToneWithContext.js","../util/Defaults":"../node_modules/tone/build/esm/core/util/Defaults.js","../util/Emitter":"../node_modules/tone/build/esm/core/util/Emitter.js","../util/Interface":"../node_modules/tone/build/esm/core/util/Interface.js","../util/StateTimeline":"../node_modules/tone/build/esm/core/util/StateTimeline.js","./TickSource":"../node_modules/tone/build/esm/core/clock/TickSource.js","../util/Debug":"../node_modules/tone/build/esm/core/util/Debug.js"}],"../node_modules/tone/build/esm/core/util/TimelineValue.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TimelineValue = void 0;

var _Timeline = require("./Timeline");

var _Tone = require("../Tone");

/**
 * Represents a single value which is gettable and settable in a timed way
 */
class TimelineValue extends _Tone.Tone {
  /**
   * @param initialValue The value to return if there is no scheduled values
   */
  constructor(initialValue) {
    super();
    this.name = "TimelineValue";
    /**
     * The timeline which stores the values
     */

    this._timeline = new _Timeline.Timeline({
      memory: 10
    });
    this._initialValue = initialValue;
  }
  /**
   * Set the value at the given time
   */


  set(value, time) {
    this._timeline.add({
      value,
      time
    });

    return this;
  }
  /**
   * Get the value at the given time
   */


  get(time) {
    const event = this._timeline.get(time);

    if (event) {
      return event.value;
    } else {
      return this._initialValue;
    }
  }

}

exports.TimelineValue = TimelineValue;
},{"./Timeline":"../node_modules/tone/build/esm/core/util/Timeline.js","../Tone":"../node_modules/tone/build/esm/core/Tone.js"}],"../node_modules/tone/build/esm/core/type/Ticks.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Ticks = Ticks;
exports.TicksClass = void 0;

var _Global = require("../Global");

var _TransportTime = require("./TransportTime");

/**
 * Ticks is a primitive type for encoding Time values.
 * Ticks can be constructed with or without the `new` keyword. Ticks can be passed
 * into the parameter of any method which takes time as an argument.
 * @example
 * const t = Tone.Ticks("4n"); // a quarter note as ticks
 * @category Unit
 */
class TicksClass extends _TransportTime.TransportTimeClass {
  constructor() {
    super(...arguments);
    this.name = "Ticks";
    this.defaultUnits = "i";
  }
  /**
   * Get the current time in the given units
   */


  _now() {
    return this.context.transport.ticks;
  }
  /**
   * Return the value of the beats in the current units
   */


  _beatsToUnits(beats) {
    return this._getPPQ() * beats;
  }
  /**
   * Returns the value of a second in the current units
   */


  _secondsToUnits(seconds) {
    return Math.floor(seconds / (60 / this._getBpm()) * this._getPPQ());
  }
  /**
   * Returns the value of a tick in the current time units
   */


  _ticksToUnits(ticks) {
    return ticks;
  }
  /**
   * Return the time in ticks
   */


  toTicks() {
    return this.valueOf();
  }
  /**
   * Return the time in seconds
   */


  toSeconds() {
    return this.valueOf() / this._getPPQ() * (60 / this._getBpm());
  }

}
/**
 * Convert a time representation to ticks
 * @category Unit
 */


exports.TicksClass = TicksClass;

function Ticks(value, units) {
  return new TicksClass((0, _Global.getContext)(), value, units);
}
},{"../Global":"../node_modules/tone/build/esm/core/Global.js","./TransportTime":"../node_modules/tone/build/esm/core/type/TransportTime.js"}],"../node_modules/tone/build/esm/core/util/IntervalTimeline.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.IntervalTimeline = void 0;

var _Tone = require("../Tone");

var _TypeCheck = require("./TypeCheck");

var _Debug = require("./Debug");

/**
 * Similar to Tone.Timeline, but all events represent
 * intervals with both "time" and "duration" times. The
 * events are placed in a tree structure optimized
 * for querying an intersection point with the timeline
 * events. Internally uses an [Interval Tree](https://en.wikipedia.org/wiki/Interval_tree)
 * to represent the data.
 */
class IntervalTimeline extends _Tone.Tone {
  constructor() {
    super(...arguments);
    this.name = "IntervalTimeline";
    /**
     * The root node of the inteval tree
     */

    this._root = null;
    /**
     * Keep track of the length of the timeline.
     */

    this._length = 0;
  }
  /**
   * The event to add to the timeline. All events must
   * have a time and duration value
   * @param  event  The event to add to the timeline
   */


  add(event) {
    (0, _Debug.assert)((0, _TypeCheck.isDefined)(event.time), "Events must have a time property");
    (0, _Debug.assert)((0, _TypeCheck.isDefined)(event.duration), "Events must have a duration parameter");
    event.time = event.time.valueOf();
    let node = new IntervalNode(event.time, event.time + event.duration, event);

    if (this._root === null) {
      this._root = node;
    } else {
      this._root.insert(node);
    }

    this._length++; // Restructure tree to be balanced

    while (node !== null) {
      node.updateHeight();
      node.updateMax();

      this._rebalance(node);

      node = node.parent;
    }

    return this;
  }
  /**
   * Remove an event from the timeline.
   * @param  event  The event to remove from the timeline
   */


  remove(event) {
    if (this._root !== null) {
      const results = [];

      this._root.search(event.time, results);

      for (const node of results) {
        if (node.event === event) {
          this._removeNode(node);

          this._length--;
          break;
        }
      }
    }

    return this;
  }
  /**
   * The number of items in the timeline.
   * @readOnly
   */


  get length() {
    return this._length;
  }
  /**
   * Remove events whose time time is after the given time
   * @param  after  The time to query.
   */


  cancel(after) {
    this.forEachFrom(after, event => this.remove(event));
    return this;
  }
  /**
   * Set the root node as the given node
   */


  _setRoot(node) {
    this._root = node;

    if (this._root !== null) {
      this._root.parent = null;
    }
  }
  /**
   * Replace the references to the node in the node's parent
   * with the replacement node.
   */


  _replaceNodeInParent(node, replacement) {
    if (node.parent !== null) {
      if (node.isLeftChild()) {
        node.parent.left = replacement;
      } else {
        node.parent.right = replacement;
      }

      this._rebalance(node.parent);
    } else {
      this._setRoot(replacement);
    }
  }
  /**
   * Remove the node from the tree and replace it with
   * a successor which follows the schema.
   */


  _removeNode(node) {
    if (node.left === null && node.right === null) {
      this._replaceNodeInParent(node, null);
    } else if (node.right === null) {
      this._replaceNodeInParent(node, node.left);
    } else if (node.left === null) {
      this._replaceNodeInParent(node, node.right);
    } else {
      const balance = node.getBalance();
      let replacement;
      let temp = null;

      if (balance > 0) {
        if (node.left.right === null) {
          replacement = node.left;
          replacement.right = node.right;
          temp = replacement;
        } else {
          replacement = node.left.right;

          while (replacement.right !== null) {
            replacement = replacement.right;
          }

          if (replacement.parent) {
            replacement.parent.right = replacement.left;
            temp = replacement.parent;
            replacement.left = node.left;
            replacement.right = node.right;
          }
        }
      } else if (node.right.left === null) {
        replacement = node.right;
        replacement.left = node.left;
        temp = replacement;
      } else {
        replacement = node.right.left;

        while (replacement.left !== null) {
          replacement = replacement.left;
        }

        if (replacement.parent) {
          replacement.parent.left = replacement.right;
          temp = replacement.parent;
          replacement.left = node.left;
          replacement.right = node.right;
        }
      }

      if (node.parent !== null) {
        if (node.isLeftChild()) {
          node.parent.left = replacement;
        } else {
          node.parent.right = replacement;
        }
      } else {
        this._setRoot(replacement);
      }

      if (temp) {
        this._rebalance(temp);
      }
    }

    node.dispose();
  }
  /**
   * Rotate the tree to the left
   */


  _rotateLeft(node) {
    const parent = node.parent;
    const isLeftChild = node.isLeftChild(); // Make node.right the new root of this sub tree (instead of node)

    const pivotNode = node.right;

    if (pivotNode) {
      node.right = pivotNode.left;
      pivotNode.left = node;
    }

    if (parent !== null) {
      if (isLeftChild) {
        parent.left = pivotNode;
      } else {
        parent.right = pivotNode;
      }
    } else {
      this._setRoot(pivotNode);
    }
  }
  /**
   * Rotate the tree to the right
   */


  _rotateRight(node) {
    const parent = node.parent;
    const isLeftChild = node.isLeftChild(); // Make node.left the new root of this sub tree (instead of node)

    const pivotNode = node.left;

    if (pivotNode) {
      node.left = pivotNode.right;
      pivotNode.right = node;
    }

    if (parent !== null) {
      if (isLeftChild) {
        parent.left = pivotNode;
      } else {
        parent.right = pivotNode;
      }
    } else {
      this._setRoot(pivotNode);
    }
  }
  /**
   * Balance the BST
   */


  _rebalance(node) {
    const balance = node.getBalance();

    if (balance > 1 && node.left) {
      if (node.left.getBalance() < 0) {
        this._rotateLeft(node.left);
      } else {
        this._rotateRight(node);
      }
    } else if (balance < -1 && node.right) {
      if (node.right.getBalance() > 0) {
        this._rotateRight(node.right);
      } else {
        this._rotateLeft(node);
      }
    }
  }
  /**
   * Get an event whose time and duration span the give time. Will
   * return the match whose "time" value is closest to the given time.
   * @return  The event which spans the desired time
   */


  get(time) {
    if (this._root !== null) {
      const results = [];

      this._root.search(time, results);

      if (results.length > 0) {
        let max = results[0];

        for (let i = 1; i < results.length; i++) {
          if (results[i].low > max.low) {
            max = results[i];
          }
        }

        return max.event;
      }
    }

    return null;
  }
  /**
   * Iterate over everything in the timeline.
   * @param  callback The callback to invoke with every item
   */


  forEach(callback) {
    if (this._root !== null) {
      const allNodes = [];

      this._root.traverse(node => allNodes.push(node));

      allNodes.forEach(node => {
        if (node.event) {
          callback(node.event);
        }
      });
    }

    return this;
  }
  /**
   * Iterate over everything in the array in which the given time
   * overlaps with the time and duration time of the event.
   * @param  time The time to check if items are overlapping
   * @param  callback The callback to invoke with every item
   */


  forEachAtTime(time, callback) {
    if (this._root !== null) {
      const results = [];

      this._root.search(time, results);

      results.forEach(node => {
        if (node.event) {
          callback(node.event);
        }
      });
    }

    return this;
  }
  /**
   * Iterate over everything in the array in which the time is greater
   * than or equal to the given time.
   * @param  time The time to check if items are before
   * @param  callback The callback to invoke with every item
   */


  forEachFrom(time, callback) {
    if (this._root !== null) {
      const results = [];

      this._root.searchAfter(time, results);

      results.forEach(node => {
        if (node.event) {
          callback(node.event);
        }
      });
    }

    return this;
  }
  /**
   * Clean up
   */


  dispose() {
    super.dispose();

    if (this._root !== null) {
      this._root.traverse(node => node.dispose());
    }

    this._root = null;
    return this;
  }

} //-------------------------------------
// 	INTERVAL NODE HELPER
//-------------------------------------

/**
 * Represents a node in the binary search tree, with the addition
 * of a "high" value which keeps track of the highest value of
 * its children.
 * References:
 * https://brooknovak.wordpress.com/2013/12/07/augmented-interval-tree-in-c/
 * http://www.mif.vu.lt/~valdas/ALGORITMAI/LITERATURA/Cormen/Cormen.pdf
 * @param low
 * @param high
 */


exports.IntervalTimeline = IntervalTimeline;

class IntervalNode {
  constructor(low, high, event) {
    // the nodes to the left
    this._left = null; // the nodes to the right

    this._right = null; // the parent node

    this.parent = null; // the number of child nodes

    this.height = 0;
    this.event = event; // the low value

    this.low = low; // the high value

    this.high = high; // the high value for this and all child nodes

    this.max = this.high;
  }
  /**
   * Insert a node into the correct spot in the tree
   */


  insert(node) {
    if (node.low <= this.low) {
      if (this.left === null) {
        this.left = node;
      } else {
        this.left.insert(node);
      }
    } else if (this.right === null) {
      this.right = node;
    } else {
      this.right.insert(node);
    }
  }
  /**
   * Search the tree for nodes which overlap
   * with the given point
   * @param  point  The point to query
   * @param  results  The array to put the results
   */


  search(point, results) {
    // If p is to the right of the rightmost point of any interval
    // in this node and all children, there won't be any matches.
    if (point > this.max) {
      return;
    } // Search left children


    if (this.left !== null) {
      this.left.search(point, results);
    } // Check this node


    if (this.low <= point && this.high > point) {
      results.push(this);
    } // If p is to the left of the time of this interval,
    // then it can't be in any child to the right.


    if (this.low > point) {
      return;
    } // Search right children


    if (this.right !== null) {
      this.right.search(point, results);
    }
  }
  /**
   * Search the tree for nodes which are less
   * than the given point
   * @param  point  The point to query
   * @param  results  The array to put the results
   */


  searchAfter(point, results) {
    // Check this node
    if (this.low >= point) {
      results.push(this);

      if (this.left !== null) {
        this.left.searchAfter(point, results);
      }
    } // search the right side


    if (this.right !== null) {
      this.right.searchAfter(point, results);
    }
  }
  /**
   * Invoke the callback on this element and both it's branches
   * @param  {Function}  callback
   */


  traverse(callback) {
    callback(this);

    if (this.left !== null) {
      this.left.traverse(callback);
    }

    if (this.right !== null) {
      this.right.traverse(callback);
    }
  }
  /**
   * Update the height of the node
   */


  updateHeight() {
    if (this.left !== null && this.right !== null) {
      this.height = Math.max(this.left.height, this.right.height) + 1;
    } else if (this.right !== null) {
      this.height = this.right.height + 1;
    } else if (this.left !== null) {
      this.height = this.left.height + 1;
    } else {
      this.height = 0;
    }
  }
  /**
   * Update the height of the node
   */


  updateMax() {
    this.max = this.high;

    if (this.left !== null) {
      this.max = Math.max(this.max, this.left.max);
    }

    if (this.right !== null) {
      this.max = Math.max(this.max, this.right.max);
    }
  }
  /**
   * The balance is how the leafs are distributed on the node
   * @return  Negative numbers are balanced to the right
   */


  getBalance() {
    let balance = 0;

    if (this.left !== null && this.right !== null) {
      balance = this.left.height - this.right.height;
    } else if (this.left !== null) {
      balance = this.left.height + 1;
    } else if (this.right !== null) {
      balance = -(this.right.height + 1);
    }

    return balance;
  }
  /**
   * @returns true if this node is the left child of its parent
   */


  isLeftChild() {
    return this.parent !== null && this.parent.left === this;
  }
  /**
   * get/set the left node
   */


  get left() {
    return this._left;
  }

  set left(node) {
    this._left = node;

    if (node !== null) {
      node.parent = this;
    }

    this.updateHeight();
    this.updateMax();
  }
  /**
   * get/set the right node
   */


  get right() {
    return this._right;
  }

  set right(node) {
    this._right = node;

    if (node !== null) {
      node.parent = this;
    }

    this.updateHeight();
    this.updateMax();
  }
  /**
   * null out references.
   */


  dispose() {
    this.parent = null;
    this._left = null;
    this._right = null;
    this.event = null;
  }

}
},{"../Tone":"../node_modules/tone/build/esm/core/Tone.js","./TypeCheck":"../node_modules/tone/build/esm/core/util/TypeCheck.js","./Debug":"../node_modules/tone/build/esm/core/util/Debug.js"}],"../node_modules/tone/build/esm/core/clock/TransportEvent.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TransportEvent = void 0;

var _Interface = require("../util/Interface");

/**
 * TransportEvent is an internal class used by [[Transport]]
 * to schedule events. Do no invoke this class directly, it is
 * handled from within Tone.Transport.
 */
class TransportEvent {
  /**
   * @param transport The transport object which the event belongs to
   */
  constructor(transport, opts) {
    /**
     * The unique id of the event
     */
    this.id = TransportEvent._eventId++;
    const options = Object.assign(TransportEvent.getDefaults(), opts);
    this.transport = transport;
    this.callback = options.callback;
    this._once = options.once;
    this.time = options.time;
  }

  static getDefaults() {
    return {
      callback: _Interface.noOp,
      once: false,
      time: 0
    };
  }
  /**
   * Invoke the event callback.
   * @param  time  The AudioContext time in seconds of the event
   */


  invoke(time) {
    if (this.callback) {
      this.callback(time);

      if (this._once) {
        this.transport.clear(this.id);
      }
    }
  }
  /**
   * Clean up
   */


  dispose() {
    this.callback = undefined;
    return this;
  }

}
/**
 * Current ID counter
 */


exports.TransportEvent = TransportEvent;
TransportEvent._eventId = 0;
},{"../util/Interface":"../node_modules/tone/build/esm/core/util/Interface.js"}],"../node_modules/tone/build/esm/core/clock/TransportRepeatEvent.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TransportRepeatEvent = void 0;

var _Ticks = require("../type/Ticks");

var _TransportEvent = require("./TransportEvent");

/**
 * TransportRepeatEvent is an internal class used by Tone.Transport
 * to schedule repeat events. This class should not be instantiated directly.
 */
class TransportRepeatEvent extends _TransportEvent.TransportEvent {
  /**
   * @param transport The transport object which the event belongs to
   */
  constructor(transport, opts) {
    super(transport, opts);
    /**
     * The ID of the current timeline event
     */

    this._currentId = -1;
    /**
     * The ID of the next timeline event
     */

    this._nextId = -1;
    /**
     * The time of the next event
     */

    this._nextTick = this.time;
    /**
     * a reference to the bound start method
     */

    this._boundRestart = this._restart.bind(this);
    const options = Object.assign(TransportRepeatEvent.getDefaults(), opts);
    this.duration = new _Ticks.TicksClass(transport.context, options.duration).valueOf();
    this._interval = new _Ticks.TicksClass(transport.context, options.interval).valueOf();
    this._nextTick = options.time;
    this.transport.on("start", this._boundRestart);
    this.transport.on("loopStart", this._boundRestart);
    this.context = this.transport.context;

    this._restart();
  }

  static getDefaults() {
    return Object.assign({}, _TransportEvent.TransportEvent.getDefaults(), {
      duration: Infinity,
      interval: 1,
      once: false
    });
  }
  /**
   * Invoke the callback. Returns the tick time which
   * the next event should be scheduled at.
   * @param  time  The AudioContext time in seconds of the event
   */


  invoke(time) {
    // create more events if necessary
    this._createEvents(time); // call the super class


    super.invoke(time);
  }
  /**
   * Push more events onto the timeline to keep up with the position of the timeline
   */


  _createEvents(time) {
    // schedule the next event
    const ticks = this.transport.getTicksAtTime(time);

    if (ticks >= this.time && ticks >= this._nextTick && this._nextTick + this._interval < this.time + this.duration) {
      this._nextTick += this._interval;
      this._currentId = this._nextId;
      this._nextId = this.transport.scheduleOnce(this.invoke.bind(this), new _Ticks.TicksClass(this.context, this._nextTick).toSeconds());
    }
  }
  /**
   * Push more events onto the timeline to keep up with the position of the timeline
   */


  _restart(time) {
    this.transport.clear(this._currentId);
    this.transport.clear(this._nextId);
    this._nextTick = this.time;
    const ticks = this.transport.getTicksAtTime(time);

    if (ticks > this.time) {
      this._nextTick = this.time + Math.ceil((ticks - this.time) / this._interval) * this._interval;
    }

    this._currentId = this.transport.scheduleOnce(this.invoke.bind(this), new _Ticks.TicksClass(this.context, this._nextTick).toSeconds());
    this._nextTick += this._interval;
    this._nextId = this.transport.scheduleOnce(this.invoke.bind(this), new _Ticks.TicksClass(this.context, this._nextTick).toSeconds());
  }
  /**
   * Clean up
   */


  dispose() {
    super.dispose();
    this.transport.clear(this._currentId);
    this.transport.clear(this._nextId);
    this.transport.off("start", this._boundRestart);
    this.transport.off("loopStart", this._boundRestart);
    return this;
  }

}

exports.TransportRepeatEvent = TransportRepeatEvent;
},{"../type/Ticks":"../node_modules/tone/build/esm/core/type/Ticks.js","./TransportEvent":"../node_modules/tone/build/esm/core/clock/TransportEvent.js"}],"../node_modules/tone/build/esm/core/clock/Transport.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Transport = void 0;

var _Time = require("../../core/type/Time");

var _TimelineValue = require("../../core/util/TimelineValue");

var _ContextInitialization = require("../context/ContextInitialization");

var _Gain = require("../context/Gain");

var _ToneWithContext = require("../context/ToneWithContext");

var _Ticks = require("../type/Ticks");

var _TransportTime = require("../type/TransportTime");

var _Defaults = require("../util/Defaults");

var _Emitter = require("../util/Emitter");

var _Interface = require("../util/Interface");

var _IntervalTimeline = require("../util/IntervalTimeline");

var _Timeline = require("../util/Timeline");

var _TypeCheck = require("../util/TypeCheck");

var _Clock = require("./Clock");

var _TransportEvent = require("./TransportEvent");

var _TransportRepeatEvent = require("./TransportRepeatEvent");

/**
 * Transport for timing musical events.
 * Supports tempo curves and time changes. Unlike browser-based timing (setInterval, requestAnimationFrame)
 * Transport timing events pass in the exact time of the scheduled event
 * in the argument of the callback function. Pass that time value to the object
 * you're scheduling. <br><br>
 * A single transport is created for you when the library is initialized.
 * <br><br>
 * The transport emits the events: "start", "stop", "pause", and "loop" which are
 * called with the time of that event as the argument.
 *
 * @example
 * const osc = new Tone.Oscillator().toDestination();
 * // repeated event every 8th note
 * Tone.Transport.scheduleRepeat((time) => {
 * 	// use the callback time to schedule events
 * 	osc.start(time).stop(time + 0.1);
 * }, "8n");
 * // transport must be started before it starts invoking events
 * Tone.Transport.start();
 * @category Core
 */
class Transport extends _ToneWithContext.ToneWithContext {
  constructor() {
    super((0, _Defaults.optionsFromArguments)(Transport.getDefaults(), arguments));
    this.name = "Transport"; //-------------------------------------
    // 	LOOPING
    //-------------------------------------

    /**
     * If the transport loops or not.
     */

    this._loop = new _TimelineValue.TimelineValue(false);
    /**
     * The loop start position in ticks
     */

    this._loopStart = 0;
    /**
     * The loop end position in ticks
     */

    this._loopEnd = 0; //-------------------------------------
    // 	TIMELINE EVENTS
    //-------------------------------------

    /**
     * All the events in an object to keep track by ID
     */

    this._scheduledEvents = {};
    /**
     * The scheduled events.
     */

    this._timeline = new _Timeline.Timeline();
    /**
     * Repeated events
     */

    this._repeatedEvents = new _IntervalTimeline.IntervalTimeline();
    /**
     * All of the synced Signals
     */

    this._syncedSignals = [];
    /**
     * The swing amount
     */

    this._swingAmount = 0;
    const options = (0, _Defaults.optionsFromArguments)(Transport.getDefaults(), arguments); // CLOCK/TEMPO

    this._ppq = options.ppq;
    this._clock = new _Clock.Clock({
      callback: this._processTick.bind(this),
      context: this.context,
      frequency: 0,
      units: "bpm"
    });

    this._bindClockEvents();

    this.bpm = this._clock.frequency;
    this._clock.frequency.multiplier = options.ppq;
    this.bpm.setValueAtTime(options.bpm, 0);
    (0, _Interface.readOnly)(this, "bpm");
    this._timeSignature = options.timeSignature; // SWING

    this._swingTicks = options.ppq / 2; // 8n
  }

  static getDefaults() {
    return Object.assign(_ToneWithContext.ToneWithContext.getDefaults(), {
      bpm: 120,
      loopEnd: "4m",
      loopStart: 0,
      ppq: 192,
      swing: 0,
      swingSubdivision: "8n",
      timeSignature: 4
    });
  } //-------------------------------------
  // 	TICKS
  //-------------------------------------

  /**
   * called on every tick
   * @param  tickTime clock relative tick time
   */


  _processTick(tickTime, ticks) {
    // handle swing
    if (this._swingAmount > 0 && ticks % this._ppq !== 0 && // not on a downbeat
    ticks % (this._swingTicks * 2) !== 0) {
      // add some swing
      const progress = ticks % (this._swingTicks * 2) / (this._swingTicks * 2);

      const amount = Math.sin(progress * Math.PI) * this._swingAmount;

      tickTime += new _Ticks.TicksClass(this.context, this._swingTicks * 2 / 3).toSeconds() * amount;
    } // do the loop test


    if (this._loop.get(tickTime)) {
      if (ticks >= this._loopEnd) {
        this.emit("loopEnd", tickTime);

        this._clock.setTicksAtTime(this._loopStart, tickTime);

        ticks = this._loopStart;
        this.emit("loopStart", tickTime, this._clock.getSecondsAtTime(tickTime));
        this.emit("loop", tickTime);
      }
    } // invoke the timeline events scheduled on this tick


    this._timeline.forEachAtTime(ticks, event => event.invoke(tickTime));
  } //-------------------------------------
  // 	SCHEDULABLE EVENTS
  //-------------------------------------

  /**
   * Schedule an event along the timeline.
   * @param callback The callback to be invoked at the time.
   * @param time The time to invoke the callback at.
   * @return The id of the event which can be used for canceling the event.
   * @example
   * // schedule an event on the 16th measure
   * Tone.Transport.schedule((time) => {
   * 	// invoked on measure 16
   * 	console.log("measure 16!");
   * }, "16:0:0");
   */


  schedule(callback, time) {
    const event = new _TransportEvent.TransportEvent(this, {
      callback,
      time: new _TransportTime.TransportTimeClass(this.context, time).toTicks()
    });
    return this._addEvent(event, this._timeline);
  }
  /**
   * Schedule a repeated event along the timeline. The event will fire
   * at the `interval` starting at the `startTime` and for the specified
   * `duration`.
   * @param  callback   The callback to invoke.
   * @param  interval   The duration between successive callbacks. Must be a positive number.
   * @param  startTime  When along the timeline the events should start being invoked.
   * @param  duration How long the event should repeat.
   * @return  The ID of the scheduled event. Use this to cancel the event.
   * @example
   * const osc = new Tone.Oscillator().toDestination().start();
   * // a callback invoked every eighth note after the first measure
   * Tone.Transport.scheduleRepeat((time) => {
   * 	osc.start(time).stop(time + 0.1);
   * }, "8n", "1m");
   */


  scheduleRepeat(callback, interval, startTime, duration = Infinity) {
    const event = new _TransportRepeatEvent.TransportRepeatEvent(this, {
      callback,
      duration: new _Time.TimeClass(this.context, duration).toTicks(),
      interval: new _Time.TimeClass(this.context, interval).toTicks(),
      time: new _TransportTime.TransportTimeClass(this.context, startTime).toTicks()
    }); // kick it off if the Transport is started
    // @ts-ignore

    return this._addEvent(event, this._repeatedEvents);
  }
  /**
   * Schedule an event that will be removed after it is invoked.
   * @param callback The callback to invoke once.
   * @param time The time the callback should be invoked.
   * @returns The ID of the scheduled event.
   */


  scheduleOnce(callback, time) {
    const event = new _TransportEvent.TransportEvent(this, {
      callback,
      once: true,
      time: new _TransportTime.TransportTimeClass(this.context, time).toTicks()
    });
    return this._addEvent(event, this._timeline);
  }
  /**
   * Clear the passed in event id from the timeline
   * @param eventId The id of the event.
   */


  clear(eventId) {
    if (this._scheduledEvents.hasOwnProperty(eventId)) {
      const item = this._scheduledEvents[eventId.toString()];

      item.timeline.remove(item.event);
      item.event.dispose();
      delete this._scheduledEvents[eventId.toString()];
    }

    return this;
  }
  /**
   * Add an event to the correct timeline. Keep track of the
   * timeline it was added to.
   * @returns the event id which was just added
   */


  _addEvent(event, timeline) {
    this._scheduledEvents[event.id.toString()] = {
      event,
      timeline
    };
    timeline.add(event);
    return event.id;
  }
  /**
   * Remove scheduled events from the timeline after
   * the given time. Repeated events will be removed
   * if their startTime is after the given time
   * @param after Clear all events after this time.
   */


  cancel(after = 0) {
    const computedAfter = this.toTicks(after);

    this._timeline.forEachFrom(computedAfter, event => this.clear(event.id));

    this._repeatedEvents.forEachFrom(computedAfter, event => this.clear(event.id));

    return this;
  } //-------------------------------------
  // 	START/STOP/PAUSE
  //-------------------------------------

  /**
   * Bind start/stop/pause events from the clock and emit them.
   */


  _bindClockEvents() {
    this._clock.on("start", (time, offset) => {
      offset = new _Ticks.TicksClass(this.context, offset).toSeconds();
      this.emit("start", time, offset);
    });

    this._clock.on("stop", time => {
      this.emit("stop", time);
    });

    this._clock.on("pause", time => {
      this.emit("pause", time);
    });
  }
  /**
   * Returns the playback state of the source, either "started", "stopped", or "paused"
   */


  get state() {
    return this._clock.getStateAtTime(this.now());
  }
  /**
   * Start the transport and all sources synced to the transport.
   * @param  time The time when the transport should start.
   * @param  offset The timeline offset to start the transport.
   * @example
   * // start the transport in one second starting at beginning of the 5th measure.
   * Tone.Transport.start("+1", "4:0:0");
   */


  start(time, offset) {
    let offsetTicks;

    if ((0, _TypeCheck.isDefined)(offset)) {
      offsetTicks = this.toTicks(offset);
    } // start the clock


    this._clock.start(time, offsetTicks);

    return this;
  }
  /**
   * Stop the transport and all sources synced to the transport.
   * @param time The time when the transport should stop.
   * @example
   * Tone.Transport.stop();
   */


  stop(time) {
    this._clock.stop(time);

    return this;
  }
  /**
   * Pause the transport and all sources synced to the transport.
   */


  pause(time) {
    this._clock.pause(time);

    return this;
  }
  /**
   * Toggle the current state of the transport. If it is
   * started, it will stop it, otherwise it will start the Transport.
   * @param  time The time of the event
   */


  toggle(time) {
    time = this.toSeconds(time);

    if (this._clock.getStateAtTime(time) !== "started") {
      this.start(time);
    } else {
      this.stop(time);
    }

    return this;
  } //-------------------------------------
  // 	SETTERS/GETTERS
  //-------------------------------------

  /**
   * The time signature as just the numerator over 4.
   * For example 4/4 would be just 4 and 6/8 would be 3.
   * @example
   * // common time
   * Tone.Transport.timeSignature = 4;
   * // 7/8
   * Tone.Transport.timeSignature = [7, 8];
   * // this will be reduced to a single number
   * Tone.Transport.timeSignature; // returns 3.5
   */


  get timeSignature() {
    return this._timeSignature;
  }

  set timeSignature(timeSig) {
    if ((0, _TypeCheck.isArray)(timeSig)) {
      timeSig = timeSig[0] / timeSig[1] * 4;
    }

    this._timeSignature = timeSig;
  }
  /**
   * When the Transport.loop = true, this is the starting position of the loop.
   */


  get loopStart() {
    return new _Time.TimeClass(this.context, this._loopStart, "i").toSeconds();
  }

  set loopStart(startPosition) {
    this._loopStart = this.toTicks(startPosition);
  }
  /**
   * When the Transport.loop = true, this is the ending position of the loop.
   */


  get loopEnd() {
    return new _Time.TimeClass(this.context, this._loopEnd, "i").toSeconds();
  }

  set loopEnd(endPosition) {
    this._loopEnd = this.toTicks(endPosition);
  }
  /**
   * If the transport loops or not.
   */


  get loop() {
    return this._loop.get(this.now());
  }

  set loop(loop) {
    this._loop.set(loop, this.now());
  }
  /**
   * Set the loop start and stop at the same time.
   * @example
   * // loop over the first measure
   * Tone.Transport.setLoopPoints(0, "1m");
   * Tone.Transport.loop = true;
   */


  setLoopPoints(startPosition, endPosition) {
    this.loopStart = startPosition;
    this.loopEnd = endPosition;
    return this;
  }
  /**
   * The swing value. Between 0-1 where 1 equal to the note + half the subdivision.
   */


  get swing() {
    return this._swingAmount;
  }

  set swing(amount) {
    // scale the values to a normal range
    this._swingAmount = amount;
  }
  /**
   * Set the subdivision which the swing will be applied to.
   * The default value is an 8th note. Value must be less
   * than a quarter note.
   */


  get swingSubdivision() {
    return new _Ticks.TicksClass(this.context, this._swingTicks).toNotation();
  }

  set swingSubdivision(subdivision) {
    this._swingTicks = this.toTicks(subdivision);
  }
  /**
   * The Transport's position in Bars:Beats:Sixteenths.
   * Setting the value will jump to that position right away.
   */


  get position() {
    const now = this.now();

    const ticks = this._clock.getTicksAtTime(now);

    return new _Ticks.TicksClass(this.context, ticks).toBarsBeatsSixteenths();
  }

  set position(progress) {
    const ticks = this.toTicks(progress);
    this.ticks = ticks;
  }
  /**
   * The Transport's position in seconds
   * Setting the value will jump to that position right away.
   */


  get seconds() {
    return this._clock.seconds;
  }

  set seconds(s) {
    const now = this.now();

    const ticks = this._clock.frequency.timeToTicks(s, now);

    this.ticks = ticks;
  }
  /**
   * The Transport's loop position as a normalized value. Always
   * returns 0 if the transport if loop is not true.
   */


  get progress() {
    if (this.loop) {
      const now = this.now();

      const ticks = this._clock.getTicksAtTime(now);

      return (ticks - this._loopStart) / (this._loopEnd - this._loopStart);
    } else {
      return 0;
    }
  }
  /**
   * The transports current tick position.
   */


  get ticks() {
    return this._clock.ticks;
  }

  set ticks(t) {
    if (this._clock.ticks !== t) {
      const now = this.now(); // stop everything synced to the transport

      if (this.state === "started") {
        const ticks = this._clock.getTicksAtTime(now); // schedule to start on the next tick, #573


        const time = this._clock.getTimeOfTick(Math.ceil(ticks));

        this.emit("stop", time);

        this._clock.setTicksAtTime(t, time); // restart it with the new time


        this.emit("start", time, this._clock.getSecondsAtTime(time));
      } else {
        this._clock.setTicksAtTime(t, now);
      }
    }
  }
  /**
   * Get the clock's ticks at the given time.
   * @param  time  When to get the tick value
   * @return The tick value at the given time.
   */


  getTicksAtTime(time) {
    return Math.round(this._clock.getTicksAtTime(time));
  }
  /**
   * Return the elapsed seconds at the given time.
   * @param  time  When to get the elapsed seconds
   * @return  The number of elapsed seconds
   */


  getSecondsAtTime(time) {
    return this._clock.getSecondsAtTime(time);
  }
  /**
   * Pulses Per Quarter note. This is the smallest resolution
   * the Transport timing supports. This should be set once
   * on initialization and not set again. Changing this value
   * after other objects have been created can cause problems.
   */


  get PPQ() {
    return this._clock.frequency.multiplier;
  }

  set PPQ(ppq) {
    this._clock.frequency.multiplier = ppq;
  } //-------------------------------------
  // 	SYNCING
  //-------------------------------------

  /**
   * Returns the time aligned to the next subdivision
   * of the Transport. If the Transport is not started,
   * it will return 0.
   * Note: this will not work precisely during tempo ramps.
   * @param  subdivision  The subdivision to quantize to
   * @return  The context time of the next subdivision.
   * @example
   * // the transport must be started, otherwise returns 0
   * Tone.Transport.start();
   * Tone.Transport.nextSubdivision("4n");
   */


  nextSubdivision(subdivision) {
    subdivision = this.toTicks(subdivision);

    if (this.state !== "started") {
      // if the transport's not started, return 0
      return 0;
    } else {
      const now = this.now(); // the remainder of the current ticks and the subdivision

      const transportPos = this.getTicksAtTime(now);
      const remainingTicks = subdivision - transportPos % subdivision;
      return this._clock.nextTickTime(remainingTicks, now);
    }
  }
  /**
   * Attaches the signal to the tempo control signal so that
   * any changes in the tempo will change the signal in the same
   * ratio.
   *
   * @param signal
   * @param ratio Optionally pass in the ratio between the two signals.
   * 			Otherwise it will be computed based on their current values.
   */


  syncSignal(signal, ratio) {
    if (!ratio) {
      // get the sync ratio
      const now = this.now();

      if (signal.getValueAtTime(now) !== 0) {
        const bpm = this.bpm.getValueAtTime(now);
        const computedFreq = 1 / (60 / bpm / this.PPQ);
        ratio = signal.getValueAtTime(now) / computedFreq;
      } else {
        ratio = 0;
      }
    }

    const ratioSignal = new _Gain.Gain(ratio); // @ts-ignore

    this.bpm.connect(ratioSignal); // @ts-ignore

    ratioSignal.connect(signal._param);

    this._syncedSignals.push({
      initial: signal.value,
      ratio: ratioSignal,
      signal
    });

    signal.value = 0;
    return this;
  }
  /**
   * Unsyncs a previously synced signal from the transport's control.
   * See Transport.syncSignal.
   */


  unsyncSignal(signal) {
    for (let i = this._syncedSignals.length - 1; i >= 0; i--) {
      const syncedSignal = this._syncedSignals[i];

      if (syncedSignal.signal === signal) {
        syncedSignal.ratio.dispose();
        syncedSignal.signal.value = syncedSignal.initial;

        this._syncedSignals.splice(i, 1);
      }
    }

    return this;
  }
  /**
   * Clean up.
   */


  dispose() {
    super.dispose();

    this._clock.dispose();

    (0, _Interface.writable)(this, "bpm");

    this._timeline.dispose();

    this._repeatedEvents.dispose();

    return this;
  }

}

exports.Transport = Transport;

_Emitter.Emitter.mixin(Transport); //-------------------------------------
// 	INITIALIZATION
//-------------------------------------


(0, _ContextInitialization.onContextInit)(context => {
  context.transport = new Transport({
    context
  });
});
(0, _ContextInitialization.onContextClose)(context => {
  context.transport.dispose();
});
},{"../../core/type/Time":"../node_modules/tone/build/esm/core/type/Time.js","../../core/util/TimelineValue":"../node_modules/tone/build/esm/core/util/TimelineValue.js","../context/ContextInitialization":"../node_modules/tone/build/esm/core/context/ContextInitialization.js","../context/Gain":"../node_modules/tone/build/esm/core/context/Gain.js","../context/ToneWithContext":"../node_modules/tone/build/esm/core/context/ToneWithContext.js","../type/Ticks":"../node_modules/tone/build/esm/core/type/Ticks.js","../type/TransportTime":"../node_modules/tone/build/esm/core/type/TransportTime.js","../util/Defaults":"../node_modules/tone/build/esm/core/util/Defaults.js","../util/Emitter":"../node_modules/tone/build/esm/core/util/Emitter.js","../util/Interface":"../node_modules/tone/build/esm/core/util/Interface.js","../util/IntervalTimeline":"../node_modules/tone/build/esm/core/util/IntervalTimeline.js","../util/Timeline":"../node_modules/tone/build/esm/core/util/Timeline.js","../util/TypeCheck":"../node_modules/tone/build/esm/core/util/TypeCheck.js","./Clock":"../node_modules/tone/build/esm/core/clock/Clock.js","./TransportEvent":"../node_modules/tone/build/esm/core/clock/TransportEvent.js","./TransportRepeatEvent":"../node_modules/tone/build/esm/core/clock/TransportRepeatEvent.js"}],"../node_modules/tone/build/esm/core/context/Delay.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Delay = void 0;

var _Param = require("../context/Param");

var _Defaults = require("../util/Defaults");

var _Interface = require("../util/Interface");

var _ToneAudioNode = require("./ToneAudioNode");

/**
 * Wrapper around Web Audio's native [DelayNode](http://webaudio.github.io/web-audio-api/#the-delaynode-interface).
 * @category Core
 * @example
 * return Tone.Offline(() => {
 * 	const delay = new Tone.Delay(0.1).toDestination();
 * 	// connect the signal to both the delay and the destination
 * 	const pulse = new Tone.PulseOscillator().connect(delay).toDestination();
 * 	// start and stop the pulse
 * 	pulse.start(0).stop(0.01);
 * }, 0.5, 1);
 */
class Delay extends _ToneAudioNode.ToneAudioNode {
  constructor() {
    super((0, _Defaults.optionsFromArguments)(Delay.getDefaults(), arguments, ["delayTime", "maxDelay"]));
    this.name = "Delay";
    const options = (0, _Defaults.optionsFromArguments)(Delay.getDefaults(), arguments, ["delayTime", "maxDelay"]);
    const maxDelayInSeconds = this.toSeconds(options.maxDelay);
    this._maxDelay = Math.max(maxDelayInSeconds, this.toSeconds(options.delayTime));
    this._delayNode = this.input = this.output = this.context.createDelay(maxDelayInSeconds);
    this.delayTime = new _Param.Param({
      context: this.context,
      param: this._delayNode.delayTime,
      units: "time",
      value: options.delayTime,
      minValue: 0,
      maxValue: this.maxDelay
    });
    (0, _Interface.readOnly)(this, "delayTime");
  }

  static getDefaults() {
    return Object.assign(_ToneAudioNode.ToneAudioNode.getDefaults(), {
      delayTime: 0,
      maxDelay: 1
    });
  }
  /**
   * The maximum delay time. This cannot be changed after
   * the value is passed into the constructor.
   */


  get maxDelay() {
    return this._maxDelay;
  }
  /**
   * Clean up.
   */


  dispose() {
    super.dispose();

    this._delayNode.disconnect();

    this.delayTime.dispose();
    return this;
  }

}

exports.Delay = Delay;
},{"../context/Param":"../node_modules/tone/build/esm/core/context/Param.js","../util/Defaults":"../node_modules/tone/build/esm/core/util/Defaults.js","../util/Interface":"../node_modules/tone/build/esm/core/util/Interface.js","./ToneAudioNode":"../node_modules/tone/build/esm/core/context/ToneAudioNode.js"}],"../node_modules/tone/build/esm/component/channel/Volume.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Volume = void 0;

var _Gain = require("../../core/context/Gain");

var _ToneAudioNode = require("../../core/context/ToneAudioNode");

var _Defaults = require("../../core/util/Defaults");

var _Interface = require("../../core/util/Interface");

/**
 * Volume is a simple volume node, useful for creating a volume fader.
 *
 * @example
 * const vol = new Tone.Volume(-12).toDestination();
 * const osc = new Tone.Oscillator().connect(vol).start();
 * @category Component
 */
class Volume extends _ToneAudioNode.ToneAudioNode {
  constructor() {
    super((0, _Defaults.optionsFromArguments)(Volume.getDefaults(), arguments, ["volume"]));
    this.name = "Volume";
    const options = (0, _Defaults.optionsFromArguments)(Volume.getDefaults(), arguments, ["volume"]);
    this.input = this.output = new _Gain.Gain({
      context: this.context,
      gain: options.volume,
      units: "decibels"
    });
    this.volume = this.output.gain;
    (0, _Interface.readOnly)(this, "volume");
    this._unmutedVolume = options.volume; // set the mute initially

    this.mute = options.mute;
  }

  static getDefaults() {
    return Object.assign(_ToneAudioNode.ToneAudioNode.getDefaults(), {
      mute: false,
      volume: 0
    });
  }
  /**
   * Mute the output.
   * @example
   * const vol = new Tone.Volume(-12).toDestination();
   * const osc = new Tone.Oscillator().connect(vol).start();
   * // mute the output
   * vol.mute = true;
   */


  get mute() {
    return this.volume.value === -Infinity;
  }

  set mute(mute) {
    if (!this.mute && mute) {
      this._unmutedVolume = this.volume.value; // maybe it should ramp here?

      this.volume.value = -Infinity;
    } else if (this.mute && !mute) {
      this.volume.value = this._unmutedVolume;
    }
  }
  /**
   * clean up
   */


  dispose() {
    super.dispose();
    this.input.dispose();
    this.volume.dispose();
    return this;
  }

}

exports.Volume = Volume;
},{"../../core/context/Gain":"../node_modules/tone/build/esm/core/context/Gain.js","../../core/context/ToneAudioNode":"../node_modules/tone/build/esm/core/context/ToneAudioNode.js","../../core/util/Defaults":"../node_modules/tone/build/esm/core/util/Defaults.js","../../core/util/Interface":"../node_modules/tone/build/esm/core/util/Interface.js"}],"../node_modules/tone/build/esm/core/context/Destination.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Destination = void 0;

var _Volume = require("../../component/channel/Volume");

var _Defaults = require("../util/Defaults");

var _ContextInitialization = require("./ContextInitialization");

var _Gain = require("./Gain");

var _ToneAudioNode = require("./ToneAudioNode");

/**
 * A single master output which is connected to the
 * AudioDestinationNode (aka your speakers).
 * It provides useful conveniences such as the ability
 * to set the volume and mute the entire application.
 * It also gives you the ability to apply master effects to your application.
 *
 * @example
 * const oscillator = new Tone.Oscillator().start();
 * // the audio will go from the oscillator to the speakers
 * oscillator.connect(Tone.Destination);
 * // a convenience for connecting to the master output is also provided:
 * oscillator.toDestination();
 * @category Core
 */
class Destination extends _ToneAudioNode.ToneAudioNode {
  constructor() {
    super((0, _Defaults.optionsFromArguments)(Destination.getDefaults(), arguments));
    this.name = "Destination";
    this.input = new _Volume.Volume({
      context: this.context
    });
    this.output = new _Gain.Gain({
      context: this.context
    });
    /**
     * The volume of the master output.
     */

    this.volume = this.input.volume;
    const options = (0, _Defaults.optionsFromArguments)(Destination.getDefaults(), arguments);
    (0, _ToneAudioNode.connectSeries)(this.input, this.output, this.context.rawContext.destination);
    this.mute = options.mute;
    this._internalChannels = [this.input, this.context.rawContext.destination, this.output];
  }

  static getDefaults() {
    return Object.assign(_ToneAudioNode.ToneAudioNode.getDefaults(), {
      mute: false,
      volume: 0
    });
  }
  /**
   * Mute the output.
   * @example
   * const oscillator = new Tone.Oscillator().start().toDestination();
   * setTimeout(() => {
   * 	// mute the output
   * 	Tone.Destination.mute = true;
   * }, 1000);
   */


  get mute() {
    return this.input.mute;
  }

  set mute(mute) {
    this.input.mute = mute;
  }
  /**
   * Add a master effects chain. NOTE: this will disconnect any nodes which were previously
   * chained in the master effects chain.
   * @param args All arguments will be connected in a row and the Master will be routed through it.
   * @example
   * // route all audio through a filter and compressor
   * const lowpass = new Tone.Filter(800, "lowpass");
   * const compressor = new Tone.Compressor(-18);
   * Tone.Destination.chain(lowpass, compressor);
   */


  chain(...args) {
    this.input.disconnect();
    args.unshift(this.input);
    args.push(this.output);
    (0, _ToneAudioNode.connectSeries)(...args);
    return this;
  }
  /**
   * The maximum number of channels the system can output
   * @example
   * console.log(Tone.Destination.maxChannelCount);
   */


  get maxChannelCount() {
    return this.context.rawContext.destination.maxChannelCount;
  }
  /**
   * Clean up
   */


  dispose() {
    super.dispose();
    this.volume.dispose();
    return this;
  }

} //-------------------------------------
// 	INITIALIZATION
//-------------------------------------


exports.Destination = Destination;
(0, _ContextInitialization.onContextInit)(context => {
  context.destination = new Destination({
    context
  });
});
(0, _ContextInitialization.onContextClose)(context => {
  context.destination.dispose();
});
},{"../../component/channel/Volume":"../node_modules/tone/build/esm/component/channel/Volume.js","../util/Defaults":"../node_modules/tone/build/esm/core/util/Defaults.js","./ContextInitialization":"../node_modules/tone/build/esm/core/context/ContextInitialization.js","./Gain":"../node_modules/tone/build/esm/core/context/Gain.js","./ToneAudioNode":"../node_modules/tone/build/esm/core/context/ToneAudioNode.js"}],"../node_modules/tone/build/esm/core/context/Offline.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Offline = Offline;

var _tslib = require("tslib");

var _Global = require("../Global");

var _OfflineContext = require("./OfflineContext");

var _ToneAudioBuffer = require("./ToneAudioBuffer");

/**
 * Generate a buffer by rendering all of the Tone.js code within the callback using the OfflineAudioContext.
 * The OfflineAudioContext is capable of rendering much faster than real time in many cases.
 * The callback function also passes in an offline instance of [[Context]] which can be used
 * to schedule events along the Transport.
 * @param  callback  All Tone.js nodes which are created and scheduled within this callback are recorded into the output Buffer.
 * @param  duration     the amount of time to record for.
 * @return  The promise which is invoked with the ToneAudioBuffer of the recorded output.
 * @example
 * // render 2 seconds of the oscillator
 * Tone.Offline(() => {
 * 	// only nodes created in this callback will be recorded
 * 	const oscillator = new Tone.Oscillator().toDestination().start(0);
 * }, 2).then((buffer) => {
 * 	// do something with the output buffer
 * 	console.log(buffer);
 * });
 * @example
 * // can also schedule events along the Transport
 * // using the passed in Offline Transport
 * Tone.Offline(({ transport }) => {
 * 	const osc = new Tone.Oscillator().toDestination();
 * 	transport.schedule(time => {
 * 		osc.start(time).stop(time + 0.1);
 * 	}, 1);
 * 	// make sure to start the transport
 * 	transport.start(0.2);
 * }, 4).then((buffer) => {
 * 	// do something with the output buffer
 * 	console.log(buffer);
 * });
 * @category Core
 */
function Offline(callback, duration, channels = 2, sampleRate = (0, _Global.getContext)().sampleRate) {
  return (0, _tslib.__awaiter)(this, void 0, void 0, function* () {
    // set the OfflineAudioContext based on the current context
    const originalContext = (0, _Global.getContext)();
    const context = new _OfflineContext.OfflineContext(channels, duration, sampleRate);
    (0, _Global.setContext)(context); // invoke the callback/scheduling

    yield callback(context); // then render the audio

    const bufferPromise = context.render(); // return the original AudioContext

    (0, _Global.setContext)(originalContext); // await the rendering

    const buffer = yield bufferPromise; // return the audio

    return new _ToneAudioBuffer.ToneAudioBuffer(buffer);
  });
}
},{"tslib":"../node_modules/tslib/tslib.es6.js","../Global":"../node_modules/tone/build/esm/core/Global.js","./OfflineContext":"../node_modules/tone/build/esm/core/context/OfflineContext.js","./ToneAudioBuffer":"../node_modules/tone/build/esm/core/context/ToneAudioBuffer.js"}],"../node_modules/tone/build/esm/core/context/ToneAudioBuffers.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ToneAudioBuffers = void 0;

var _Tone = require("../Tone");

var _Defaults = require("../util/Defaults");

var _Interface = require("../util/Interface");

var _TypeCheck = require("../util/TypeCheck");

var _ToneAudioBuffer = require("./ToneAudioBuffer");

var _Debug = require("../util/Debug");

/**
 * A data structure for holding multiple buffers in a Map-like datastructure.
 *
 * @example
 * const pianoSamples = new Tone.ToneAudioBuffers({
 * 	A1: "https://tonejs.github.io/audio/casio/A1.mp3",
 * 	A2: "https://tonejs.github.io/audio/casio/A2.mp3",
 * }, () => {
 * 	const player = new Tone.Player().toDestination();
 * 	// play one of the samples when they all load
 * 	player.buffer = pianoSamples.get("C2");
 * 	player.start();
 * });
 * @example
 * // To pass in additional parameters in the second parameter
 * const buffers = new Tone.ToneAudioBuffers({
 * 	 urls: {
 * 		 A1: "A1.mp3",
 * 		 A2: "A2.mp3",
 * 	 },
 * 	 onload: () => console.log("loaded"),
 * 	 baseUrl: "https://tonejs.github.io/audio/casio/"
 * });
 * @category Core
 */
class ToneAudioBuffers extends _Tone.Tone {
  constructor() {
    super();
    this.name = "ToneAudioBuffers";
    /**
     * All of the buffers
     */

    this._buffers = new Map();
    /**
     * Keep track of the number of loaded buffers
     */

    this._loadingCount = 0;
    const options = (0, _Defaults.optionsFromArguments)(ToneAudioBuffers.getDefaults(), arguments, ["urls", "onload", "baseUrl"], "urls");
    this.baseUrl = options.baseUrl; // add each one

    Object.keys(options.urls).forEach(name => {
      this._loadingCount++;
      const url = options.urls[name];
      this.add(name, url, this._bufferLoaded.bind(this, options.onload), options.onerror);
    });
  }

  static getDefaults() {
    return {
      baseUrl: "",
      onerror: _Interface.noOp,
      onload: _Interface.noOp,
      urls: {}
    };
  }
  /**
   * True if the buffers object has a buffer by that name.
   * @param  name  The key or index of the buffer.
   */


  has(name) {
    return this._buffers.has(name.toString());
  }
  /**
   * Get a buffer by name. If an array was loaded,
   * then use the array index.
   * @param  name  The key or index of the buffer.
   */


  get(name) {
    (0, _Debug.assert)(this.has(name), `ToneAudioBuffers has no buffer named: ${name}`);
    return this._buffers.get(name.toString());
  }
  /**
   * A buffer was loaded. decrement the counter.
   */


  _bufferLoaded(callback) {
    this._loadingCount--;

    if (this._loadingCount === 0 && callback) {
      callback();
    }
  }
  /**
   * If the buffers are loaded or not
   */


  get loaded() {
    return Array.from(this._buffers).every(([_, buffer]) => buffer.loaded);
  }
  /**
   * Add a buffer by name and url to the Buffers
   * @param  name      A unique name to give the buffer
   * @param  url  Either the url of the bufer, or a buffer which will be added with the given name.
   * @param  callback  The callback to invoke when the url is loaded.
   * @param  onerror  Invoked if the buffer can't be loaded
   */


  add(name, url, callback = _Interface.noOp, onerror = _Interface.noOp) {
    if ((0, _TypeCheck.isString)(url)) {
      this._buffers.set(name.toString(), new _ToneAudioBuffer.ToneAudioBuffer(this.baseUrl + url, callback, onerror));
    } else {
      this._buffers.set(name.toString(), new _ToneAudioBuffer.ToneAudioBuffer(url, callback, onerror));
    }

    return this;
  }

  dispose() {
    super.dispose();

    this._buffers.forEach(buffer => buffer.dispose());

    this._buffers.clear();

    return this;
  }

}

exports.ToneAudioBuffers = ToneAudioBuffers;
},{"../Tone":"../node_modules/tone/build/esm/core/Tone.js","../util/Defaults":"../node_modules/tone/build/esm/core/util/Defaults.js","../util/Interface":"../node_modules/tone/build/esm/core/util/Interface.js","../util/TypeCheck":"../node_modules/tone/build/esm/core/util/TypeCheck.js","./ToneAudioBuffer":"../node_modules/tone/build/esm/core/context/ToneAudioBuffer.js","../util/Debug":"../node_modules/tone/build/esm/core/util/Debug.js"}],"../node_modules/tone/build/esm/core/type/Midi.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Midi = Midi;
exports.MidiClass = void 0;

var _Global = require("../Global");

var _Conversions = require("./Conversions");

var _Frequency = require("./Frequency");

/**
 * Midi is a primitive type for encoding Time values.
 * Midi can be constructed with or without the `new` keyword. Midi can be passed
 * into the parameter of any method which takes time as an argument.
 * @category Unit
 */
class MidiClass extends _Frequency.FrequencyClass {
  constructor() {
    super(...arguments);
    this.name = "MidiClass";
    this.defaultUnits = "midi";
  }
  /**
   * Returns the value of a frequency in the current units
   */


  _frequencyToUnits(freq) {
    return (0, _Conversions.ftom)(super._frequencyToUnits(freq));
  }
  /**
   * Returns the value of a tick in the current time units
   */


  _ticksToUnits(ticks) {
    return (0, _Conversions.ftom)(super._ticksToUnits(ticks));
  }
  /**
   * Return the value of the beats in the current units
   */


  _beatsToUnits(beats) {
    return (0, _Conversions.ftom)(super._beatsToUnits(beats));
  }
  /**
   * Returns the value of a second in the current units
   */


  _secondsToUnits(seconds) {
    return (0, _Conversions.ftom)(super._secondsToUnits(seconds));
  }
  /**
   * Return the value of the frequency as a MIDI note
   * @example
   * Tone.Midi(60).toMidi(); // 60
   */


  toMidi() {
    return this.valueOf();
  }
  /**
   * Return the value of the frequency as a MIDI note
   * @example
   * Tone.Midi(60).toFrequency(); // 261.6255653005986
   */


  toFrequency() {
    return (0, _Conversions.mtof)(this.toMidi());
  }
  /**
   * Transposes the frequency by the given number of semitones.
   * @return A new transposed MidiClass
   * @example
   * Tone.Midi("A4").transpose(3); // "C5"
   */


  transpose(interval) {
    return new MidiClass(this.context, this.toMidi() + interval);
  }

}
/**
 * Convert a value into a FrequencyClass object.
 * @category Unit
 */


exports.MidiClass = MidiClass;

function Midi(value, units) {
  return new MidiClass((0, _Global.getContext)(), value, units);
}
},{"../Global":"../node_modules/tone/build/esm/core/Global.js","./Conversions":"../node_modules/tone/build/esm/core/type/Conversions.js","./Frequency":"../node_modules/tone/build/esm/core/type/Frequency.js"}],"../node_modules/tone/build/esm/core/util/Draw.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Draw = void 0;

var _ToneWithContext = require("../context/ToneWithContext");

var _Timeline = require("./Timeline");

var _ContextInitialization = require("../context/ContextInitialization");

/**
 * Draw is useful for synchronizing visuals and audio events.
 * Callbacks from Tone.Transport or any of the Tone.Event classes
 * always happen _before_ the scheduled time and are not synchronized
 * to the animation frame so they are not good for triggering tightly
 * synchronized visuals and sound. Draw makes it easy to schedule
 * callbacks using the AudioContext time and uses requestAnimationFrame.
 * @example
 * Tone.Transport.schedule((time) => {
 * 	// use the time argument to schedule a callback with Draw
 * 	Tone.Draw.schedule(() => {
 * 		// do drawing or DOM manipulation here
 * 		console.log(time);
 * 	}, time);
 * }, "+0.5");
 * Tone.Transport.start();
 * @category Core
 */
class Draw extends _ToneWithContext.ToneWithContext {
  constructor() {
    super(...arguments);
    this.name = "Draw";
    /**
     * The duration after which events are not invoked.
     */

    this.expiration = 0.25;
    /**
     * The amount of time before the scheduled time
     * that the callback can be invoked. Default is
     * half the time of an animation frame (0.008 seconds).
     */

    this.anticipation = 0.008;
    /**
     * All of the events.
     */

    this._events = new _Timeline.Timeline();
    /**
     * The draw loop
     */

    this._boundDrawLoop = this._drawLoop.bind(this);
    /**
     * The animation frame id
     */

    this._animationFrame = -1;
  }
  /**
   * Schedule a function at the given time to be invoked
   * on the nearest animation frame.
   * @param  callback  Callback is invoked at the given time.
   * @param  time      The time relative to the AudioContext time to invoke the callback.
   * @example
   * Tone.Transport.scheduleRepeat(time => {
   * 	Tone.Draw.schedule(() => console.log(time), time);
   * }, 1);
   * Tone.Transport.start();
   */


  schedule(callback, time) {
    this._events.add({
      callback,
      time: this.toSeconds(time)
    }); // start the draw loop on the first event


    if (this._events.length === 1) {
      this._animationFrame = requestAnimationFrame(this._boundDrawLoop);
    }

    return this;
  }
  /**
   * Cancel events scheduled after the given time
   * @param  after  Time after which scheduled events will be removed from the scheduling timeline.
   */


  cancel(after) {
    this._events.cancel(this.toSeconds(after));

    return this;
  }
  /**
   * The draw loop
   */


  _drawLoop() {
    const now = this.context.currentTime;

    while (this._events.length && this._events.peek().time - this.anticipation <= now) {
      const event = this._events.shift();

      if (event && now - event.time <= this.expiration) {
        event.callback();
      }
    }

    if (this._events.length > 0) {
      this._animationFrame = requestAnimationFrame(this._boundDrawLoop);
    }
  }

  dispose() {
    super.dispose();

    this._events.dispose();

    cancelAnimationFrame(this._animationFrame);
    return this;
  }

} //-------------------------------------
// 	INITIALIZATION
//-------------------------------------


exports.Draw = Draw;
(0, _ContextInitialization.onContextInit)(context => {
  context.draw = new Draw({
    context
  });
});
(0, _ContextInitialization.onContextClose)(context => {
  context.draw.dispose();
});
},{"../context/ToneWithContext":"../node_modules/tone/build/esm/core/context/ToneWithContext.js","./Timeline":"../node_modules/tone/build/esm/core/util/Timeline.js","../context/ContextInitialization":"../node_modules/tone/build/esm/core/context/ContextInitialization.js"}],"../node_modules/tone/build/esm/core/type/Units.js":[function(require,module,exports) {

},{}],"../node_modules/tone/build/esm/core/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
var _exportNames = {
  dbToGain: true,
  gainToDb: true,
  intervalToFrequencyRatio: true,
  ftom: true,
  mtof: true,
  optionsFromArguments: true,
  defaultArg: true,
  Unit: true,
  debug: true
};
Object.defineProperty(exports, "dbToGain", {
  enumerable: true,
  get: function () {
    return _Conversions.dbToGain;
  }
});
Object.defineProperty(exports, "gainToDb", {
  enumerable: true,
  get: function () {
    return _Conversions.gainToDb;
  }
});
Object.defineProperty(exports, "intervalToFrequencyRatio", {
  enumerable: true,
  get: function () {
    return _Conversions.intervalToFrequencyRatio;
  }
});
Object.defineProperty(exports, "ftom", {
  enumerable: true,
  get: function () {
    return _Conversions.ftom;
  }
});
Object.defineProperty(exports, "mtof", {
  enumerable: true,
  get: function () {
    return _Conversions.mtof;
  }
});
Object.defineProperty(exports, "optionsFromArguments", {
  enumerable: true,
  get: function () {
    return _Defaults.optionsFromArguments;
  }
});
Object.defineProperty(exports, "defaultArg", {
  enumerable: true,
  get: function () {
    return _Defaults.defaultArg;
  }
});
exports.debug = exports.Unit = void 0;

var _Clock = require("./clock/Clock");

Object.keys(_Clock).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _Clock[key];
    }
  });
});

var _Transport = require("./clock/Transport");

Object.keys(_Transport).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _Transport[key];
    }
  });
});

var _Context = require("./context/Context");

Object.keys(_Context).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _Context[key];
    }
  });
});

var _BaseContext = require("./context/BaseContext");

Object.keys(_BaseContext).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _BaseContext[key];
    }
  });
});

var _Delay = require("./context/Delay");

Object.keys(_Delay).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _Delay[key];
    }
  });
});

var _Destination = require("./context/Destination");

Object.keys(_Destination).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _Destination[key];
    }
  });
});

var _Gain = require("./context/Gain");

Object.keys(_Gain).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _Gain[key];
    }
  });
});

var _Offline = require("./context/Offline");

Object.keys(_Offline).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _Offline[key];
    }
  });
});

var _OfflineContext = require("./context/OfflineContext");

Object.keys(_OfflineContext).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _OfflineContext[key];
    }
  });
});

var _Param = require("./context/Param");

Object.keys(_Param).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _Param[key];
    }
  });
});

var _ToneAudioBuffer = require("./context/ToneAudioBuffer");

Object.keys(_ToneAudioBuffer).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _ToneAudioBuffer[key];
    }
  });
});

var _ToneAudioBuffers = require("./context/ToneAudioBuffers");

Object.keys(_ToneAudioBuffers).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _ToneAudioBuffers[key];
    }
  });
});

var _ToneAudioNode = require("./context/ToneAudioNode");

Object.keys(_ToneAudioNode).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _ToneAudioNode[key];
    }
  });
});

var _Frequency = require("./type/Frequency");

Object.keys(_Frequency).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _Frequency[key];
    }
  });
});

var _Midi = require("./type/Midi");

Object.keys(_Midi).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _Midi[key];
    }
  });
});

var _Time = require("./type/Time");

Object.keys(_Time).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _Time[key];
    }
  });
});

var _Ticks = require("./type/Ticks");

Object.keys(_Ticks).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _Ticks[key];
    }
  });
});

var _TransportTime = require("./type/TransportTime");

Object.keys(_TransportTime).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _TransportTime[key];
    }
  });
});

var _Draw = require("./util/Draw");

Object.keys(_Draw).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _Draw[key];
    }
  });
});

var _Emitter = require("./util/Emitter");

Object.keys(_Emitter).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _Emitter[key];
    }
  });
});

var _IntervalTimeline = require("./util/IntervalTimeline");

Object.keys(_IntervalTimeline).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _IntervalTimeline[key];
    }
  });
});

var _StateTimeline = require("./util/StateTimeline");

Object.keys(_StateTimeline).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _StateTimeline[key];
    }
  });
});

var _Timeline = require("./util/Timeline");

Object.keys(_Timeline).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _Timeline[key];
    }
  });
});

var _TypeCheck = require("./util/TypeCheck");

Object.keys(_TypeCheck).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _TypeCheck[key];
    }
  });
});

var _Conversions = require("./type/Conversions");

var _Defaults = require("./util/Defaults");

var Unit = _interopRequireWildcard(require("./type/Units"));

exports.Unit = Unit;

var debug = _interopRequireWildcard(require("./util/Debug"));

exports.debug = debug;

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
},{"./clock/Clock":"../node_modules/tone/build/esm/core/clock/Clock.js","./clock/Transport":"../node_modules/tone/build/esm/core/clock/Transport.js","./context/Context":"../node_modules/tone/build/esm/core/context/Context.js","./context/BaseContext":"../node_modules/tone/build/esm/core/context/BaseContext.js","./context/Delay":"../node_modules/tone/build/esm/core/context/Delay.js","./context/Destination":"../node_modules/tone/build/esm/core/context/Destination.js","./context/Gain":"../node_modules/tone/build/esm/core/context/Gain.js","./context/Offline":"../node_modules/tone/build/esm/core/context/Offline.js","./context/OfflineContext":"../node_modules/tone/build/esm/core/context/OfflineContext.js","./context/Param":"../node_modules/tone/build/esm/core/context/Param.js","./context/ToneAudioBuffer":"../node_modules/tone/build/esm/core/context/ToneAudioBuffer.js","./context/ToneAudioBuffers":"../node_modules/tone/build/esm/core/context/ToneAudioBuffers.js","./context/ToneAudioNode":"../node_modules/tone/build/esm/core/context/ToneAudioNode.js","./type/Frequency":"../node_modules/tone/build/esm/core/type/Frequency.js","./type/Midi":"../node_modules/tone/build/esm/core/type/Midi.js","./type/Time":"../node_modules/tone/build/esm/core/type/Time.js","./type/Ticks":"../node_modules/tone/build/esm/core/type/Ticks.js","./type/TransportTime":"../node_modules/tone/build/esm/core/type/TransportTime.js","./util/Draw":"../node_modules/tone/build/esm/core/util/Draw.js","./util/Emitter":"../node_modules/tone/build/esm/core/util/Emitter.js","./util/IntervalTimeline":"../node_modules/tone/build/esm/core/util/IntervalTimeline.js","./util/StateTimeline":"../node_modules/tone/build/esm/core/util/StateTimeline.js","./util/Timeline":"../node_modules/tone/build/esm/core/util/Timeline.js","./util/TypeCheck":"../node_modules/tone/build/esm/core/util/TypeCheck.js","./type/Conversions":"../node_modules/tone/build/esm/core/type/Conversions.js","./util/Defaults":"../node_modules/tone/build/esm/core/util/Defaults.js","./type/Units":"../node_modules/tone/build/esm/core/type/Units.js","./util/Debug":"../node_modules/tone/build/esm/core/util/Debug.js"}],"../node_modules/tone/build/esm/source/Source.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Source = void 0;

var _Volume = require("../component/channel/Volume");

require("../core/context/Destination");

require("../core/clock/Transport");

var _ToneAudioNode = require("../core/context/ToneAudioNode");

var _Defaults = require("../core/util/Defaults");

var _Interface = require("../core/util/Interface");

var _StateTimeline = require("../core/util/StateTimeline");

var _TypeCheck = require("../core/util/TypeCheck");

var _Debug = require("../core/util/Debug");

var _Math = require("../core/util/Math");

/**
 * Base class for sources.
 * start/stop of this.context.transport.
 *
 * ```
 * // Multiple state change events can be chained together,
 * // but must be set in the correct order and with ascending times
 * // OK
 * state.start().stop("+0.2");
 * // OK
 * state.start().stop("+0.2").start("+0.4").stop("+0.7")
 * // BAD
 * state.stop("+0.2").start();
 * // BAD
 * state.start("+0.3").stop("+0.2");
 * ```
 */
class Source extends _ToneAudioNode.ToneAudioNode {
  constructor(options) {
    super(options);
    /**
     * Sources have no inputs
     */

    this.input = undefined;
    /**
     * Keep track of the scheduled state.
     */

    this._state = new _StateTimeline.StateTimeline("stopped");
    /**
     * The synced `start` callback function from the transport
     */

    this._synced = false;
    /**
     * Keep track of all of the scheduled event ids
     */

    this._scheduled = [];
    /**
     * Placeholder functions for syncing/unsyncing to transport
     */

    this._syncedStart = _Interface.noOp;
    this._syncedStop = _Interface.noOp;
    this._state.memory = 100;
    this._state.increasing = true;
    this._volume = this.output = new _Volume.Volume({
      context: this.context,
      mute: options.mute,
      volume: options.volume
    });
    this.volume = this._volume.volume;
    (0, _Interface.readOnly)(this, "volume");
    this.onstop = options.onstop;
  }

  static getDefaults() {
    return Object.assign(_ToneAudioNode.ToneAudioNode.getDefaults(), {
      mute: false,
      onstop: _Interface.noOp,
      volume: 0
    });
  }
  /**
   * Returns the playback state of the source, either "started" or "stopped".
   * @example
   * const player = new Tone.Player("https://tonejs.github.io/audio/berklee/ahntone_c3.mp3", () => {
   * 	player.start();
   * 	console.log(player.state);
   * }).toDestination();
   */


  get state() {
    if (this._synced) {
      if (this.context.transport.state === "started") {
        return this._state.getValueAtTime(this.context.transport.seconds);
      } else {
        return "stopped";
      }
    } else {
      return this._state.getValueAtTime(this.now());
    }
  }
  /**
   * Mute the output.
   * @example
   * const osc = new Tone.Oscillator().toDestination().start();
   * // mute the output
   * osc.mute = true;
   */


  get mute() {
    return this._volume.mute;
  }

  set mute(mute) {
    this._volume.mute = mute;
  }
  /**
   * Ensure that the scheduled time is not before the current time.
   * Should only be used when scheduled unsynced.
   */


  _clampToCurrentTime(time) {
    if (this._synced) {
      return time;
    } else {
      return Math.max(time, this.context.currentTime);
    }
  }
  /**
   * Start the source at the specified time. If no time is given,
   * start the source now.
   * @param  time When the source should be started.
   * @example
   * const source = new Tone.Oscillator().toDestination();
   * source.start("+0.5"); // starts the source 0.5 seconds from now
   */


  start(time, offset, duration) {
    let computedTime = (0, _TypeCheck.isUndef)(time) && this._synced ? this.context.transport.seconds : this.toSeconds(time);
    computedTime = this._clampToCurrentTime(computedTime); // if it's started, stop it and restart it

    if (!this._synced && this._state.getValueAtTime(computedTime) === "started") {
      // time should be strictly greater than the previous start time
      (0, _Debug.assert)((0, _Math.GT)(computedTime, this._state.get(computedTime).time), "Start time must be strictly greater than previous start time");

      this._state.cancel(computedTime);

      this._state.setStateAtTime("started", computedTime);

      this.log("restart", computedTime);
      this.restart(computedTime, offset, duration);
    } else {
      this.log("start", computedTime);

      this._state.setStateAtTime("started", computedTime);

      if (this._synced) {
        // add the offset time to the event
        const event = this._state.get(computedTime);

        if (event) {
          event.offset = this.toSeconds((0, _Defaults.defaultArg)(offset, 0));
          event.duration = duration ? this.toSeconds(duration) : undefined;
        }

        const sched = this.context.transport.schedule(t => {
          this._start(t, offset, duration);
        }, computedTime);

        this._scheduled.push(sched); // if the transport is already started
        // and the time is greater than where the transport is


        if (this.context.transport.state === "started" && this.context.transport.getSecondsAtTime(this.immediate()) > computedTime) {
          this._syncedStart(this.now(), this.context.transport.seconds);
        }
      } else {
        (0, _Debug.assertContextRunning)(this.context);

        this._start(computedTime, offset, duration);
      }
    }

    return this;
  }
  /**
   * Stop the source at the specified time. If no time is given,
   * stop the source now.
   * @param  time When the source should be stopped.
   * @example
   * const source = new Tone.Oscillator().toDestination();
   * source.start();
   * source.stop("+0.5"); // stops the source 0.5 seconds from now
   */


  stop(time) {
    let computedTime = (0, _TypeCheck.isUndef)(time) && this._synced ? this.context.transport.seconds : this.toSeconds(time);
    computedTime = this._clampToCurrentTime(computedTime);

    if (this._state.getValueAtTime(computedTime) === "started" || (0, _TypeCheck.isDefined)(this._state.getNextState("started", computedTime))) {
      this.log("stop", computedTime);

      if (!this._synced) {
        this._stop(computedTime);
      } else {
        const sched = this.context.transport.schedule(this._stop.bind(this), computedTime);

        this._scheduled.push(sched);
      }

      this._state.cancel(computedTime);

      this._state.setStateAtTime("stopped", computedTime);
    }

    return this;
  }
  /**
   * Restart the source.
   */


  restart(time, offset, duration) {
    time = this.toSeconds(time);

    if (this._state.getValueAtTime(time) === "started") {
      this._state.cancel(time);

      this._restart(time, offset, duration);
    }

    return this;
  }
  /**
   * Sync the source to the Transport so that all subsequent
   * calls to `start` and `stop` are synced to the TransportTime
   * instead of the AudioContext time.
   *
   * @example
   * const osc = new Tone.Oscillator().toDestination();
   * // sync the source so that it plays between 0 and 0.3 on the Transport's timeline
   * osc.sync().start(0).stop(0.3);
   * // start the transport.
   * Tone.Transport.start();
   * // set it to loop once a second
   * Tone.Transport.loop = true;
   * Tone.Transport.loopEnd = 1;
   */


  sync() {
    if (!this._synced) {
      this._synced = true;

      this._syncedStart = (time, offset) => {
        if (offset > 0) {
          // get the playback state at that time
          const stateEvent = this._state.get(offset); // listen for start events which may occur in the middle of the sync'ed time


          if (stateEvent && stateEvent.state === "started" && stateEvent.time !== offset) {
            // get the offset
            const startOffset = offset - this.toSeconds(stateEvent.time);
            let duration;

            if (stateEvent.duration) {
              duration = this.toSeconds(stateEvent.duration) - startOffset;
            }

            this._start(time, this.toSeconds(stateEvent.offset) + startOffset, duration);
          }
        }
      };

      this._syncedStop = time => {
        const seconds = this.context.transport.getSecondsAtTime(Math.max(time - this.sampleTime, 0));

        if (this._state.getValueAtTime(seconds) === "started") {
          this._stop(time);
        }
      };

      this.context.transport.on("start", this._syncedStart);
      this.context.transport.on("loopStart", this._syncedStart);
      this.context.transport.on("stop", this._syncedStop);
      this.context.transport.on("pause", this._syncedStop);
      this.context.transport.on("loopEnd", this._syncedStop);
    }

    return this;
  }
  /**
   * Unsync the source to the Transport. See Source.sync
   */


  unsync() {
    if (this._synced) {
      this.context.transport.off("stop", this._syncedStop);
      this.context.transport.off("pause", this._syncedStop);
      this.context.transport.off("loopEnd", this._syncedStop);
      this.context.transport.off("start", this._syncedStart);
      this.context.transport.off("loopStart", this._syncedStart);
    }

    this._synced = false; // clear all of the scheduled ids

    this._scheduled.forEach(id => this.context.transport.clear(id));

    this._scheduled = [];

    this._state.cancel(0); // stop it also


    this._stop(0);

    return this;
  }
  /**
   * Clean up.
   */


  dispose() {
    super.dispose();
    this.onstop = _Interface.noOp;
    this.unsync();

    this._volume.dispose();

    this._state.dispose();

    return this;
  }

}

exports.Source = Source;
},{"../component/channel/Volume":"../node_modules/tone/build/esm/component/channel/Volume.js","../core/context/Destination":"../node_modules/tone/build/esm/core/context/Destination.js","../core/clock/Transport":"../node_modules/tone/build/esm/core/clock/Transport.js","../core/context/ToneAudioNode":"../node_modules/tone/build/esm/core/context/ToneAudioNode.js","../core/util/Defaults":"../node_modules/tone/build/esm/core/util/Defaults.js","../core/util/Interface":"../node_modules/tone/build/esm/core/util/Interface.js","../core/util/StateTimeline":"../node_modules/tone/build/esm/core/util/StateTimeline.js","../core/util/TypeCheck":"../node_modules/tone/build/esm/core/util/TypeCheck.js","../core/util/Debug":"../node_modules/tone/build/esm/core/util/Debug.js","../core/util/Math":"../node_modules/tone/build/esm/core/util/Math.js"}],"../node_modules/tone/build/esm/source/buffer/ToneBufferSource.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ToneBufferSource = void 0;

var _ToneAudioNode = require("../../core/context/ToneAudioNode");

var _Param = require("../../core/context/Param");

var _ToneAudioBuffer = require("../../core/context/ToneAudioBuffer");

var _Defaults = require("../../core/util/Defaults");

var _Interface = require("../../core/util/Interface");

var _TypeCheck = require("../../core/util/TypeCheck");

var _Debug = require("../../core/util/Debug");

var _OneShotSource = require("../OneShotSource");

var _Math = require("../../core/util/Math");

/**
 * Wrapper around the native BufferSourceNode.
 * @category Source
 */
class ToneBufferSource extends _OneShotSource.OneShotSource {
  constructor() {
    super((0, _Defaults.optionsFromArguments)(ToneBufferSource.getDefaults(), arguments, ["url", "onload"]));
    this.name = "ToneBufferSource";
    /**
     * The oscillator
     */

    this._source = this.context.createBufferSource();
    this._internalChannels = [this._source];
    /**
     * indicators if the source has started/stopped
     */

    this._sourceStarted = false;
    this._sourceStopped = false;
    const options = (0, _Defaults.optionsFromArguments)(ToneBufferSource.getDefaults(), arguments, ["url", "onload"]);
    (0, _ToneAudioNode.connect)(this._source, this._gainNode);

    this._source.onended = () => this._stopSource();
    /**
     * The playbackRate of the buffer
     */


    this.playbackRate = new _Param.Param({
      context: this.context,
      param: this._source.playbackRate,
      units: "positive",
      value: options.playbackRate
    }); // set some values initially

    this.loop = options.loop;
    this.loopStart = options.loopStart;
    this.loopEnd = options.loopEnd;
    this._buffer = new _ToneAudioBuffer.ToneAudioBuffer(options.url, options.onload, options.onerror);

    this._internalChannels.push(this._source);
  }

  static getDefaults() {
    return Object.assign(_OneShotSource.OneShotSource.getDefaults(), {
      url: new _ToneAudioBuffer.ToneAudioBuffer(),
      loop: false,
      loopEnd: 0,
      loopStart: 0,
      onload: _Interface.noOp,
      onerror: _Interface.noOp,
      playbackRate: 1
    });
  }
  /**
   * The fadeIn time of the amplitude envelope.
   */


  get fadeIn() {
    return this._fadeIn;
  }

  set fadeIn(t) {
    this._fadeIn = t;
  }
  /**
   * The fadeOut time of the amplitude envelope.
   */


  get fadeOut() {
    return this._fadeOut;
  }

  set fadeOut(t) {
    this._fadeOut = t;
  }
  /**
   * The curve applied to the fades, either "linear" or "exponential"
   */


  get curve() {
    return this._curve;
  }

  set curve(t) {
    this._curve = t;
  }
  /**
   * Start the buffer
   * @param  time When the player should start.
   * @param  offset The offset from the beginning of the sample to start at.
   * @param  duration How long the sample should play. If no duration is given, it will default to the full length of the sample (minus any offset)
   * @param  gain  The gain to play the buffer back at.
   */


  start(time, offset, duration, gain = 1) {
    (0, _Debug.assert)(this.buffer.loaded, "buffer is either not set or not loaded");
    const computedTime = this.toSeconds(time); // apply the gain envelope

    this._startGain(computedTime, gain); // if it's a loop the default offset is the loopstart point


    if (this.loop) {
      offset = (0, _Defaults.defaultArg)(offset, this.loopStart);
    } else {
      // otherwise the default offset is 0
      offset = (0, _Defaults.defaultArg)(offset, 0);
    } // make sure the offset is not less than 0


    let computedOffset = Math.max(this.toSeconds(offset), 0); // start the buffer source

    if (this.loop) {
      // modify the offset if it's greater than the loop time
      const loopEnd = this.toSeconds(this.loopEnd) || this.buffer.duration;
      const loopStart = this.toSeconds(this.loopStart);
      const loopDuration = loopEnd - loopStart; // move the offset back

      if ((0, _Math.GTE)(computedOffset, loopEnd)) {
        computedOffset = (computedOffset - loopStart) % loopDuration + loopStart;
      } // when the offset is very close to the duration, set it to 0


      if ((0, _Math.EQ)(computedOffset, this.buffer.duration)) {
        computedOffset = 0;
      }
    } // this.buffer.loaded would have return false if the AudioBuffer was undefined


    this._source.buffer = this.buffer.get();
    this._source.loopEnd = this.toSeconds(this.loopEnd) || this.buffer.duration;

    if ((0, _Math.LT)(computedOffset, this.buffer.duration)) {
      this._sourceStarted = true;

      this._source.start(computedTime, computedOffset);
    } // if a duration is given, schedule a stop


    if ((0, _TypeCheck.isDefined)(duration)) {
      let computedDur = this.toSeconds(duration); // make sure it's never negative

      computedDur = Math.max(computedDur, 0);
      this.stop(computedTime + computedDur);
    }

    return this;
  }

  _stopSource(time) {
    if (!this._sourceStopped && this._sourceStarted) {
      this._sourceStopped = true;

      this._source.stop(this.toSeconds(time));

      this._onended();
    }
  }
  /**
   * If loop is true, the loop will start at this position.
   */


  get loopStart() {
    return this._source.loopStart;
  }

  set loopStart(loopStart) {
    this._source.loopStart = this.toSeconds(loopStart);
  }
  /**
   * If loop is true, the loop will end at this position.
   */


  get loopEnd() {
    return this._source.loopEnd;
  }

  set loopEnd(loopEnd) {
    this._source.loopEnd = this.toSeconds(loopEnd);
  }
  /**
   * The audio buffer belonging to the player.
   */


  get buffer() {
    return this._buffer;
  }

  set buffer(buffer) {
    this._buffer.set(buffer);
  }
  /**
   * If the buffer should loop once it's over.
   */


  get loop() {
    return this._source.loop;
  }

  set loop(loop) {
    this._source.loop = loop;

    if (this._sourceStarted) {
      this.cancelStop();
    }
  }
  /**
   * Clean up.
   */


  dispose() {
    super.dispose();
    this._source.onended = null;

    this._source.disconnect();

    this._buffer.dispose();

    this.playbackRate.dispose();
    return this;
  }

}

exports.ToneBufferSource = ToneBufferSource;
},{"../../core/context/ToneAudioNode":"../node_modules/tone/build/esm/core/context/ToneAudioNode.js","../../core/context/Param":"../node_modules/tone/build/esm/core/context/Param.js","../../core/context/ToneAudioBuffer":"../node_modules/tone/build/esm/core/context/ToneAudioBuffer.js","../../core/util/Defaults":"../node_modules/tone/build/esm/core/util/Defaults.js","../../core/util/Interface":"../node_modules/tone/build/esm/core/util/Interface.js","../../core/util/TypeCheck":"../node_modules/tone/build/esm/core/util/TypeCheck.js","../../core/util/Debug":"../node_modules/tone/build/esm/core/util/Debug.js","../OneShotSource":"../node_modules/tone/build/esm/source/OneShotSource.js","../../core/util/Math":"../node_modules/tone/build/esm/core/util/Math.js"}],"../node_modules/tone/build/esm/source/Noise.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Noise = void 0;

var _ToneAudioBuffer = require("../core/context/ToneAudioBuffer");

var _Defaults = require("../core/util/Defaults");

var _Debug = require("../core/util/Debug");

var _Source = require("../source/Source");

var _ToneBufferSource = require("./buffer/ToneBufferSource");

/**
 * Noise is a noise generator. It uses looped noise buffers to save on performance.
 * Noise supports the noise types: "pink", "white", and "brown". Read more about
 * colors of noise on [Wikipedia](https://en.wikipedia.org/wiki/Colors_of_noise).
 *
 * @example
 * // initialize the noise and start
 * const noise = new Tone.Noise("pink").start();
 * // make an autofilter to shape the noise
 * const autoFilter = new Tone.AutoFilter({
 * 	frequency: "8n",
 * 	baseFrequency: 200,
 * 	octaves: 8
 * }).toDestination().start();
 * // connect the noise
 * noise.connect(autoFilter);
 * // start the autofilter LFO
 * autoFilter.start();
 * @category Source
 */
class Noise extends _Source.Source {
  constructor() {
    super((0, _Defaults.optionsFromArguments)(Noise.getDefaults(), arguments, ["type"]));
    this.name = "Noise";
    /**
     * Private reference to the source
     */

    this._source = null;
    const options = (0, _Defaults.optionsFromArguments)(Noise.getDefaults(), arguments, ["type"]);
    this._playbackRate = options.playbackRate;
    this.type = options.type;
    this._fadeIn = options.fadeIn;
    this._fadeOut = options.fadeOut;
  }

  static getDefaults() {
    return Object.assign(_Source.Source.getDefaults(), {
      fadeIn: 0,
      fadeOut: 0,
      playbackRate: 1,
      type: "white"
    });
  }
  /**
   * The type of the noise. Can be "white", "brown", or "pink".
   * @example
   * const noise = new Tone.Noise().toDestination().start();
   * noise.type = "brown";
   */


  get type() {
    return this._type;
  }

  set type(type) {
    (0, _Debug.assert)(type in _noiseBuffers, "Noise: invalid type: " + type);

    if (this._type !== type) {
      this._type = type; // if it's playing, stop and restart it

      if (this.state === "started") {
        const now = this.now();

        this._stop(now);

        this._start(now);
      }
    }
  }
  /**
   * The playback rate of the noise. Affects
   * the "frequency" of the noise.
   */


  get playbackRate() {
    return this._playbackRate;
  }

  set playbackRate(rate) {
    this._playbackRate = rate;

    if (this._source) {
      this._source.playbackRate.value = rate;
    }
  }
  /**
   * internal start method
   */


  _start(time) {
    const buffer = _noiseBuffers[this._type];
    this._source = new _ToneBufferSource.ToneBufferSource({
      url: buffer,
      context: this.context,
      fadeIn: this._fadeIn,
      fadeOut: this._fadeOut,
      loop: true,
      onended: () => this.onstop(this),
      playbackRate: this._playbackRate
    }).connect(this.output);

    this._source.start(this.toSeconds(time), Math.random() * (buffer.duration - 0.001));
  }
  /**
   * internal stop method
   */


  _stop(time) {
    if (this._source) {
      this._source.stop(this.toSeconds(time));

      this._source = null;
    }
  }
  /**
   * The fadeIn time of the amplitude envelope.
   */


  get fadeIn() {
    return this._fadeIn;
  }

  set fadeIn(time) {
    this._fadeIn = time;

    if (this._source) {
      this._source.fadeIn = this._fadeIn;
    }
  }
  /**
   * The fadeOut time of the amplitude envelope.
   */


  get fadeOut() {
    return this._fadeOut;
  }

  set fadeOut(time) {
    this._fadeOut = time;

    if (this._source) {
      this._source.fadeOut = this._fadeOut;
    }
  }

  _restart(time) {
    // TODO could be optimized by cancelling the buffer source 'stop'
    this._stop(time);

    this._start(time);
  }
  /**
   * Clean up.
   */


  dispose() {
    super.dispose();

    if (this._source) {
      this._source.disconnect();
    }

    return this;
  }

} //--------------------
// THE NOISE BUFFERS
//--------------------
// Noise buffer stats


exports.Noise = Noise;
const BUFFER_LENGTH = 44100 * 5;
const NUM_CHANNELS = 2;
/**
 * Cache the noise buffers
 */

const _noiseCache = {
  brown: null,
  pink: null,
  white: null
};
/**
 * The noise arrays. Generated on initialization.
 * borrowed heavily from https://github.com/zacharydenton/noise.js
 * (c) 2013 Zach Denton (MIT)
 */

const _noiseBuffers = {
  get brown() {
    if (!_noiseCache.brown) {
      const buffer = [];

      for (let channelNum = 0; channelNum < NUM_CHANNELS; channelNum++) {
        const channel = new Float32Array(BUFFER_LENGTH);
        buffer[channelNum] = channel;
        let lastOut = 0.0;

        for (let i = 0; i < BUFFER_LENGTH; i++) {
          const white = Math.random() * 2 - 1;
          channel[i] = (lastOut + 0.02 * white) / 1.02;
          lastOut = channel[i];
          channel[i] *= 3.5; // (roughly) compensate for gain
        }
      }

      _noiseCache.brown = new _ToneAudioBuffer.ToneAudioBuffer().fromArray(buffer);
    }

    return _noiseCache.brown;
  },

  get pink() {
    if (!_noiseCache.pink) {
      const buffer = [];

      for (let channelNum = 0; channelNum < NUM_CHANNELS; channelNum++) {
        const channel = new Float32Array(BUFFER_LENGTH);
        buffer[channelNum] = channel;
        let b0, b1, b2, b3, b4, b5, b6;
        b0 = b1 = b2 = b3 = b4 = b5 = b6 = 0.0;

        for (let i = 0; i < BUFFER_LENGTH; i++) {
          const white = Math.random() * 2 - 1;
          b0 = 0.99886 * b0 + white * 0.0555179;
          b1 = 0.99332 * b1 + white * 0.0750759;
          b2 = 0.96900 * b2 + white * 0.1538520;
          b3 = 0.86650 * b3 + white * 0.3104856;
          b4 = 0.55000 * b4 + white * 0.5329522;
          b5 = -0.7616 * b5 - white * 0.0168980;
          channel[i] = b0 + b1 + b2 + b3 + b4 + b5 + b6 + white * 0.5362;
          channel[i] *= 0.11; // (roughly) compensate for gain

          b6 = white * 0.115926;
        }
      }

      _noiseCache.pink = new _ToneAudioBuffer.ToneAudioBuffer().fromArray(buffer);
    }

    return _noiseCache.pink;
  },

  get white() {
    if (!_noiseCache.white) {
      const buffer = [];

      for (let channelNum = 0; channelNum < NUM_CHANNELS; channelNum++) {
        const channel = new Float32Array(BUFFER_LENGTH);
        buffer[channelNum] = channel;

        for (let i = 0; i < BUFFER_LENGTH; i++) {
          channel[i] = Math.random() * 2 - 1;
        }
      }

      _noiseCache.white = new _ToneAudioBuffer.ToneAudioBuffer().fromArray(buffer);
    }

    return _noiseCache.white;
  }

};
},{"../core/context/ToneAudioBuffer":"../node_modules/tone/build/esm/core/context/ToneAudioBuffer.js","../core/util/Defaults":"../node_modules/tone/build/esm/core/util/Defaults.js","../core/util/Debug":"../node_modules/tone/build/esm/core/util/Debug.js","../source/Source":"../node_modules/tone/build/esm/source/Source.js","./buffer/ToneBufferSource":"../node_modules/tone/build/esm/source/buffer/ToneBufferSource.js"}],"../node_modules/tone/build/esm/source/UserMedia.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.UserMedia = void 0;

var _tslib = require("tslib");

var _ToneAudioNode = require("../core/context/ToneAudioNode");

var _Volume = require("../component/channel/Volume");

var _Defaults = require("../core/util/Defaults");

var _Debug = require("../core/util/Debug");

var _Interface = require("../core/util/Interface");

var _TypeCheck = require("../core/util/TypeCheck");

/**
 * UserMedia uses MediaDevices.getUserMedia to open up and external microphone or audio input.
 * Check [MediaDevices API Support](https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia)
 * to see which browsers are supported. Access to an external input
 * is limited to secure (HTTPS) connections.
 * @example
 * const meter = new Tone.Meter();
 * const mic = new Tone.UserMedia().connect(meter);
 * mic.open().then(() => {
 * 	// promise resolves when input is available
 * 	console.log("mic open");
 * 	// print the incoming mic levels in decibels
 * 	setInterval(() => console.log(meter.getValue()), 100);
 * }).catch(e => {
 * 	// promise is rejected when the user doesn't have or allow mic access
 * 	console.log("mic not open");
 * });
 * @category Source
 */
class UserMedia extends _ToneAudioNode.ToneAudioNode {
  constructor() {
    super((0, _Defaults.optionsFromArguments)(UserMedia.getDefaults(), arguments, ["volume"]));
    this.name = "UserMedia";
    const options = (0, _Defaults.optionsFromArguments)(UserMedia.getDefaults(), arguments, ["volume"]);
    this._volume = this.output = new _Volume.Volume({
      context: this.context,
      volume: options.volume
    });
    this.volume = this._volume.volume;
    (0, _Interface.readOnly)(this, "volume");
    this.mute = options.mute;
  }

  static getDefaults() {
    return Object.assign(_ToneAudioNode.ToneAudioNode.getDefaults(), {
      mute: false,
      volume: 0
    });
  }
  /**
   * Open the media stream. If a string is passed in, it is assumed
   * to be the label or id of the stream, if a number is passed in,
   * it is the input number of the stream.
   * @param  labelOrId The label or id of the audio input media device.
   *                   With no argument, the default stream is opened.
   * @return The promise is resolved when the stream is open.
   */


  open(labelOrId) {
    return (0, _tslib.__awaiter)(this, void 0, void 0, function* () {
      (0, _Debug.assert)(UserMedia.supported, "UserMedia is not supported"); // close the previous stream

      if (this.state === "started") {
        this.close();
      }

      const devices = yield UserMedia.enumerateDevices();

      if ((0, _TypeCheck.isNumber)(labelOrId)) {
        this._device = devices[labelOrId];
      } else {
        this._device = devices.find(device => {
          return device.label === labelOrId || device.deviceId === labelOrId;
        }); // didn't find a matching device

        if (!this._device && devices.length > 0) {
          this._device = devices[0];
        }

        (0, _Debug.assert)((0, _TypeCheck.isDefined)(this._device), `No matching device ${labelOrId}`);
      } // do getUserMedia


      const constraints = {
        audio: {
          echoCancellation: false,
          sampleRate: this.context.sampleRate,
          noiseSuppression: false,
          mozNoiseSuppression: false
        }
      };

      if (this._device) {
        // @ts-ignore
        constraints.audio.deviceId = this._device.deviceId;
      }

      const stream = yield navigator.mediaDevices.getUserMedia(constraints); // start a new source only if the previous one is closed

      if (!this._stream) {
        this._stream = stream; // Wrap a MediaStreamSourceNode around the live input stream.

        const mediaStreamNode = this.context.createMediaStreamSource(stream); // Connect the MediaStreamSourceNode to a gate gain node

        (0, _ToneAudioNode.connect)(mediaStreamNode, this.output);
        this._mediaStream = mediaStreamNode;
      }

      return this;
    });
  }
  /**
   * Close the media stream
   */


  close() {
    if (this._stream && this._mediaStream) {
      this._stream.getAudioTracks().forEach(track => {
        track.stop();
      });

      this._stream = undefined; // remove the old media stream

      this._mediaStream.disconnect();

      this._mediaStream = undefined;
    }

    this._device = undefined;
    return this;
  }
  /**
   * Returns a promise which resolves with the list of audio input devices available.
   * @return The promise that is resolved with the devices
   * @example
   * Tone.UserMedia.enumerateDevices().then((devices) => {
   * 	// print the device labels
   * 	console.log(devices.map(device => device.label));
   * });
   */


  static enumerateDevices() {
    return (0, _tslib.__awaiter)(this, void 0, void 0, function* () {
      const allDevices = yield navigator.mediaDevices.enumerateDevices();
      return allDevices.filter(device => {
        return device.kind === "audioinput";
      });
    });
  }
  /**
   * Returns the playback state of the source, "started" when the microphone is open
   * and "stopped" when the mic is closed.
   */


  get state() {
    return this._stream && this._stream.active ? "started" : "stopped";
  }
  /**
   * Returns an identifier for the represented device that is
   * persisted across sessions. It is un-guessable by other applications and
   * unique to the origin of the calling application. It is reset when the
   * user clears cookies (for Private Browsing, a different identifier is
   * used that is not persisted across sessions). Returns undefined when the
   * device is not open.
   */


  get deviceId() {
    if (this._device) {
      return this._device.deviceId;
    } else {
      return undefined;
    }
  }
  /**
   * Returns a group identifier. Two devices have the
   * same group identifier if they belong to the same physical device.
   * Returns null  when the device is not open.
   */


  get groupId() {
    if (this._device) {
      return this._device.groupId;
    } else {
      return undefined;
    }
  }
  /**
   * Returns a label describing this device (for example "Built-in Microphone").
   * Returns undefined when the device is not open or label is not available
   * because of permissions.
   */


  get label() {
    if (this._device) {
      return this._device.label;
    } else {
      return undefined;
    }
  }
  /**
   * Mute the output.
   * @example
   * const mic = new Tone.UserMedia();
   * mic.open().then(() => {
   * 	// promise resolves when input is available
   * });
   * // mute the output
   * mic.mute = true;
   */


  get mute() {
    return this._volume.mute;
  }

  set mute(mute) {
    this._volume.mute = mute;
  }

  dispose() {
    super.dispose();
    this.close();

    this._volume.dispose();

    this.volume.dispose();
    return this;
  }
  /**
   * If getUserMedia is supported by the browser.
   */


  static get supported() {
    return (0, _TypeCheck.isDefined)(navigator.mediaDevices) && (0, _TypeCheck.isDefined)(navigator.mediaDevices.getUserMedia);
  }

}

exports.UserMedia = UserMedia;
},{"tslib":"../node_modules/tslib/tslib.es6.js","../core/context/ToneAudioNode":"../node_modules/tone/build/esm/core/context/ToneAudioNode.js","../component/channel/Volume":"../node_modules/tone/build/esm/component/channel/Volume.js","../core/util/Defaults":"../node_modules/tone/build/esm/core/util/Defaults.js","../core/util/Debug":"../node_modules/tone/build/esm/core/util/Debug.js","../core/util/Interface":"../node_modules/tone/build/esm/core/util/Interface.js","../core/util/TypeCheck":"../node_modules/tone/build/esm/core/util/TypeCheck.js"}],"../node_modules/tone/build/esm/source/oscillator/OscillatorInterface.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.generateWaveform = generateWaveform;

var _tslib = require("tslib");

var _OfflineContext = require("../../core/context/OfflineContext");

/**
 * Render a segment of the oscillator to an offline context and return the results as an array
 */
function generateWaveform(instance, length) {
  return (0, _tslib.__awaiter)(this, void 0, void 0, function* () {
    const duration = length / instance.context.sampleRate;
    const context = new _OfflineContext.OfflineContext(1, duration, instance.context.sampleRate);
    const clone = new instance.constructor(Object.assign(instance.get(), {
      // should do 2 iterations
      frequency: 2 / duration,
      // zero out the detune
      detune: 0,
      context
    })).toDestination();
    clone.start(0);
    const buffer = yield context.render();
    return buffer.getChannelData(0);
  });
}
},{"tslib":"../node_modules/tslib/tslib.es6.js","../../core/context/OfflineContext":"../node_modules/tone/build/esm/core/context/OfflineContext.js"}],"../node_modules/tone/build/esm/source/oscillator/ToneOscillatorNode.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ToneOscillatorNode = void 0;

var _ToneAudioNode = require("../../core/context/ToneAudioNode");

var _Param = require("../../core/context/Param");

var _Defaults = require("../../core/util/Defaults");

var _OneShotSource = require("../OneShotSource");

var _Interface = require("../../core/util/Interface");

/**
 * Wrapper around the native fire-and-forget OscillatorNode.
 * Adds the ability to reschedule the stop method.
 * ***[[Oscillator]] is better for most use-cases***
 * @category Source
 */
class ToneOscillatorNode extends _OneShotSource.OneShotSource {
  constructor() {
    super((0, _Defaults.optionsFromArguments)(ToneOscillatorNode.getDefaults(), arguments, ["frequency", "type"]));
    this.name = "ToneOscillatorNode";
    /**
     * The oscillator
     */

    this._oscillator = this.context.createOscillator();
    this._internalChannels = [this._oscillator];
    const options = (0, _Defaults.optionsFromArguments)(ToneOscillatorNode.getDefaults(), arguments, ["frequency", "type"]);
    (0, _ToneAudioNode.connect)(this._oscillator, this._gainNode);
    this.type = options.type;
    this.frequency = new _Param.Param({
      context: this.context,
      param: this._oscillator.frequency,
      units: "frequency",
      value: options.frequency
    });
    this.detune = new _Param.Param({
      context: this.context,
      param: this._oscillator.detune,
      units: "cents",
      value: options.detune
    });
    (0, _Interface.readOnly)(this, ["frequency", "detune"]);
  }

  static getDefaults() {
    return Object.assign(_OneShotSource.OneShotSource.getDefaults(), {
      detune: 0,
      frequency: 440,
      type: "sine"
    });
  }
  /**
   * Start the oscillator node at the given time
   * @param  time When to start the oscillator
   */


  start(time) {
    const computedTime = this.toSeconds(time);
    this.log("start", computedTime);

    this._startGain(computedTime);

    this._oscillator.start(computedTime);

    return this;
  }

  _stopSource(time) {
    this._oscillator.stop(time);
  }
  /**
   * Sets an arbitrary custom periodic waveform given a PeriodicWave.
   * @param  periodicWave PeriodicWave should be created with context.createPeriodicWave
   */


  setPeriodicWave(periodicWave) {
    this._oscillator.setPeriodicWave(periodicWave);

    return this;
  }
  /**
   * The oscillator type. Either 'sine', 'sawtooth', 'square', or 'triangle'
   */


  get type() {
    return this._oscillator.type;
  }

  set type(type) {
    this._oscillator.type = type;
  }
  /**
   * Clean up.
   */


  dispose() {
    super.dispose();

    if (this.state === "started") {
      this.stop();
    }

    this._oscillator.disconnect();

    this.frequency.dispose();
    this.detune.dispose();
    return this;
  }

}

exports.ToneOscillatorNode = ToneOscillatorNode;
},{"../../core/context/ToneAudioNode":"../node_modules/tone/build/esm/core/context/ToneAudioNode.js","../../core/context/Param":"../node_modules/tone/build/esm/core/context/Param.js","../../core/util/Defaults":"../node_modules/tone/build/esm/core/util/Defaults.js","../OneShotSource":"../node_modules/tone/build/esm/source/OneShotSource.js","../../core/util/Interface":"../node_modules/tone/build/esm/core/util/Interface.js"}],"../node_modules/tone/build/esm/source/oscillator/Oscillator.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Oscillator = void 0;

var _tslib = require("tslib");

var _Defaults = require("../../core/util/Defaults");

var _Interface = require("../../core/util/Interface");

var _TypeCheck = require("../../core/util/TypeCheck");

var _Signal = require("../../signal/Signal");

var _Source = require("../Source");

var _OscillatorInterface = require("./OscillatorInterface");

var _ToneOscillatorNode = require("./ToneOscillatorNode");

var _Debug = require("../../core/util/Debug");

var _Math = require("../../core/util/Math");

/**
 * Oscillator supports a number of features including
 * phase rotation, multiple oscillator types (see Oscillator.type),
 * and Transport syncing (see Oscillator.syncFrequency).
 *
 * @example
 * // make and start a 440hz sine tone
 * const osc = new Tone.Oscillator(440, "sine").toDestination().start();
 * @category Source
 */
class Oscillator extends _Source.Source {
  constructor() {
    super((0, _Defaults.optionsFromArguments)(Oscillator.getDefaults(), arguments, ["frequency", "type"]));
    this.name = "Oscillator";
    /**
     * the main oscillator
     */

    this._oscillator = null;
    const options = (0, _Defaults.optionsFromArguments)(Oscillator.getDefaults(), arguments, ["frequency", "type"]);
    this.frequency = new _Signal.Signal({
      context: this.context,
      units: "frequency",
      value: options.frequency
    });
    (0, _Interface.readOnly)(this, "frequency");
    this.detune = new _Signal.Signal({
      context: this.context,
      units: "cents",
      value: options.detune
    });
    (0, _Interface.readOnly)(this, "detune");
    this._partials = options.partials;
    this._partialCount = options.partialCount;
    this._type = options.type;

    if (options.partialCount && options.type !== "custom") {
      this._type = this.baseType + options.partialCount.toString();
    }

    this.phase = options.phase;
  }

  static getDefaults() {
    return Object.assign(_Source.Source.getDefaults(), {
      detune: 0,
      frequency: 440,
      partialCount: 0,
      partials: [],
      phase: 0,
      type: "sine"
    });
  }
  /**
   * start the oscillator
   */


  _start(time) {
    const computedTime = this.toSeconds(time); // new oscillator with previous values

    const oscillator = new _ToneOscillatorNode.ToneOscillatorNode({
      context: this.context,
      onended: () => this.onstop(this)
    });
    this._oscillator = oscillator;

    if (this._wave) {
      this._oscillator.setPeriodicWave(this._wave);
    } else {
      this._oscillator.type = this._type;
    } // connect the control signal to the oscillator frequency & detune


    this._oscillator.connect(this.output);

    this.frequency.connect(this._oscillator.frequency);
    this.detune.connect(this._oscillator.detune); // start the oscillator

    this._oscillator.start(computedTime);
  }
  /**
   * stop the oscillator
   */


  _stop(time) {
    const computedTime = this.toSeconds(time);

    if (this._oscillator) {
      this._oscillator.stop(computedTime);
    }
  }
  /**
   * Restart the oscillator. Does not stop the oscillator, but instead
   * just cancels any scheduled 'stop' from being invoked.
   */


  _restart(time) {
    const computedTime = this.toSeconds(time);
    this.log("restart", computedTime);

    if (this._oscillator) {
      this._oscillator.cancelStop();
    }

    this._state.cancel(computedTime);

    return this;
  }
  /**
   * Sync the signal to the Transport's bpm. Any changes to the transports bpm,
   * will also affect the oscillators frequency.
   * @example
   * const osc = new Tone.Oscillator().toDestination().start();
   * osc.frequency.value = 440;
   * // the ratio between the bpm and the frequency will be maintained
   * osc.syncFrequency();
   * // double the tempo
   * Tone.Transport.bpm.value *= 2;
   * // the frequency of the oscillator is doubled to 880
   */


  syncFrequency() {
    this.context.transport.syncSignal(this.frequency);
    return this;
  }
  /**
   * Unsync the oscillator's frequency from the Transport.
   * See Oscillator.syncFrequency
   */


  unsyncFrequency() {
    this.context.transport.unsyncSignal(this.frequency);
    return this;
  }
  /**
   * Get a cached periodic wave. Avoids having to recompute
   * the oscillator values when they have already been computed
   * with the same values.
   */


  _getCachedPeriodicWave() {
    if (this._type === "custom") {
      const oscProps = Oscillator._periodicWaveCache.find(description => {
        return description.phase === this._phase && (0, _Defaults.deepEquals)(description.partials, this._partials);
      });

      return oscProps;
    } else {
      const oscProps = Oscillator._periodicWaveCache.find(description => {
        return description.type === this._type && description.phase === this._phase;
      });

      this._partialCount = oscProps ? oscProps.partialCount : this._partialCount;
      return oscProps;
    }
  }

  get type() {
    return this._type;
  }

  set type(type) {
    this._type = type;
    const isBasicType = ["sine", "square", "sawtooth", "triangle"].indexOf(type) !== -1;

    if (this._phase === 0 && isBasicType) {
      this._wave = undefined;
      this._partialCount = 0; // just go with the basic approach

      if (this._oscillator !== null) {
        // already tested that it's a basic type
        this._oscillator.type = type;
      }
    } else {
      // first check if the value is cached
      const cache = this._getCachedPeriodicWave();

      if ((0, _TypeCheck.isDefined)(cache)) {
        const {
          partials,
          wave
        } = cache;
        this._wave = wave;
        this._partials = partials;

        if (this._oscillator !== null) {
          this._oscillator.setPeriodicWave(this._wave);
        }
      } else {
        const [real, imag] = this._getRealImaginary(type, this._phase);

        const periodicWave = this.context.createPeriodicWave(real, imag);
        this._wave = periodicWave;

        if (this._oscillator !== null) {
          this._oscillator.setPeriodicWave(this._wave);
        } // set the cache


        Oscillator._periodicWaveCache.push({
          imag,
          partialCount: this._partialCount,
          partials: this._partials,
          phase: this._phase,
          real,
          type: this._type,
          wave: this._wave
        });

        if (Oscillator._periodicWaveCache.length > 100) {
          Oscillator._periodicWaveCache.shift();
        }
      }
    }
  }

  get baseType() {
    return this._type.replace(this.partialCount.toString(), "");
  }

  set baseType(baseType) {
    if (this.partialCount && this._type !== "custom" && baseType !== "custom") {
      this.type = baseType + this.partialCount;
    } else {
      this.type = baseType;
    }
  }

  get partialCount() {
    return this._partialCount;
  }

  set partialCount(p) {
    (0, _Debug.assertRange)(p, 0);
    let type = this._type;
    const partial = /^(sine|triangle|square|sawtooth)(\d+)$/.exec(this._type);

    if (partial) {
      type = partial[1];
    }

    if (this._type !== "custom") {
      if (p === 0) {
        this.type = type;
      } else {
        this.type = type + p.toString();
      }
    } else {
      // extend or shorten the partials array
      const fullPartials = new Float32Array(p); // copy over the partials array

      this._partials.forEach((v, i) => fullPartials[i] = v);

      this._partials = Array.from(fullPartials);
      this.type = this._type;
    }
  }
  /**
   * Returns the real and imaginary components based
   * on the oscillator type.
   * @returns [real: Float32Array, imaginary: Float32Array]
   */


  _getRealImaginary(type, phase) {
    const fftSize = 4096;
    let periodicWaveSize = fftSize / 2;
    const real = new Float32Array(periodicWaveSize);
    const imag = new Float32Array(periodicWaveSize);
    let partialCount = 1;

    if (type === "custom") {
      partialCount = this._partials.length + 1;
      this._partialCount = this._partials.length;
      periodicWaveSize = partialCount; // if the partial count is 0, don't bother doing any computation

      if (this._partials.length === 0) {
        return [real, imag];
      }
    } else {
      const partial = /^(sine|triangle|square|sawtooth)(\d+)$/.exec(type);

      if (partial) {
        partialCount = parseInt(partial[2], 10) + 1;
        this._partialCount = parseInt(partial[2], 10);
        type = partial[1];
        partialCount = Math.max(partialCount, 2);
        periodicWaveSize = partialCount;
      } else {
        this._partialCount = 0;
      }

      this._partials = [];
    }

    for (let n = 1; n < periodicWaveSize; ++n) {
      const piFactor = 2 / (n * Math.PI);
      let b;

      switch (type) {
        case "sine":
          b = n <= partialCount ? 1 : 0;
          this._partials[n - 1] = b;
          break;

        case "square":
          b = n & 1 ? 2 * piFactor : 0;
          this._partials[n - 1] = b;
          break;

        case "sawtooth":
          b = piFactor * (n & 1 ? 1 : -1);
          this._partials[n - 1] = b;
          break;

        case "triangle":
          if (n & 1) {
            b = 2 * (piFactor * piFactor) * (n - 1 >> 1 & 1 ? -1 : 1);
          } else {
            b = 0;
          }

          this._partials[n - 1] = b;
          break;

        case "custom":
          b = this._partials[n - 1];
          break;

        default:
          throw new TypeError("Oscillator: invalid type: " + type);
      }

      if (b !== 0) {
        real[n] = -b * Math.sin(phase * n);
        imag[n] = b * Math.cos(phase * n);
      } else {
        real[n] = 0;
        imag[n] = 0;
      }
    }

    return [real, imag];
  }
  /**
   * Compute the inverse FFT for a given phase.
   */


  _inverseFFT(real, imag, phase) {
    let sum = 0;
    const len = real.length;

    for (let i = 0; i < len; i++) {
      sum += real[i] * Math.cos(i * phase) + imag[i] * Math.sin(i * phase);
    }

    return sum;
  }
  /**
   * Returns the initial value of the oscillator when stopped.
   * E.g. a "sine" oscillator with phase = 90 would return an initial value of -1.
   */


  getInitialValue() {
    const [real, imag] = this._getRealImaginary(this._type, 0);

    let maxValue = 0;
    const twoPi = Math.PI * 2;
    const testPositions = 32; // check for peaks in 16 places

    for (let i = 0; i < testPositions; i++) {
      maxValue = Math.max(this._inverseFFT(real, imag, i / testPositions * twoPi), maxValue);
    }

    return (0, _Math.clamp)(-this._inverseFFT(real, imag, this._phase) / maxValue, -1, 1);
  }

  get partials() {
    return this._partials.slice(0, this.partialCount);
  }

  set partials(partials) {
    this._partials = partials;
    this._partialCount = this._partials.length;

    if (partials.length) {
      this.type = "custom";
    }
  }

  get phase() {
    return this._phase * (180 / Math.PI);
  }

  set phase(phase) {
    this._phase = phase * Math.PI / 180; // reset the type

    this.type = this._type;
  }

  asArray(length = 1024) {
    return (0, _tslib.__awaiter)(this, void 0, void 0, function* () {
      return (0, _OscillatorInterface.generateWaveform)(this, length);
    });
  }

  dispose() {
    super.dispose();

    if (this._oscillator !== null) {
      this._oscillator.dispose();
    }

    this._wave = undefined;
    this.frequency.dispose();
    this.detune.dispose();
    return this;
  }

}
/**
 * Cache the periodic waves to avoid having to redo computations
 */


exports.Oscillator = Oscillator;
Oscillator._periodicWaveCache = [];
},{"tslib":"../node_modules/tslib/tslib.es6.js","../../core/util/Defaults":"../node_modules/tone/build/esm/core/util/Defaults.js","../../core/util/Interface":"../node_modules/tone/build/esm/core/util/Interface.js","../../core/util/TypeCheck":"../node_modules/tone/build/esm/core/util/TypeCheck.js","../../signal/Signal":"../node_modules/tone/build/esm/signal/Signal.js","../Source":"../node_modules/tone/build/esm/source/Source.js","./OscillatorInterface":"../node_modules/tone/build/esm/source/oscillator/OscillatorInterface.js","./ToneOscillatorNode":"../node_modules/tone/build/esm/source/oscillator/ToneOscillatorNode.js","../../core/util/Debug":"../node_modules/tone/build/esm/core/util/Debug.js","../../core/util/Math":"../node_modules/tone/build/esm/core/util/Math.js"}],"../node_modules/tone/build/esm/signal/SignalOperator.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SignalOperator = void 0;

var _Defaults = require("../core/util/Defaults");

var _ToneAudioNode = require("../core/context/ToneAudioNode");

var _Signal = require("./Signal");

/**
 * A signal operator has an input and output and modifies the signal.
 */
class SignalOperator extends _ToneAudioNode.ToneAudioNode {
  constructor() {
    super(Object.assign((0, _Defaults.optionsFromArguments)(SignalOperator.getDefaults(), arguments, ["context"])));
  }

  connect(destination, outputNum = 0, inputNum = 0) {
    (0, _Signal.connectSignal)(this, destination, outputNum, inputNum);
    return this;
  }

}

exports.SignalOperator = SignalOperator;
},{"../core/util/Defaults":"../node_modules/tone/build/esm/core/util/Defaults.js","../core/context/ToneAudioNode":"../node_modules/tone/build/esm/core/context/ToneAudioNode.js","./Signal":"../node_modules/tone/build/esm/signal/Signal.js"}],"../node_modules/tone/build/esm/signal/WaveShaper.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.WaveShaper = void 0;

var _Defaults = require("../core/util/Defaults");

var _TypeCheck = require("../core/util/TypeCheck");

var _Debug = require("../core/util/Debug");

var _Signal = require("./Signal");

var _SignalOperator = require("./SignalOperator");

/**
 * Wraps the native Web Audio API
 * [WaveShaperNode](http://webaudio.github.io/web-audio-api/#the-waveshapernode-interface).
 *
 * @example
 * const osc = new Tone.Oscillator().toDestination().start();
 * // multiply the output of the signal by 2 using the waveshaper's function
 * const timesTwo = new Tone.WaveShaper((val) => val * 2, 2048).connect(osc.frequency);
 * const signal = new Tone.Signal(440).connect(timesTwo);
 * @category Signal
 */
class WaveShaper extends _SignalOperator.SignalOperator {
  constructor() {
    super(Object.assign((0, _Defaults.optionsFromArguments)(WaveShaper.getDefaults(), arguments, ["mapping", "length"])));
    this.name = "WaveShaper";
    /**
     * the waveshaper node
     */

    this._shaper = this.context.createWaveShaper();
    /**
     * The input to the waveshaper node.
     */

    this.input = this._shaper;
    /**
     * The output from the waveshaper node
     */

    this.output = this._shaper;
    const options = (0, _Defaults.optionsFromArguments)(WaveShaper.getDefaults(), arguments, ["mapping", "length"]);

    if ((0, _TypeCheck.isArray)(options.mapping) || options.mapping instanceof Float32Array) {
      this.curve = Float32Array.from(options.mapping);
    } else if ((0, _TypeCheck.isFunction)(options.mapping)) {
      this.setMap(options.mapping, options.length);
    }
  }

  static getDefaults() {
    return Object.assign(_Signal.Signal.getDefaults(), {
      length: 1024
    });
  }
  /**
   * Uses a mapping function to set the value of the curve.
   * @param mapping The function used to define the values.
   *                The mapping function take two arguments:
   *                the first is the value at the current position
   *                which goes from -1 to 1 over the number of elements
   *                in the curve array. The second argument is the array position.
   * @example
   * const shaper = new Tone.WaveShaper();
   * // map the input signal from [-1, 1] to [0, 10]
   * shaper.setMap((val, index) => (val + 1) * 5);
   */


  setMap(mapping, length = 1024) {
    const array = new Float32Array(length);

    for (let i = 0, len = length; i < len; i++) {
      const normalized = i / (len - 1) * 2 - 1;
      array[i] = mapping(normalized, i);
    }

    this.curve = array;
    return this;
  }
  /**
   * The array to set as the waveshaper curve. For linear curves
   * array length does not make much difference, but for complex curves
   * longer arrays will provide smoother interpolation.
   */


  get curve() {
    return this._shaper.curve;
  }

  set curve(mapping) {
    this._shaper.curve = mapping;
  }
  /**
   * Specifies what type of oversampling (if any) should be used when
   * applying the shaping curve. Can either be "none", "2x" or "4x".
   */


  get oversample() {
    return this._shaper.oversample;
  }

  set oversample(oversampling) {
    const isOverSampleType = ["none", "2x", "4x"].some(str => str.includes(oversampling));
    (0, _Debug.assert)(isOverSampleType, "oversampling must be either 'none', '2x', or '4x'");
    this._shaper.oversample = oversampling;
  }
  /**
   * Clean up.
   */


  dispose() {
    super.dispose();

    this._shaper.disconnect();

    return this;
  }

}

exports.WaveShaper = WaveShaper;
},{"../core/util/Defaults":"../node_modules/tone/build/esm/core/util/Defaults.js","../core/util/TypeCheck":"../node_modules/tone/build/esm/core/util/TypeCheck.js","../core/util/Debug":"../node_modules/tone/build/esm/core/util/Debug.js","./Signal":"../node_modules/tone/build/esm/signal/Signal.js","./SignalOperator":"../node_modules/tone/build/esm/signal/SignalOperator.js"}],"../node_modules/tone/build/esm/signal/AudioToGain.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AudioToGain = void 0;

var _SignalOperator = require("./SignalOperator");

var _WaveShaper = require("./WaveShaper");

/**
 * AudioToGain converts an input in AudioRange [-1,1] to NormalRange [0,1].
 * See [[GainToAudio]].
 * @category Signal
 */
class AudioToGain extends _SignalOperator.SignalOperator {
  constructor() {
    super(...arguments);
    this.name = "AudioToGain";
    /**
     * The node which converts the audio ranges
     */

    this._norm = new _WaveShaper.WaveShaper({
      context: this.context,
      mapping: x => (x + 1) / 2
    });
    /**
     * The AudioRange input [-1, 1]
     */

    this.input = this._norm;
    /**
     * The GainRange output [0, 1]
     */

    this.output = this._norm;
  }
  /**
   * clean up
   */


  dispose() {
    super.dispose();

    this._norm.dispose();

    return this;
  }

}

exports.AudioToGain = AudioToGain;
},{"./SignalOperator":"../node_modules/tone/build/esm/signal/SignalOperator.js","./WaveShaper":"../node_modules/tone/build/esm/signal/WaveShaper.js"}],"../node_modules/tone/build/esm/signal/Multiply.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Multiply = void 0;

var _Gain = require("../core/context/Gain");

var _Defaults = require("../core/util/Defaults");

var _Signal = require("./Signal");

/**
 * Multiply two incoming signals. Or, if a number is given in the constructor,
 * multiplies the incoming signal by that value.
 *
 * @example
 * // multiply two signals
 * const mult = new Tone.Multiply();
 * const sigA = new Tone.Signal(3);
 * const sigB = new Tone.Signal(4);
 * sigA.connect(mult);
 * sigB.connect(mult.factor);
 * // output of mult is 12.
 * @example
 * // multiply a signal and a number
 * const mult = new Tone.Multiply(10);
 * const sig = new Tone.Signal(2).connect(mult);
 * // the output of mult is 20.
 * @category Signal
 */
class Multiply extends _Signal.Signal {
  constructor() {
    super(Object.assign((0, _Defaults.optionsFromArguments)(Multiply.getDefaults(), arguments, ["value"])));
    this.name = "Multiply";
    /**
     * Indicates if the value should be overridden on connection
     */

    this.override = false;
    const options = (0, _Defaults.optionsFromArguments)(Multiply.getDefaults(), arguments, ["value"]);
    this._mult = this.input = this.output = new _Gain.Gain({
      context: this.context,
      minValue: options.minValue,
      maxValue: options.maxValue
    });
    this.factor = this._param = this._mult.gain;
    this.factor.setValueAtTime(options.value, 0);
  }

  static getDefaults() {
    return Object.assign(_Signal.Signal.getDefaults(), {
      value: 0
    });
  }

  dispose() {
    super.dispose();

    this._mult.dispose();

    return this;
  }

}

exports.Multiply = Multiply;
},{"../core/context/Gain":"../node_modules/tone/build/esm/core/context/Gain.js","../core/util/Defaults":"../node_modules/tone/build/esm/core/util/Defaults.js","./Signal":"../node_modules/tone/build/esm/signal/Signal.js"}],"../node_modules/tone/build/esm/source/oscillator/AMOscillator.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AMOscillator = void 0;

var _tslib = require("tslib");

var _Gain = require("../../core/context/Gain");

var _Defaults = require("../../core/util/Defaults");

var _Interface = require("../../core/util/Interface");

var _AudioToGain = require("../../signal/AudioToGain");

var _Multiply = require("../../signal/Multiply");

var _Source = require("../Source");

var _Oscillator = require("./Oscillator");

var _OscillatorInterface = require("./OscillatorInterface");

/**
 * An amplitude modulated oscillator node. It is implemented with
 * two oscillators, one which modulators the other's amplitude
 * through a gain node.
 * ```
 *    +-------------+       +----------+
 *    | Carrier Osc +>------> GainNode |
 *    +-------------+       |          +--->Output
 *                      +---> gain     |
 * +---------------+    |   +----------+
 * | Modulator Osc +>---+
 * +---------------+
 * ```
 * @example
 * return Tone.Offline(() => {
 * 	const amOsc = new Tone.AMOscillator(30, "sine", "square").toDestination().start();
 * }, 0.2, 1);
 * @category Source
 */
class AMOscillator extends _Source.Source {
  constructor() {
    super((0, _Defaults.optionsFromArguments)(AMOscillator.getDefaults(), arguments, ["frequency", "type", "modulationType"]));
    this.name = "AMOscillator";
    /**
     * convert the -1,1 output to 0,1
     */

    this._modulationScale = new _AudioToGain.AudioToGain({
      context: this.context
    });
    /**
     * the node where the modulation happens
     */

    this._modulationNode = new _Gain.Gain({
      context: this.context
    });
    const options = (0, _Defaults.optionsFromArguments)(AMOscillator.getDefaults(), arguments, ["frequency", "type", "modulationType"]);
    this._carrier = new _Oscillator.Oscillator({
      context: this.context,
      detune: options.detune,
      frequency: options.frequency,
      onstop: () => this.onstop(this),
      phase: options.phase,
      type: options.type
    });
    this.frequency = this._carrier.frequency, this.detune = this._carrier.detune;
    this._modulator = new _Oscillator.Oscillator({
      context: this.context,
      phase: options.phase,
      type: options.modulationType
    });
    this.harmonicity = new _Multiply.Multiply({
      context: this.context,
      units: "positive",
      value: options.harmonicity
    }); // connections

    this.frequency.chain(this.harmonicity, this._modulator.frequency);

    this._modulator.chain(this._modulationScale, this._modulationNode.gain);

    this._carrier.chain(this._modulationNode, this.output);

    (0, _Interface.readOnly)(this, ["frequency", "detune", "harmonicity"]);
  }

  static getDefaults() {
    return Object.assign(_Oscillator.Oscillator.getDefaults(), {
      harmonicity: 1,
      modulationType: "square"
    });
  }
  /**
   * start the oscillator
   */


  _start(time) {
    this._modulator.start(time);

    this._carrier.start(time);
  }
  /**
   * stop the oscillator
   */


  _stop(time) {
    this._modulator.stop(time);

    this._carrier.stop(time);
  }

  _restart(time) {
    this._modulator.restart(time);

    this._carrier.restart(time);
  }
  /**
   * The type of the carrier oscillator
   */


  get type() {
    return this._carrier.type;
  }

  set type(type) {
    this._carrier.type = type;
  }

  get baseType() {
    return this._carrier.baseType;
  }

  set baseType(baseType) {
    this._carrier.baseType = baseType;
  }

  get partialCount() {
    return this._carrier.partialCount;
  }

  set partialCount(partialCount) {
    this._carrier.partialCount = partialCount;
  }
  /**
   * The type of the modulator oscillator
   */


  get modulationType() {
    return this._modulator.type;
  }

  set modulationType(type) {
    this._modulator.type = type;
  }

  get phase() {
    return this._carrier.phase;
  }

  set phase(phase) {
    this._carrier.phase = phase;
    this._modulator.phase = phase;
  }

  get partials() {
    return this._carrier.partials;
  }

  set partials(partials) {
    this._carrier.partials = partials;
  }

  asArray(length = 1024) {
    return (0, _tslib.__awaiter)(this, void 0, void 0, function* () {
      return (0, _OscillatorInterface.generateWaveform)(this, length);
    });
  }
  /**
   * Clean up.
   */


  dispose() {
    super.dispose();
    this.frequency.dispose();
    this.detune.dispose();
    this.harmonicity.dispose();

    this._carrier.dispose();

    this._modulator.dispose();

    this._modulationNode.dispose();

    this._modulationScale.dispose();

    return this;
  }

}

exports.AMOscillator = AMOscillator;
},{"tslib":"../node_modules/tslib/tslib.es6.js","../../core/context/Gain":"../node_modules/tone/build/esm/core/context/Gain.js","../../core/util/Defaults":"../node_modules/tone/build/esm/core/util/Defaults.js","../../core/util/Interface":"../node_modules/tone/build/esm/core/util/Interface.js","../../signal/AudioToGain":"../node_modules/tone/build/esm/signal/AudioToGain.js","../../signal/Multiply":"../node_modules/tone/build/esm/signal/Multiply.js","../Source":"../node_modules/tone/build/esm/source/Source.js","./Oscillator":"../node_modules/tone/build/esm/source/oscillator/Oscillator.js","./OscillatorInterface":"../node_modules/tone/build/esm/source/oscillator/OscillatorInterface.js"}],"../node_modules/tone/build/esm/source/oscillator/FMOscillator.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FMOscillator = void 0;

var _tslib = require("tslib");

var _Gain = require("../../core/context/Gain");

var _Defaults = require("../../core/util/Defaults");

var _Interface = require("../../core/util/Interface");

var _Multiply = require("../../signal/Multiply");

var _Signal = require("../../signal/Signal");

var _Source = require("../Source");

var _Oscillator = require("./Oscillator");

var _OscillatorInterface = require("./OscillatorInterface");

/**
 * FMOscillator implements a frequency modulation synthesis
 * ```
 *                                              +-------------+
 * +---------------+        +-------------+     | Carrier Osc |
 * | Modulator Osc +>-------> GainNode    |     |             +--->Output
 * +---------------+        |             +>----> frequency   |
 *                       +--> gain        |     +-------------+
 *                       |  +-------------+
 * +-----------------+   |
 * | modulationIndex +>--+
 * +-----------------+
 * ```
 *
 * @example
 * return Tone.Offline(() => {
 * 	const fmOsc = new Tone.FMOscillator({
 * 		frequency: 200,
 * 		type: "square",
 * 		modulationType: "triangle",
 * 		harmonicity: 0.2,
 * 		modulationIndex: 3
 * 	}).toDestination().start();
 * }, 0.1, 1);
 * @category Source
 */
class FMOscillator extends _Source.Source {
  constructor() {
    super((0, _Defaults.optionsFromArguments)(FMOscillator.getDefaults(), arguments, ["frequency", "type", "modulationType"]));
    this.name = "FMOscillator";
    /**
     * the node where the modulation happens
     */

    this._modulationNode = new _Gain.Gain({
      context: this.context,
      gain: 0
    });
    const options = (0, _Defaults.optionsFromArguments)(FMOscillator.getDefaults(), arguments, ["frequency", "type", "modulationType"]);
    this._carrier = new _Oscillator.Oscillator({
      context: this.context,
      detune: options.detune,
      frequency: 0,
      onstop: () => this.onstop(this),
      phase: options.phase,
      type: options.type
    });
    this.detune = this._carrier.detune;
    this.frequency = new _Signal.Signal({
      context: this.context,
      units: "frequency",
      value: options.frequency
    });
    this._modulator = new _Oscillator.Oscillator({
      context: this.context,
      phase: options.phase,
      type: options.modulationType
    });
    this.harmonicity = new _Multiply.Multiply({
      context: this.context,
      units: "positive",
      value: options.harmonicity
    });
    this.modulationIndex = new _Multiply.Multiply({
      context: this.context,
      units: "positive",
      value: options.modulationIndex
    }); // connections

    this.frequency.connect(this._carrier.frequency);
    this.frequency.chain(this.harmonicity, this._modulator.frequency);
    this.frequency.chain(this.modulationIndex, this._modulationNode);

    this._modulator.connect(this._modulationNode.gain);

    this._modulationNode.connect(this._carrier.frequency);

    this._carrier.connect(this.output);

    this.detune.connect(this._modulator.detune);
    (0, _Interface.readOnly)(this, ["modulationIndex", "frequency", "detune", "harmonicity"]);
  }

  static getDefaults() {
    return Object.assign(_Oscillator.Oscillator.getDefaults(), {
      harmonicity: 1,
      modulationIndex: 2,
      modulationType: "square"
    });
  }
  /**
   * start the oscillator
   */


  _start(time) {
    this._modulator.start(time);

    this._carrier.start(time);
  }
  /**
   * stop the oscillator
   */


  _stop(time) {
    this._modulator.stop(time);

    this._carrier.stop(time);
  }

  _restart(time) {
    this._modulator.restart(time);

    this._carrier.restart(time);

    return this;
  }

  get type() {
    return this._carrier.type;
  }

  set type(type) {
    this._carrier.type = type;
  }

  get baseType() {
    return this._carrier.baseType;
  }

  set baseType(baseType) {
    this._carrier.baseType = baseType;
  }

  get partialCount() {
    return this._carrier.partialCount;
  }

  set partialCount(partialCount) {
    this._carrier.partialCount = partialCount;
  }
  /**
   * The type of the modulator oscillator
   */


  get modulationType() {
    return this._modulator.type;
  }

  set modulationType(type) {
    this._modulator.type = type;
  }

  get phase() {
    return this._carrier.phase;
  }

  set phase(phase) {
    this._carrier.phase = phase;
    this._modulator.phase = phase;
  }

  get partials() {
    return this._carrier.partials;
  }

  set partials(partials) {
    this._carrier.partials = partials;
  }

  asArray(length = 1024) {
    return (0, _tslib.__awaiter)(this, void 0, void 0, function* () {
      return (0, _OscillatorInterface.generateWaveform)(this, length);
    });
  }
  /**
   * Clean up.
   */


  dispose() {
    super.dispose();
    this.frequency.dispose();
    this.harmonicity.dispose();

    this._carrier.dispose();

    this._modulator.dispose();

    this._modulationNode.dispose();

    this.modulationIndex.dispose();
    return this;
  }

}

exports.FMOscillator = FMOscillator;
},{"tslib":"../node_modules/tslib/tslib.es6.js","../../core/context/Gain":"../node_modules/tone/build/esm/core/context/Gain.js","../../core/util/Defaults":"../node_modules/tone/build/esm/core/util/Defaults.js","../../core/util/Interface":"../node_modules/tone/build/esm/core/util/Interface.js","../../signal/Multiply":"../node_modules/tone/build/esm/signal/Multiply.js","../../signal/Signal":"../node_modules/tone/build/esm/signal/Signal.js","../Source":"../node_modules/tone/build/esm/source/Source.js","./Oscillator":"../node_modules/tone/build/esm/source/oscillator/Oscillator.js","./OscillatorInterface":"../node_modules/tone/build/esm/source/oscillator/OscillatorInterface.js"}],"../node_modules/tone/build/esm/source/oscillator/PulseOscillator.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PulseOscillator = void 0;

var _tslib = require("tslib");

var _Gain = require("../../core/context/Gain");

var _Defaults = require("../../core/util/Defaults");

var _Interface = require("../../core/util/Interface");

var _Signal = require("../../signal/Signal");

var _WaveShaper = require("../../signal/WaveShaper");

var _Source = require("../Source");

var _Oscillator = require("./Oscillator");

var _OscillatorInterface = require("./OscillatorInterface");

/**
 * PulseOscillator is an oscillator with control over pulse width,
 * also known as the duty cycle. At 50% duty cycle (width = 0) the wave is
 * a square wave.
 * [Read more](https://wigglewave.wordpress.com/2014/08/16/pulse-waveforms-and-harmonics/).
 * ```
 *    width = -0.25        width = 0.0          width = 0.25
 *
 *   +-----+            +-------+       +    +-------+     +-+
 *   |     |            |       |       |            |     |
 *   |     |            |       |       |            |     |
 * +-+     +-------+    +       +-------+            +-----+
 *
 *
 *    width = -0.5                              width = 0.5
 *
 *     +---+                                 +-------+   +---+
 *     |   |                                         |   |
 *     |   |                                         |   |
 * +---+   +-------+                                 +---+
 *
 *
 *    width = -0.75                             width = 0.75
 *
 *       +-+                                 +-------+ +-----+
 *       | |                                         | |
 *       | |                                         | |
 * +-----+ +-------+                                 +-+
 * ```
 * @example
 * return Tone.Offline(() => {
 * 	const pulse = new Tone.PulseOscillator(50, 0.4).toDestination().start();
 * }, 0.1, 1);
 * @category Source
 */
class PulseOscillator extends _Source.Source {
  constructor() {
    super((0, _Defaults.optionsFromArguments)(PulseOscillator.getDefaults(), arguments, ["frequency", "width"]));
    this.name = "PulseOscillator";
    /**
     * gate the width amount
     */

    this._widthGate = new _Gain.Gain({
      context: this.context,
      gain: 0
    });
    /**
     * Threshold the signal to turn it into a square
     */

    this._thresh = new _WaveShaper.WaveShaper({
      context: this.context,
      mapping: val => val <= 0 ? -1 : 1
    });
    const options = (0, _Defaults.optionsFromArguments)(PulseOscillator.getDefaults(), arguments, ["frequency", "width"]);
    this.width = new _Signal.Signal({
      context: this.context,
      units: "audioRange",
      value: options.width
    });
    this._triangle = new _Oscillator.Oscillator({
      context: this.context,
      detune: options.detune,
      frequency: options.frequency,
      onstop: () => this.onstop(this),
      phase: options.phase,
      type: "triangle"
    });
    this.frequency = this._triangle.frequency;
    this.detune = this._triangle.detune; // connections

    this._triangle.chain(this._thresh, this.output);

    this.width.chain(this._widthGate, this._thresh);
    (0, _Interface.readOnly)(this, ["width", "frequency", "detune"]);
  }

  static getDefaults() {
    return Object.assign(_Source.Source.getDefaults(), {
      detune: 0,
      frequency: 440,
      phase: 0,
      type: "pulse",
      width: 0.2
    });
  }
  /**
   * start the oscillator
   */


  _start(time) {
    time = this.toSeconds(time);

    this._triangle.start(time);

    this._widthGate.gain.setValueAtTime(1, time);
  }
  /**
   * stop the oscillator
   */


  _stop(time) {
    time = this.toSeconds(time);

    this._triangle.stop(time); // the width is still connected to the output.
    // that needs to be stopped also


    this._widthGate.gain.cancelScheduledValues(time);

    this._widthGate.gain.setValueAtTime(0, time);
  }

  _restart(time) {
    this._triangle.restart(time);

    this._widthGate.gain.cancelScheduledValues(time);

    this._widthGate.gain.setValueAtTime(1, time);
  }
  /**
   * The phase of the oscillator in degrees.
   */


  get phase() {
    return this._triangle.phase;
  }

  set phase(phase) {
    this._triangle.phase = phase;
  }
  /**
   * The type of the oscillator. Always returns "pulse".
   */


  get type() {
    return "pulse";
  }
  /**
   * The baseType of the oscillator. Always returns "pulse".
   */


  get baseType() {
    return "pulse";
  }
  /**
   * The partials of the waveform. Cannot set partials for this waveform type
   */


  get partials() {
    return [];
  }
  /**
   * No partials for this waveform type.
   */


  get partialCount() {
    return 0;
  }
  /**
   * *Internal use* The carrier oscillator type is fed through the
   * waveshaper node to create the pulse. Using different carrier oscillators
   * changes oscillator's behavior.
   */


  set carrierType(type) {
    this._triangle.type = type;
  }

  asArray(length = 1024) {
    return (0, _tslib.__awaiter)(this, void 0, void 0, function* () {
      return (0, _OscillatorInterface.generateWaveform)(this, length);
    });
  }
  /**
   * Clean up method.
   */


  dispose() {
    super.dispose();

    this._triangle.dispose();

    this.width.dispose();

    this._widthGate.dispose();

    this._thresh.dispose();

    return this;
  }

}

exports.PulseOscillator = PulseOscillator;
},{"tslib":"../node_modules/tslib/tslib.es6.js","../../core/context/Gain":"../node_modules/tone/build/esm/core/context/Gain.js","../../core/util/Defaults":"../node_modules/tone/build/esm/core/util/Defaults.js","../../core/util/Interface":"../node_modules/tone/build/esm/core/util/Interface.js","../../signal/Signal":"../node_modules/tone/build/esm/signal/Signal.js","../../signal/WaveShaper":"../node_modules/tone/build/esm/signal/WaveShaper.js","../Source":"../node_modules/tone/build/esm/source/Source.js","./Oscillator":"../node_modules/tone/build/esm/source/oscillator/Oscillator.js","./OscillatorInterface":"../node_modules/tone/build/esm/source/oscillator/OscillatorInterface.js"}],"../node_modules/tone/build/esm/source/oscillator/FatOscillator.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FatOscillator = void 0;

var _tslib = require("tslib");

var _Defaults = require("../../core/util/Defaults");

var _Interface = require("../../core/util/Interface");

var _Signal = require("../../signal/Signal");

var _Source = require("../Source");

var _Oscillator = require("./Oscillator");

var _OscillatorInterface = require("./OscillatorInterface");

var _Debug = require("../../core/util/Debug");

/**
 * FatOscillator is an array of oscillators with detune spread between the oscillators
 * @example
 * const fatOsc = new Tone.FatOscillator("Ab3", "sawtooth", 40).toDestination().start();
 * @category Source
 */
class FatOscillator extends _Source.Source {
  constructor() {
    super((0, _Defaults.optionsFromArguments)(FatOscillator.getDefaults(), arguments, ["frequency", "type", "spread"]));
    this.name = "FatOscillator";
    /**
     * The array of oscillators
     */

    this._oscillators = [];
    const options = (0, _Defaults.optionsFromArguments)(FatOscillator.getDefaults(), arguments, ["frequency", "type", "spread"]);
    this.frequency = new _Signal.Signal({
      context: this.context,
      units: "frequency",
      value: options.frequency
    });
    this.detune = new _Signal.Signal({
      context: this.context,
      units: "cents",
      value: options.detune
    });
    this._spread = options.spread;
    this._type = options.type;
    this._phase = options.phase;
    this._partials = options.partials;
    this._partialCount = options.partialCount; // set the count initially

    this.count = options.count;
    (0, _Interface.readOnly)(this, ["frequency", "detune"]);
  }

  static getDefaults() {
    return Object.assign(_Oscillator.Oscillator.getDefaults(), {
      count: 3,
      spread: 20,
      type: "sawtooth"
    });
  }
  /**
   * start the oscillator
   */


  _start(time) {
    time = this.toSeconds(time);

    this._forEach(osc => osc.start(time));
  }
  /**
   * stop the oscillator
   */


  _stop(time) {
    time = this.toSeconds(time);

    this._forEach(osc => osc.stop(time));
  }

  _restart(time) {
    this._forEach(osc => osc.restart(time));
  }
  /**
   * Iterate over all of the oscillators
   */


  _forEach(iterator) {
    for (let i = 0; i < this._oscillators.length; i++) {
      iterator(this._oscillators[i], i);
    }
  }
  /**
   * The type of the oscillator
   */


  get type() {
    return this._type;
  }

  set type(type) {
    this._type = type;

    this._forEach(osc => osc.type = type);
  }
  /**
   * The detune spread between the oscillators. If "count" is
   * set to 3 oscillators and the "spread" is set to 40,
   * the three oscillators would be detuned like this: [-20, 0, 20]
   * for a total detune spread of 40 cents.
   * @example
   * const fatOsc = new Tone.FatOscillator().toDestination().start();
   * fatOsc.spread = 70;
   */


  get spread() {
    return this._spread;
  }

  set spread(spread) {
    this._spread = spread;

    if (this._oscillators.length > 1) {
      const start = -spread / 2;
      const step = spread / (this._oscillators.length - 1);

      this._forEach((osc, i) => osc.detune.value = start + step * i);
    }
  }
  /**
   * The number of detuned oscillators. Must be an integer greater than 1.
   * @example
   * const fatOsc = new Tone.FatOscillator("C#3", "sawtooth").toDestination().start();
   * // use 4 sawtooth oscillators
   * fatOsc.count = 4;
   */


  get count() {
    return this._oscillators.length;
  }

  set count(count) {
    (0, _Debug.assertRange)(count, 1);

    if (this._oscillators.length !== count) {
      // dispose the previous oscillators
      this._forEach(osc => osc.dispose());

      this._oscillators = [];

      for (let i = 0; i < count; i++) {
        const osc = new _Oscillator.Oscillator({
          context: this.context,
          volume: -6 - count * 1.1,
          type: this._type,
          phase: this._phase + i / count * 360,
          partialCount: this._partialCount,
          onstop: i === 0 ? () => this.onstop(this) : _Interface.noOp
        });

        if (this.type === "custom") {
          osc.partials = this._partials;
        }

        this.frequency.connect(osc.frequency);
        this.detune.connect(osc.detune);
        osc.detune.overridden = false;
        osc.connect(this.output);
        this._oscillators[i] = osc;
      } // set the spread


      this.spread = this._spread;

      if (this.state === "started") {
        this._forEach(osc => osc.start());
      }
    }
  }

  get phase() {
    return this._phase;
  }

  set phase(phase) {
    this._phase = phase;

    this._forEach(osc => osc.phase = phase);
  }

  get baseType() {
    return this._oscillators[0].baseType;
  }

  set baseType(baseType) {
    this._forEach(osc => osc.baseType = baseType);

    this._type = this._oscillators[0].type;
  }

  get partials() {
    return this._oscillators[0].partials;
  }

  set partials(partials) {
    this._partials = partials;
    this._partialCount = this._partials.length;

    if (partials.length) {
      this._type = "custom";

      this._forEach(osc => osc.partials = partials);
    }
  }

  get partialCount() {
    return this._oscillators[0].partialCount;
  }

  set partialCount(partialCount) {
    this._partialCount = partialCount;

    this._forEach(osc => osc.partialCount = partialCount);

    this._type = this._oscillators[0].type;
  }

  asArray(length = 1024) {
    return (0, _tslib.__awaiter)(this, void 0, void 0, function* () {
      return (0, _OscillatorInterface.generateWaveform)(this, length);
    });
  }
  /**
   * Clean up.
   */


  dispose() {
    super.dispose();
    this.frequency.dispose();
    this.detune.dispose();

    this._forEach(osc => osc.dispose());

    return this;
  }

}

exports.FatOscillator = FatOscillator;
},{"tslib":"../node_modules/tslib/tslib.es6.js","../../core/util/Defaults":"../node_modules/tone/build/esm/core/util/Defaults.js","../../core/util/Interface":"../node_modules/tone/build/esm/core/util/Interface.js","../../signal/Signal":"../node_modules/tone/build/esm/signal/Signal.js","../Source":"../node_modules/tone/build/esm/source/Source.js","./Oscillator":"../node_modules/tone/build/esm/source/oscillator/Oscillator.js","./OscillatorInterface":"../node_modules/tone/build/esm/source/oscillator/OscillatorInterface.js","../../core/util/Debug":"../node_modules/tone/build/esm/core/util/Debug.js"}],"../node_modules/tone/build/esm/source/oscillator/PWMOscillator.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PWMOscillator = void 0;

var _tslib = require("tslib");

var _Defaults = require("../../core/util/Defaults");

var _Interface = require("../../core/util/Interface");

var _Multiply = require("../../signal/Multiply");

var _Source = require("../Source");

var _Oscillator = require("./Oscillator");

var _OscillatorInterface = require("./OscillatorInterface");

var _PulseOscillator = require("./PulseOscillator");

/**
 * PWMOscillator modulates the width of a Tone.PulseOscillator
 * at the modulationFrequency. This has the effect of continuously
 * changing the timbre of the oscillator by altering the harmonics
 * generated.
 * @example
 * return Tone.Offline(() => {
 * 	const pwm = new Tone.PWMOscillator(60, 0.3).toDestination().start();
 * }, 0.1, 1);
 * @category Source
 */
class PWMOscillator extends _Source.Source {
  constructor() {
    super((0, _Defaults.optionsFromArguments)(PWMOscillator.getDefaults(), arguments, ["frequency", "modulationFrequency"]));
    this.name = "PWMOscillator";
    this.sourceType = "pwm";
    /**
     * Scale the oscillator so it doesn't go silent
     * at the extreme values.
     */

    this._scale = new _Multiply.Multiply({
      context: this.context,
      value: 2
    });
    const options = (0, _Defaults.optionsFromArguments)(PWMOscillator.getDefaults(), arguments, ["frequency", "modulationFrequency"]);
    this._pulse = new _PulseOscillator.PulseOscillator({
      context: this.context,
      frequency: options.modulationFrequency
    }); // change the pulse oscillator type

    this._pulse.carrierType = "sine";
    this.modulationFrequency = this._pulse.frequency;
    this._modulator = new _Oscillator.Oscillator({
      context: this.context,
      detune: options.detune,
      frequency: options.frequency,
      onstop: () => this.onstop(this),
      phase: options.phase
    });
    this.frequency = this._modulator.frequency;
    this.detune = this._modulator.detune; // connections

    this._modulator.chain(this._scale, this._pulse.width);

    this._pulse.connect(this.output);

    (0, _Interface.readOnly)(this, ["modulationFrequency", "frequency", "detune"]);
  }

  static getDefaults() {
    return Object.assign(_Source.Source.getDefaults(), {
      detune: 0,
      frequency: 440,
      modulationFrequency: 0.4,
      phase: 0,
      type: "pwm"
    });
  }
  /**
   * start the oscillator
   */


  _start(time) {
    time = this.toSeconds(time);

    this._modulator.start(time);

    this._pulse.start(time);
  }
  /**
   * stop the oscillator
   */


  _stop(time) {
    time = this.toSeconds(time);

    this._modulator.stop(time);

    this._pulse.stop(time);
  }
  /**
   * restart the oscillator
   */


  _restart(time) {
    this._modulator.restart(time);

    this._pulse.restart(time);
  }
  /**
   * The type of the oscillator. Always returns "pwm".
   */


  get type() {
    return "pwm";
  }
  /**
   * The baseType of the oscillator. Always returns "pwm".
   */


  get baseType() {
    return "pwm";
  }
  /**
   * The partials of the waveform. Cannot set partials for this waveform type
   */


  get partials() {
    return [];
  }
  /**
   * No partials for this waveform type.
   */


  get partialCount() {
    return 0;
  }
  /**
   * The phase of the oscillator in degrees.
   */


  get phase() {
    return this._modulator.phase;
  }

  set phase(phase) {
    this._modulator.phase = phase;
  }

  asArray(length = 1024) {
    return (0, _tslib.__awaiter)(this, void 0, void 0, function* () {
      return (0, _OscillatorInterface.generateWaveform)(this, length);
    });
  }
  /**
   * Clean up.
   */


  dispose() {
    super.dispose();

    this._pulse.dispose();

    this._scale.dispose();

    this._modulator.dispose();

    return this;
  }

}

exports.PWMOscillator = PWMOscillator;
},{"tslib":"../node_modules/tslib/tslib.es6.js","../../core/util/Defaults":"../node_modules/tone/build/esm/core/util/Defaults.js","../../core/util/Interface":"../node_modules/tone/build/esm/core/util/Interface.js","../../signal/Multiply":"../node_modules/tone/build/esm/signal/Multiply.js","../Source":"../node_modules/tone/build/esm/source/Source.js","./Oscillator":"../node_modules/tone/build/esm/source/oscillator/Oscillator.js","./OscillatorInterface":"../node_modules/tone/build/esm/source/oscillator/OscillatorInterface.js","./PulseOscillator":"../node_modules/tone/build/esm/source/oscillator/PulseOscillator.js"}],"../node_modules/tone/build/esm/source/oscillator/OmniOscillator.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.OmniOscillator = void 0;

var _tslib = require("tslib");

var _Defaults = require("../../core/util/Defaults");

var _Interface = require("../../core/util/Interface");

var _TypeCheck = require("../../core/util/TypeCheck");

var _Signal = require("../../signal/Signal");

var _Source = require("../Source");

var _AMOscillator = require("./AMOscillator");

var _FatOscillator = require("./FatOscillator");

var _FMOscillator = require("./FMOscillator");

var _Oscillator = require("./Oscillator");

var _OscillatorInterface = require("./OscillatorInterface");

var _PulseOscillator = require("./PulseOscillator");

var _PWMOscillator = require("./PWMOscillator");

const OmniOscillatorSourceMap = {
  am: _AMOscillator.AMOscillator,
  fat: _FatOscillator.FatOscillator,
  fm: _FMOscillator.FMOscillator,
  oscillator: _Oscillator.Oscillator,
  pulse: _PulseOscillator.PulseOscillator,
  pwm: _PWMOscillator.PWMOscillator
};
/**
 * OmniOscillator aggregates all of the oscillator types into one.
 * @example
 * return Tone.Offline(() => {
 * 	const omniOsc = new Tone.OmniOscillator("C#4", "pwm").toDestination().start();
 * }, 0.1, 1);
 * @category Source
 */

class OmniOscillator extends _Source.Source {
  constructor() {
    super((0, _Defaults.optionsFromArguments)(OmniOscillator.getDefaults(), arguments, ["frequency", "type"]));
    this.name = "OmniOscillator";
    const options = (0, _Defaults.optionsFromArguments)(OmniOscillator.getDefaults(), arguments, ["frequency", "type"]);
    this.frequency = new _Signal.Signal({
      context: this.context,
      units: "frequency",
      value: options.frequency
    });
    this.detune = new _Signal.Signal({
      context: this.context,
      units: "cents",
      value: options.detune
    });
    (0, _Interface.readOnly)(this, ["frequency", "detune"]); // set the options

    this.set(options);
  }

  static getDefaults() {
    return Object.assign(_Oscillator.Oscillator.getDefaults(), _FMOscillator.FMOscillator.getDefaults(), _AMOscillator.AMOscillator.getDefaults(), _FatOscillator.FatOscillator.getDefaults(), _PulseOscillator.PulseOscillator.getDefaults(), _PWMOscillator.PWMOscillator.getDefaults());
  }
  /**
   * start the oscillator
   */


  _start(time) {
    this._oscillator.start(time);
  }
  /**
   * start the oscillator
   */


  _stop(time) {
    this._oscillator.stop(time);
  }

  _restart(time) {
    this._oscillator.restart(time);

    return this;
  }
  /**
   * The type of the oscillator. Can be any of the basic types: sine, square, triangle, sawtooth. Or
   * prefix the basic types with "fm", "am", or "fat" to use the FMOscillator, AMOscillator or FatOscillator
   * types. The oscillator could also be set to "pwm" or "pulse". All of the parameters of the
   * oscillator's class are accessible when the oscillator is set to that type, but throws an error
   * when it's not.
   * @example
   * const omniOsc = new Tone.OmniOscillator().toDestination().start();
   * omniOsc.type = "pwm";
   * // modulationFrequency is parameter which is available
   * // only when the type is "pwm".
   * omniOsc.modulationFrequency.value = 0.5;
   */


  get type() {
    let prefix = "";

    if (["am", "fm", "fat"].some(p => this._sourceType === p)) {
      prefix = this._sourceType;
    }

    return prefix + this._oscillator.type;
  }

  set type(type) {
    if (type.substr(0, 2) === "fm") {
      this._createNewOscillator("fm");

      this._oscillator = this._oscillator;
      this._oscillator.type = type.substr(2);
    } else if (type.substr(0, 2) === "am") {
      this._createNewOscillator("am");

      this._oscillator = this._oscillator;
      this._oscillator.type = type.substr(2);
    } else if (type.substr(0, 3) === "fat") {
      this._createNewOscillator("fat");

      this._oscillator = this._oscillator;
      this._oscillator.type = type.substr(3);
    } else if (type === "pwm") {
      this._createNewOscillator("pwm");

      this._oscillator = this._oscillator;
    } else if (type === "pulse") {
      this._createNewOscillator("pulse");
    } else {
      this._createNewOscillator("oscillator");

      this._oscillator = this._oscillator;
      this._oscillator.type = type;
    }
  }
  /**
   * The value is an empty array when the type is not "custom".
   * This is not available on "pwm" and "pulse" oscillator types.
   * See [[Oscillator.partials]]
   */


  get partials() {
    return this._oscillator.partials;
  }

  set partials(partials) {
    if (!this._getOscType(this._oscillator, "pulse") && !this._getOscType(this._oscillator, "pwm")) {
      this._oscillator.partials = partials;
    }
  }

  get partialCount() {
    return this._oscillator.partialCount;
  }

  set partialCount(partialCount) {
    if (!this._getOscType(this._oscillator, "pulse") && !this._getOscType(this._oscillator, "pwm")) {
      this._oscillator.partialCount = partialCount;
    }
  }

  set(props) {
    // make sure the type is set first
    if (Reflect.has(props, "type") && props.type) {
      this.type = props.type;
    } // then set the rest


    super.set(props);
    return this;
  }
  /**
   * connect the oscillator to the frequency and detune signals
   */


  _createNewOscillator(oscType) {
    if (oscType !== this._sourceType) {
      this._sourceType = oscType;
      const OscConstructor = OmniOscillatorSourceMap[oscType]; // short delay to avoid clicks on the change

      const now = this.now();

      if (this._oscillator) {
        const oldOsc = this._oscillator;
        oldOsc.stop(now); // dispose the old one

        this.context.setTimeout(() => oldOsc.dispose(), this.blockTime);
      }

      this._oscillator = new OscConstructor({
        context: this.context
      });
      this.frequency.connect(this._oscillator.frequency);
      this.detune.connect(this._oscillator.detune);

      this._oscillator.connect(this.output);

      this._oscillator.onstop = () => this.onstop(this);

      if (this.state === "started") {
        this._oscillator.start(now);
      }
    }
  }

  get phase() {
    return this._oscillator.phase;
  }

  set phase(phase) {
    this._oscillator.phase = phase;
  }
  /**
   * The source type of the oscillator.
   * @example
   * const omniOsc = new Tone.OmniOscillator(440, "fmsquare");
   * console.log(omniOsc.sourceType); // 'fm'
   */


  get sourceType() {
    return this._sourceType;
  }

  set sourceType(sType) {
    // the basetype defaults to sine
    let baseType = "sine";

    if (this._oscillator.type !== "pwm" && this._oscillator.type !== "pulse") {
      baseType = this._oscillator.type;
    } // set the type


    if (sType === "fm") {
      this.type = "fm" + baseType;
    } else if (sType === "am") {
      this.type = "am" + baseType;
    } else if (sType === "fat") {
      this.type = "fat" + baseType;
    } else if (sType === "oscillator") {
      this.type = baseType;
    } else if (sType === "pulse") {
      this.type = "pulse";
    } else if (sType === "pwm") {
      this.type = "pwm";
    }
  }

  _getOscType(osc, sourceType) {
    return osc instanceof OmniOscillatorSourceMap[sourceType];
  }
  /**
   * The base type of the oscillator. See [[Oscillator.baseType]]
   * @example
   * const omniOsc = new Tone.OmniOscillator(440, "fmsquare4");
   * console.log(omniOsc.sourceType, omniOsc.baseType, omniOsc.partialCount);
   */


  get baseType() {
    return this._oscillator.baseType;
  }

  set baseType(baseType) {
    if (!this._getOscType(this._oscillator, "pulse") && !this._getOscType(this._oscillator, "pwm") && baseType !== "pulse" && baseType !== "pwm") {
      this._oscillator.baseType = baseType;
    }
  }
  /**
   * The width of the oscillator when sourceType === "pulse".
   * See [[PWMOscillator.width]]
   */


  get width() {
    if (this._getOscType(this._oscillator, "pulse")) {
      return this._oscillator.width;
    } else {
      return undefined;
    }
  }
  /**
   * The number of detuned oscillators when sourceType === "fat".
   * See [[FatOscillator.count]]
   */


  get count() {
    if (this._getOscType(this._oscillator, "fat")) {
      return this._oscillator.count;
    } else {
      return undefined;
    }
  }

  set count(count) {
    if (this._getOscType(this._oscillator, "fat") && (0, _TypeCheck.isNumber)(count)) {
      this._oscillator.count = count;
    }
  }
  /**
   * The detune spread between the oscillators when sourceType === "fat".
   * See [[FatOscillator.count]]
   */


  get spread() {
    if (this._getOscType(this._oscillator, "fat")) {
      return this._oscillator.spread;
    } else {
      return undefined;
    }
  }

  set spread(spread) {
    if (this._getOscType(this._oscillator, "fat") && (0, _TypeCheck.isNumber)(spread)) {
      this._oscillator.spread = spread;
    }
  }
  /**
   * The type of the modulator oscillator. Only if the oscillator is set to "am" or "fm" types.
   * See [[AMOscillator]] or [[FMOscillator]]
   */


  get modulationType() {
    if (this._getOscType(this._oscillator, "fm") || this._getOscType(this._oscillator, "am")) {
      return this._oscillator.modulationType;
    } else {
      return undefined;
    }
  }

  set modulationType(mType) {
    if ((this._getOscType(this._oscillator, "fm") || this._getOscType(this._oscillator, "am")) && (0, _TypeCheck.isString)(mType)) {
      this._oscillator.modulationType = mType;
    }
  }
  /**
   * The modulation index when the sourceType === "fm"
   * See [[FMOscillator]].
   */


  get modulationIndex() {
    if (this._getOscType(this._oscillator, "fm")) {
      return this._oscillator.modulationIndex;
    } else {
      return undefined;
    }
  }
  /**
   * Harmonicity is the frequency ratio between the carrier and the modulator oscillators.
   * See [[AMOscillator]] or [[FMOscillator]]
   */


  get harmonicity() {
    if (this._getOscType(this._oscillator, "fm") || this._getOscType(this._oscillator, "am")) {
      return this._oscillator.harmonicity;
    } else {
      return undefined;
    }
  }
  /**
   * The modulationFrequency Signal of the oscillator when sourceType === "pwm"
   * see [[PWMOscillator]]
   * @min 0.1
   * @max 5
   */


  get modulationFrequency() {
    if (this._getOscType(this._oscillator, "pwm")) {
      return this._oscillator.modulationFrequency;
    } else {
      return undefined;
    }
  }

  asArray(length = 1024) {
    return (0, _tslib.__awaiter)(this, void 0, void 0, function* () {
      return (0, _OscillatorInterface.generateWaveform)(this, length);
    });
  }

  dispose() {
    super.dispose();
    this.detune.dispose();
    this.frequency.dispose();

    this._oscillator.dispose();

    return this;
  }

}

exports.OmniOscillator = OmniOscillator;
},{"tslib":"../node_modules/tslib/tslib.es6.js","../../core/util/Defaults":"../node_modules/tone/build/esm/core/util/Defaults.js","../../core/util/Interface":"../node_modules/tone/build/esm/core/util/Interface.js","../../core/util/TypeCheck":"../node_modules/tone/build/esm/core/util/TypeCheck.js","../../signal/Signal":"../node_modules/tone/build/esm/signal/Signal.js","../Source":"../node_modules/tone/build/esm/source/Source.js","./AMOscillator":"../node_modules/tone/build/esm/source/oscillator/AMOscillator.js","./FatOscillator":"../node_modules/tone/build/esm/source/oscillator/FatOscillator.js","./FMOscillator":"../node_modules/tone/build/esm/source/oscillator/FMOscillator.js","./Oscillator":"../node_modules/tone/build/esm/source/oscillator/Oscillator.js","./OscillatorInterface":"../node_modules/tone/build/esm/source/oscillator/OscillatorInterface.js","./PulseOscillator":"../node_modules/tone/build/esm/source/oscillator/PulseOscillator.js","./PWMOscillator":"../node_modules/tone/build/esm/source/oscillator/PWMOscillator.js"}],"../node_modules/tone/build/esm/signal/Add.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Add = void 0;

var _ToneAudioNode = require("../core/context/ToneAudioNode");

var _Gain = require("../core/context/Gain");

var _Defaults = require("../core/util/Defaults");

var _Signal = require("./Signal");

/**
 * Add a signal and a number or two signals. When no value is
 * passed into the constructor, Tone.Add will sum input and `addend`
 * If a value is passed into the constructor, the it will be added to the input.
 *
 * @example
 * return Tone.Offline(() => {
 * 	const add = new Tone.Add(2).toDestination();
 * 	add.addend.setValueAtTime(1, 0.2);
 * 	const signal = new Tone.Signal(2);
 * 	// add a signal and a scalar
 * 	signal.connect(add);
 * 	signal.setValueAtTime(1, 0.1);
 * }, 0.5, 1);
 * @category Signal
 */
class Add extends _Signal.Signal {
  constructor() {
    super(Object.assign((0, _Defaults.optionsFromArguments)(Add.getDefaults(), arguments, ["value"])));
    this.override = false;
    this.name = "Add";
    /**
     * the summing node
     */

    this._sum = new _Gain.Gain({
      context: this.context
    });
    this.input = this._sum;
    this.output = this._sum;
    /**
     * The value which is added to the input signal
     */

    this.addend = this._param;
    (0, _ToneAudioNode.connectSeries)(this._constantSource, this._sum);
  }

  static getDefaults() {
    return Object.assign(_Signal.Signal.getDefaults(), {
      value: 0
    });
  }

  dispose() {
    super.dispose();

    this._sum.dispose();

    return this;
  }

}

exports.Add = Add;
},{"../core/context/ToneAudioNode":"../node_modules/tone/build/esm/core/context/ToneAudioNode.js","../core/context/Gain":"../node_modules/tone/build/esm/core/context/Gain.js","../core/util/Defaults":"../node_modules/tone/build/esm/core/util/Defaults.js","./Signal":"../node_modules/tone/build/esm/signal/Signal.js"}],"../node_modules/tone/build/esm/signal/Scale.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Scale = void 0;

var _Defaults = require("../core/util/Defaults");

var _Add = require("./Add");

var _Multiply = require("./Multiply");

var _SignalOperator = require("./SignalOperator");

/**
 * Performs a linear scaling on an input signal.
 * Scales a NormalRange input to between
 * outputMin and outputMax.
 *
 * @example
 * const scale = new Tone.Scale(50, 100);
 * const signal = new Tone.Signal(0.5).connect(scale);
 * // the output of scale equals 75
 * @category Signal
 */
class Scale extends _SignalOperator.SignalOperator {
  constructor() {
    super(Object.assign((0, _Defaults.optionsFromArguments)(Scale.getDefaults(), arguments, ["min", "max"])));
    this.name = "Scale";
    const options = (0, _Defaults.optionsFromArguments)(Scale.getDefaults(), arguments, ["min", "max"]);
    this._mult = this.input = new _Multiply.Multiply({
      context: this.context,
      value: options.max - options.min
    });
    this._add = this.output = new _Add.Add({
      context: this.context,
      value: options.min
    });
    this._min = options.min;
    this._max = options.max;
    this.input.connect(this.output);
  }

  static getDefaults() {
    return Object.assign(_SignalOperator.SignalOperator.getDefaults(), {
      max: 1,
      min: 0
    });
  }
  /**
   * The minimum output value. This number is output when the value input value is 0.
   */


  get min() {
    return this._min;
  }

  set min(min) {
    this._min = min;

    this._setRange();
  }
  /**
   * The maximum output value. This number is output when the value input value is 1.
   */


  get max() {
    return this._max;
  }

  set max(max) {
    this._max = max;

    this._setRange();
  }
  /**
   * set the values
   */


  _setRange() {
    this._add.value = this._min;
    this._mult.value = this._max - this._min;
  }

  dispose() {
    super.dispose();

    this._add.dispose();

    this._mult.dispose();

    return this;
  }

}

exports.Scale = Scale;
},{"../core/util/Defaults":"../node_modules/tone/build/esm/core/util/Defaults.js","./Add":"../node_modules/tone/build/esm/signal/Add.js","./Multiply":"../node_modules/tone/build/esm/signal/Multiply.js","./SignalOperator":"../node_modules/tone/build/esm/signal/SignalOperator.js"}],"../node_modules/tone/build/esm/signal/Zero.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Zero = void 0;

var _Gain = require("../core/context/Gain");

var _ToneAudioNode = require("../core/context/ToneAudioNode");

var _Defaults = require("../core/util/Defaults");

var _SignalOperator = require("./SignalOperator");

/**
 * Tone.Zero outputs 0's at audio-rate. The reason this has to be
 * it's own class is that many browsers optimize out Tone.Signal
 * with a value of 0 and will not process nodes further down the graph.
 * @category Signal
 */
class Zero extends _SignalOperator.SignalOperator {
  constructor() {
    super(Object.assign((0, _Defaults.optionsFromArguments)(Zero.getDefaults(), arguments)));
    this.name = "Zero";
    /**
     * The gain node which connects the constant source to the output
     */

    this._gain = new _Gain.Gain({
      context: this.context
    });
    /**
     * Only outputs 0
     */

    this.output = this._gain;
    /**
     * no input node
     */

    this.input = undefined;
    (0, _ToneAudioNode.connect)(this.context.getConstant(0), this._gain);
  }
  /**
   * clean up
   */


  dispose() {
    super.dispose();
    (0, _ToneAudioNode.disconnect)(this.context.getConstant(0), this._gain);
    return this;
  }

}

exports.Zero = Zero;
},{"../core/context/Gain":"../node_modules/tone/build/esm/core/context/Gain.js","../core/context/ToneAudioNode":"../node_modules/tone/build/esm/core/context/ToneAudioNode.js","../core/util/Defaults":"../node_modules/tone/build/esm/core/util/Defaults.js","./SignalOperator":"../node_modules/tone/build/esm/signal/SignalOperator.js"}],"../node_modules/tone/build/esm/source/oscillator/LFO.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.LFO = void 0;

var _Gain = require("../../core/context/Gain");

var _Param = require("../../core/context/Param");

var _ToneAudioNode = require("../../core/context/ToneAudioNode");

var _Defaults = require("../../core/util/Defaults");

var _Interface = require("../../core/util/Interface");

var _AudioToGain = require("../../signal/AudioToGain");

var _Scale = require("../../signal/Scale");

var _Signal = require("../../signal/Signal");

var _Zero = require("../../signal/Zero");

var _Oscillator = require("./Oscillator");

/**
 * LFO stands for low frequency oscillator. LFO produces an output signal
 * which can be attached to an AudioParam or Tone.Signal
 * in order to modulate that parameter with an oscillator. The LFO can
 * also be synced to the transport to start/stop and change when the tempo changes.
 * @example
 * return Tone.Offline(() => {
 * 	const lfo = new Tone.LFO("4n", 400, 4000).start().toDestination();
 * }, 0.5, 1);
 * @category Source
 */
class LFO extends _ToneAudioNode.ToneAudioNode {
  constructor() {
    super((0, _Defaults.optionsFromArguments)(LFO.getDefaults(), arguments, ["frequency", "min", "max"]));
    this.name = "LFO";
    /**
     * The value that the LFO outputs when it's stopped
     */

    this._stoppedValue = 0;
    /**
     * A private placeholder for the units
     */

    this._units = "number";
    /**
     * If the input value is converted using the [[units]]
     */

    this.convert = true;
    /**
     * Private methods borrowed from Param
     */
    // @ts-ignore

    this._fromType = _Param.Param.prototype._fromType; // @ts-ignore

    this._toType = _Param.Param.prototype._toType; // @ts-ignore

    this._is = _Param.Param.prototype._is; // @ts-ignore

    this._clampValue = _Param.Param.prototype._clampValue;
    const options = (0, _Defaults.optionsFromArguments)(LFO.getDefaults(), arguments, ["frequency", "min", "max"]); // @ts-ignore

    this._oscillator = new _Oscillator.Oscillator({
      context: this.context,
      frequency: options.frequency,
      type: options.type
    });
    this.frequency = this._oscillator.frequency;
    this._amplitudeGain = new _Gain.Gain({
      context: this.context,
      gain: options.amplitude,
      units: "normalRange"
    });
    this.amplitude = this._amplitudeGain.gain;
    this._stoppedSignal = new _Signal.Signal({
      context: this.context,
      units: "audioRange",
      value: 0
    });
    this._zeros = new _Zero.Zero({
      context: this.context
    });
    this._a2g = new _AudioToGain.AudioToGain({
      context: this.context
    });
    this._scaler = this.output = new _Scale.Scale({
      context: this.context,
      max: options.max,
      min: options.min
    });
    this.units = options.units;
    this.min = options.min;
    this.max = options.max; // connect it up

    this._oscillator.chain(this._a2g, this._amplitudeGain, this._scaler);

    this._zeros.connect(this._a2g);

    this._stoppedSignal.connect(this._a2g);

    (0, _Interface.readOnly)(this, ["amplitude", "frequency"]);
    this.phase = options.phase;
  }

  static getDefaults() {
    return Object.assign(_ToneAudioNode.ToneAudioNode.getDefaults(), {
      amplitude: 1,
      frequency: "4n",
      max: 1,
      min: 0,
      phase: 0,
      type: "sine",
      units: "number"
    });
  }
  /**
   * Start the LFO.
   * @param time The time the LFO will start
   */


  start(time) {
    time = this.toSeconds(time);

    this._stoppedSignal.setValueAtTime(0, time);

    this._oscillator.start(time);

    return this;
  }
  /**
   * Stop the LFO.
   * @param  time The time the LFO will stop
   */


  stop(time) {
    time = this.toSeconds(time);

    this._stoppedSignal.setValueAtTime(this._stoppedValue, time);

    this._oscillator.stop(time);

    return this;
  }
  /**
   * Sync the start/stop/pause to the transport
   * and the frequency to the bpm of the transport
   * @example
   * const lfo = new Tone.LFO("8n");
   * lfo.sync().start(0);
   * // the rate of the LFO will always be an eighth note, even as the tempo changes
   */


  sync() {
    this._oscillator.sync();

    this._oscillator.syncFrequency();

    return this;
  }
  /**
   * unsync the LFO from transport control
   */


  unsync() {
    this._oscillator.unsync();

    this._oscillator.unsyncFrequency();

    return this;
  }
  /**
   * The minimum output of the LFO.
   */


  get min() {
    return this._toType(this._scaler.min);
  }

  set min(min) {
    min = this._fromType(min);
    this._scaler.min = min;
  }
  /**
   * The maximum output of the LFO.
   */


  get max() {
    return this._toType(this._scaler.max);
  }

  set max(max) {
    max = this._fromType(max);
    this._scaler.max = max;
  }
  /**
   * The type of the oscillator: See [[Oscillator.type]]
   */


  get type() {
    return this._oscillator.type;
  }

  set type(type) {
    this._oscillator.type = type;
    this._stoppedValue = this._oscillator.getInitialValue();
    this._stoppedSignal.value = this._stoppedValue;
  }
  /**
   * The phase of the LFO.
   */


  get phase() {
    return this._oscillator.phase;
  }

  set phase(phase) {
    this._oscillator.phase = phase;
    this._stoppedValue = this._oscillator.getInitialValue();
    this._stoppedSignal.value = this._stoppedValue;
  }
  /**
   * The output units of the LFO.
   */


  get units() {
    return this._units;
  }

  set units(val) {
    const currentMin = this.min;
    const currentMax = this.max; // convert the min and the max

    this._units = val;
    this.min = currentMin;
    this.max = currentMax;
  }
  /**
   * Returns the playback state of the source, either "started" or "stopped".
   */


  get state() {
    return this._oscillator.state;
  }
  /**
   * @param node the destination to connect to
   * @param outputNum the optional output number
   * @param inputNum the input number
   */


  connect(node, outputNum, inputNum) {
    if (node instanceof _Param.Param || node instanceof _Signal.Signal) {
      this.convert = node.convert;
      this.units = node.units;
    }

    (0, _Signal.connectSignal)(this, node, outputNum, inputNum);
    return this;
  }

  dispose() {
    super.dispose();

    this._oscillator.dispose();

    this._stoppedSignal.dispose();

    this._zeros.dispose();

    this._scaler.dispose();

    this._a2g.dispose();

    this._amplitudeGain.dispose();

    this.amplitude.dispose();
    return this;
  }

}

exports.LFO = LFO;
},{"../../core/context/Gain":"../node_modules/tone/build/esm/core/context/Gain.js","../../core/context/Param":"../node_modules/tone/build/esm/core/context/Param.js","../../core/context/ToneAudioNode":"../node_modules/tone/build/esm/core/context/ToneAudioNode.js","../../core/util/Defaults":"../node_modules/tone/build/esm/core/util/Defaults.js","../../core/util/Interface":"../node_modules/tone/build/esm/core/util/Interface.js","../../signal/AudioToGain":"../node_modules/tone/build/esm/signal/AudioToGain.js","../../signal/Scale":"../node_modules/tone/build/esm/signal/Scale.js","../../signal/Signal":"../node_modules/tone/build/esm/signal/Signal.js","../../signal/Zero":"../node_modules/tone/build/esm/signal/Zero.js","./Oscillator":"../node_modules/tone/build/esm/source/oscillator/Oscillator.js"}],"../node_modules/tone/build/esm/core/util/Decorator.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.range = range;
exports.timeRange = timeRange;

var _Debug = require("./Debug");

/**
 * Assert that the number is in the given range.
 */
function range(min, max = Infinity) {
  const valueMap = new WeakMap();
  return function (target, propertyKey) {
    Reflect.defineProperty(target, propertyKey, {
      configurable: true,
      enumerable: true,
      get: function () {
        return valueMap.get(this);
      },
      set: function (newValue) {
        (0, _Debug.assertRange)(newValue, min, max);
        valueMap.set(this, newValue);
      }
    });
  };
}
/**
 * Convert the time to seconds and assert that the time is in between the two
 * values when being set.
 */


function timeRange(min, max = Infinity) {
  const valueMap = new WeakMap();
  return function (target, propertyKey) {
    Reflect.defineProperty(target, propertyKey, {
      configurable: true,
      enumerable: true,
      get: function () {
        return valueMap.get(this);
      },
      set: function (newValue) {
        (0, _Debug.assertRange)(this.toSeconds(newValue), min, max);
        valueMap.set(this, newValue);
      }
    });
  };
}
},{"./Debug":"../node_modules/tone/build/esm/core/util/Debug.js"}],"../node_modules/tone/build/esm/source/buffer/Player.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Player = void 0;

var _tslib = require("tslib");

var _ToneAudioBuffer = require("../../core/context/ToneAudioBuffer");

var _Defaults = require("../../core/util/Defaults");

var _Interface = require("../../core/util/Interface");

var _TypeCheck = require("../../core/util/TypeCheck");

var _Source = require("../Source");

var _ToneBufferSource = require("./ToneBufferSource");

var _Debug = require("../../core/util/Debug");

var _Decorator = require("../../core/util/Decorator");

/**
 * Player is an audio file player with start, loop, and stop functions.
 * @example
 * const player = new Tone.Player("https://tonejs.github.io/audio/berklee/gong_1.mp3").toDestination();
 * // play as soon as the buffer is loaded
 * player.autostart = true;
 * @category Source
 */
class Player extends _Source.Source {
  constructor() {
    super((0, _Defaults.optionsFromArguments)(Player.getDefaults(), arguments, ["url", "onload"]));
    this.name = "Player";
    /**
     * All of the active buffer source nodes
     */

    this._activeSources = new Set();
    const options = (0, _Defaults.optionsFromArguments)(Player.getDefaults(), arguments, ["url", "onload"]);
    this._buffer = new _ToneAudioBuffer.ToneAudioBuffer({
      onload: this._onload.bind(this, options.onload),
      onerror: options.onerror,
      reverse: options.reverse,
      url: options.url
    });
    this.autostart = options.autostart;
    this._loop = options.loop;
    this._loopStart = options.loopStart;
    this._loopEnd = options.loopEnd;
    this._playbackRate = options.playbackRate;
    this.fadeIn = options.fadeIn;
    this.fadeOut = options.fadeOut;
  }

  static getDefaults() {
    return Object.assign(_Source.Source.getDefaults(), {
      autostart: false,
      fadeIn: 0,
      fadeOut: 0,
      loop: false,
      loopEnd: 0,
      loopStart: 0,
      onload: _Interface.noOp,
      onerror: _Interface.noOp,
      playbackRate: 1,
      reverse: false
    });
  }
  /**
   * Load the audio file as an audio buffer.
   * Decodes the audio asynchronously and invokes
   * the callback once the audio buffer loads.
   * Note: this does not need to be called if a url
   * was passed in to the constructor. Only use this
   * if you want to manually load a new url.
   * @param url The url of the buffer to load. Filetype support depends on the browser.
   */


  load(url) {
    return (0, _tslib.__awaiter)(this, void 0, void 0, function* () {
      yield this._buffer.load(url);

      this._onload();

      return this;
    });
  }
  /**
   * Internal callback when the buffer is loaded.
   */


  _onload(callback = _Interface.noOp) {
    callback();

    if (this.autostart) {
      this.start();
    }
  }
  /**
   * Internal callback when the buffer is done playing.
   */


  _onSourceEnd(source) {
    // invoke the onstop function
    this.onstop(this); // delete the source from the active sources

    this._activeSources.delete(source);

    if (this._activeSources.size === 0 && !this._synced && this._state.getValueAtTime(this.now()) === "started") {
      this._state.setStateAtTime("stopped", this.now());
    }
  }
  /**
   * Play the buffer at the given startTime. Optionally add an offset
   * and/or duration which will play the buffer from a position
   * within the buffer for the given duration.
   *
   * @param  time When the player should start.
   * @param  offset The offset from the beginning of the sample to start at.
   * @param  duration How long the sample should play. If no duration is given, it will default to the full length of the sample (minus any offset)
   */


  start(time, offset, duration) {
    super.start(time, offset, duration);
    return this;
  }
  /**
   * Internal start method
   */


  _start(startTime, offset, duration) {
    // if it's a loop the default offset is the loopStart point
    if (this._loop) {
      offset = (0, _Defaults.defaultArg)(offset, this._loopStart);
    } else {
      // otherwise the default offset is 0
      offset = (0, _Defaults.defaultArg)(offset, 0);
    } // compute the values in seconds


    let computedOffset = this.toSeconds(offset); // if it's synced, it should factor in the playback rate for computing the offset

    if (this._synced) {
      computedOffset *= this._playbackRate;
    } // compute the duration which is either the passed in duration of the buffer.duration - offset


    const origDuration = duration;
    duration = (0, _Defaults.defaultArg)(duration, Math.max(this._buffer.duration - computedOffset, 0));
    let computedDuration = this.toSeconds(duration); // scale it by the playback rate

    computedDuration = computedDuration / this._playbackRate; // get the start time

    startTime = this.toSeconds(startTime); // make the source

    const source = new _ToneBufferSource.ToneBufferSource({
      url: this._buffer,
      context: this.context,
      fadeIn: this.fadeIn,
      fadeOut: this.fadeOut,
      loop: this._loop,
      loopEnd: this._loopEnd,
      loopStart: this._loopStart,
      onended: this._onSourceEnd.bind(this),
      playbackRate: this._playbackRate
    }).connect(this.output); // set the looping properties

    if (!this._loop && !this._synced) {
      // cancel the previous stop
      this._state.cancel(startTime + computedDuration); // if it's not looping, set the state change at the end of the sample


      this._state.setStateAtTime("stopped", startTime + computedDuration, {
        implicitEnd: true
      });
    } // add it to the array of active sources


    this._activeSources.add(source); // start it


    if (this._loop && (0, _TypeCheck.isUndef)(origDuration)) {
      source.start(startTime, computedOffset);
    } else {
      // subtract the fade out time
      source.start(startTime, computedOffset, computedDuration - this.toSeconds(this.fadeOut));
    }
  }
  /**
   * Stop playback.
   */


  _stop(time) {
    const computedTime = this.toSeconds(time);

    this._activeSources.forEach(source => source.stop(computedTime));
  }
  /**
   * Stop and then restart the player from the beginning (or offset)
   * @param  time When the player should start.
   * @param  offset The offset from the beginning of the sample to start at.
   * @param  duration How long the sample should play. If no duration is given,
   * 					it will default to the full length of the sample (minus any offset)
   */


  restart(time, offset, duration) {
    super.restart(time, offset, duration);
    return this;
  }

  _restart(time, offset, duration) {
    this._stop(time);

    this._start(time, offset, duration);
  }
  /**
   * Seek to a specific time in the player's buffer. If the
   * source is no longer playing at that time, it will stop.
   * @param offset The time to seek to.
   * @param when The time for the seek event to occur.
   * @example
   * const player = new Tone.Player("https://tonejs.github.io/audio/berklee/gurgling_theremin_1.mp3", () => {
   * 	player.start();
   * 	// seek to the offset in 1 second from now
   * 	player.seek(0.4, "+1");
   * }).toDestination();
   */


  seek(offset, when) {
    const computedTime = this.toSeconds(when);

    if (this._state.getValueAtTime(computedTime) === "started") {
      const computedOffset = this.toSeconds(offset); // if it's currently playing, stop it

      this._stop(computedTime); // restart it at the given time


      this._start(computedTime, computedOffset);
    }

    return this;
  }
  /**
   * Set the loop start and end. Will only loop if loop is set to true.
   * @param loopStart The loop start time
   * @param loopEnd The loop end time
   * @example
   * const player = new Tone.Player("https://tonejs.github.io/audio/berklee/malevoices_aa2_F3.mp3").toDestination();
   * // loop between the given points
   * player.setLoopPoints(0.2, 0.3);
   * player.loop = true;
   * player.autostart = true;
   */


  setLoopPoints(loopStart, loopEnd) {
    this.loopStart = loopStart;
    this.loopEnd = loopEnd;
    return this;
  }
  /**
   * If loop is true, the loop will start at this position.
   */


  get loopStart() {
    return this._loopStart;
  }

  set loopStart(loopStart) {
    this._loopStart = loopStart;

    if (this.buffer.loaded) {
      (0, _Debug.assertRange)(this.toSeconds(loopStart), 0, this.buffer.duration);
    } // get the current source


    this._activeSources.forEach(source => {
      source.loopStart = loopStart;
    });
  }
  /**
   * If loop is true, the loop will end at this position.
   */


  get loopEnd() {
    return this._loopEnd;
  }

  set loopEnd(loopEnd) {
    this._loopEnd = loopEnd;

    if (this.buffer.loaded) {
      (0, _Debug.assertRange)(this.toSeconds(loopEnd), 0, this.buffer.duration);
    } // get the current source


    this._activeSources.forEach(source => {
      source.loopEnd = loopEnd;
    });
  }
  /**
   * The audio buffer belonging to the player.
   */


  get buffer() {
    return this._buffer;
  }

  set buffer(buffer) {
    this._buffer.set(buffer);
  }
  /**
   * If the buffer should loop once it's over.
   * @example
   * const player = new Tone.Player("https://tonejs.github.io/audio/drum-samples/breakbeat.mp3").toDestination();
   * player.loop = true;
   * player.autostart = true;
   */


  get loop() {
    return this._loop;
  }

  set loop(loop) {
    // if no change, do nothing
    if (this._loop === loop) {
      return;
    }

    this._loop = loop; // set the loop of all of the sources

    this._activeSources.forEach(source => {
      source.loop = loop;
    });

    if (loop) {
      // remove the next stopEvent
      const stopEvent = this._state.getNextState("stopped", this.now());

      if (stopEvent) {
        this._state.cancel(stopEvent.time);
      }
    }
  }
  /**
   * Normal speed is 1. The pitch will change with the playback rate.
   * @example
   * const player = new Tone.Player("https://tonejs.github.io/audio/berklee/femalevoices_aa2_A5.mp3").toDestination();
   * // play at 1/4 speed
   * player.playbackRate = 0.25;
   * // play as soon as the buffer is loaded
   * player.autostart = true;
   */


  get playbackRate() {
    return this._playbackRate;
  }

  set playbackRate(rate) {
    this._playbackRate = rate;
    const now = this.now(); // cancel the stop event since it's at a different time now

    const stopEvent = this._state.getNextState("stopped", now);

    if (stopEvent && stopEvent.implicitEnd) {
      this._state.cancel(stopEvent.time);

      this._activeSources.forEach(source => source.cancelStop());
    } // set all the sources


    this._activeSources.forEach(source => {
      source.playbackRate.setValueAtTime(rate, now);
    });
  }
  /**
   * If the buffer should be reversed
   * @example
   * const player = new Tone.Player("https://tonejs.github.io/audio/berklee/chime_1.mp3").toDestination();
   * player.autostart = true;
   * player.reverse = true;
   */


  get reverse() {
    return this._buffer.reverse;
  }

  set reverse(rev) {
    this._buffer.reverse = rev;
  }
  /**
   * If the buffer is loaded
   */


  get loaded() {
    return this._buffer.loaded;
  }

  dispose() {
    super.dispose(); // disconnect all of the players

    this._activeSources.forEach(source => source.dispose());

    this._activeSources.clear();

    this._buffer.dispose();

    return this;
  }

}

exports.Player = Player;
(0, _tslib.__decorate)([(0, _Decorator.timeRange)(0)], Player.prototype, "fadeIn", void 0);
(0, _tslib.__decorate)([(0, _Decorator.timeRange)(0)], Player.prototype, "fadeOut", void 0);
},{"tslib":"../node_modules/tslib/tslib.es6.js","../../core/context/ToneAudioBuffer":"../node_modules/tone/build/esm/core/context/ToneAudioBuffer.js","../../core/util/Defaults":"../node_modules/tone/build/esm/core/util/Defaults.js","../../core/util/Interface":"../node_modules/tone/build/esm/core/util/Interface.js","../../core/util/TypeCheck":"../node_modules/tone/build/esm/core/util/TypeCheck.js","../Source":"../node_modules/tone/build/esm/source/Source.js","./ToneBufferSource":"../node_modules/tone/build/esm/source/buffer/ToneBufferSource.js","../../core/util/Debug":"../node_modules/tone/build/esm/core/util/Debug.js","../../core/util/Decorator":"../node_modules/tone/build/esm/core/util/Decorator.js"}],"../node_modules/tone/build/esm/source/buffer/Players.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Players = void 0;

var _Volume = require("../../component/channel/Volume");

var _ToneAudioBuffers = require("../../core/context/ToneAudioBuffers");

var _ToneAudioNode = require("../../core/context/ToneAudioNode");

var _Defaults = require("../../core/util/Defaults");

var _Debug = require("../../core/util/Debug");

var _Interface = require("../../core/util/Interface");

var _Source = require("../Source");

var _Player = require("./Player");

/**
 * Players combines multiple [[Player]] objects.
 * @category Source
 */
class Players extends _ToneAudioNode.ToneAudioNode {
  constructor() {
    super((0, _Defaults.optionsFromArguments)(Players.getDefaults(), arguments, ["urls", "onload"], "urls"));
    this.name = "Players";
    /**
     * Players has no input.
     */

    this.input = undefined;
    /**
     * The container of all of the players
     */

    this._players = new Map();
    const options = (0, _Defaults.optionsFromArguments)(Players.getDefaults(), arguments, ["urls", "onload"], "urls");
    /**
     * The output volume node
     */

    this._volume = this.output = new _Volume.Volume({
      context: this.context,
      volume: options.volume
    });
    this.volume = this._volume.volume;
    (0, _Interface.readOnly)(this, "volume");
    this._buffers = new _ToneAudioBuffers.ToneAudioBuffers({
      urls: options.urls,
      onload: options.onload,
      baseUrl: options.baseUrl,
      onerror: options.onerror
    }); // mute initially

    this.mute = options.mute;
    this._fadeIn = options.fadeIn;
    this._fadeOut = options.fadeOut;
  }

  static getDefaults() {
    return Object.assign(_Source.Source.getDefaults(), {
      baseUrl: "",
      fadeIn: 0,
      fadeOut: 0,
      mute: false,
      onload: _Interface.noOp,
      onerror: _Interface.noOp,
      urls: {},
      volume: 0
    });
  }
  /**
   * Mute the output.
   */


  get mute() {
    return this._volume.mute;
  }

  set mute(mute) {
    this._volume.mute = mute;
  }
  /**
   * The fadeIn time of the envelope applied to the source.
   */


  get fadeIn() {
    return this._fadeIn;
  }

  set fadeIn(fadeIn) {
    this._fadeIn = fadeIn;

    this._players.forEach(player => {
      player.fadeIn = fadeIn;
    });
  }
  /**
   * The fadeOut time of the each of the sources.
   */


  get fadeOut() {
    return this._fadeOut;
  }

  set fadeOut(fadeOut) {
    this._fadeOut = fadeOut;

    this._players.forEach(player => {
      player.fadeOut = fadeOut;
    });
  }
  /**
   * The state of the players object. Returns "started" if any of the players are playing.
   */


  get state() {
    const playing = Array.from(this._players).some(([_, player]) => player.state === "started");
    return playing ? "started" : "stopped";
  }
  /**
   * True if the buffers object has a buffer by that name.
   * @param name  The key or index of the buffer.
   */


  has(name) {
    return this._buffers.has(name);
  }
  /**
   * Get a player by name.
   * @param  name  The players name as defined in the constructor object or `add` method.
   */


  player(name) {
    (0, _Debug.assert)(this.has(name), `No Player with the name ${name} exists on this object`);

    if (!this._players.has(name)) {
      const player = new _Player.Player({
        context: this.context,
        fadeIn: this._fadeIn,
        fadeOut: this._fadeOut,
        url: this._buffers.get(name)
      }).connect(this.output);

      this._players.set(name, player);
    }

    return this._players.get(name);
  }
  /**
   * If all the buffers are loaded or not
   */


  get loaded() {
    return this._buffers.loaded;
  }
  /**
   * Add a player by name and url to the Players
   * @param  name A unique name to give the player
   * @param  url  Either the url of the bufer or a buffer which will be added with the given name.
   * @param callback  The callback to invoke when the url is loaded.
   */


  add(name, url, callback) {
    (0, _Debug.assert)(!this._buffers.has(name), "A buffer with that name already exists on this object");

    this._buffers.add(name, url, callback);

    return this;
  }
  /**
   * Stop all of the players at the given time
   * @param time The time to stop all of the players.
   */


  stopAll(time) {
    this._players.forEach(player => player.stop(time));

    return this;
  }

  dispose() {
    super.dispose();

    this._volume.dispose();

    this.volume.dispose();

    this._players.forEach(player => player.dispose());

    this._buffers.dispose();

    return this;
  }

}

exports.Players = Players;
},{"../../component/channel/Volume":"../node_modules/tone/build/esm/component/channel/Volume.js","../../core/context/ToneAudioBuffers":"../node_modules/tone/build/esm/core/context/ToneAudioBuffers.js","../../core/context/ToneAudioNode":"../node_modules/tone/build/esm/core/context/ToneAudioNode.js","../../core/util/Defaults":"../node_modules/tone/build/esm/core/util/Defaults.js","../../core/util/Debug":"../node_modules/tone/build/esm/core/util/Debug.js","../../core/util/Interface":"../node_modules/tone/build/esm/core/util/Interface.js","../Source":"../node_modules/tone/build/esm/source/Source.js","./Player":"../node_modules/tone/build/esm/source/buffer/Player.js"}],"../node_modules/tone/build/esm/source/buffer/GrainPlayer.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.GrainPlayer = void 0;

var _Source = require("../Source");

var _Interface = require("../../core/util/Interface");

var _ToneAudioBuffer = require("../../core/context/ToneAudioBuffer");

var _Defaults = require("../../core/util/Defaults");

var _Clock = require("../../core/clock/Clock");

var _ToneBufferSource = require("./ToneBufferSource");

var _Conversions = require("../../core/type/Conversions");

var _Debug = require("../../core/util/Debug");

/**
 * GrainPlayer implements [granular synthesis](https://en.wikipedia.org/wiki/Granular_synthesis).
 * Granular Synthesis enables you to adjust pitch and playback rate independently. The grainSize is the
 * amount of time each small chunk of audio is played for and the overlap is the
 * amount of crossfading transition time between successive grains.
 * @category Source
 */
class GrainPlayer extends _Source.Source {
  constructor() {
    super((0, _Defaults.optionsFromArguments)(GrainPlayer.getDefaults(), arguments, ["url", "onload"]));
    this.name = "GrainPlayer";
    /**
     * Internal loopStart value
     */

    this._loopStart = 0;
    /**
     * Internal loopStart value
     */

    this._loopEnd = 0;
    /**
     * All of the currently playing BufferSources
     */

    this._activeSources = [];
    const options = (0, _Defaults.optionsFromArguments)(GrainPlayer.getDefaults(), arguments, ["url", "onload"]);
    this.buffer = new _ToneAudioBuffer.ToneAudioBuffer({
      onload: options.onload,
      onerror: options.onerror,
      reverse: options.reverse,
      url: options.url
    });
    this._clock = new _Clock.Clock({
      context: this.context,
      callback: this._tick.bind(this),
      frequency: 1 / options.grainSize
    });
    this._playbackRate = options.playbackRate;
    this._grainSize = options.grainSize;
    this._overlap = options.overlap;
    this.detune = options.detune; // setup

    this.overlap = options.overlap;
    this.loop = options.loop;
    this.playbackRate = options.playbackRate;
    this.grainSize = options.grainSize;
    this.loopStart = options.loopStart;
    this.loopEnd = options.loopEnd;
    this.reverse = options.reverse;

    this._clock.on("stop", this._onstop.bind(this));
  }

  static getDefaults() {
    return Object.assign(_Source.Source.getDefaults(), {
      onload: _Interface.noOp,
      onerror: _Interface.noOp,
      overlap: 0.1,
      grainSize: 0.2,
      playbackRate: 1,
      detune: 0,
      loop: false,
      loopStart: 0,
      loopEnd: 0,
      reverse: false
    });
  }
  /**
   * Internal start method
   */


  _start(time, offset, duration) {
    offset = (0, _Defaults.defaultArg)(offset, 0);
    offset = this.toSeconds(offset);
    time = this.toSeconds(time);

    const grainSize = 1 / this._clock.frequency.getValueAtTime(time);

    this._clock.start(time, offset / grainSize);

    if (duration) {
      this.stop(time + this.toSeconds(duration));
    }
  }
  /**
   * Stop and then restart the player from the beginning (or offset)
   * @param  time When the player should start.
   * @param  offset The offset from the beginning of the sample to start at.
   * @param  duration How long the sample should play. If no duration is given,
   * 					it will default to the full length of the sample (minus any offset)
   */


  restart(time, offset, duration) {
    super.restart(time, offset, duration);
    return this;
  }

  _restart(time, offset, duration) {
    this._stop(time);

    this._start(time, offset, duration);
  }
  /**
   * Internal stop method
   */


  _stop(time) {
    this._clock.stop(time);
  }
  /**
   * Invoked when the clock is stopped
   */


  _onstop(time) {
    // stop the players
    this._activeSources.forEach(source => {
      source.fadeOut = 0;
      source.stop(time);
    });

    this.onstop(this);
  }
  /**
   * Invoked on each clock tick. scheduled a new grain at this time.
   */


  _tick(time) {
    // check if it should stop looping
    const ticks = this._clock.getTicksAtTime(time);

    const offset = ticks * this._grainSize;
    this.log("offset", offset);

    if (!this.loop && offset > this.buffer.duration) {
      this.stop(time);
      return;
    } // at the beginning of the file, the fade in should be 0


    const fadeIn = offset < this._overlap ? 0 : this._overlap; // create a buffer source

    const source = new _ToneBufferSource.ToneBufferSource({
      context: this.context,
      url: this.buffer,
      fadeIn: fadeIn,
      fadeOut: this._overlap,
      loop: this.loop,
      loopStart: this._loopStart,
      loopEnd: this._loopEnd,
      // compute the playbackRate based on the detune
      playbackRate: (0, _Conversions.intervalToFrequencyRatio)(this.detune / 100)
    }).connect(this.output);
    source.start(time, this._grainSize * ticks);
    source.stop(time + this._grainSize / this.playbackRate); // add it to the active sources

    this._activeSources.push(source); // remove it when it's done


    source.onended = () => {
      const index = this._activeSources.indexOf(source);

      if (index !== -1) {
        this._activeSources.splice(index, 1);
      }
    };
  }
  /**
   * The playback rate of the sample
   */


  get playbackRate() {
    return this._playbackRate;
  }

  set playbackRate(rate) {
    (0, _Debug.assertRange)(rate, 0.001);
    this._playbackRate = rate;
    this.grainSize = this._grainSize;
  }
  /**
   * The loop start time.
   */


  get loopStart() {
    return this._loopStart;
  }

  set loopStart(time) {
    if (this.buffer.loaded) {
      (0, _Debug.assertRange)(this.toSeconds(time), 0, this.buffer.duration);
    }

    this._loopStart = this.toSeconds(time);
  }
  /**
   * The loop end time.
   */


  get loopEnd() {
    return this._loopEnd;
  }

  set loopEnd(time) {
    if (this.buffer.loaded) {
      (0, _Debug.assertRange)(this.toSeconds(time), 0, this.buffer.duration);
    }

    this._loopEnd = this.toSeconds(time);
  }
  /**
   * The direction the buffer should play in
   */


  get reverse() {
    return this.buffer.reverse;
  }

  set reverse(rev) {
    this.buffer.reverse = rev;
  }
  /**
   * The size of each chunk of audio that the
   * buffer is chopped into and played back at.
   */


  get grainSize() {
    return this._grainSize;
  }

  set grainSize(size) {
    this._grainSize = this.toSeconds(size);

    this._clock.frequency.setValueAtTime(this._playbackRate / this._grainSize, this.now());
  }
  /**
   * The duration of the cross-fade between successive grains.
   */


  get overlap() {
    return this._overlap;
  }

  set overlap(time) {
    const computedTime = this.toSeconds(time);
    (0, _Debug.assertRange)(computedTime, 0);
    this._overlap = computedTime;
  }
  /**
   * If all the buffer is loaded
   */


  get loaded() {
    return this.buffer.loaded;
  }

  dispose() {
    super.dispose();
    this.buffer.dispose();

    this._clock.dispose();

    this._activeSources.forEach(source => source.dispose());

    return this;
  }

}

exports.GrainPlayer = GrainPlayer;
},{"../Source":"../node_modules/tone/build/esm/source/Source.js","../../core/util/Interface":"../node_modules/tone/build/esm/core/util/Interface.js","../../core/context/ToneAudioBuffer":"../node_modules/tone/build/esm/core/context/ToneAudioBuffer.js","../../core/util/Defaults":"../node_modules/tone/build/esm/core/util/Defaults.js","../../core/clock/Clock":"../node_modules/tone/build/esm/core/clock/Clock.js","./ToneBufferSource":"../node_modules/tone/build/esm/source/buffer/ToneBufferSource.js","../../core/type/Conversions":"../node_modules/tone/build/esm/core/type/Conversions.js","../../core/util/Debug":"../node_modules/tone/build/esm/core/util/Debug.js"}],"../node_modules/tone/build/esm/source/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _Noise = require("./Noise");

Object.keys(_Noise).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _Noise[key];
    }
  });
});

var _UserMedia = require("./UserMedia");

Object.keys(_UserMedia).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _UserMedia[key];
    }
  });
});

var _Oscillator = require("./oscillator/Oscillator");

Object.keys(_Oscillator).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _Oscillator[key];
    }
  });
});

var _AMOscillator = require("./oscillator/AMOscillator");

Object.keys(_AMOscillator).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _AMOscillator[key];
    }
  });
});

var _FMOscillator = require("./oscillator/FMOscillator");

Object.keys(_FMOscillator).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _FMOscillator[key];
    }
  });
});

var _PulseOscillator = require("./oscillator/PulseOscillator");

Object.keys(_PulseOscillator).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _PulseOscillator[key];
    }
  });
});

var _FatOscillator = require("./oscillator/FatOscillator");

Object.keys(_FatOscillator).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _FatOscillator[key];
    }
  });
});

var _PWMOscillator = require("./oscillator/PWMOscillator");

Object.keys(_PWMOscillator).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _PWMOscillator[key];
    }
  });
});

var _OmniOscillator = require("./oscillator/OmniOscillator");

Object.keys(_OmniOscillator).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _OmniOscillator[key];
    }
  });
});

var _ToneOscillatorNode = require("./oscillator/ToneOscillatorNode");

Object.keys(_ToneOscillatorNode).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _ToneOscillatorNode[key];
    }
  });
});

var _LFO = require("./oscillator/LFO");

Object.keys(_LFO).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _LFO[key];
    }
  });
});

var _ToneBufferSource = require("./buffer/ToneBufferSource");

Object.keys(_ToneBufferSource).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _ToneBufferSource[key];
    }
  });
});

var _Player = require("./buffer/Player");

Object.keys(_Player).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _Player[key];
    }
  });
});

var _Players = require("./buffer/Players");

Object.keys(_Players).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _Players[key];
    }
  });
});

var _GrainPlayer = require("./buffer/GrainPlayer");

Object.keys(_GrainPlayer).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _GrainPlayer[key];
    }
  });
});
},{"./Noise":"../node_modules/tone/build/esm/source/Noise.js","./UserMedia":"../node_modules/tone/build/esm/source/UserMedia.js","./oscillator/Oscillator":"../node_modules/tone/build/esm/source/oscillator/Oscillator.js","./oscillator/AMOscillator":"../node_modules/tone/build/esm/source/oscillator/AMOscillator.js","./oscillator/FMOscillator":"../node_modules/tone/build/esm/source/oscillator/FMOscillator.js","./oscillator/PulseOscillator":"../node_modules/tone/build/esm/source/oscillator/PulseOscillator.js","./oscillator/FatOscillator":"../node_modules/tone/build/esm/source/oscillator/FatOscillator.js","./oscillator/PWMOscillator":"../node_modules/tone/build/esm/source/oscillator/PWMOscillator.js","./oscillator/OmniOscillator":"../node_modules/tone/build/esm/source/oscillator/OmniOscillator.js","./oscillator/ToneOscillatorNode":"../node_modules/tone/build/esm/source/oscillator/ToneOscillatorNode.js","./oscillator/LFO":"../node_modules/tone/build/esm/source/oscillator/LFO.js","./buffer/ToneBufferSource":"../node_modules/tone/build/esm/source/buffer/ToneBufferSource.js","./buffer/Player":"../node_modules/tone/build/esm/source/buffer/Player.js","./buffer/Players":"../node_modules/tone/build/esm/source/buffer/Players.js","./buffer/GrainPlayer":"../node_modules/tone/build/esm/source/buffer/GrainPlayer.js"}],"../node_modules/tone/build/esm/signal/Abs.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Abs = void 0;

var _SignalOperator = require("./SignalOperator");

var _WaveShaper = require("./WaveShaper");

/**
 * Return the absolute value of an incoming signal.
 *
 * @example
 * return Tone.Offline(() => {
 * 	const abs = new Tone.Abs().toDestination();
 * 	const signal = new Tone.Signal(1);
 * 	signal.rampTo(-1, 0.5);
 * 	signal.connect(abs);
 * }, 0.5, 1);
 * @category Signal
 */
class Abs extends _SignalOperator.SignalOperator {
  constructor() {
    super(...arguments);
    this.name = "Abs";
    /**
     * The node which converts the audio ranges
     */

    this._abs = new _WaveShaper.WaveShaper({
      context: this.context,
      mapping: val => {
        if (Math.abs(val) < 0.001) {
          return 0;
        } else {
          return Math.abs(val);
        }
      }
    });
    /**
     * The AudioRange input [-1, 1]
     */

    this.input = this._abs;
    /**
     * The output range [0, 1]
     */

    this.output = this._abs;
  }
  /**
   * clean up
   */


  dispose() {
    super.dispose();

    this._abs.dispose();

    return this;
  }

}

exports.Abs = Abs;
},{"./SignalOperator":"../node_modules/tone/build/esm/signal/SignalOperator.js","./WaveShaper":"../node_modules/tone/build/esm/signal/WaveShaper.js"}],"../node_modules/tone/build/esm/signal/GainToAudio.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.GainToAudio = void 0;

var _SignalOperator = require("./SignalOperator");

var _WaveShaper = require("./WaveShaper");

/**
 * GainToAudio converts an input in NormalRange [0,1] to AudioRange [-1,1].
 * See [[AudioToGain]].
 * @category Signal
 */
class GainToAudio extends _SignalOperator.SignalOperator {
  constructor() {
    super(...arguments);
    this.name = "GainToAudio";
    /**
     * The node which converts the audio ranges
     */

    this._norm = new _WaveShaper.WaveShaper({
      context: this.context,
      mapping: x => Math.abs(x) * 2 - 1
    });
    /**
     * The NormalRange input [0, 1]
     */

    this.input = this._norm;
    /**
     * The AudioRange output [-1, 1]
     */

    this.output = this._norm;
  }
  /**
   * clean up
   */


  dispose() {
    super.dispose();

    this._norm.dispose();

    return this;
  }

}

exports.GainToAudio = GainToAudio;
},{"./SignalOperator":"../node_modules/tone/build/esm/signal/SignalOperator.js","./WaveShaper":"../node_modules/tone/build/esm/signal/WaveShaper.js"}],"../node_modules/tone/build/esm/signal/Negate.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Negate = void 0;

var _Multiply = require("./Multiply");

var _SignalOperator = require("./SignalOperator");

/**
 * Negate the incoming signal. i.e. an input signal of 10 will output -10
 *
 * @example
 * const neg = new Tone.Negate();
 * const sig = new Tone.Signal(-2).connect(neg);
 * // output of neg is positive 2.
 * @category Signal
 */
class Negate extends _SignalOperator.SignalOperator {
  constructor() {
    super(...arguments);
    this.name = "Negate";
    /**
     * negation is done by multiplying by -1
     */

    this._multiply = new _Multiply.Multiply({
      context: this.context,
      value: -1
    });
    /**
     * The input and output are equal to the multiply node
     */

    this.input = this._multiply;
    this.output = this._multiply;
  }
  /**
   * clean up
   * @returns {Negate} this
   */


  dispose() {
    super.dispose();

    this._multiply.dispose();

    return this;
  }

}

exports.Negate = Negate;
},{"./Multiply":"../node_modules/tone/build/esm/signal/Multiply.js","./SignalOperator":"../node_modules/tone/build/esm/signal/SignalOperator.js"}],"../node_modules/tone/build/esm/signal/Subtract.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Subtract = void 0;

var _ToneAudioNode = require("../core/context/ToneAudioNode");

var _Gain = require("../core/context/Gain");

var _Defaults = require("../core/util/Defaults");

var _Negate = require("../signal/Negate");

var _Signal = require("../signal/Signal");

/**
 * Subtract the signal connected to the input is subtracted from the signal connected
 * The subtrahend.
 *
 * @example
 * // subtract a scalar from a signal
 * const sub = new Tone.Subtract(1);
 * const sig = new Tone.Signal(4).connect(sub);
 * // the output of sub is 3.
 * @example
 * // subtract two signals
 * const sub = new Tone.Subtract();
 * const sigA = new Tone.Signal(10);
 * const sigB = new Tone.Signal(2.5);
 * sigA.connect(sub);
 * sigB.connect(sub.subtrahend);
 * // output of sub is 7.5
 * @category Signal
 */
class Subtract extends _Signal.Signal {
  constructor() {
    super(Object.assign((0, _Defaults.optionsFromArguments)(Subtract.getDefaults(), arguments, ["value"])));
    this.override = false;
    this.name = "Subtract";
    /**
     * the summing node
     */

    this._sum = new _Gain.Gain({
      context: this.context
    });
    this.input = this._sum;
    this.output = this._sum;
    /**
     * Negate the input of the second input before connecting it to the summing node.
     */

    this._neg = new _Negate.Negate({
      context: this.context
    });
    /**
     * The value which is subtracted from the main signal
     */

    this.subtrahend = this._param;
    (0, _ToneAudioNode.connectSeries)(this._constantSource, this._neg, this._sum);
  }

  static getDefaults() {
    return Object.assign(_Signal.Signal.getDefaults(), {
      value: 0
    });
  }

  dispose() {
    super.dispose();

    this._neg.dispose();

    this._sum.dispose();

    return this;
  }

}

exports.Subtract = Subtract;
},{"../core/context/ToneAudioNode":"../node_modules/tone/build/esm/core/context/ToneAudioNode.js","../core/context/Gain":"../node_modules/tone/build/esm/core/context/Gain.js","../core/util/Defaults":"../node_modules/tone/build/esm/core/util/Defaults.js","../signal/Negate":"../node_modules/tone/build/esm/signal/Negate.js","../signal/Signal":"../node_modules/tone/build/esm/signal/Signal.js"}],"../node_modules/tone/build/esm/signal/GreaterThanZero.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.GreaterThanZero = void 0;

var _SignalOperator = require("./SignalOperator");

var _Multiply = require("./Multiply");

var _WaveShaper = require("./WaveShaper");

var _Defaults = require("../core/util/Defaults");

/**
 * GreaterThanZero outputs 1 when the input is strictly greater than zero
 * @example
 * return Tone.Offline(() => {
 * 	const gt0 = new Tone.GreaterThanZero().toDestination();
 * 	const sig = new Tone.Signal(0.5).connect(gt0);
 * 	sig.setValueAtTime(-1, 0.05);
 * }, 0.1, 1);
 */
class GreaterThanZero extends _SignalOperator.SignalOperator {
  constructor() {
    super(Object.assign((0, _Defaults.optionsFromArguments)(GreaterThanZero.getDefaults(), arguments)));
    this.name = "GreaterThanZero";
    this._thresh = this.output = new _WaveShaper.WaveShaper({
      context: this.context,
      length: 127,
      mapping: val => {
        if (val <= 0) {
          return 0;
        } else {
          return 1;
        }
      }
    });
    this._scale = this.input = new _Multiply.Multiply({
      context: this.context,
      value: 10000
    }); // connections

    this._scale.connect(this._thresh);
  }

  dispose() {
    super.dispose();

    this._scale.dispose();

    this._thresh.dispose();

    return this;
  }

}

exports.GreaterThanZero = GreaterThanZero;
},{"./SignalOperator":"../node_modules/tone/build/esm/signal/SignalOperator.js","./Multiply":"../node_modules/tone/build/esm/signal/Multiply.js","./WaveShaper":"../node_modules/tone/build/esm/signal/WaveShaper.js","../core/util/Defaults":"../node_modules/tone/build/esm/core/util/Defaults.js"}],"../node_modules/tone/build/esm/signal/GreaterThan.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.GreaterThan = void 0;

var _Defaults = require("../core/util/Defaults");

var _Subtract = require("./Subtract");

var _Signal = require("./Signal");

var _GreaterThanZero = require("./GreaterThanZero");

var _Interface = require("../core/util/Interface");

/**
 * Output 1 if the signal is greater than the value, otherwise outputs 0.
 * can compare two signals or a signal and a number.
 *
 * @example
 * return Tone.Offline(() => {
 * 	const gt = new Tone.GreaterThan(2).toDestination();
 * 	const sig = new Tone.Signal(4).connect(gt);
 * }, 0.1, 1);
 */
class GreaterThan extends _Signal.Signal {
  constructor() {
    super(Object.assign((0, _Defaults.optionsFromArguments)(GreaterThan.getDefaults(), arguments, ["value"])));
    this.name = "GreaterThan";
    this.override = false;
    const options = (0, _Defaults.optionsFromArguments)(GreaterThan.getDefaults(), arguments, ["value"]);
    this._subtract = this.input = new _Subtract.Subtract({
      context: this.context,
      value: options.value
    });
    this._gtz = this.output = new _GreaterThanZero.GreaterThanZero({
      context: this.context
    });
    this.comparator = this._param = this._subtract.subtrahend;
    (0, _Interface.readOnly)(this, "comparator"); // connect

    this._subtract.connect(this._gtz);
  }

  static getDefaults() {
    return Object.assign(_Signal.Signal.getDefaults(), {
      value: 0
    });
  }

  dispose() {
    super.dispose();

    this._gtz.dispose();

    this._subtract.dispose();

    this.comparator.dispose();
    return this;
  }

}

exports.GreaterThan = GreaterThan;
},{"../core/util/Defaults":"../node_modules/tone/build/esm/core/util/Defaults.js","./Subtract":"../node_modules/tone/build/esm/signal/Subtract.js","./Signal":"../node_modules/tone/build/esm/signal/Signal.js","./GreaterThanZero":"../node_modules/tone/build/esm/signal/GreaterThanZero.js","../core/util/Interface":"../node_modules/tone/build/esm/core/util/Interface.js"}],"../node_modules/tone/build/esm/signal/Pow.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Pow = void 0;

var _WaveShaper = require("./WaveShaper");

var _Defaults = require("../core/util/Defaults");

var _SignalOperator = require("./SignalOperator");

/**
 * Pow applies an exponent to the incoming signal. The incoming signal must be AudioRange [-1, 1]
 *
 * @example
 * const pow = new Tone.Pow(2);
 * const sig = new Tone.Signal(0.5).connect(pow);
 * // output of pow is 0.25.
 * @category Signal
 */
class Pow extends _SignalOperator.SignalOperator {
  constructor() {
    super(Object.assign((0, _Defaults.optionsFromArguments)(Pow.getDefaults(), arguments, ["value"])));
    this.name = "Pow";
    const options = (0, _Defaults.optionsFromArguments)(Pow.getDefaults(), arguments, ["value"]);
    this._exponentScaler = this.input = this.output = new _WaveShaper.WaveShaper({
      context: this.context,
      mapping: this._expFunc(options.value),
      length: 8192
    });
    this._exponent = options.value;
  }

  static getDefaults() {
    return Object.assign(_SignalOperator.SignalOperator.getDefaults(), {
      value: 1
    });
  }
  /**
   * the function which maps the waveshaper
   * @param exponent exponent value
   */


  _expFunc(exponent) {
    return val => {
      return Math.pow(Math.abs(val), exponent);
    };
  }
  /**
   * The value of the exponent.
   */


  get value() {
    return this._exponent;
  }

  set value(exponent) {
    this._exponent = exponent;

    this._exponentScaler.setMap(this._expFunc(this._exponent));
  }
  /**
   * Clean up.
   */


  dispose() {
    super.dispose();

    this._exponentScaler.dispose();

    return this;
  }

}

exports.Pow = Pow;
},{"./WaveShaper":"../node_modules/tone/build/esm/signal/WaveShaper.js","../core/util/Defaults":"../node_modules/tone/build/esm/core/util/Defaults.js","./SignalOperator":"../node_modules/tone/build/esm/signal/SignalOperator.js"}],"../node_modules/tone/build/esm/signal/ScaleExp.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ScaleExp = void 0;

var _Scale = require("./Scale");

var _Defaults = require("../core/util/Defaults");

var _Pow = require("./Pow");

/**
 * Performs an exponential scaling on an input signal.
 * Scales a NormalRange value [0,1] exponentially
 * to the output range of outputMin to outputMax.
 * @example
 * const scaleExp = new Tone.ScaleExp(0, 100, 2);
 * const signal = new Tone.Signal(0.5).connect(scaleExp);
 */
class ScaleExp extends _Scale.Scale {
  constructor() {
    super(Object.assign((0, _Defaults.optionsFromArguments)(ScaleExp.getDefaults(), arguments, ["min", "max", "exponent"])));
    this.name = "ScaleExp";
    const options = (0, _Defaults.optionsFromArguments)(ScaleExp.getDefaults(), arguments, ["min", "max", "exponent"]);
    this.input = this._exp = new _Pow.Pow({
      context: this.context,
      value: options.exponent
    });

    this._exp.connect(this._mult);
  }

  static getDefaults() {
    return Object.assign(_Scale.Scale.getDefaults(), {
      exponent: 1
    });
  }
  /**
   * Instead of interpolating linearly between the [[min]] and
   * [[max]] values, setting the exponent will interpolate between
   * the two values with an exponential curve.
   */


  get exponent() {
    return this._exp.value;
  }

  set exponent(exp) {
    this._exp.value = exp;
  }

  dispose() {
    super.dispose();

    this._exp.dispose();

    return this;
  }

}

exports.ScaleExp = ScaleExp;
},{"./Scale":"../node_modules/tone/build/esm/signal/Scale.js","../core/util/Defaults":"../node_modules/tone/build/esm/core/util/Defaults.js","./Pow":"../node_modules/tone/build/esm/signal/Pow.js"}],"../node_modules/tone/build/esm/signal/SyncedSignal.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SyncedSignal = void 0;

var _Signal = require("./Signal");

var _Defaults = require("../core/util/Defaults");

var _TransportTime = require("../core/type/TransportTime");

var _ToneConstantSource = require("./ToneConstantSource");

/**
 * Adds the ability to synchronize the signal to the [[Transport]]
 */
class SyncedSignal extends _Signal.Signal {
  constructor() {
    super((0, _Defaults.optionsFromArguments)(_Signal.Signal.getDefaults(), arguments, ["value", "units"]));
    this.name = "SyncedSignal";
    /**
     * Don't override when something is connected to the input
     */

    this.override = false;
    const options = (0, _Defaults.optionsFromArguments)(_Signal.Signal.getDefaults(), arguments, ["value", "units"]);
    this._lastVal = options.value;
    this._synced = this.context.transport.scheduleRepeat(this._onTick.bind(this), "1i");
    this._syncedCallback = this._anchorValue.bind(this);
    this.context.transport.on("start", this._syncedCallback);
    this.context.transport.on("pause", this._syncedCallback);
    this.context.transport.on("stop", this._syncedCallback); // disconnect the constant source from the output and replace it with another one

    this._constantSource.disconnect();

    this._constantSource.stop(0); // create a new one


    this._constantSource = this.output = new _ToneConstantSource.ToneConstantSource({
      context: this.context,
      offset: options.value,
      units: options.units
    }).start(0);
    this.setValueAtTime(options.value, 0);
  }
  /**
   * Callback which is invoked every tick.
   */


  _onTick(time) {
    const val = super.getValueAtTime(this.context.transport.seconds); // approximate ramp curves with linear ramps

    if (this._lastVal !== val) {
      this._lastVal = val;

      this._constantSource.offset.setValueAtTime(val, time);
    }
  }
  /**
   * Anchor the value at the start and stop of the Transport
   */


  _anchorValue(time) {
    const val = super.getValueAtTime(this.context.transport.seconds);
    this._lastVal = val;

    this._constantSource.offset.cancelAndHoldAtTime(time);

    this._constantSource.offset.setValueAtTime(val, time);
  }

  getValueAtTime(time) {
    const computedTime = new _TransportTime.TransportTimeClass(this.context, time).toSeconds();
    return super.getValueAtTime(computedTime);
  }

  setValueAtTime(value, time) {
    const computedTime = new _TransportTime.TransportTimeClass(this.context, time).toSeconds();
    super.setValueAtTime(value, computedTime);
    return this;
  }

  linearRampToValueAtTime(value, time) {
    const computedTime = new _TransportTime.TransportTimeClass(this.context, time).toSeconds();
    super.linearRampToValueAtTime(value, computedTime);
    return this;
  }

  exponentialRampToValueAtTime(value, time) {
    const computedTime = new _TransportTime.TransportTimeClass(this.context, time).toSeconds();
    super.exponentialRampToValueAtTime(value, computedTime);
    return this;
  }

  setTargetAtTime(value, startTime, timeConstant) {
    const computedTime = new _TransportTime.TransportTimeClass(this.context, startTime).toSeconds();
    super.setTargetAtTime(value, computedTime, timeConstant);
    return this;
  }

  cancelScheduledValues(startTime) {
    const computedTime = new _TransportTime.TransportTimeClass(this.context, startTime).toSeconds();
    super.cancelScheduledValues(computedTime);
    return this;
  }

  setValueCurveAtTime(values, startTime, duration, scaling) {
    const computedTime = new _TransportTime.TransportTimeClass(this.context, startTime).toSeconds();
    duration = this.toSeconds(duration);
    super.setValueCurveAtTime(values, computedTime, duration, scaling);
    return this;
  }

  cancelAndHoldAtTime(time) {
    const computedTime = new _TransportTime.TransportTimeClass(this.context, time).toSeconds();
    super.cancelAndHoldAtTime(computedTime);
    return this;
  }

  setRampPoint(time) {
    const computedTime = new _TransportTime.TransportTimeClass(this.context, time).toSeconds();
    super.setRampPoint(computedTime);
    return this;
  }

  exponentialRampTo(value, rampTime, startTime) {
    const computedTime = new _TransportTime.TransportTimeClass(this.context, startTime).toSeconds();
    super.exponentialRampTo(value, rampTime, computedTime);
    return this;
  }

  linearRampTo(value, rampTime, startTime) {
    const computedTime = new _TransportTime.TransportTimeClass(this.context, startTime).toSeconds();
    super.linearRampTo(value, rampTime, computedTime);
    return this;
  }

  targetRampTo(value, rampTime, startTime) {
    const computedTime = new _TransportTime.TransportTimeClass(this.context, startTime).toSeconds();
    super.targetRampTo(value, rampTime, computedTime);
    return this;
  }

  dispose() {
    super.dispose();
    this.context.transport.clear(this._synced);
    this.context.transport.off("start", this._syncedCallback);
    this.context.transport.off("pause", this._syncedCallback);
    this.context.transport.off("stop", this._syncedCallback);

    this._constantSource.dispose();

    return this;
  }

}

exports.SyncedSignal = SyncedSignal;
},{"./Signal":"../node_modules/tone/build/esm/signal/Signal.js","../core/util/Defaults":"../node_modules/tone/build/esm/core/util/Defaults.js","../core/type/TransportTime":"../node_modules/tone/build/esm/core/type/TransportTime.js","./ToneConstantSource":"../node_modules/tone/build/esm/signal/ToneConstantSource.js"}],"../node_modules/tone/build/esm/signal/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _Add = require("./Add");

Object.keys(_Add).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _Add[key];
    }
  });
});

var _Abs = require("./Abs");

Object.keys(_Abs).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _Abs[key];
    }
  });
});

var _AudioToGain = require("./AudioToGain");

Object.keys(_AudioToGain).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _AudioToGain[key];
    }
  });
});

var _GainToAudio = require("./GainToAudio");

Object.keys(_GainToAudio).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _GainToAudio[key];
    }
  });
});

var _GreaterThan = require("./GreaterThan");

Object.keys(_GreaterThan).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _GreaterThan[key];
    }
  });
});

var _GreaterThanZero = require("./GreaterThanZero");

Object.keys(_GreaterThanZero).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _GreaterThanZero[key];
    }
  });
});

var _Multiply = require("./Multiply");

Object.keys(_Multiply).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _Multiply[key];
    }
  });
});

var _Negate = require("./Negate");

Object.keys(_Negate).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _Negate[key];
    }
  });
});

var _Pow = require("./Pow");

Object.keys(_Pow).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _Pow[key];
    }
  });
});

var _Signal = require("./Signal");

Object.keys(_Signal).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _Signal[key];
    }
  });
});

var _Scale = require("./Scale");

Object.keys(_Scale).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _Scale[key];
    }
  });
});

var _ScaleExp = require("./ScaleExp");

Object.keys(_ScaleExp).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _ScaleExp[key];
    }
  });
});

var _Subtract = require("./Subtract");

Object.keys(_Subtract).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _Subtract[key];
    }
  });
});

var _SyncedSignal = require("./SyncedSignal");

Object.keys(_SyncedSignal).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _SyncedSignal[key];
    }
  });
});

var _WaveShaper = require("./WaveShaper");

Object.keys(_WaveShaper).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _WaveShaper[key];
    }
  });
});

var _Zero = require("./Zero");

Object.keys(_Zero).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _Zero[key];
    }
  });
});
},{"./Add":"../node_modules/tone/build/esm/signal/Add.js","./Abs":"../node_modules/tone/build/esm/signal/Abs.js","./AudioToGain":"../node_modules/tone/build/esm/signal/AudioToGain.js","./GainToAudio":"../node_modules/tone/build/esm/signal/GainToAudio.js","./GreaterThan":"../node_modules/tone/build/esm/signal/GreaterThan.js","./GreaterThanZero":"../node_modules/tone/build/esm/signal/GreaterThanZero.js","./Multiply":"../node_modules/tone/build/esm/signal/Multiply.js","./Negate":"../node_modules/tone/build/esm/signal/Negate.js","./Pow":"../node_modules/tone/build/esm/signal/Pow.js","./Signal":"../node_modules/tone/build/esm/signal/Signal.js","./Scale":"../node_modules/tone/build/esm/signal/Scale.js","./ScaleExp":"../node_modules/tone/build/esm/signal/ScaleExp.js","./Subtract":"../node_modules/tone/build/esm/signal/Subtract.js","./SyncedSignal":"../node_modules/tone/build/esm/signal/SyncedSignal.js","./WaveShaper":"../node_modules/tone/build/esm/signal/WaveShaper.js","./Zero":"../node_modules/tone/build/esm/signal/Zero.js"}],"../node_modules/tone/build/esm/component/envelope/Envelope.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Envelope = void 0;

var _tslib = require("tslib");

var _ToneAudioNode = require("../../core/context/ToneAudioNode");

var _Defaults = require("../../core/util/Defaults");

var _TypeCheck = require("../../core/util/TypeCheck");

var _Signal = require("../../signal/Signal");

var _OfflineContext = require("../../core/context/OfflineContext");

var _Debug = require("../../core/util/Debug");

var _Decorator = require("../../core/util/Decorator");

/**
 * Envelope is an [ADSR](https://en.wikipedia.org/wiki/Synthesizer#ADSR_envelope)
 * envelope generator. Envelope outputs a signal which
 * can be connected to an AudioParam or Tone.Signal.
 * ```
 *           /\
 *          /  \
 *         /    \
 *        /      \
 *       /        \___________
 *      /                     \
 *     /                       \
 *    /                         \
 *   /                           \
 * ```
 * @example
 * return Tone.Offline(() => {
 * 	const env = new Tone.Envelope({
 * 		attack: 0.1,
 * 		decay: 0.2,
 * 		sustain: 0.5,
 * 		release: 0.8,
 * 	}).toDestination();
 * 	env.triggerAttackRelease(0.5);
 * }, 1.5, 1);
 * @category Component
 */
class Envelope extends _ToneAudioNode.ToneAudioNode {
  constructor() {
    super((0, _Defaults.optionsFromArguments)(Envelope.getDefaults(), arguments, ["attack", "decay", "sustain", "release"]));
    this.name = "Envelope";
    /**
     * the signal which is output.
     */

    this._sig = new _Signal.Signal({
      context: this.context,
      value: 0
    });
    /**
     * The output signal of the envelope
     */

    this.output = this._sig;
    /**
     * Envelope has no input
     */

    this.input = undefined;
    const options = (0, _Defaults.optionsFromArguments)(Envelope.getDefaults(), arguments, ["attack", "decay", "sustain", "release"]);
    this.attack = options.attack;
    this.decay = options.decay;
    this.sustain = options.sustain;
    this.release = options.release;
    this.attackCurve = options.attackCurve;
    this.releaseCurve = options.releaseCurve;
    this.decayCurve = options.decayCurve;
  }

  static getDefaults() {
    return Object.assign(_ToneAudioNode.ToneAudioNode.getDefaults(), {
      attack: 0.01,
      attackCurve: "linear",
      decay: 0.1,
      decayCurve: "exponential",
      release: 1,
      releaseCurve: "exponential",
      sustain: 0.5
    });
  }
  /**
   * Read the current value of the envelope. Useful for
   * synchronizing visual output to the envelope.
   */


  get value() {
    return this.getValueAtTime(this.now());
  }
  /**
   * Get the curve
   * @param  curve
   * @param  direction  In/Out
   * @return The curve name
   */


  _getCurve(curve, direction) {
    if ((0, _TypeCheck.isString)(curve)) {
      return curve;
    } else {
      // look up the name in the curves array
      let curveName;

      for (curveName in EnvelopeCurves) {
        if (EnvelopeCurves[curveName][direction] === curve) {
          return curveName;
        }
      } // return the custom curve


      return curve;
    }
  }
  /**
   * Assign a the curve to the given name using the direction
   * @param  name
   * @param  direction In/Out
   * @param  curve
   */


  _setCurve(name, direction, curve) {
    // check if it's a valid type
    if ((0, _TypeCheck.isString)(curve) && Reflect.has(EnvelopeCurves, curve)) {
      const curveDef = EnvelopeCurves[curve];

      if ((0, _TypeCheck.isObject)(curveDef)) {
        if (name !== "_decayCurve") {
          this[name] = curveDef[direction];
        }
      } else {
        this[name] = curveDef;
      }
    } else if ((0, _TypeCheck.isArray)(curve) && name !== "_decayCurve") {
      this[name] = curve;
    } else {
      throw new Error("Envelope: invalid curve: " + curve);
    }
  }
  /**
   * The shape of the attack.
   * Can be any of these strings:
   * * "linear"
   * * "exponential"
   * * "sine"
   * * "cosine"
   * * "bounce"
   * * "ripple"
   * * "step"
   *
   * Can also be an array which describes the curve. Values
   * in the array are evenly subdivided and linearly
   * interpolated over the duration of the attack.
   * @example
   * return Tone.Offline(() => {
   * 	const env = new Tone.Envelope(0.4).toDestination();
   * 	env.attackCurve = "linear";
   * 	env.triggerAttack();
   * }, 1, 1);
   */


  get attackCurve() {
    return this._getCurve(this._attackCurve, "In");
  }

  set attackCurve(curve) {
    this._setCurve("_attackCurve", "In", curve);
  }
  /**
   * The shape of the release. See the attack curve types.
   * @example
   * return Tone.Offline(() => {
   * 	const env = new Tone.Envelope({
   * 		release: 0.8
   * 	}).toDestination();
   * 	env.triggerAttack();
   * 	// release curve could also be defined by an array
   * 	env.releaseCurve = [1, 0.3, 0.4, 0.2, 0.7, 0];
   * 	env.triggerRelease(0.2);
   * }, 1, 1);
   */


  get releaseCurve() {
    return this._getCurve(this._releaseCurve, "Out");
  }

  set releaseCurve(curve) {
    this._setCurve("_releaseCurve", "Out", curve);
  }
  /**
   * The shape of the decay either "linear" or "exponential"
   * @example
   * return Tone.Offline(() => {
   * 	const env = new Tone.Envelope({
   * 		sustain: 0.1,
   * 		decay: 0.5
   * 	}).toDestination();
   * 	env.decayCurve = "linear";
   * 	env.triggerAttack();
   * }, 1, 1);
   */


  get decayCurve() {
    return this._decayCurve;
  }

  set decayCurve(curve) {
    (0, _Debug.assert)(["linear", "exponential"].some(c => c === curve), `Invalid envelope curve: ${curve}`);
    this._decayCurve = curve;
  }
  /**
   * Trigger the attack/decay portion of the ADSR envelope.
   * @param  time When the attack should start.
   * @param velocity The velocity of the envelope scales the vales.
   *                             number between 0-1
   * @example
   * const env = new Tone.AmplitudeEnvelope().toDestination();
   * const osc = new Tone.Oscillator().connect(env).start();
   * // trigger the attack 0.5 seconds from now with a velocity of 0.2
   * env.triggerAttack("+0.5", 0.2);
   */


  triggerAttack(time, velocity = 1) {
    this.log("triggerAttack", time, velocity);
    time = this.toSeconds(time);
    const originalAttack = this.toSeconds(this.attack);
    let attack = originalAttack;
    const decay = this.toSeconds(this.decay); // check if it's not a complete attack

    const currentValue = this.getValueAtTime(time);

    if (currentValue > 0) {
      // subtract the current value from the attack time
      const attackRate = 1 / attack;
      const remainingDistance = 1 - currentValue; // the attack is now the remaining time

      attack = remainingDistance / attackRate;
    } // attack


    if (attack < this.sampleTime) {
      this._sig.cancelScheduledValues(time); // case where the attack time is 0 should set instantly


      this._sig.setValueAtTime(velocity, time);
    } else if (this._attackCurve === "linear") {
      this._sig.linearRampTo(velocity, attack, time);
    } else if (this._attackCurve === "exponential") {
      this._sig.targetRampTo(velocity, attack, time);
    } else {
      this._sig.cancelAndHoldAtTime(time);

      let curve = this._attackCurve; // find the starting position in the curve

      for (let i = 1; i < curve.length; i++) {
        // the starting index is between the two values
        if (curve[i - 1] <= currentValue && currentValue <= curve[i]) {
          curve = this._attackCurve.slice(i); // the first index is the current value

          curve[0] = currentValue;
          break;
        }
      }

      this._sig.setValueCurveAtTime(curve, time, attack, velocity);
    } // decay


    if (decay && this.sustain < 1) {
      const decayValue = velocity * this.sustain;
      const decayStart = time + attack;
      this.log("decay", decayStart);

      if (this._decayCurve === "linear") {
        this._sig.linearRampToValueAtTime(decayValue, decay + decayStart);
      } else {
        this._sig.exponentialApproachValueAtTime(decayValue, decayStart, decay);
      }
    }

    return this;
  }
  /**
   * Triggers the release of the envelope.
   * @param  time When the release portion of the envelope should start.
   * @example
   * const env = new Tone.AmplitudeEnvelope().toDestination();
   * const osc = new Tone.Oscillator({
   * 	type: "sawtooth"
   * }).connect(env).start();
   * env.triggerAttack();
   * // trigger the release half a second after the attack
   * env.triggerRelease("+0.5");
   */


  triggerRelease(time) {
    this.log("triggerRelease", time);
    time = this.toSeconds(time);
    const currentValue = this.getValueAtTime(time);

    if (currentValue > 0) {
      const release = this.toSeconds(this.release);

      if (release < this.sampleTime) {
        this._sig.setValueAtTime(0, time);
      } else if (this._releaseCurve === "linear") {
        this._sig.linearRampTo(0, release, time);
      } else if (this._releaseCurve === "exponential") {
        this._sig.targetRampTo(0, release, time);
      } else {
        (0, _Debug.assert)((0, _TypeCheck.isArray)(this._releaseCurve), "releaseCurve must be either 'linear', 'exponential' or an array");

        this._sig.cancelAndHoldAtTime(time);

        this._sig.setValueCurveAtTime(this._releaseCurve, time, release, currentValue);
      }
    }

    return this;
  }
  /**
   * Get the scheduled value at the given time. This will
   * return the unconverted (raw) value.
   * @example
   * const env = new Tone.Envelope(0.5, 1, 0.4, 2);
   * env.triggerAttackRelease(2);
   * setInterval(() => console.log(env.getValueAtTime), 100);
   */


  getValueAtTime(time) {
    return this._sig.getValueAtTime(time);
  }
  /**
   * triggerAttackRelease is shorthand for triggerAttack, then waiting
   * some duration, then triggerRelease.
   * @param duration The duration of the sustain.
   * @param time When the attack should be triggered.
   * @param velocity The velocity of the envelope.
   * @example
   * const env = new Tone.AmplitudeEnvelope().toDestination();
   * const osc = new Tone.Oscillator().connect(env).start();
   * // trigger the release 0.5 seconds after the attack
   * env.triggerAttackRelease(0.5);
   */


  triggerAttackRelease(duration, time, velocity = 1) {
    time = this.toSeconds(time);
    this.triggerAttack(time, velocity);
    this.triggerRelease(time + this.toSeconds(duration));
    return this;
  }
  /**
   * Cancels all scheduled envelope changes after the given time.
   */


  cancel(after) {
    this._sig.cancelScheduledValues(this.toSeconds(after));

    return this;
  }
  /**
   * Connect the envelope to a destination node.
   */


  connect(destination, outputNumber = 0, inputNumber = 0) {
    (0, _Signal.connectSignal)(this, destination, outputNumber, inputNumber);
    return this;
  }
  /**
   * Render the envelope curve to an array of the given length.
   * Good for visualizing the envelope curve. Rescales the duration of the
   * envelope to fit the length.
   */


  asArray(length = 1024) {
    return (0, _tslib.__awaiter)(this, void 0, void 0, function* () {
      const duration = length / this.context.sampleRate;
      const context = new _OfflineContext.OfflineContext(1, duration, this.context.sampleRate); // normalize the ADSR for the given duration with 20% sustain time

      const attackPortion = this.toSeconds(this.attack) + this.toSeconds(this.decay);
      const envelopeDuration = attackPortion + this.toSeconds(this.release);
      const sustainTime = envelopeDuration * 0.1;
      const totalDuration = envelopeDuration + sustainTime; // @ts-ignore

      const clone = new this.constructor(Object.assign(this.get(), {
        attack: duration * this.toSeconds(this.attack) / totalDuration,
        decay: duration * this.toSeconds(this.decay) / totalDuration,
        release: duration * this.toSeconds(this.release) / totalDuration,
        context
      }));

      clone._sig.toDestination();

      clone.triggerAttackRelease(duration * (attackPortion + sustainTime) / totalDuration, 0);
      const buffer = yield context.render();
      return buffer.getChannelData(0);
    });
  }

  dispose() {
    super.dispose();

    this._sig.dispose();

    return this;
  }

}

exports.Envelope = Envelope;
(0, _tslib.__decorate)([(0, _Decorator.timeRange)(0)], Envelope.prototype, "attack", void 0);
(0, _tslib.__decorate)([(0, _Decorator.timeRange)(0)], Envelope.prototype, "decay", void 0);
(0, _tslib.__decorate)([(0, _Decorator.range)(0, 1)], Envelope.prototype, "sustain", void 0);
(0, _tslib.__decorate)([(0, _Decorator.timeRange)(0)], Envelope.prototype, "release", void 0);
/**
 * Generate some complex envelope curves.
 */

const EnvelopeCurves = (() => {
  const curveLen = 128;
  let i;
  let k; // cosine curve

  const cosineCurve = [];

  for (i = 0; i < curveLen; i++) {
    cosineCurve[i] = Math.sin(i / (curveLen - 1) * (Math.PI / 2));
  } // ripple curve


  const rippleCurve = [];
  const rippleCurveFreq = 6.4;

  for (i = 0; i < curveLen - 1; i++) {
    k = i / (curveLen - 1);
    const sineWave = Math.sin(k * (Math.PI * 2) * rippleCurveFreq - Math.PI / 2) + 1;
    rippleCurve[i] = sineWave / 10 + k * 0.83;
  }

  rippleCurve[curveLen - 1] = 1; // stairs curve

  const stairsCurve = [];
  const steps = 5;

  for (i = 0; i < curveLen; i++) {
    stairsCurve[i] = Math.ceil(i / (curveLen - 1) * steps) / steps;
  } // in-out easing curve


  const sineCurve = [];

  for (i = 0; i < curveLen; i++) {
    k = i / (curveLen - 1);
    sineCurve[i] = 0.5 * (1 - Math.cos(Math.PI * k));
  } // a bounce curve


  const bounceCurve = [];

  for (i = 0; i < curveLen; i++) {
    k = i / (curveLen - 1);
    const freq = Math.pow(k, 3) * 4 + 0.2;
    const val = Math.cos(freq * Math.PI * 2 * k);
    bounceCurve[i] = Math.abs(val * (1 - k));
  }
  /**
   * Invert a value curve to make it work for the release
   */


  function invertCurve(curve) {
    const out = new Array(curve.length);

    for (let j = 0; j < curve.length; j++) {
      out[j] = 1 - curve[j];
    }

    return out;
  }
  /**
   * reverse the curve
   */


  function reverseCurve(curve) {
    return curve.slice(0).reverse();
  }
  /**
   * attack and release curve arrays
   */


  return {
    bounce: {
      In: invertCurve(bounceCurve),
      Out: bounceCurve
    },
    cosine: {
      In: cosineCurve,
      Out: reverseCurve(cosineCurve)
    },
    exponential: "exponential",
    linear: "linear",
    ripple: {
      In: rippleCurve,
      Out: invertCurve(rippleCurve)
    },
    sine: {
      In: sineCurve,
      Out: invertCurve(sineCurve)
    },
    step: {
      In: stairsCurve,
      Out: invertCurve(stairsCurve)
    }
  };
})();
},{"tslib":"../node_modules/tslib/tslib.es6.js","../../core/context/ToneAudioNode":"../node_modules/tone/build/esm/core/context/ToneAudioNode.js","../../core/util/Defaults":"../node_modules/tone/build/esm/core/util/Defaults.js","../../core/util/TypeCheck":"../node_modules/tone/build/esm/core/util/TypeCheck.js","../../signal/Signal":"../node_modules/tone/build/esm/signal/Signal.js","../../core/context/OfflineContext":"../node_modules/tone/build/esm/core/context/OfflineContext.js","../../core/util/Debug":"../node_modules/tone/build/esm/core/util/Debug.js","../../core/util/Decorator":"../node_modules/tone/build/esm/core/util/Decorator.js"}],"../node_modules/tone/build/esm/instrument/Instrument.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Instrument = void 0;

var _Volume = require("../component/channel/Volume");

var _ToneAudioNode = require("../core/context/ToneAudioNode");

var _Defaults = require("../core/util/Defaults");

var _Interface = require("../core/util/Interface");

/**
 * Base-class for all instruments
 */
class Instrument extends _ToneAudioNode.ToneAudioNode {
  constructor() {
    super((0, _Defaults.optionsFromArguments)(Instrument.getDefaults(), arguments));
    /**
     * Keep track of all events scheduled to the transport
     * when the instrument is 'synced'
     */

    this._scheduledEvents = [];
    /**
     * If the instrument is currently synced
     */

    this._synced = false;
    this._original_triggerAttack = this.triggerAttack;
    this._original_triggerRelease = this.triggerRelease;
    const options = (0, _Defaults.optionsFromArguments)(Instrument.getDefaults(), arguments);
    this._volume = this.output = new _Volume.Volume({
      context: this.context,
      volume: options.volume
    });
    this.volume = this._volume.volume;
    (0, _Interface.readOnly)(this, "volume");
  }

  static getDefaults() {
    return Object.assign(_ToneAudioNode.ToneAudioNode.getDefaults(), {
      volume: 0
    });
  }
  /**
   * Sync the instrument to the Transport. All subsequent calls of
   * [[triggerAttack]] and [[triggerRelease]] will be scheduled along the transport.
   * @example
   * const fmSynth = new Tone.FMSynth().toDestination();
   * fmSynth.volume.value = -6;
   * fmSynth.sync();
   * // schedule 3 notes when the transport first starts
   * fmSynth.triggerAttackRelease("C4", "8n", 0);
   * fmSynth.triggerAttackRelease("E4", "8n", "8n");
   * fmSynth.triggerAttackRelease("G4", "8n", "4n");
   * // start the transport to hear the notes
   * Tone.Transport.start();
   */


  sync() {
    if (!this._synced) {
      this._synced = true;

      this._syncMethod("triggerAttack", 1);

      this._syncMethod("triggerRelease", 0);
    }

    return this;
  }
  /**
   * Wrap the given method so that it can be synchronized
   * @param method Which method to wrap and sync
   * @param  timePosition What position the time argument appears in
   */


  _syncMethod(method, timePosition) {
    const originalMethod = this["_original_" + method] = this[method];

    this[method] = (...args) => {
      const time = args[timePosition];
      const id = this.context.transport.schedule(t => {
        args[timePosition] = t;
        originalMethod.apply(this, args);
      }, time);

      this._scheduledEvents.push(id);
    };
  }
  /**
   * Unsync the instrument from the Transport
   */


  unsync() {
    this._scheduledEvents.forEach(id => this.context.transport.clear(id));

    this._scheduledEvents = [];

    if (this._synced) {
      this._synced = false;
      this.triggerAttack = this._original_triggerAttack;
      this.triggerRelease = this._original_triggerRelease;
    }

    return this;
  }
  /**
   * Trigger the attack and then the release after the duration.
   * @param  note     The note to trigger.
   * @param  duration How long the note should be held for before
   *                         triggering the release. This value must be greater than 0.
   * @param time  When the note should be triggered.
   * @param  velocity The velocity the note should be triggered at.
   * @example
   * const synth = new Tone.Synth().toDestination();
   * // trigger "C4" for the duration of an 8th note
   * synth.triggerAttackRelease("C4", "8n");
   */


  triggerAttackRelease(note, duration, time, velocity) {
    const computedTime = this.toSeconds(time);
    const computedDuration = this.toSeconds(duration);
    this.triggerAttack(note, computedTime, velocity);
    this.triggerRelease(computedTime + computedDuration);
    return this;
  }
  /**
   * clean up
   * @returns {Instrument} this
   */


  dispose() {
    super.dispose();

    this._volume.dispose();

    this.unsync();
    this._scheduledEvents = [];
    return this;
  }

}

exports.Instrument = Instrument;
},{"../component/channel/Volume":"../node_modules/tone/build/esm/component/channel/Volume.js","../core/context/ToneAudioNode":"../node_modules/tone/build/esm/core/context/ToneAudioNode.js","../core/util/Defaults":"../node_modules/tone/build/esm/core/util/Defaults.js","../core/util/Interface":"../node_modules/tone/build/esm/core/util/Interface.js"}],"../node_modules/tone/build/esm/instrument/Monophonic.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Monophonic = void 0;

var _tslib = require("tslib");

var _Frequency = require("../core/type/Frequency");

var _Defaults = require("../core/util/Defaults");

var _Interface = require("../core/util/Interface");

var _Instrument = require("../instrument/Instrument");

var _Decorator = require("../core/util/Decorator");

/**
 * Abstract base class for other monophonic instruments to extend.
 */
class Monophonic extends _Instrument.Instrument {
  constructor() {
    super((0, _Defaults.optionsFromArguments)(Monophonic.getDefaults(), arguments));
    const options = (0, _Defaults.optionsFromArguments)(Monophonic.getDefaults(), arguments);
    this.portamento = options.portamento;
    this.onsilence = options.onsilence;
  }

  static getDefaults() {
    return Object.assign(_Instrument.Instrument.getDefaults(), {
      detune: 0,
      onsilence: _Interface.noOp,
      portamento: 0
    });
  }
  /**
   * Trigger the attack of the note optionally with a given velocity.
   * @param  note The note to trigger.
   * @param  time When the note should start.
   * @param  velocity The velocity scaler determines how "loud" the note will be triggered.
   * @example
   * const synth = new Tone.Synth().toDestination();
   * // trigger the note a half second from now at half velocity
   * synth.triggerAttack("C4", "+0.5", 0.5);
   */


  triggerAttack(note, time, velocity = 1) {
    this.log("triggerAttack", note, time, velocity);
    const seconds = this.toSeconds(time);

    this._triggerEnvelopeAttack(seconds, velocity);

    this.setNote(note, seconds);
    return this;
  }
  /**
   * Trigger the release portion of the envelope
   * @param  time If no time is given, the release happens immediatly
   * @example
   * const synth = new Tone.Synth().toDestination();
   * synth.triggerAttack("C4");
   * // trigger the release a second from now
   * synth.triggerRelease("+1");
   */


  triggerRelease(time) {
    this.log("triggerRelease", time);
    const seconds = this.toSeconds(time);

    this._triggerEnvelopeRelease(seconds);

    return this;
  }
  /**
   * Set the note at the given time. If no time is given, the note
   * will set immediately.
   * @param note The note to change to.
   * @param  time The time when the note should be set.
   * @example
   * const synth = new Tone.Synth().toDestination();
   * synth.triggerAttack("C4");
   * // change to F#6 in one quarter note from now.
   * synth.setNote("F#6", "+4n");
   */


  setNote(note, time) {
    const computedTime = this.toSeconds(time);
    const computedFrequency = note instanceof _Frequency.FrequencyClass ? note.toFrequency() : note;

    if (this.portamento > 0 && this.getLevelAtTime(computedTime) > 0.05) {
      const portTime = this.toSeconds(this.portamento);
      this.frequency.exponentialRampTo(computedFrequency, portTime, computedTime);
    } else {
      this.frequency.setValueAtTime(computedFrequency, computedTime);
    }

    return this;
  }

}

exports.Monophonic = Monophonic;
(0, _tslib.__decorate)([(0, _Decorator.timeRange)(0)], Monophonic.prototype, "portamento", void 0);
},{"tslib":"../node_modules/tslib/tslib.es6.js","../core/type/Frequency":"../node_modules/tone/build/esm/core/type/Frequency.js","../core/util/Defaults":"../node_modules/tone/build/esm/core/util/Defaults.js","../core/util/Interface":"../node_modules/tone/build/esm/core/util/Interface.js","../instrument/Instrument":"../node_modules/tone/build/esm/instrument/Instrument.js","../core/util/Decorator":"../node_modules/tone/build/esm/core/util/Decorator.js"}],"../node_modules/tone/build/esm/component/envelope/AmplitudeEnvelope.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AmplitudeEnvelope = void 0;

var _Gain = require("../../core/context/Gain");

var _Defaults = require("../../core/util/Defaults");

var _Envelope = require("./Envelope");

/**
 * AmplitudeEnvelope is a Tone.Envelope connected to a gain node.
 * Unlike Tone.Envelope, which outputs the envelope's value, AmplitudeEnvelope accepts
 * an audio signal as the input and will apply the envelope to the amplitude
 * of the signal.
 * Read more about ADSR Envelopes on [Wikipedia](https://en.wikipedia.org/wiki/Synthesizer#ADSR_envelope).
 *
 * @example
 * return Tone.Offline(() => {
 * 	const ampEnv = new Tone.AmplitudeEnvelope({
 * 		attack: 0.1,
 * 		decay: 0.2,
 * 		sustain: 1.0,
 * 		release: 0.8
 * 	}).toDestination();
 * 	// create an oscillator and connect it
 * 	const osc = new Tone.Oscillator().connect(ampEnv).start();
 * 	// trigger the envelopes attack and release "8t" apart
 * 	ampEnv.triggerAttackRelease("8t");
 * }, 1.5, 1);
 * @category Component
 */
class AmplitudeEnvelope extends _Envelope.Envelope {
  constructor() {
    super((0, _Defaults.optionsFromArguments)(AmplitudeEnvelope.getDefaults(), arguments, ["attack", "decay", "sustain", "release"]));
    this.name = "AmplitudeEnvelope";
    this._gainNode = new _Gain.Gain({
      context: this.context,
      gain: 0
    });
    this.output = this._gainNode;
    this.input = this._gainNode;

    this._sig.connect(this._gainNode.gain);

    this.output = this._gainNode;
    this.input = this._gainNode;
  }
  /**
   * Clean up
   */


  dispose() {
    super.dispose();

    this._gainNode.dispose();

    return this;
  }

}

exports.AmplitudeEnvelope = AmplitudeEnvelope;
},{"../../core/context/Gain":"../node_modules/tone/build/esm/core/context/Gain.js","../../core/util/Defaults":"../node_modules/tone/build/esm/core/util/Defaults.js","./Envelope":"../node_modules/tone/build/esm/component/envelope/Envelope.js"}],"../node_modules/tone/build/esm/instrument/Synth.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Synth = void 0;

var _AmplitudeEnvelope = require("../component/envelope/AmplitudeEnvelope");

var _Envelope = require("../component/envelope/Envelope");

var _ToneAudioNode = require("../core/context/ToneAudioNode");

var _Defaults = require("../core/util/Defaults");

var _Interface = require("../core/util/Interface");

var _OmniOscillator = require("../source/oscillator/OmniOscillator");

var _Source = require("../source/Source");

var _Monophonic = require("./Monophonic");

/**
 * Synth is composed simply of a [[OmniOscillator]] routed through an [[AmplitudeEnvelope]].
 * ```
 * +----------------+   +-------------------+
 * | OmniOscillator +>--> AmplitudeEnvelope +>--> Output
 * +----------------+   +-------------------+
 * ```
 * @example
 * const synth = new Tone.Synth().toDestination();
 * synth.triggerAttackRelease("C4", "8n");
 * @category Instrument
 */
class Synth extends _Monophonic.Monophonic {
  constructor() {
    super((0, _Defaults.optionsFromArguments)(Synth.getDefaults(), arguments));
    this.name = "Synth";
    const options = (0, _Defaults.optionsFromArguments)(Synth.getDefaults(), arguments);
    this.oscillator = new _OmniOscillator.OmniOscillator(Object.assign({
      context: this.context,
      detune: options.detune,
      onstop: () => this.onsilence(this)
    }, options.oscillator));
    this.frequency = this.oscillator.frequency;
    this.detune = this.oscillator.detune;
    this.envelope = new _AmplitudeEnvelope.AmplitudeEnvelope(Object.assign({
      context: this.context
    }, options.envelope)); // connect the oscillators to the output

    this.oscillator.chain(this.envelope, this.output);
    (0, _Interface.readOnly)(this, ["oscillator", "frequency", "detune", "envelope"]);
  }

  static getDefaults() {
    return Object.assign(_Monophonic.Monophonic.getDefaults(), {
      envelope: Object.assign((0, _Defaults.omitFromObject)(_Envelope.Envelope.getDefaults(), Object.keys(_ToneAudioNode.ToneAudioNode.getDefaults())), {
        attack: 0.005,
        decay: 0.1,
        release: 1,
        sustain: 0.3
      }),
      oscillator: Object.assign((0, _Defaults.omitFromObject)(_OmniOscillator.OmniOscillator.getDefaults(), [...Object.keys(_Source.Source.getDefaults()), "frequency", "detune"]), {
        type: "triangle"
      })
    });
  }
  /**
   * start the attack portion of the envelope
   * @param time the time the attack should start
   * @param velocity the velocity of the note (0-1)
   */


  _triggerEnvelopeAttack(time, velocity) {
    // the envelopes
    this.envelope.triggerAttack(time, velocity);
    this.oscillator.start(time); // if there is no release portion, stop the oscillator

    if (this.envelope.sustain === 0) {
      const computedAttack = this.toSeconds(this.envelope.attack);
      const computedDecay = this.toSeconds(this.envelope.decay);
      this.oscillator.stop(time + computedAttack + computedDecay);
    }
  }
  /**
   * start the release portion of the envelope
   * @param time the time the release should start
   */


  _triggerEnvelopeRelease(time) {
    this.envelope.triggerRelease(time);
    this.oscillator.stop(time + this.toSeconds(this.envelope.release));
  }

  getLevelAtTime(time) {
    time = this.toSeconds(time);
    return this.envelope.getValueAtTime(time);
  }
  /**
   * clean up
   */


  dispose() {
    super.dispose();
    this.oscillator.dispose();
    this.envelope.dispose();
    return this;
  }

}

exports.Synth = Synth;
},{"../component/envelope/AmplitudeEnvelope":"../node_modules/tone/build/esm/component/envelope/AmplitudeEnvelope.js","../component/envelope/Envelope":"../node_modules/tone/build/esm/component/envelope/Envelope.js","../core/context/ToneAudioNode":"../node_modules/tone/build/esm/core/context/ToneAudioNode.js","../core/util/Defaults":"../node_modules/tone/build/esm/core/util/Defaults.js","../core/util/Interface":"../node_modules/tone/build/esm/core/util/Interface.js","../source/oscillator/OmniOscillator":"../node_modules/tone/build/esm/source/oscillator/OmniOscillator.js","../source/Source":"../node_modules/tone/build/esm/source/Source.js","./Monophonic":"../node_modules/tone/build/esm/instrument/Monophonic.js"}],"../node_modules/tone/build/esm/instrument/ModulationSynth.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ModulationSynth = void 0;

var _Signal = require("../signal/Signal");

var _Multiply = require("../signal/Multiply");

var _Gain = require("../core/context/Gain");

var _Envelope = require("../component/envelope/Envelope");

var _ToneAudioNode = require("../core/context/ToneAudioNode");

var _Monophonic = require("./Monophonic");

var _OmniOscillator = require("../source/oscillator/OmniOscillator");

var _Source = require("../source/Source");

var _Synth = require("./Synth");

var _Interface = require("../core/util/Interface");

var _Defaults = require("../core/util/Defaults");

/**
 * Base class for both AM and FM synths
 */
class ModulationSynth extends _Monophonic.Monophonic {
  constructor() {
    super((0, _Defaults.optionsFromArguments)(ModulationSynth.getDefaults(), arguments));
    this.name = "ModulationSynth";
    const options = (0, _Defaults.optionsFromArguments)(ModulationSynth.getDefaults(), arguments);
    this._carrier = new _Synth.Synth({
      context: this.context,
      oscillator: options.oscillator,
      envelope: options.envelope,
      onsilence: () => this.onsilence(this),
      volume: -10
    });
    this._modulator = new _Synth.Synth({
      context: this.context,
      oscillator: options.modulation,
      envelope: options.modulationEnvelope,
      volume: -10
    });
    this.oscillator = this._carrier.oscillator;
    this.envelope = this._carrier.envelope;
    this.modulation = this._modulator.oscillator;
    this.modulationEnvelope = this._modulator.envelope;
    this.frequency = new _Signal.Signal({
      context: this.context,
      units: "frequency"
    });
    this.detune = new _Signal.Signal({
      context: this.context,
      value: options.detune,
      units: "cents"
    });
    this.harmonicity = new _Multiply.Multiply({
      context: this.context,
      value: options.harmonicity,
      minValue: 0
    });
    this._modulationNode = new _Gain.Gain({
      context: this.context,
      gain: 0
    });
    (0, _Interface.readOnly)(this, ["frequency", "harmonicity", "oscillator", "envelope", "modulation", "modulationEnvelope", "detune"]);
  }

  static getDefaults() {
    return Object.assign(_Monophonic.Monophonic.getDefaults(), {
      harmonicity: 3,
      oscillator: Object.assign((0, _Defaults.omitFromObject)(_OmniOscillator.OmniOscillator.getDefaults(), [...Object.keys(_Source.Source.getDefaults()), "frequency", "detune"]), {
        type: "sine"
      }),
      envelope: Object.assign((0, _Defaults.omitFromObject)(_Envelope.Envelope.getDefaults(), Object.keys(_ToneAudioNode.ToneAudioNode.getDefaults())), {
        attack: 0.01,
        decay: 0.01,
        sustain: 1,
        release: 0.5
      }),
      modulation: Object.assign((0, _Defaults.omitFromObject)(_OmniOscillator.OmniOscillator.getDefaults(), [...Object.keys(_Source.Source.getDefaults()), "frequency", "detune"]), {
        type: "square"
      }),
      modulationEnvelope: Object.assign((0, _Defaults.omitFromObject)(_Envelope.Envelope.getDefaults(), Object.keys(_ToneAudioNode.ToneAudioNode.getDefaults())), {
        attack: 0.5,
        decay: 0.0,
        sustain: 1,
        release: 0.5
      })
    });
  }
  /**
   * Trigger the attack portion of the note
   */


  _triggerEnvelopeAttack(time, velocity) {
    // @ts-ignore
    this._carrier._triggerEnvelopeAttack(time, velocity); // @ts-ignore


    this._modulator._triggerEnvelopeAttack(time, velocity);
  }
  /**
   * Trigger the release portion of the note
   */


  _triggerEnvelopeRelease(time) {
    // @ts-ignore
    this._carrier._triggerEnvelopeRelease(time); // @ts-ignore


    this._modulator._triggerEnvelopeRelease(time);

    return this;
  }

  getLevelAtTime(time) {
    time = this.toSeconds(time);
    return this.envelope.getValueAtTime(time);
  }

  dispose() {
    super.dispose();

    this._carrier.dispose();

    this._modulator.dispose();

    this.frequency.dispose();
    this.detune.dispose();
    this.harmonicity.dispose();

    this._modulationNode.dispose();

    return this;
  }

}

exports.ModulationSynth = ModulationSynth;
},{"../signal/Signal":"../node_modules/tone/build/esm/signal/Signal.js","../signal/Multiply":"../node_modules/tone/build/esm/signal/Multiply.js","../core/context/Gain":"../node_modules/tone/build/esm/core/context/Gain.js","../component/envelope/Envelope":"../node_modules/tone/build/esm/component/envelope/Envelope.js","../core/context/ToneAudioNode":"../node_modules/tone/build/esm/core/context/ToneAudioNode.js","./Monophonic":"../node_modules/tone/build/esm/instrument/Monophonic.js","../source/oscillator/OmniOscillator":"../node_modules/tone/build/esm/source/oscillator/OmniOscillator.js","../source/Source":"../node_modules/tone/build/esm/source/Source.js","./Synth":"../node_modules/tone/build/esm/instrument/Synth.js","../core/util/Interface":"../node_modules/tone/build/esm/core/util/Interface.js","../core/util/Defaults":"../node_modules/tone/build/esm/core/util/Defaults.js"}],"../node_modules/tone/build/esm/instrument/AMSynth.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AMSynth = void 0;

var _AudioToGain = require("../signal/AudioToGain");

var _Defaults = require("../core/util/Defaults");

var _ModulationSynth = require("./ModulationSynth");

/**
 * AMSynth uses the output of one Tone.Synth to modulate the
 * amplitude of another Tone.Synth. The harmonicity (the ratio between
 * the two signals) affects the timbre of the output signal greatly.
 * Read more about Amplitude Modulation Synthesis on
 * [SoundOnSound](https://web.archive.org/web/20160404103653/http://www.soundonsound.com:80/sos/mar00/articles/synthsecrets.htm).
 *
 * @example
 * const synth = new Tone.AMSynth().toDestination();
 * synth.triggerAttackRelease("C4", "4n");
 *
 * @category Instrument
 */
class AMSynth extends _ModulationSynth.ModulationSynth {
  constructor() {
    super((0, _Defaults.optionsFromArguments)(AMSynth.getDefaults(), arguments));
    this.name = "AMSynth";
    this._modulationScale = new _AudioToGain.AudioToGain({
      context: this.context
    }); // control the two voices frequency

    this.frequency.connect(this._carrier.frequency);
    this.frequency.chain(this.harmonicity, this._modulator.frequency);
    this.detune.fan(this._carrier.detune, this._modulator.detune);

    this._modulator.chain(this._modulationScale, this._modulationNode.gain);

    this._carrier.chain(this._modulationNode, this.output);
  }

  dispose() {
    super.dispose();

    this._modulationScale.dispose();

    return this;
  }

}

exports.AMSynth = AMSynth;
},{"../signal/AudioToGain":"../node_modules/tone/build/esm/signal/AudioToGain.js","../core/util/Defaults":"../node_modules/tone/build/esm/core/util/Defaults.js","./ModulationSynth":"../node_modules/tone/build/esm/instrument/ModulationSynth.js"}],"../node_modules/tone/build/esm/component/filter/BiquadFilter.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BiquadFilter = void 0;

var _ToneAudioNode = require("../../core/context/ToneAudioNode");

var _Defaults = require("../../core/util/Defaults");

var _Param = require("../../core/context/Param");

var _Debug = require("../../core/util/Debug");

/**
 * Thin wrapper around the native Web Audio [BiquadFilterNode](https://webaudio.github.io/web-audio-api/#biquadfilternode).
 * BiquadFilter is similar to [[Filter]] but doesn't have the option to set the "rolloff" value.
 * @category Component
 */
class BiquadFilter extends _ToneAudioNode.ToneAudioNode {
  constructor() {
    super((0, _Defaults.optionsFromArguments)(BiquadFilter.getDefaults(), arguments, ["frequency", "type"]));
    this.name = "BiquadFilter";
    const options = (0, _Defaults.optionsFromArguments)(BiquadFilter.getDefaults(), arguments, ["frequency", "type"]);
    this._filter = this.context.createBiquadFilter();
    this.input = this.output = this._filter;
    this.Q = new _Param.Param({
      context: this.context,
      units: "number",
      value: options.Q,
      param: this._filter.Q
    });
    this.frequency = new _Param.Param({
      context: this.context,
      units: "frequency",
      value: options.frequency,
      param: this._filter.frequency
    });
    this.detune = new _Param.Param({
      context: this.context,
      units: "cents",
      value: options.detune,
      param: this._filter.detune
    });
    this.gain = new _Param.Param({
      context: this.context,
      units: "gain",
      value: options.gain,
      param: this._filter.gain
    });
    this.type = options.type;
  }

  static getDefaults() {
    return Object.assign(_ToneAudioNode.ToneAudioNode.getDefaults(), {
      Q: 1,
      type: "lowpass",
      frequency: 350,
      detune: 0,
      gain: 0
    });
  }
  /**
   * The type of this BiquadFilterNode. For a complete list of types and their attributes, see the
   * [Web Audio API](https://webaudio.github.io/web-audio-api/#dom-biquadfiltertype-lowpass)
   */


  get type() {
    return this._filter.type;
  }

  set type(type) {
    const types = ["lowpass", "highpass", "bandpass", "lowshelf", "highshelf", "notch", "allpass", "peaking"];
    (0, _Debug.assert)(types.indexOf(type) !== -1, `Invalid filter type: ${type}`);
    this._filter.type = type;
  }
  /**
   * Get the frequency response curve. This curve represents how the filter
   * responses to frequencies between 20hz-20khz.
   * @param  len The number of values to return
   * @return The frequency response curve between 20-20kHz
   */


  getFrequencyResponse(len = 128) {
    // start with all 1s
    const freqValues = new Float32Array(len);

    for (let i = 0; i < len; i++) {
      const norm = Math.pow(i / len, 2);
      const freq = norm * (20000 - 20) + 20;
      freqValues[i] = freq;
    }

    const magValues = new Float32Array(len);
    const phaseValues = new Float32Array(len); // clone the filter to remove any connections which may be changing the value

    const filterClone = this.context.createBiquadFilter();
    filterClone.type = this.type;
    filterClone.Q.value = this.Q.value;
    filterClone.frequency.value = this.frequency.value;
    filterClone.gain.value = this.gain.value;
    filterClone.getFrequencyResponse(freqValues, magValues, phaseValues);
    return magValues;
  }

  dispose() {
    super.dispose();

    this._filter.disconnect();

    this.Q.dispose();
    this.frequency.dispose();
    this.gain.dispose();
    this.detune.dispose();
    return this;
  }

}

exports.BiquadFilter = BiquadFilter;
},{"../../core/context/ToneAudioNode":"../node_modules/tone/build/esm/core/context/ToneAudioNode.js","../../core/util/Defaults":"../node_modules/tone/build/esm/core/util/Defaults.js","../../core/context/Param":"../node_modules/tone/build/esm/core/context/Param.js","../../core/util/Debug":"../node_modules/tone/build/esm/core/util/Debug.js"}],"../node_modules/tone/build/esm/component/filter/Filter.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Filter = void 0;

var _Gain = require("../../core/context/Gain");

var _ToneAudioNode = require("../../core/context/ToneAudioNode");

var _Defaults = require("../../core/util/Defaults");

var _Interface = require("../../core/util/Interface");

var _TypeCheck = require("../../core/util/TypeCheck");

var _Signal = require("../../signal/Signal");

var _Debug = require("../../core/util/Debug");

var _BiquadFilter = require("./BiquadFilter");

/**
 * Tone.Filter is a filter which allows for all of the same native methods
 * as the [BiquadFilterNode](http://webaudio.github.io/web-audio-api/#the-biquadfilternode-interface).
 * Tone.Filter has the added ability to set the filter rolloff at -12
 * (default), -24 and -48.
 * @example
 * const filter = new Tone.Filter(1500, "highpass").toDestination();
 * filter.frequency.rampTo(20000, 10);
 * const noise = new Tone.Noise().connect(filter).start();
 * @category Component
 */
class Filter extends _ToneAudioNode.ToneAudioNode {
  constructor() {
    super((0, _Defaults.optionsFromArguments)(Filter.getDefaults(), arguments, ["frequency", "type", "rolloff"]));
    this.name = "Filter";
    this.input = new _Gain.Gain({
      context: this.context
    });
    this.output = new _Gain.Gain({
      context: this.context
    });
    this._filters = [];
    const options = (0, _Defaults.optionsFromArguments)(Filter.getDefaults(), arguments, ["frequency", "type", "rolloff"]);
    this._filters = [];
    this.Q = new _Signal.Signal({
      context: this.context,
      units: "positive",
      value: options.Q
    });
    this.frequency = new _Signal.Signal({
      context: this.context,
      units: "frequency",
      value: options.frequency
    });
    this.detune = new _Signal.Signal({
      context: this.context,
      units: "cents",
      value: options.detune
    });
    this.gain = new _Signal.Signal({
      context: this.context,
      units: "decibels",
      value: options.gain
    });
    this._type = options.type;
    this.rolloff = options.rolloff;
    (0, _Interface.readOnly)(this, ["detune", "frequency", "gain", "Q"]);
  }

  static getDefaults() {
    return Object.assign(_ToneAudioNode.ToneAudioNode.getDefaults(), {
      Q: 1,
      detune: 0,
      frequency: 350,
      gain: 0,
      rolloff: -12,
      type: "lowpass"
    });
  }
  /**
   * The type of the filter. Types: "lowpass", "highpass",
   * "bandpass", "lowshelf", "highshelf", "notch", "allpass", or "peaking".
   */


  get type() {
    return this._type;
  }

  set type(type) {
    const types = ["lowpass", "highpass", "bandpass", "lowshelf", "highshelf", "notch", "allpass", "peaking"];
    (0, _Debug.assert)(types.indexOf(type) !== -1, `Invalid filter type: ${type}`);
    this._type = type;

    this._filters.forEach(filter => filter.type = type);
  }
  /**
   * The rolloff of the filter which is the drop in db
   * per octave. Implemented internally by cascading filters.
   * Only accepts the values -12, -24, -48 and -96.
   */


  get rolloff() {
    return this._rolloff;
  }

  set rolloff(rolloff) {
    const rolloffNum = (0, _TypeCheck.isNumber)(rolloff) ? rolloff : parseInt(rolloff, 10);
    const possibilities = [-12, -24, -48, -96];
    let cascadingCount = possibilities.indexOf(rolloffNum); // check the rolloff is valid

    (0, _Debug.assert)(cascadingCount !== -1, `rolloff can only be ${possibilities.join(", ")}`);
    cascadingCount += 1;
    this._rolloff = rolloffNum;
    this.input.disconnect();

    this._filters.forEach(filter => filter.disconnect());

    this._filters = new Array(cascadingCount);

    for (let count = 0; count < cascadingCount; count++) {
      const filter = new _BiquadFilter.BiquadFilter({
        context: this.context
      });
      filter.type = this._type;
      this.frequency.connect(filter.frequency);
      this.detune.connect(filter.detune);
      this.Q.connect(filter.Q);
      this.gain.connect(filter.gain);
      this._filters[count] = filter;
    }

    this._internalChannels = this._filters;
    (0, _ToneAudioNode.connectSeries)(this.input, ...this._internalChannels, this.output);
  }
  /**
   * Get the frequency response curve. This curve represents how the filter
   * responses to frequencies between 20hz-20khz.
   * @param  len The number of values to return
   * @return The frequency response curve between 20-20kHz
   */


  getFrequencyResponse(len = 128) {
    const filterClone = new _BiquadFilter.BiquadFilter({
      frequency: this.frequency.value,
      gain: this.gain.value,
      Q: this.Q.value,
      type: this._type,
      detune: this.detune.value
    }); // start with all 1s

    const totalResponse = new Float32Array(len).map(() => 1);

    this._filters.forEach(() => {
      const response = filterClone.getFrequencyResponse(len);
      response.forEach((val, i) => totalResponse[i] *= val);
    });

    filterClone.dispose();
    return totalResponse;
  }
  /**
   * Clean up.
   */


  dispose() {
    super.dispose();

    this._filters.forEach(filter => {
      filter.dispose();
    });

    (0, _Interface.writable)(this, ["detune", "frequency", "gain", "Q"]);
    this.frequency.dispose();
    this.Q.dispose();
    this.detune.dispose();
    this.gain.dispose();
    return this;
  }

}

exports.Filter = Filter;
},{"../../core/context/Gain":"../node_modules/tone/build/esm/core/context/Gain.js","../../core/context/ToneAudioNode":"../node_modules/tone/build/esm/core/context/ToneAudioNode.js","../../core/util/Defaults":"../node_modules/tone/build/esm/core/util/Defaults.js","../../core/util/Interface":"../node_modules/tone/build/esm/core/util/Interface.js","../../core/util/TypeCheck":"../node_modules/tone/build/esm/core/util/TypeCheck.js","../../signal/Signal":"../node_modules/tone/build/esm/signal/Signal.js","../../core/util/Debug":"../node_modules/tone/build/esm/core/util/Debug.js","./BiquadFilter":"../node_modules/tone/build/esm/component/filter/BiquadFilter.js"}],"../node_modules/tone/build/esm/component/envelope/FrequencyEnvelope.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FrequencyEnvelope = void 0;

var _Defaults = require("../../core/util/Defaults");

var _Envelope = require("./Envelope");

var _Scale = require("../../signal/Scale");

var _Pow = require("../../signal/Pow");

var _Debug = require("../../core/util/Debug");

/**
 * FrequencyEnvelope is an [[Envelope]] which ramps between [[baseFrequency]]
 * and [[octaves]]. It can also have an optional [[exponent]] to adjust the curve
 * which it ramps.
 * @example
 * const oscillator = new Tone.Oscillator().toDestination().start();
 * const freqEnv = new Tone.FrequencyEnvelope({
 * 	attack: 0.2,
 * 	baseFrequency: "C2",
 * 	octaves: 4
 * });
 * freqEnv.connect(oscillator.frequency);
 * freqEnv.triggerAttack();
 */
class FrequencyEnvelope extends _Envelope.Envelope {
  constructor() {
    super((0, _Defaults.optionsFromArguments)(FrequencyEnvelope.getDefaults(), arguments, ["attack", "decay", "sustain", "release"]));
    this.name = "FrequencyEnvelope";
    const options = (0, _Defaults.optionsFromArguments)(FrequencyEnvelope.getDefaults(), arguments, ["attack", "decay", "sustain", "release"]);
    this._octaves = options.octaves;
    this._baseFrequency = this.toFrequency(options.baseFrequency);
    this._exponent = this.input = new _Pow.Pow({
      context: this.context,
      value: options.exponent
    });
    this._scale = this.output = new _Scale.Scale({
      context: this.context,
      min: this._baseFrequency,
      max: this._baseFrequency * Math.pow(2, this._octaves)
    });

    this._sig.chain(this._exponent, this._scale);
  }

  static getDefaults() {
    return Object.assign(_Envelope.Envelope.getDefaults(), {
      baseFrequency: 200,
      exponent: 1,
      octaves: 4
    });
  }
  /**
   * The envelope's minimum output value. This is the value which it
   * starts at.
   */


  get baseFrequency() {
    return this._baseFrequency;
  }

  set baseFrequency(min) {
    const freq = this.toFrequency(min);
    (0, _Debug.assertRange)(freq, 0);
    this._baseFrequency = freq;
    this._scale.min = this._baseFrequency; // update the max value when the min changes

    this.octaves = this._octaves;
  }
  /**
   * The number of octaves above the baseFrequency that the
   * envelope will scale to.
   */


  get octaves() {
    return this._octaves;
  }

  set octaves(octaves) {
    (0, _Debug.assertRange)(octaves, 0);
    this._octaves = octaves;
    this._scale.max = this._baseFrequency * Math.pow(2, octaves);
  }
  /**
   * The envelope's exponent value.
   */


  get exponent() {
    return this._exponent.value;
  }

  set exponent(exponent) {
    this._exponent.value = exponent;
  }
  /**
   * Clean up
   */


  dispose() {
    super.dispose();

    this._exponent.dispose();

    this._scale.dispose();

    return this;
  }

}

exports.FrequencyEnvelope = FrequencyEnvelope;
},{"../../core/util/Defaults":"../node_modules/tone/build/esm/core/util/Defaults.js","./Envelope":"../node_modules/tone/build/esm/component/envelope/Envelope.js","../../signal/Scale":"../node_modules/tone/build/esm/signal/Scale.js","../../signal/Pow":"../node_modules/tone/build/esm/signal/Pow.js","../../core/util/Debug":"../node_modules/tone/build/esm/core/util/Debug.js"}],"../node_modules/tone/build/esm/instrument/MonoSynth.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MonoSynth = void 0;

var _AmplitudeEnvelope = require("../component/envelope/AmplitudeEnvelope");

var _Envelope = require("../component/envelope/Envelope");

var _Filter = require("../component/filter/Filter");

var _Defaults = require("../core/util/Defaults");

var _Interface = require("../core/util/Interface");

var _Monophonic = require("../instrument/Monophonic");

var _OmniOscillator = require("../source/oscillator/OmniOscillator");

var _Source = require("../source/Source");

var _FrequencyEnvelope = require("../component/envelope/FrequencyEnvelope");

var _ToneAudioNode = require("../core/context/ToneAudioNode");

/**
 * MonoSynth is composed of one `oscillator`, one `filter`, and two `envelopes`.
 * The amplitude of the Oscillator and the cutoff frequency of the
 * Filter are controlled by Envelopes.
 * <img src="https://docs.google.com/drawings/d/1gaY1DF9_Hzkodqf8JI1Cg2VZfwSElpFQfI94IQwad38/pub?w=924&h=240">
 * @example
 * const synth = new Tone.MonoSynth({
 * 	oscillator: {
 * 		type: "square"
 * 	},
 * 	envelope: {
 * 		attack: 0.1
 * 	}
 * }).toDestination();
 * synth.triggerAttackRelease("C4", "8n");
 * @category Instrument
 */
class MonoSynth extends _Monophonic.Monophonic {
  constructor() {
    super((0, _Defaults.optionsFromArguments)(MonoSynth.getDefaults(), arguments));
    this.name = "MonoSynth";
    const options = (0, _Defaults.optionsFromArguments)(MonoSynth.getDefaults(), arguments);
    this.oscillator = new _OmniOscillator.OmniOscillator(Object.assign(options.oscillator, {
      context: this.context,
      detune: options.detune,
      onstop: () => this.onsilence(this)
    }));
    this.frequency = this.oscillator.frequency;
    this.detune = this.oscillator.detune;
    this.filter = new _Filter.Filter(Object.assign(options.filter, {
      context: this.context
    }));
    this.filterEnvelope = new _FrequencyEnvelope.FrequencyEnvelope(Object.assign(options.filterEnvelope, {
      context: this.context
    }));
    this.envelope = new _AmplitudeEnvelope.AmplitudeEnvelope(Object.assign(options.envelope, {
      context: this.context
    })); // connect the oscillators to the output

    this.oscillator.chain(this.filter, this.envelope, this.output); // connect the filter envelope

    this.filterEnvelope.connect(this.filter.frequency);
    (0, _Interface.readOnly)(this, ["oscillator", "frequency", "detune", "filter", "filterEnvelope", "envelope"]);
  }

  static getDefaults() {
    return Object.assign(_Monophonic.Monophonic.getDefaults(), {
      envelope: Object.assign((0, _Defaults.omitFromObject)(_Envelope.Envelope.getDefaults(), Object.keys(_ToneAudioNode.ToneAudioNode.getDefaults())), {
        attack: 0.005,
        decay: 0.1,
        release: 1,
        sustain: 0.9
      }),
      filter: Object.assign((0, _Defaults.omitFromObject)(_Filter.Filter.getDefaults(), Object.keys(_ToneAudioNode.ToneAudioNode.getDefaults())), {
        Q: 1,
        rolloff: -12,
        type: "lowpass"
      }),
      filterEnvelope: Object.assign((0, _Defaults.omitFromObject)(_FrequencyEnvelope.FrequencyEnvelope.getDefaults(), Object.keys(_ToneAudioNode.ToneAudioNode.getDefaults())), {
        attack: 0.6,
        baseFrequency: 200,
        decay: 0.2,
        exponent: 2,
        octaves: 3,
        release: 2,
        sustain: 0.5
      }),
      oscillator: Object.assign((0, _Defaults.omitFromObject)(_OmniOscillator.OmniOscillator.getDefaults(), Object.keys(_Source.Source.getDefaults())), {
        type: "sawtooth"
      })
    });
  }
  /**
   * start the attack portion of the envelope
   * @param time the time the attack should start
   * @param velocity the velocity of the note (0-1)
   */


  _triggerEnvelopeAttack(time, velocity = 1) {
    this.envelope.triggerAttack(time, velocity);
    this.filterEnvelope.triggerAttack(time);
    this.oscillator.start(time);

    if (this.envelope.sustain === 0) {
      const computedAttack = this.toSeconds(this.envelope.attack);
      const computedDecay = this.toSeconds(this.envelope.decay);
      this.oscillator.stop(time + computedAttack + computedDecay);
    }
  }
  /**
   * start the release portion of the envelope
   * @param time the time the release should start
   */


  _triggerEnvelopeRelease(time) {
    this.envelope.triggerRelease(time);
    this.filterEnvelope.triggerRelease(time);
    this.oscillator.stop(time + this.toSeconds(this.envelope.release));
  }

  getLevelAtTime(time) {
    time = this.toSeconds(time);
    return this.envelope.getValueAtTime(time);
  }

  dispose() {
    super.dispose();
    this.oscillator.dispose();
    this.envelope.dispose();
    this.filterEnvelope.dispose();
    this.filter.dispose();
    return this;
  }

}

exports.MonoSynth = MonoSynth;
},{"../component/envelope/AmplitudeEnvelope":"../node_modules/tone/build/esm/component/envelope/AmplitudeEnvelope.js","../component/envelope/Envelope":"../node_modules/tone/build/esm/component/envelope/Envelope.js","../component/filter/Filter":"../node_modules/tone/build/esm/component/filter/Filter.js","../core/util/Defaults":"../node_modules/tone/build/esm/core/util/Defaults.js","../core/util/Interface":"../node_modules/tone/build/esm/core/util/Interface.js","../instrument/Monophonic":"../node_modules/tone/build/esm/instrument/Monophonic.js","../source/oscillator/OmniOscillator":"../node_modules/tone/build/esm/source/oscillator/OmniOscillator.js","../source/Source":"../node_modules/tone/build/esm/source/Source.js","../component/envelope/FrequencyEnvelope":"../node_modules/tone/build/esm/component/envelope/FrequencyEnvelope.js","../core/context/ToneAudioNode":"../node_modules/tone/build/esm/core/context/ToneAudioNode.js"}],"../node_modules/tone/build/esm/instrument/DuoSynth.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DuoSynth = void 0;

var _Monophonic = require("./Monophonic");

var _MonoSynth = require("./MonoSynth");

var _Signal = require("../signal/Signal");

var _Interface = require("../core/util/Interface");

var _LFO = require("../source/oscillator/LFO");

var _Gain = require("../core/context/Gain");

var _Multiply = require("../signal/Multiply");

var _Defaults = require("../core/util/Defaults");

/**
 * DuoSynth is a monophonic synth composed of two [[MonoSynths]] run in parallel with control over the
 * frequency ratio between the two voices and vibrato effect.
 * @example
 * const duoSynth = new Tone.DuoSynth().toDestination();
 * duoSynth.triggerAttackRelease("C4", "2n");
 * @category Instrument
 */
class DuoSynth extends _Monophonic.Monophonic {
  constructor() {
    super((0, _Defaults.optionsFromArguments)(DuoSynth.getDefaults(), arguments));
    this.name = "DuoSynth";
    const options = (0, _Defaults.optionsFromArguments)(DuoSynth.getDefaults(), arguments);
    this.voice0 = new _MonoSynth.MonoSynth(Object.assign(options.voice0, {
      context: this.context,
      onsilence: () => this.onsilence(this)
    }));
    this.voice1 = new _MonoSynth.MonoSynth(Object.assign(options.voice1, {
      context: this.context
    }));
    this.harmonicity = new _Multiply.Multiply({
      context: this.context,
      units: "positive",
      value: options.harmonicity
    });
    this._vibrato = new _LFO.LFO({
      frequency: options.vibratoRate,
      context: this.context,
      min: -50,
      max: 50
    }); // start the vibrato immediately

    this._vibrato.start();

    this.vibratoRate = this._vibrato.frequency;
    this._vibratoGain = new _Gain.Gain({
      context: this.context,
      units: "normalRange",
      gain: options.vibratoAmount
    });
    this.vibratoAmount = this._vibratoGain.gain;
    this.frequency = new _Signal.Signal({
      context: this.context,
      units: "frequency",
      value: 440
    });
    this.detune = new _Signal.Signal({
      context: this.context,
      units: "cents",
      value: options.detune
    }); // control the two voices frequency

    this.frequency.connect(this.voice0.frequency);
    this.frequency.chain(this.harmonicity, this.voice1.frequency);

    this._vibrato.connect(this._vibratoGain);

    this._vibratoGain.fan(this.voice0.detune, this.voice1.detune);

    this.detune.fan(this.voice0.detune, this.voice1.detune);
    this.voice0.connect(this.output);
    this.voice1.connect(this.output);
    (0, _Interface.readOnly)(this, ["voice0", "voice1", "frequency", "vibratoAmount", "vibratoRate"]);
  }

  getLevelAtTime(time) {
    time = this.toSeconds(time);
    return this.voice0.envelope.getValueAtTime(time) + this.voice1.envelope.getValueAtTime(time);
  }

  static getDefaults() {
    return (0, _Defaults.deepMerge)(_Monophonic.Monophonic.getDefaults(), {
      vibratoAmount: 0.5,
      vibratoRate: 5,
      harmonicity: 1.5,
      voice0: (0, _Defaults.deepMerge)((0, _Defaults.omitFromObject)(_MonoSynth.MonoSynth.getDefaults(), Object.keys(_Monophonic.Monophonic.getDefaults())), {
        filterEnvelope: {
          attack: 0.01,
          decay: 0.0,
          sustain: 1,
          release: 0.5
        },
        envelope: {
          attack: 0.01,
          decay: 0.0,
          sustain: 1,
          release: 0.5
        }
      }),
      voice1: (0, _Defaults.deepMerge)((0, _Defaults.omitFromObject)(_MonoSynth.MonoSynth.getDefaults(), Object.keys(_Monophonic.Monophonic.getDefaults())), {
        filterEnvelope: {
          attack: 0.01,
          decay: 0.0,
          sustain: 1,
          release: 0.5
        },
        envelope: {
          attack: 0.01,
          decay: 0.0,
          sustain: 1,
          release: 0.5
        }
      })
    });
  }
  /**
   * Trigger the attack portion of the note
   */


  _triggerEnvelopeAttack(time, velocity) {
    // @ts-ignore
    this.voice0._triggerEnvelopeAttack(time, velocity); // @ts-ignore


    this.voice1._triggerEnvelopeAttack(time, velocity);
  }
  /**
   * Trigger the release portion of the note
   */


  _triggerEnvelopeRelease(time) {
    // @ts-ignore
    this.voice0._triggerEnvelopeRelease(time); // @ts-ignore


    this.voice1._triggerEnvelopeRelease(time);

    return this;
  }

  dispose() {
    super.dispose();
    this.voice0.dispose();
    this.voice1.dispose();
    this.frequency.dispose();
    this.detune.dispose();

    this._vibrato.dispose();

    this.vibratoRate.dispose();

    this._vibratoGain.dispose();

    this.harmonicity.dispose();
    return this;
  }

}

exports.DuoSynth = DuoSynth;
},{"./Monophonic":"../node_modules/tone/build/esm/instrument/Monophonic.js","./MonoSynth":"../node_modules/tone/build/esm/instrument/MonoSynth.js","../signal/Signal":"../node_modules/tone/build/esm/signal/Signal.js","../core/util/Interface":"../node_modules/tone/build/esm/core/util/Interface.js","../source/oscillator/LFO":"../node_modules/tone/build/esm/source/oscillator/LFO.js","../core/context/Gain":"../node_modules/tone/build/esm/core/context/Gain.js","../signal/Multiply":"../node_modules/tone/build/esm/signal/Multiply.js","../core/util/Defaults":"../node_modules/tone/build/esm/core/util/Defaults.js"}],"../node_modules/tone/build/esm/instrument/FMSynth.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FMSynth = void 0;

var _Defaults = require("../core/util/Defaults");

var _Multiply = require("../signal/Multiply");

var _ModulationSynth = require("./ModulationSynth");

/**
 * FMSynth is composed of two Tone.Synths where one Tone.Synth modulates
 * the frequency of a second Tone.Synth. A lot of spectral content
 * can be explored using the modulationIndex parameter. Read more about
 * frequency modulation synthesis on Sound On Sound: [Part 1](https://web.archive.org/web/20160403123704/http://www.soundonsound.com/sos/apr00/articles/synthsecrets.htm), [Part 2](https://web.archive.org/web/20160403115835/http://www.soundonsound.com/sos/may00/articles/synth.htm).
 *
 * @example
 * const fmSynth = new Tone.FMSynth().toDestination();
 * fmSynth.triggerAttackRelease("C5", "4n");
 *
 * @category Instrument
 */
class FMSynth extends _ModulationSynth.ModulationSynth {
  constructor() {
    super((0, _Defaults.optionsFromArguments)(FMSynth.getDefaults(), arguments));
    this.name = "FMSynth";
    const options = (0, _Defaults.optionsFromArguments)(FMSynth.getDefaults(), arguments);
    this.modulationIndex = new _Multiply.Multiply({
      context: this.context,
      value: options.modulationIndex
    }); // control the two voices frequency

    this.frequency.connect(this._carrier.frequency);
    this.frequency.chain(this.harmonicity, this._modulator.frequency);
    this.frequency.chain(this.modulationIndex, this._modulationNode);
    this.detune.fan(this._carrier.detune, this._modulator.detune);

    this._modulator.connect(this._modulationNode.gain);

    this._modulationNode.connect(this._carrier.frequency);

    this._carrier.connect(this.output);
  }

  static getDefaults() {
    return Object.assign(_ModulationSynth.ModulationSynth.getDefaults(), {
      modulationIndex: 10
    });
  }

  dispose() {
    super.dispose();
    this.modulationIndex.dispose();
    return this;
  }

}

exports.FMSynth = FMSynth;
},{"../core/util/Defaults":"../node_modules/tone/build/esm/core/util/Defaults.js","../signal/Multiply":"../node_modules/tone/build/esm/signal/Multiply.js","./ModulationSynth":"../node_modules/tone/build/esm/instrument/ModulationSynth.js"}],"../node_modules/tone/build/esm/instrument/MetalSynth.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MetalSynth = void 0;

var _Envelope = require("../component/envelope/Envelope");

var _Filter = require("../component/filter/Filter");

var _Gain = require("../core/context/Gain");

var _ToneAudioNode = require("../core/context/ToneAudioNode");

var _Defaults = require("../core/util/Defaults");

var _Interface = require("../core/util/Interface");

var _Multiply = require("../signal/Multiply");

var _Scale = require("../signal/Scale");

var _Signal = require("../signal/Signal");

var _FMOscillator = require("../source/oscillator/FMOscillator");

var _Monophonic = require("./Monophonic");

/**
 * Inharmonic ratio of frequencies based on the Roland TR-808
 * Taken from https://ccrma.stanford.edu/papers/tr-808-cymbal-physically-informed-circuit-bendable-digital-model
 */
const inharmRatios = [1.0, 1.483, 1.932, 2.546, 2.630, 3.897];
/**
 * A highly inharmonic and spectrally complex source with a highpass filter
 * and amplitude envelope which is good for making metallophone sounds.
 * Based on CymbalSynth by [@polyrhythmatic](https://github.com/polyrhythmatic).
 * Inspiration from [Sound on Sound](https://shorturl.at/rSZ12).
 * @category Instrument
 */

class MetalSynth extends _Monophonic.Monophonic {
  constructor() {
    super((0, _Defaults.optionsFromArguments)(MetalSynth.getDefaults(), arguments));
    this.name = "MetalSynth";
    /**
     * The array of FMOscillators
     */

    this._oscillators = [];
    /**
     * The frequency multipliers
     */

    this._freqMultipliers = [];
    const options = (0, _Defaults.optionsFromArguments)(MetalSynth.getDefaults(), arguments);
    this.detune = new _Signal.Signal({
      context: this.context,
      units: "cents",
      value: options.detune
    });
    this.frequency = new _Signal.Signal({
      context: this.context,
      units: "frequency"
    });
    this._amplitude = new _Gain.Gain({
      context: this.context,
      gain: 0
    }).connect(this.output);
    this._highpass = new _Filter.Filter({
      // Q: -3.0102999566398125,
      Q: 0,
      context: this.context,
      type: "highpass"
    }).connect(this._amplitude);

    for (let i = 0; i < inharmRatios.length; i++) {
      const osc = new _FMOscillator.FMOscillator({
        context: this.context,
        harmonicity: options.harmonicity,
        modulationIndex: options.modulationIndex,
        modulationType: "square",
        onstop: i === 0 ? () => this.onsilence(this) : _Interface.noOp,
        type: "square"
      });
      osc.connect(this._highpass);
      this._oscillators[i] = osc;
      const mult = new _Multiply.Multiply({
        context: this.context,
        value: inharmRatios[i]
      });
      this._freqMultipliers[i] = mult;
      this.frequency.chain(mult, osc.frequency);
      this.detune.connect(osc.detune);
    }

    this._filterFreqScaler = new _Scale.Scale({
      context: this.context,
      max: 7000,
      min: this.toFrequency(options.resonance)
    });
    this.envelope = new _Envelope.Envelope({
      attack: options.envelope.attack,
      attackCurve: "linear",
      context: this.context,
      decay: options.envelope.decay,
      release: options.envelope.release,
      sustain: 0
    });
    this.envelope.chain(this._filterFreqScaler, this._highpass.frequency);
    this.envelope.connect(this._amplitude.gain); // set the octaves

    this._octaves = options.octaves;
    this.octaves = options.octaves;
  }

  static getDefaults() {
    return (0, _Defaults.deepMerge)(_Monophonic.Monophonic.getDefaults(), {
      envelope: Object.assign((0, _Defaults.omitFromObject)(_Envelope.Envelope.getDefaults(), Object.keys(_ToneAudioNode.ToneAudioNode.getDefaults())), {
        attack: 0.001,
        decay: 1.4,
        release: 0.2
      }),
      harmonicity: 5.1,
      modulationIndex: 32,
      octaves: 1.5,
      resonance: 4000
    });
  }
  /**
   * Trigger the attack.
   * @param time When the attack should be triggered.
   * @param velocity The velocity that the envelope should be triggered at.
   */


  _triggerEnvelopeAttack(time, velocity = 1) {
    this.envelope.triggerAttack(time, velocity);

    this._oscillators.forEach(osc => osc.start(time));

    if (this.envelope.sustain === 0) {
      this._oscillators.forEach(osc => {
        osc.stop(time + this.toSeconds(this.envelope.attack) + this.toSeconds(this.envelope.decay));
      });
    }

    return this;
  }
  /**
   * Trigger the release of the envelope.
   * @param time When the release should be triggered.
   */


  _triggerEnvelopeRelease(time) {
    this.envelope.triggerRelease(time);

    this._oscillators.forEach(osc => osc.stop(time + this.toSeconds(this.envelope.release)));

    return this;
  }

  getLevelAtTime(time) {
    time = this.toSeconds(time);
    return this.envelope.getValueAtTime(time);
  }
  /**
   * The modulationIndex of the oscillators which make up the source.
   * see [[FMOscillator.modulationIndex]]
   * @min 1
   * @max 100
   */


  get modulationIndex() {
    return this._oscillators[0].modulationIndex.value;
  }

  set modulationIndex(val) {
    this._oscillators.forEach(osc => osc.modulationIndex.value = val);
  }
  /**
   * The harmonicity of the oscillators which make up the source.
   * see Tone.FMOscillator.harmonicity
   * @min 0.1
   * @max 10
   */


  get harmonicity() {
    return this._oscillators[0].harmonicity.value;
  }

  set harmonicity(val) {
    this._oscillators.forEach(osc => osc.harmonicity.value = val);
  }
  /**
   * The lower level of the highpass filter which is attached to the envelope.
   * This value should be between [0, 7000]
   * @min 0
   * @max 7000
   */


  get resonance() {
    return this._filterFreqScaler.min;
  }

  set resonance(val) {
    this._filterFreqScaler.min = this.toFrequency(val);
    this.octaves = this._octaves;
  }
  /**
   * The number of octaves above the "resonance" frequency
   * that the filter ramps during the attack/decay envelope
   * @min 0
   * @max 8
   */


  get octaves() {
    return this._octaves;
  }

  set octaves(val) {
    this._octaves = val;
    this._filterFreqScaler.max = this._filterFreqScaler.min * Math.pow(2, val);
  }

  dispose() {
    super.dispose();

    this._oscillators.forEach(osc => osc.dispose());

    this._freqMultipliers.forEach(freqMult => freqMult.dispose());

    this.frequency.dispose();
    this.detune.dispose();

    this._filterFreqScaler.dispose();

    this._amplitude.dispose();

    this.envelope.dispose();

    this._highpass.dispose();

    return this;
  }

}

exports.MetalSynth = MetalSynth;
},{"../component/envelope/Envelope":"../node_modules/tone/build/esm/component/envelope/Envelope.js","../component/filter/Filter":"../node_modules/tone/build/esm/component/filter/Filter.js","../core/context/Gain":"../node_modules/tone/build/esm/core/context/Gain.js","../core/context/ToneAudioNode":"../node_modules/tone/build/esm/core/context/ToneAudioNode.js","../core/util/Defaults":"../node_modules/tone/build/esm/core/util/Defaults.js","../core/util/Interface":"../node_modules/tone/build/esm/core/util/Interface.js","../signal/Multiply":"../node_modules/tone/build/esm/signal/Multiply.js","../signal/Scale":"../node_modules/tone/build/esm/signal/Scale.js","../signal/Signal":"../node_modules/tone/build/esm/signal/Signal.js","../source/oscillator/FMOscillator":"../node_modules/tone/build/esm/source/oscillator/FMOscillator.js","./Monophonic":"../node_modules/tone/build/esm/instrument/Monophonic.js"}],"../node_modules/tone/build/esm/instrument/MembraneSynth.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MembraneSynth = void 0;

var _tslib = require("tslib");

var _Frequency = require("../core/type/Frequency");

var _Defaults = require("../core/util/Defaults");

var _Interface = require("../core/util/Interface");

var _Monophonic = require("./Monophonic");

var _Synth = require("./Synth");

var _Decorator = require("../core/util/Decorator");

/**
 * MembraneSynth makes kick and tom sounds using a single oscillator
 * with an amplitude envelope and frequency ramp. A Tone.OmniOscillator
 * is routed through a Tone.AmplitudeEnvelope to the output. The drum
 * quality of the sound comes from the frequency envelope applied
 * during MembraneSynth.triggerAttack(note). The frequency envelope
 * starts at <code>note * .octaves</code> and ramps to <code>note</code>
 * over the duration of <code>.pitchDecay</code>.
 * @example
 * const synth = new Tone.MembraneSynth().toDestination();
 * synth.triggerAttackRelease("C2", "8n");
 * @category Instrument
 */
class MembraneSynth extends _Synth.Synth {
  constructor() {
    super((0, _Defaults.optionsFromArguments)(MembraneSynth.getDefaults(), arguments));
    this.name = "MembraneSynth";
    /**
     * Portamento is ignored in this synth. use pitch decay instead.
     */

    this.portamento = 0;
    const options = (0, _Defaults.optionsFromArguments)(MembraneSynth.getDefaults(), arguments);
    this.pitchDecay = options.pitchDecay;
    this.octaves = options.octaves;
    (0, _Interface.readOnly)(this, ["oscillator", "envelope"]);
  }

  static getDefaults() {
    return (0, _Defaults.deepMerge)(_Monophonic.Monophonic.getDefaults(), _Synth.Synth.getDefaults(), {
      envelope: {
        attack: 0.001,
        attackCurve: "exponential",
        decay: 0.4,
        release: 1.4,
        sustain: 0.01
      },
      octaves: 10,
      oscillator: {
        type: "sine"
      },
      pitchDecay: 0.05
    });
  }

  setNote(note, time) {
    const seconds = this.toSeconds(time);
    const hertz = this.toFrequency(note instanceof _Frequency.FrequencyClass ? note.toFrequency() : note);
    const maxNote = hertz * this.octaves;
    this.oscillator.frequency.setValueAtTime(maxNote, seconds);
    this.oscillator.frequency.exponentialRampToValueAtTime(hertz, seconds + this.toSeconds(this.pitchDecay));
    return this;
  }

  dispose() {
    super.dispose();
    return this;
  }

}

exports.MembraneSynth = MembraneSynth;
(0, _tslib.__decorate)([(0, _Decorator.range)(0)], MembraneSynth.prototype, "octaves", void 0);
(0, _tslib.__decorate)([(0, _Decorator.timeRange)(0)], MembraneSynth.prototype, "pitchDecay", void 0);
},{"tslib":"../node_modules/tslib/tslib.es6.js","../core/type/Frequency":"../node_modules/tone/build/esm/core/type/Frequency.js","../core/util/Defaults":"../node_modules/tone/build/esm/core/util/Defaults.js","../core/util/Interface":"../node_modules/tone/build/esm/core/util/Interface.js","./Monophonic":"../node_modules/tone/build/esm/instrument/Monophonic.js","./Synth":"../node_modules/tone/build/esm/instrument/Synth.js","../core/util/Decorator":"../node_modules/tone/build/esm/core/util/Decorator.js"}],"../node_modules/tone/build/esm/instrument/NoiseSynth.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.NoiseSynth = void 0;

var _AmplitudeEnvelope = require("../component/envelope/AmplitudeEnvelope");

var _Defaults = require("../core/util/Defaults");

var _Noise = require("../source/Noise");

var _Instrument = require("./Instrument");

var _ToneAudioNode = require("../core/context/ToneAudioNode");

var _Envelope = require("../component/envelope/Envelope");

var _Source = require("../source/Source");

/**
 * Tone.NoiseSynth is composed of [[Noise]] through an [[AmplitudeEnvelope]].
 * ```
 * +-------+   +-------------------+
 * | Noise +>--> AmplitudeEnvelope +>--> Output
 * +-------+   +-------------------+
 * ```
 * @example
 * const noiseSynth = new Tone.NoiseSynth().toDestination();
 * noiseSynth.triggerAttackRelease("8n", 0.05);
 * @category Instrument
 */
class NoiseSynth extends _Instrument.Instrument {
  constructor() {
    super((0, _Defaults.optionsFromArguments)(NoiseSynth.getDefaults(), arguments));
    this.name = "NoiseSynth";
    const options = (0, _Defaults.optionsFromArguments)(NoiseSynth.getDefaults(), arguments);
    this.noise = new _Noise.Noise(Object.assign({
      context: this.context
    }, options.noise));
    this.envelope = new _AmplitudeEnvelope.AmplitudeEnvelope(Object.assign({
      context: this.context
    }, options.envelope)); // connect the noise to the output

    this.noise.chain(this.envelope, this.output);
  }

  static getDefaults() {
    return Object.assign(_Instrument.Instrument.getDefaults(), {
      envelope: Object.assign((0, _Defaults.omitFromObject)(_Envelope.Envelope.getDefaults(), Object.keys(_ToneAudioNode.ToneAudioNode.getDefaults())), {
        decay: 0.1,
        sustain: 0.0
      }),
      noise: Object.assign((0, _Defaults.omitFromObject)(_Noise.Noise.getDefaults(), Object.keys(_Source.Source.getDefaults())), {
        type: "white"
      })
    });
  }
  /**
   * Start the attack portion of the envelopes. Unlike other
   * instruments, Tone.NoiseSynth doesn't have a note.
   * @example
   * const noiseSynth = new Tone.NoiseSynth().toDestination();
   * noiseSynth.triggerAttack();
   */


  triggerAttack(time, velocity = 1) {
    time = this.toSeconds(time); // the envelopes

    this.envelope.triggerAttack(time, velocity); // start the noise

    this.noise.start(time);

    if (this.envelope.sustain === 0) {
      this.noise.stop(time + this.toSeconds(this.envelope.attack) + this.toSeconds(this.envelope.decay));
    }

    return this;
  }
  /**
   * Start the release portion of the envelopes.
   */


  triggerRelease(time) {
    time = this.toSeconds(time);
    this.envelope.triggerRelease(time);
    this.noise.stop(time + this.toSeconds(this.envelope.release));
    return this;
  }

  sync() {
    this._syncMethod("triggerAttack", 0);

    this._syncMethod("triggerRelease", 0);

    return this;
  }

  triggerAttackRelease(duration, time, velocity = 1) {
    time = this.toSeconds(time);
    duration = this.toSeconds(duration);
    this.triggerAttack(time, velocity);
    this.triggerRelease(time + duration);
    return this;
  }

  dispose() {
    super.dispose();
    this.noise.dispose();
    this.envelope.dispose();
    return this;
  }

}

exports.NoiseSynth = NoiseSynth;
},{"../component/envelope/AmplitudeEnvelope":"../node_modules/tone/build/esm/component/envelope/AmplitudeEnvelope.js","../core/util/Defaults":"../node_modules/tone/build/esm/core/util/Defaults.js","../source/Noise":"../node_modules/tone/build/esm/source/Noise.js","./Instrument":"../node_modules/tone/build/esm/instrument/Instrument.js","../core/context/ToneAudioNode":"../node_modules/tone/build/esm/core/context/ToneAudioNode.js","../component/envelope/Envelope":"../node_modules/tone/build/esm/component/envelope/Envelope.js","../source/Source":"../node_modules/tone/build/esm/source/Source.js"}],"../node_modules/tone/build/esm/core/worklet/WorkletGlobalScope.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.addToWorklet = addToWorklet;
exports.registerProcessor = registerProcessor;
exports.getWorkletGlobalScope = getWorkletGlobalScope;

/**
 * All of the classes or functions which are loaded into the AudioWorkletGlobalScope
 */
const workletContext = new Set();
/**
 * Add a class to the AudioWorkletGlobalScope
 */

function addToWorklet(classOrFunction) {
  workletContext.add(classOrFunction);
}
/**
 * Register a processor in the AudioWorkletGlobalScope with the given name
 */


function registerProcessor(name, classDesc) {
  const processor =
  /* javascript */
  `registerProcessor("${name}", ${classDesc})`;
  workletContext.add(processor);
}
/**
 * Get all of the modules which have been registered to the AudioWorkletGlobalScope
 */


function getWorkletGlobalScope() {
  return Array.from(workletContext).join("\n");
}
},{}],"../node_modules/tone/build/esm/core/worklet/ToneAudioWorklet.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ToneAudioWorklet = void 0;

var _ToneAudioNode = require("../context/ToneAudioNode");

var _Interface = require("../util/Interface");

var _WorkletGlobalScope = require("./WorkletGlobalScope");

class ToneAudioWorklet extends _ToneAudioNode.ToneAudioNode {
  constructor(options) {
    super(options);
    this.name = "ToneAudioWorklet";
    /**
     * The constructor options for the node
     */

    this.workletOptions = {};
    /**
     * Callback which is invoked when there is an error in the processing
     */

    this.onprocessorerror = _Interface.noOp;
    const blobUrl = URL.createObjectURL(new Blob([(0, _WorkletGlobalScope.getWorkletGlobalScope)()], {
      type: "text/javascript"
    }));

    const name = this._audioWorkletName();

    this._dummyGain = this.context.createGain();
    this._dummyParam = this._dummyGain.gain; // Register the processor

    this.context.addAudioWorkletModule(blobUrl, name).then(() => {
      // create the worklet when it's read
      if (!this.disposed) {
        this._worklet = this.context.createAudioWorkletNode(name, this.workletOptions);
        this._worklet.onprocessorerror = this.onprocessorerror.bind(this);
        this.onReady(this._worklet);
      }
    });
  }

  dispose() {
    super.dispose();

    this._dummyGain.disconnect();

    if (this._worklet) {
      this._worklet.port.postMessage("dispose");

      this._worklet.disconnect();
    }

    return this;
  }

}

exports.ToneAudioWorklet = ToneAudioWorklet;
},{"../context/ToneAudioNode":"../node_modules/tone/build/esm/core/context/ToneAudioNode.js","../util/Interface":"../node_modules/tone/build/esm/core/util/Interface.js","./WorkletGlobalScope":"../node_modules/tone/build/esm/core/worklet/WorkletGlobalScope.js"}],"../node_modules/tone/build/esm/core/worklet/ToneAudioWorkletProcessor.worklet.js":[function(require,module,exports) {
"use strict";

var _WorkletGlobalScope = require("./WorkletGlobalScope");

const toneAudioWorkletProcessor =
/* javascript */
`
	/**
	 * The base AudioWorkletProcessor for use in Tone.js. Works with the [[ToneAudioWorklet]]. 
	 */
	class ToneAudioWorkletProcessor extends AudioWorkletProcessor {

		constructor(options) {
			
			super(options);
			/**
			 * If the processor was disposed or not. Keep alive until it's disposed.
			 */
			this.disposed = false;
		   	/** 
			 * The number of samples in the processing block
			 */
			this.blockSize = 128;
			/**
			 * the sample rate
			 */
			this.sampleRate = sampleRate;

			this.port.onmessage = (event) => {
				// when it receives a dispose 
				if (event.data === "dispose") {
					this.disposed = true;
				}
			};
		}
	}
`;
(0, _WorkletGlobalScope.addToWorklet)(toneAudioWorkletProcessor);
},{"./WorkletGlobalScope":"../node_modules/tone/build/esm/core/worklet/WorkletGlobalScope.js"}],"../node_modules/tone/build/esm/core/worklet/SingleIOProcessor.worklet.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.singleIOProcess = void 0;

require("./ToneAudioWorkletProcessor.worklet");

var _WorkletGlobalScope = require("./WorkletGlobalScope");

const singleIOProcess =
/* javascript */
`
	/**
	 * Abstract class for a single input/output processor. 
	 * has a 'generate' function which processes one sample at a time
	 */
	class SingleIOProcessor extends ToneAudioWorkletProcessor {

		constructor(options) {
			super(Object.assign(options, {
				numberOfInputs: 1,
				numberOfOutputs: 1
			}));
			/**
			 * Holds the name of the parameter and a single value of that
			 * parameter at the current sample
			 * @type { [name: string]: number }
			 */
			this.params = {}
		}

		/**
		 * Generate an output sample from the input sample and parameters
		 * @abstract
		 * @param input number
		 * @param channel number
		 * @param parameters { [name: string]: number }
		 * @returns number
		 */
		generate(){}

		/**
		 * Update the private params object with the 
		 * values of the parameters at the given index
		 * @param parameters { [name: string]: Float32Array },
		 * @param index number
		 */
		updateParams(parameters, index) {
			for (const paramName in parameters) {
				const param = parameters[paramName];
				if (param.length > 1) {
					this.params[paramName] = parameters[paramName][index];
				} else {
					this.params[paramName] = parameters[paramName][0];
				}
			}
		}

		/**
		 * Process a single frame of the audio
		 * @param inputs Float32Array[][]
		 * @param outputs Float32Array[][]
		 */
		process(inputs, outputs, parameters) {
			const input = inputs[0];
			const output = outputs[0];
			// get the parameter values
			const channelCount = Math.max(input && input.length || 0, output.length);
			for (let sample = 0; sample < this.blockSize; sample++) {
				this.updateParams(parameters, sample);
				for (let channel = 0; channel < channelCount; channel++) {
					const inputSample = input && input.length ? input[channel][sample] : 0;
					output[channel][sample] = this.generate(inputSample, channel, this.params);
				}
			}
			return !this.disposed;
		}
	};
`;
exports.singleIOProcess = singleIOProcess;
(0, _WorkletGlobalScope.addToWorklet)(singleIOProcess);
},{"./ToneAudioWorkletProcessor.worklet":"../node_modules/tone/build/esm/core/worklet/ToneAudioWorkletProcessor.worklet.js","./WorkletGlobalScope":"../node_modules/tone/build/esm/core/worklet/WorkletGlobalScope.js"}],"../node_modules/tone/build/esm/core/worklet/DelayLine.worklet.js":[function(require,module,exports) {
"use strict";

var _WorkletGlobalScope = require("./WorkletGlobalScope");

const delayLine =
/* javascript */
`
	/**
	 * A multichannel buffer for use within an AudioWorkletProcessor as a delay line
	 */
	class DelayLine {
		
		constructor(size, channels) {
			this.buffer = [];
			this.writeHead = []
			this.size = size;

			// create the empty channels
			for (let i = 0; i < channels; i++) {
				this.buffer[i] = new Float32Array(this.size);
				this.writeHead[i] = 0;
			}
		}

		/**
		 * Push a value onto the end
		 * @param channel number
		 * @param value number
		 */
		push(channel, value) {
			this.writeHead[channel] += 1;
			if (this.writeHead[channel] > this.size) {
				this.writeHead[channel] = 0;
			}
			this.buffer[channel][this.writeHead[channel]] = value;
		}

		/**
		 * Get the recorded value of the channel given the delay
		 * @param channel number
		 * @param delay number delay samples
		 */
		get(channel, delay) {
			let readHead = this.writeHead[channel] - Math.floor(delay);
			if (readHead < 0) {
				readHead += this.size;
			}
			return this.buffer[channel][readHead];
		}
	}
`;
(0, _WorkletGlobalScope.addToWorklet)(delayLine);
},{"./WorkletGlobalScope":"../node_modules/tone/build/esm/core/worklet/WorkletGlobalScope.js"}],"../node_modules/tone/build/esm/component/filter/FeedbackCombFilter.worklet.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.workletName = void 0;

require("../../core/worklet/SingleIOProcessor.worklet");

require("../../core/worklet/DelayLine.worklet");

var _WorkletGlobalScope = require("../../core/worklet/WorkletGlobalScope");

const workletName = "feedback-comb-filter";
exports.workletName = workletName;
const feedbackCombFilter =
/* javascript */
`
	class FeedbackCombFilterWorklet extends SingleIOProcessor {

		constructor(options) {
			super(options);
			this.delayLine = new DelayLine(this.sampleRate, options.channelCount || 2);
		}

		static get parameterDescriptors() {
			return [{
				name: "delayTime",
				defaultValue: 0.1,
				minValue: 0,
				maxValue: 1,
				automationRate: "k-rate"
			}, {
				name: "feedback",
				defaultValue: 0.5,
				minValue: 0,
				maxValue: 0.9999,
				automationRate: "k-rate"
			}];
		}

		generate(input, channel, parameters) {
			const delayedSample = this.delayLine.get(channel, parameters.delayTime * this.sampleRate);
			this.delayLine.push(channel, input + delayedSample * parameters.feedback);
			return delayedSample;
		}
	}
`;
(0, _WorkletGlobalScope.registerProcessor)(workletName, feedbackCombFilter);
},{"../../core/worklet/SingleIOProcessor.worklet":"../node_modules/tone/build/esm/core/worklet/SingleIOProcessor.worklet.js","../../core/worklet/DelayLine.worklet":"../node_modules/tone/build/esm/core/worklet/DelayLine.worklet.js","../../core/worklet/WorkletGlobalScope":"../node_modules/tone/build/esm/core/worklet/WorkletGlobalScope.js"}],"../node_modules/tone/build/esm/component/filter/FeedbackCombFilter.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FeedbackCombFilter = void 0;

var _Gain = require("../../core/context/Gain");

var _Param = require("../../core/context/Param");

var _ToneAudioNode = require("../../core/context/ToneAudioNode");

var _Defaults = require("../../core/util/Defaults");

var _Interface = require("../../core/util/Interface");

var _ToneAudioWorklet = require("../../core/worklet/ToneAudioWorklet");

var _FeedbackCombFilter = require("./FeedbackCombFilter.worklet");

/**
 * Comb filters are basic building blocks for physical modeling. Read more
 * about comb filters on [CCRMA's website](https://ccrma.stanford.edu/~jos/pasp/Feedback_Comb_Filters.html).
 *
 * This comb filter is implemented with the AudioWorkletNode which allows it to have feedback delays less than the
 * Web Audio processing block of 128 samples. There is a polyfill for browsers that don't yet support the
 * AudioWorkletNode, but it will add some latency and have slower performance than the AudioWorkletNode.
 * @category Component
 */
class FeedbackCombFilter extends _ToneAudioWorklet.ToneAudioWorklet {
  constructor() {
    super((0, _Defaults.optionsFromArguments)(FeedbackCombFilter.getDefaults(), arguments, ["delayTime", "resonance"]));
    this.name = "FeedbackCombFilter";
    const options = (0, _Defaults.optionsFromArguments)(FeedbackCombFilter.getDefaults(), arguments, ["delayTime", "resonance"]);
    this.input = new _Gain.Gain({
      context: this.context
    });
    this.output = new _Gain.Gain({
      context: this.context
    });
    this.delayTime = new _Param.Param({
      context: this.context,
      value: options.delayTime,
      units: "time",
      minValue: 0,
      maxValue: 1,
      param: this._dummyParam,
      swappable: true
    });
    this.resonance = new _Param.Param({
      context: this.context,
      value: options.resonance,
      units: "normalRange",
      param: this._dummyParam,
      swappable: true
    });
    (0, _Interface.readOnly)(this, ["resonance", "delayTime"]);
  }

  _audioWorkletName() {
    return _FeedbackCombFilter.workletName;
  }
  /**
   * The default parameters
   */


  static getDefaults() {
    return Object.assign(_ToneAudioNode.ToneAudioNode.getDefaults(), {
      delayTime: 0.1,
      resonance: 0.5
    });
  }

  onReady(node) {
    (0, _ToneAudioNode.connectSeries)(this.input, node, this.output);
    const delayTime = node.parameters.get("delayTime");
    ;
    this.delayTime.setParam(delayTime);
    const feedback = node.parameters.get("feedback");
    ;
    this.resonance.setParam(feedback);
  }

  dispose() {
    super.dispose();
    this.input.dispose();
    this.output.dispose();
    this.delayTime.dispose();
    this.resonance.dispose();
    return this;
  }

}

exports.FeedbackCombFilter = FeedbackCombFilter;
},{"../../core/context/Gain":"../node_modules/tone/build/esm/core/context/Gain.js","../../core/context/Param":"../node_modules/tone/build/esm/core/context/Param.js","../../core/context/ToneAudioNode":"../node_modules/tone/build/esm/core/context/ToneAudioNode.js","../../core/util/Defaults":"../node_modules/tone/build/esm/core/util/Defaults.js","../../core/util/Interface":"../node_modules/tone/build/esm/core/util/Interface.js","../../core/worklet/ToneAudioWorklet":"../node_modules/tone/build/esm/core/worklet/ToneAudioWorklet.js","./FeedbackCombFilter.worklet":"../node_modules/tone/build/esm/component/filter/FeedbackCombFilter.worklet.js"}],"../node_modules/tone/build/esm/component/filter/OnePoleFilter.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.OnePoleFilter = void 0;

var _ToneAudioNode = require("../../core/context/ToneAudioNode");

var _Defaults = require("../../core/util/Defaults");

var _Gain = require("../../core/context/Gain");

/**
 * A one pole filter with 6db-per-octave rolloff. Either "highpass" or "lowpass".
 * Note that changing the type or frequency may result in a discontinuity which
 * can sound like a click or pop.
 * References:
 * * http://www.earlevel.com/main/2012/12/15/a-one-pole-filter/
 * * http://www.dspguide.com/ch19/2.htm
 * * https://github.com/vitaliy-bobrov/js-rocks/blob/master/src/app/audio/effects/one-pole-filters.ts
 * @category Component
 */
class OnePoleFilter extends _ToneAudioNode.ToneAudioNode {
  constructor() {
    super((0, _Defaults.optionsFromArguments)(OnePoleFilter.getDefaults(), arguments, ["frequency", "type"]));
    this.name = "OnePoleFilter";
    const options = (0, _Defaults.optionsFromArguments)(OnePoleFilter.getDefaults(), arguments, ["frequency", "type"]);
    this._frequency = options.frequency;
    this._type = options.type;
    this.input = new _Gain.Gain({
      context: this.context
    });
    this.output = new _Gain.Gain({
      context: this.context
    });

    this._createFilter();
  }

  static getDefaults() {
    return Object.assign(_ToneAudioNode.ToneAudioNode.getDefaults(), {
      frequency: 880,
      type: "lowpass"
    });
  }
  /**
   * Create a filter and dispose the old one
   */


  _createFilter() {
    const oldFilter = this._filter;
    const freq = this.toFrequency(this._frequency);
    const t = 1 / (2 * Math.PI * freq);

    if (this._type === "lowpass") {
      const a0 = 1 / (t * this.context.sampleRate);
      const b1 = a0 - 1;
      this._filter = this.context.createIIRFilter([a0, 0], [1, b1]);
    } else {
      const b1 = 1 / (t * this.context.sampleRate) - 1;
      this._filter = this.context.createIIRFilter([1, -1], [1, b1]);
    }

    this.input.chain(this._filter, this.output);

    if (oldFilter) {
      // dispose it on the next block
      this.context.setTimeout(() => {
        if (!this.disposed) {
          this.input.disconnect(oldFilter);
          oldFilter.disconnect();
        }
      }, this.blockTime);
    }
  }
  /**
   * The frequency value.
   */


  get frequency() {
    return this._frequency;
  }

  set frequency(fq) {
    this._frequency = fq;

    this._createFilter();
  }
  /**
   * The OnePole Filter type, either "highpass" or "lowpass"
   */


  get type() {
    return this._type;
  }

  set type(t) {
    this._type = t;

    this._createFilter();
  }
  /**
   * Get the frequency response curve. This curve represents how the filter
   * responses to frequencies between 20hz-20khz.
   * @param  len The number of values to return
   * @return The frequency response curve between 20-20kHz
   */


  getFrequencyResponse(len = 128) {
    const freqValues = new Float32Array(len);

    for (let i = 0; i < len; i++) {
      const norm = Math.pow(i / len, 2);
      const freq = norm * (20000 - 20) + 20;
      freqValues[i] = freq;
    }

    const magValues = new Float32Array(len);
    const phaseValues = new Float32Array(len);

    this._filter.getFrequencyResponse(freqValues, magValues, phaseValues);

    return magValues;
  }

  dispose() {
    super.dispose();
    this.input.dispose();
    this.output.dispose();

    this._filter.disconnect();

    return this;
  }

}

exports.OnePoleFilter = OnePoleFilter;
},{"../../core/context/ToneAudioNode":"../node_modules/tone/build/esm/core/context/ToneAudioNode.js","../../core/util/Defaults":"../node_modules/tone/build/esm/core/util/Defaults.js","../../core/context/Gain":"../node_modules/tone/build/esm/core/context/Gain.js"}],"../node_modules/tone/build/esm/component/filter/LowpassCombFilter.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.LowpassCombFilter = void 0;

var _ToneAudioNode = require("../../core/context/ToneAudioNode");

var _Defaults = require("../../core/util/Defaults");

var _FeedbackCombFilter = require("./FeedbackCombFilter");

var _OnePoleFilter = require("./OnePoleFilter");

/**
 * A lowpass feedback comb filter. It is similar to
 * [[FeedbackCombFilter]], but includes a lowpass filter.
 * @category Component
 */
class LowpassCombFilter extends _ToneAudioNode.ToneAudioNode {
  constructor() {
    super((0, _Defaults.optionsFromArguments)(LowpassCombFilter.getDefaults(), arguments, ["delayTime", "resonance", "dampening"]));
    this.name = "LowpassCombFilter";
    const options = (0, _Defaults.optionsFromArguments)(LowpassCombFilter.getDefaults(), arguments, ["delayTime", "resonance", "dampening"]);
    this._combFilter = this.output = new _FeedbackCombFilter.FeedbackCombFilter({
      context: this.context,
      delayTime: options.delayTime,
      resonance: options.resonance
    });
    this.delayTime = this._combFilter.delayTime;
    this.resonance = this._combFilter.resonance;
    this._lowpass = this.input = new _OnePoleFilter.OnePoleFilter({
      context: this.context,
      frequency: options.dampening,
      type: "lowpass"
    }); // connections

    this._lowpass.connect(this._combFilter);
  }

  static getDefaults() {
    return Object.assign(_ToneAudioNode.ToneAudioNode.getDefaults(), {
      dampening: 3000,
      delayTime: 0.1,
      resonance: 0.5
    });
  }
  /**
   * The dampening control of the feedback
   */


  get dampening() {
    return this._lowpass.frequency;
  }

  set dampening(fq) {
    this._lowpass.frequency = fq;
  }

  dispose() {
    super.dispose();

    this._combFilter.dispose();

    this._lowpass.dispose();

    return this;
  }

}

exports.LowpassCombFilter = LowpassCombFilter;
},{"../../core/context/ToneAudioNode":"../node_modules/tone/build/esm/core/context/ToneAudioNode.js","../../core/util/Defaults":"../node_modules/tone/build/esm/core/util/Defaults.js","./FeedbackCombFilter":"../node_modules/tone/build/esm/component/filter/FeedbackCombFilter.js","./OnePoleFilter":"../node_modules/tone/build/esm/component/filter/OnePoleFilter.js"}],"../node_modules/tone/build/esm/instrument/PluckSynth.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PluckSynth = void 0;

var _LowpassCombFilter = require("../component/filter/LowpassCombFilter");

var _Defaults = require("../core/util/Defaults");

var _Noise = require("../source/Noise");

var _Instrument = require("./Instrument");

/**
 * Karplus-String string synthesis.
 * @example
 * const plucky = new Tone.PluckSynth().toDestination();
 * plucky.triggerAttack("C4", "+0.5");
 * plucky.triggerAttack("C3", "+1");
 * plucky.triggerAttack("C2", "+1.5");
 * plucky.triggerAttack("C1", "+2");
 * @category Instrument
 */
class PluckSynth extends _Instrument.Instrument {
  constructor() {
    super((0, _Defaults.optionsFromArguments)(PluckSynth.getDefaults(), arguments));
    this.name = "PluckSynth";
    const options = (0, _Defaults.optionsFromArguments)(PluckSynth.getDefaults(), arguments);
    this._noise = new _Noise.Noise({
      context: this.context,
      type: "pink"
    });
    this.attackNoise = options.attackNoise;
    this._lfcf = new _LowpassCombFilter.LowpassCombFilter({
      context: this.context,
      dampening: options.dampening,
      resonance: options.resonance
    });
    this.resonance = options.resonance;
    this.release = options.release;

    this._noise.connect(this._lfcf);

    this._lfcf.connect(this.output);
  }

  static getDefaults() {
    return (0, _Defaults.deepMerge)(_Instrument.Instrument.getDefaults(), {
      attackNoise: 1,
      dampening: 4000,
      resonance: 0.7,
      release: 1
    });
  }
  /**
   * The dampening control. i.e. the lowpass filter frequency of the comb filter
   * @min 0
   * @max 7000
   */


  get dampening() {
    return this._lfcf.dampening;
  }

  set dampening(fq) {
    this._lfcf.dampening = fq;
  }

  triggerAttack(note, time) {
    const freq = this.toFrequency(note);
    time = this.toSeconds(time);
    const delayAmount = 1 / freq;

    this._lfcf.delayTime.setValueAtTime(delayAmount, time);

    this._noise.start(time);

    this._noise.stop(time + delayAmount * this.attackNoise);

    this._lfcf.resonance.cancelScheduledValues(time);

    this._lfcf.resonance.setValueAtTime(this.resonance, time);

    return this;
  }
  /**
   * Ramp down the [[resonance]] to 0 over the duration of the release time.
   */


  triggerRelease(time) {
    this._lfcf.resonance.linearRampTo(0, this.release, time);

    return this;
  }

  dispose() {
    super.dispose();

    this._noise.dispose();

    this._lfcf.dispose();

    return this;
  }

}

exports.PluckSynth = PluckSynth;
},{"../component/filter/LowpassCombFilter":"../node_modules/tone/build/esm/component/filter/LowpassCombFilter.js","../core/util/Defaults":"../node_modules/tone/build/esm/core/util/Defaults.js","../source/Noise":"../node_modules/tone/build/esm/source/Noise.js","./Instrument":"../node_modules/tone/build/esm/instrument/Instrument.js"}],"../node_modules/tone/build/esm/instrument/PolySynth.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PolySynth = void 0;

var _Midi = require("../core/type/Midi");

var _Defaults = require("../core/util/Defaults");

var _TypeCheck = require("../core/util/TypeCheck");

var _Instrument = require("./Instrument");

var _Synth = require("./Synth");

var _Debug = require("../core/util/Debug");

/**
 * PolySynth handles voice creation and allocation for any
 * instruments passed in as the second paramter. PolySynth is
 * not a synthesizer by itself, it merely manages voices of
 * one of the other types of synths, allowing any of the
 * monophonic synthesizers to be polyphonic.
 *
 * @example
 * const synth = new Tone.PolySynth().toDestination();
 * // set the attributes across all the voices using 'set'
 * synth.set({ detune: -1200 });
 * // play a chord
 * synth.triggerAttackRelease(["C4", "E4", "A4"], 1);
 * @category Instrument
 */
class PolySynth extends _Instrument.Instrument {
  constructor() {
    super((0, _Defaults.optionsFromArguments)(PolySynth.getDefaults(), arguments, ["voice", "options"]));
    this.name = "PolySynth";
    /**
     * The voices which are not currently in use
     */

    this._availableVoices = [];
    /**
     * The currently active voices
     */

    this._activeVoices = [];
    /**
     * All of the allocated voices for this synth.
     */

    this._voices = [];
    /**
     * The GC timeout. Held so that it could be cancelled when the node is disposed.
     */

    this._gcTimeout = -1;
    /**
     * A moving average of the number of active voices
     */

    this._averageActiveVoices = 0;
    const options = (0, _Defaults.optionsFromArguments)(PolySynth.getDefaults(), arguments, ["voice", "options"]); // check against the old API (pre 14.3.0)

    (0, _Debug.assert)(!(0, _TypeCheck.isNumber)(options.voice), "DEPRECATED: The polyphony count is no longer the first argument.");
    const defaults = options.voice.getDefaults();
    this.options = Object.assign(defaults, options.options);
    this.voice = options.voice;
    this.maxPolyphony = options.maxPolyphony; // create the first voice

    this._dummyVoice = this._getNextAvailableVoice(); // remove it from the voices list

    const index = this._voices.indexOf(this._dummyVoice);

    this._voices.splice(index, 1); // kick off the GC interval


    this._gcTimeout = this.context.setInterval(this._collectGarbage.bind(this), 1);
  }

  static getDefaults() {
    return Object.assign(_Instrument.Instrument.getDefaults(), {
      maxPolyphony: 32,
      options: {},
      voice: _Synth.Synth
    });
  }
  /**
   * The number of active voices.
   */


  get activeVoices() {
    return this._activeVoices.length;
  }
  /**
   * Invoked when the source is done making sound, so that it can be
   * readded to the pool of available voices
   */


  _makeVoiceAvailable(voice) {
    this._availableVoices.push(voice); // remove the midi note from 'active voices'


    const activeVoiceIndex = this._activeVoices.findIndex(e => e.voice === voice);

    this._activeVoices.splice(activeVoiceIndex, 1);
  }
  /**
   * Get an available voice from the pool of available voices.
   * If one is not available and the maxPolyphony limit is reached,
   * steal a voice, otherwise return null.
   */


  _getNextAvailableVoice() {
    // if there are available voices, return the first one
    if (this._availableVoices.length) {
      return this._availableVoices.shift();
    } else if (this._voices.length < this.maxPolyphony) {
      // otherwise if there is still more maxPolyphony, make a new voice
      const voice = new this.voice(Object.assign(this.options, {
        context: this.context,
        onsilence: this._makeVoiceAvailable.bind(this)
      }));
      voice.connect(this.output);

      this._voices.push(voice);

      return voice;
    } else {
      (0, _Debug.warn)("Max polyphony exceeded. Note dropped.");
    }
  }
  /**
   * Occasionally check if there are any allocated voices which can be cleaned up.
   */


  _collectGarbage() {
    this._averageActiveVoices = Math.max(this._averageActiveVoices * 0.95, this.activeVoices);

    if (this._availableVoices.length && this._voices.length > Math.ceil(this._averageActiveVoices + 1)) {
      // take off an available note
      const firstAvail = this._availableVoices.shift();

      const index = this._voices.indexOf(firstAvail);

      this._voices.splice(index, 1);

      if (!this.context.isOffline) {
        firstAvail.dispose();
      }
    }
  }
  /**
   * Internal method which triggers the attack
   */


  _triggerAttack(notes, time, velocity) {
    notes.forEach(note => {
      const midiNote = new _Midi.MidiClass(this.context, note).toMidi();

      const voice = this._getNextAvailableVoice();

      if (voice) {
        voice.triggerAttack(note, time, velocity);

        this._activeVoices.push({
          midi: midiNote,
          voice,
          released: false
        });

        this.log("triggerAttack", note, time);
      }
    });
  }
  /**
   * Internal method which triggers the release
   */


  _triggerRelease(notes, time) {
    notes.forEach(note => {
      const midiNote = new _Midi.MidiClass(this.context, note).toMidi();

      const event = this._activeVoices.find(({
        midi,
        released
      }) => midi === midiNote && !released);

      if (event) {
        // trigger release on that note
        event.voice.triggerRelease(time); // mark it as released

        event.released = true;
        this.log("triggerRelease", note, time);
      }
    });
  }
  /**
   * Schedule the attack/release events. If the time is in the future, then it should set a timeout
   * to wait for just-in-time scheduling
   */


  _scheduleEvent(type, notes, time, velocity) {
    (0, _Debug.assert)(!this.disposed, "Synth was already disposed"); // if the notes are greater than this amount of time in the future, they should be scheduled with setTimeout

    if (time <= this.now()) {
      // do it immediately
      if (type === "attack") {
        this._triggerAttack(notes, time, velocity);
      } else {
        this._triggerRelease(notes, time);
      }
    } else {
      // schedule it to start in the future
      this.context.setTimeout(() => {
        this._scheduleEvent(type, notes, time, velocity);
      }, time - this.now());
    }
  }
  /**
   * Trigger the attack portion of the note
   * @param  notes The notes to play. Accepts a single Frequency or an array of frequencies.
   * @param  time  The start time of the note.
   * @param velocity The velocity of the note.
   * @example
   * const synth = new Tone.PolySynth(Tone.FMSynth).toDestination();
   * // trigger a chord immediately with a velocity of 0.2
   * synth.triggerAttack(["Ab3", "C4", "F5"], Tone.now(), 0.2);
   */


  triggerAttack(notes, time, velocity) {
    if (!Array.isArray(notes)) {
      notes = [notes];
    }

    const computedTime = this.toSeconds(time);

    this._scheduleEvent("attack", notes, computedTime, velocity);

    return this;
  }
  /**
   * Trigger the release of the note. Unlike monophonic instruments,
   * a note (or array of notes) needs to be passed in as the first argument.
   * @param  notes The notes to play. Accepts a single Frequency or an array of frequencies.
   * @param  time  When the release will be triggered.
   * @example
   * @example
   * const poly = new Tone.PolySynth(Tone.AMSynth).toDestination();
   * poly.triggerAttack(["Ab3", "C4", "F5"]);
   * // trigger the release of the given notes.
   * poly.triggerRelease(["Ab3", "C4"], "+1");
   * poly.triggerRelease("F5", "+3");
   */


  triggerRelease(notes, time) {
    if (!Array.isArray(notes)) {
      notes = [notes];
    }

    const computedTime = this.toSeconds(time);

    this._scheduleEvent("release", notes, computedTime);

    return this;
  }
  /**
   * Trigger the attack and release after the specified duration
   * @param  notes The notes to play. Accepts a single  Frequency or an array of frequencies.
   * @param  duration the duration of the note
   * @param  time  if no time is given, defaults to now
   * @param  velocity the velocity of the attack (0-1)
   * @example
   * const poly = new Tone.PolySynth(Tone.AMSynth).toDestination();
   * // can pass in an array of durations as well
   * poly.triggerAttackRelease(["Eb3", "G4", "Bb4", "D5"], [4, 3, 2, 1]);
   */


  triggerAttackRelease(notes, duration, time, velocity) {
    const computedTime = this.toSeconds(time);
    this.triggerAttack(notes, computedTime, velocity);

    if ((0, _TypeCheck.isArray)(duration)) {
      (0, _Debug.assert)((0, _TypeCheck.isArray)(notes), "If the duration is an array, the notes must also be an array");
      notes = notes;

      for (let i = 0; i < notes.length; i++) {
        const d = duration[Math.min(i, duration.length - 1)];
        const durationSeconds = this.toSeconds(d);
        (0, _Debug.assert)(durationSeconds > 0, "The duration must be greater than 0");
        this.triggerRelease(notes[i], computedTime + durationSeconds);
      }
    } else {
      const durationSeconds = this.toSeconds(duration);
      (0, _Debug.assert)(durationSeconds > 0, "The duration must be greater than 0");
      this.triggerRelease(notes, computedTime + durationSeconds);
    }

    return this;
  }

  sync() {
    this._syncMethod("triggerAttack", 1);

    this._syncMethod("triggerRelease", 1);

    return this;
  }
  /**
   * Set a member/attribute of the voices
   * @example
   * const poly = new Tone.PolySynth().toDestination();
   * // set all of the voices using an options object for the synth type
   * poly.set({
   * 	envelope: {
   * 		attack: 0.25
   * 	}
   * });
   * poly.triggerAttackRelease("Bb3", 0.2);
   */


  set(options) {
    // remove options which are controlled by the PolySynth
    const sanitizedOptions = (0, _Defaults.omitFromObject)(options, ["onsilence", "context"]); // store all of the options

    this.options = (0, _Defaults.deepMerge)(this.options, sanitizedOptions);

    this._voices.forEach(voice => voice.set(sanitizedOptions));

    this._dummyVoice.set(sanitizedOptions);

    return this;
  }

  get() {
    return this._dummyVoice.get();
  }
  /**
   * Trigger the release portion of all the currently active voices immediately.
   * Useful for silencing the synth.
   */


  releaseAll(time) {
    const computedTime = this.toSeconds(time);

    this._activeVoices.forEach(({
      voice
    }) => {
      voice.triggerRelease(computedTime);
    });

    return this;
  }

  dispose() {
    super.dispose();

    this._dummyVoice.dispose();

    this._voices.forEach(v => v.dispose());

    this._activeVoices = [];
    this._availableVoices = [];
    this.context.clearInterval(this._gcTimeout);
    return this;
  }

}

exports.PolySynth = PolySynth;
},{"../core/type/Midi":"../node_modules/tone/build/esm/core/type/Midi.js","../core/util/Defaults":"../node_modules/tone/build/esm/core/util/Defaults.js","../core/util/TypeCheck":"../node_modules/tone/build/esm/core/util/TypeCheck.js","./Instrument":"../node_modules/tone/build/esm/instrument/Instrument.js","./Synth":"../node_modules/tone/build/esm/instrument/Synth.js","../core/util/Debug":"../node_modules/tone/build/esm/core/util/Debug.js"}],"../node_modules/tone/build/esm/instrument/Sampler.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Sampler = void 0;

var _tslib = require("tslib");

var _ToneAudioBuffers = require("../core/context/ToneAudioBuffers");

var _Conversions = require("../core/type/Conversions");

var _Frequency = require("../core/type/Frequency");

var _Defaults = require("../core/util/Defaults");

var _Interface = require("../core/util/Interface");

var _TypeCheck = require("../core/util/TypeCheck");

var _Instrument = require("../instrument/Instrument");

var _ToneBufferSource = require("../source/buffer/ToneBufferSource");

var _Decorator = require("../core/util/Decorator");

var _Debug = require("../core/util/Debug");

/**
 * Pass in an object which maps the note's pitch or midi value to the url,
 * then you can trigger the attack and release of that note like other instruments.
 * By automatically repitching the samples, it is possible to play pitches which
 * were not explicitly included which can save loading time.
 *
 * For sample or buffer playback where repitching is not necessary,
 * use [[Player]].
 * @example
 * const sampler = new Tone.Sampler({
 * 	urls: {
 * 		A1: "A1.mp3",
 * 		A2: "A2.mp3",
 * 	},
 * 	baseUrl: "https://tonejs.github.io/audio/casio/",
 * 	onload: () => {
 * 		sampler.triggerAttackRelease(["C1", "E1", "G1", "B1"], 0.5);
 * 	}
 * }).toDestination();
 * @category Instrument
 */
class Sampler extends _Instrument.Instrument {
  constructor() {
    super((0, _Defaults.optionsFromArguments)(Sampler.getDefaults(), arguments, ["urls", "onload", "baseUrl"], "urls"));
    this.name = "Sampler";
    /**
     * The object of all currently playing BufferSources
     */

    this._activeSources = new Map();
    const options = (0, _Defaults.optionsFromArguments)(Sampler.getDefaults(), arguments, ["urls", "onload", "baseUrl"], "urls");
    const urlMap = {};
    Object.keys(options.urls).forEach(note => {
      const noteNumber = parseInt(note, 10);
      (0, _Debug.assert)((0, _TypeCheck.isNote)(note) || (0, _TypeCheck.isNumber)(noteNumber) && isFinite(noteNumber), `url key is neither a note or midi pitch: ${note}`);

      if ((0, _TypeCheck.isNote)(note)) {
        // convert the note name to MIDI
        const mid = new _Frequency.FrequencyClass(this.context, note).toMidi();
        urlMap[mid] = options.urls[note];
      } else if ((0, _TypeCheck.isNumber)(noteNumber) && isFinite(noteNumber)) {
        // otherwise if it's numbers assume it's midi
        urlMap[noteNumber] = options.urls[noteNumber];
      }
    });
    this._buffers = new _ToneAudioBuffers.ToneAudioBuffers({
      urls: urlMap,
      onload: options.onload,
      baseUrl: options.baseUrl,
      onerror: options.onerror
    });
    this.attack = options.attack;
    this.release = options.release;
    this.curve = options.curve; // invoke the callback if it's already loaded

    if (this._buffers.loaded) {
      // invoke onload deferred
      Promise.resolve().then(options.onload);
    }
  }

  static getDefaults() {
    return Object.assign(_Instrument.Instrument.getDefaults(), {
      attack: 0,
      baseUrl: "",
      curve: "exponential",
      onload: _Interface.noOp,
      onerror: _Interface.noOp,
      release: 0.1,
      urls: {}
    });
  }
  /**
   * Returns the difference in steps between the given midi note at the closets sample.
   */


  _findClosest(midi) {
    // searches within 8 octaves of the given midi note
    const MAX_INTERVAL = 96;
    let interval = 0;

    while (interval < MAX_INTERVAL) {
      // check above and below
      if (this._buffers.has(midi + interval)) {
        return -interval;
      } else if (this._buffers.has(midi - interval)) {
        return interval;
      }

      interval++;
    }

    throw new Error(`No available buffers for note: ${midi}`);
  }
  /**
   * @param  notes	The note to play, or an array of notes.
   * @param  time     When to play the note
   * @param  velocity The velocity to play the sample back.
   */


  triggerAttack(notes, time, velocity = 1) {
    this.log("triggerAttack", notes, time, velocity);

    if (!Array.isArray(notes)) {
      notes = [notes];
    }

    notes.forEach(note => {
      const midiFloat = (0, _Conversions.ftomf)(new _Frequency.FrequencyClass(this.context, note).toFrequency());
      const midi = Math.round(midiFloat);
      const remainder = midiFloat - midi; // find the closest note pitch

      const difference = this._findClosest(midi);

      const closestNote = midi - difference;

      const buffer = this._buffers.get(closestNote);

      const playbackRate = (0, _Conversions.intervalToFrequencyRatio)(difference + remainder); // play that note

      const source = new _ToneBufferSource.ToneBufferSource({
        url: buffer,
        context: this.context,
        curve: this.curve,
        fadeIn: this.attack,
        fadeOut: this.release,
        playbackRate
      }).connect(this.output);
      source.start(time, 0, buffer.duration / playbackRate, velocity); // add it to the active sources

      if (!(0, _TypeCheck.isArray)(this._activeSources.get(midi))) {
        this._activeSources.set(midi, []);
      }

      this._activeSources.get(midi).push(source); // remove it when it's done


      source.onended = () => {
        if (this._activeSources && this._activeSources.has(midi)) {
          const sources = this._activeSources.get(midi);

          const index = sources.indexOf(source);

          if (index !== -1) {
            sources.splice(index, 1);
          }
        }
      };
    });
    return this;
  }
  /**
   * @param  notes	The note to release, or an array of notes.
   * @param  time     	When to release the note.
   */


  triggerRelease(notes, time) {
    this.log("triggerRelease", notes, time);

    if (!Array.isArray(notes)) {
      notes = [notes];
    }

    notes.forEach(note => {
      const midi = new _Frequency.FrequencyClass(this.context, note).toMidi(); // find the note

      if (this._activeSources.has(midi) && this._activeSources.get(midi).length) {
        const sources = this._activeSources.get(midi);

        time = this.toSeconds(time);
        sources.forEach(source => {
          source.stop(time);
        });

        this._activeSources.set(midi, []);
      }
    });
    return this;
  }
  /**
   * Release all currently active notes.
   * @param  time     	When to release the notes.
   */


  releaseAll(time) {
    const computedTime = this.toSeconds(time);

    this._activeSources.forEach(sources => {
      while (sources.length) {
        const source = sources.shift();
        source.stop(computedTime);
      }
    });

    return this;
  }

  sync() {
    this._syncMethod("triggerAttack", 1);

    this._syncMethod("triggerRelease", 1);

    return this;
  }
  /**
   * Invoke the attack phase, then after the duration, invoke the release.
   * @param  notes	The note to play and release, or an array of notes.
   * @param  duration The time the note should be held
   * @param  time     When to start the attack
   * @param  velocity The velocity of the attack
   */


  triggerAttackRelease(notes, duration, time, velocity = 1) {
    const computedTime = this.toSeconds(time);
    this.triggerAttack(notes, computedTime, velocity);

    if ((0, _TypeCheck.isArray)(duration)) {
      (0, _Debug.assert)((0, _TypeCheck.isArray)(notes), "notes must be an array when duration is array");
      notes.forEach((note, index) => {
        const d = duration[Math.min(index, duration.length - 1)];
        this.triggerRelease(note, computedTime + this.toSeconds(d));
      });
    } else {
      this.triggerRelease(notes, computedTime + this.toSeconds(duration));
    }

    return this;
  }
  /**
   * Add a note to the sampler.
   * @param  note      The buffer's pitch.
   * @param  url  Either the url of the buffer, or a buffer which will be added with the given name.
   * @param  callback  The callback to invoke when the url is loaded.
   */


  add(note, url, callback) {
    (0, _Debug.assert)((0, _TypeCheck.isNote)(note) || isFinite(note), `note must be a pitch or midi: ${note}`);

    if ((0, _TypeCheck.isNote)(note)) {
      // convert the note name to MIDI
      const mid = new _Frequency.FrequencyClass(this.context, note).toMidi();

      this._buffers.add(mid, url, callback);
    } else {
      // otherwise if it's numbers assume it's midi
      this._buffers.add(note, url, callback);
    }

    return this;
  }
  /**
   * If the buffers are loaded or not
   */


  get loaded() {
    return this._buffers.loaded;
  }
  /**
   * Clean up
   */


  dispose() {
    super.dispose();

    this._buffers.dispose();

    this._activeSources.forEach(sources => {
      sources.forEach(source => source.dispose());
    });

    this._activeSources.clear();

    return this;
  }

}

exports.Sampler = Sampler;
(0, _tslib.__decorate)([(0, _Decorator.timeRange)(0)], Sampler.prototype, "attack", void 0);
(0, _tslib.__decorate)([(0, _Decorator.timeRange)(0)], Sampler.prototype, "release", void 0);
},{"tslib":"../node_modules/tslib/tslib.es6.js","../core/context/ToneAudioBuffers":"../node_modules/tone/build/esm/core/context/ToneAudioBuffers.js","../core/type/Conversions":"../node_modules/tone/build/esm/core/type/Conversions.js","../core/type/Frequency":"../node_modules/tone/build/esm/core/type/Frequency.js","../core/util/Defaults":"../node_modules/tone/build/esm/core/util/Defaults.js","../core/util/Interface":"../node_modules/tone/build/esm/core/util/Interface.js","../core/util/TypeCheck":"../node_modules/tone/build/esm/core/util/TypeCheck.js","../instrument/Instrument":"../node_modules/tone/build/esm/instrument/Instrument.js","../source/buffer/ToneBufferSource":"../node_modules/tone/build/esm/source/buffer/ToneBufferSource.js","../core/util/Decorator":"../node_modules/tone/build/esm/core/util/Decorator.js","../core/util/Debug":"../node_modules/tone/build/esm/core/util/Debug.js"}],"../node_modules/tone/build/esm/instrument/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _AMSynth = require("./AMSynth");

Object.keys(_AMSynth).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _AMSynth[key];
    }
  });
});

var _DuoSynth = require("./DuoSynth");

Object.keys(_DuoSynth).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _DuoSynth[key];
    }
  });
});

var _FMSynth = require("./FMSynth");

Object.keys(_FMSynth).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _FMSynth[key];
    }
  });
});

var _MetalSynth = require("./MetalSynth");

Object.keys(_MetalSynth).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _MetalSynth[key];
    }
  });
});

var _MembraneSynth = require("./MembraneSynth");

Object.keys(_MembraneSynth).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _MembraneSynth[key];
    }
  });
});

var _MonoSynth = require("./MonoSynth");

Object.keys(_MonoSynth).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _MonoSynth[key];
    }
  });
});

var _NoiseSynth = require("./NoiseSynth");

Object.keys(_NoiseSynth).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _NoiseSynth[key];
    }
  });
});

var _PluckSynth = require("./PluckSynth");

Object.keys(_PluckSynth).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _PluckSynth[key];
    }
  });
});

var _PolySynth = require("./PolySynth");

Object.keys(_PolySynth).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _PolySynth[key];
    }
  });
});

var _Sampler = require("./Sampler");

Object.keys(_Sampler).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _Sampler[key];
    }
  });
});

var _Synth = require("./Synth");

Object.keys(_Synth).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _Synth[key];
    }
  });
});
},{"./AMSynth":"../node_modules/tone/build/esm/instrument/AMSynth.js","./DuoSynth":"../node_modules/tone/build/esm/instrument/DuoSynth.js","./FMSynth":"../node_modules/tone/build/esm/instrument/FMSynth.js","./MetalSynth":"../node_modules/tone/build/esm/instrument/MetalSynth.js","./MembraneSynth":"../node_modules/tone/build/esm/instrument/MembraneSynth.js","./MonoSynth":"../node_modules/tone/build/esm/instrument/MonoSynth.js","./NoiseSynth":"../node_modules/tone/build/esm/instrument/NoiseSynth.js","./PluckSynth":"../node_modules/tone/build/esm/instrument/PluckSynth.js","./PolySynth":"../node_modules/tone/build/esm/instrument/PolySynth.js","./Sampler":"../node_modules/tone/build/esm/instrument/Sampler.js","./Synth":"../node_modules/tone/build/esm/instrument/Synth.js"}],"../node_modules/tone/build/esm/event/ToneEvent.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ToneEvent = void 0;

require("../core/clock/Transport");

var _ToneWithContext = require("../core/context/ToneWithContext");

var _Ticks = require("../core/type/Ticks");

var _Defaults = require("../core/util/Defaults");

var _Interface = require("../core/util/Interface");

var _StateTimeline = require("../core/util/StateTimeline");

var _TypeCheck = require("../core/util/TypeCheck");

/**
 * ToneEvent abstracts away this.context.transport.schedule and provides a schedulable
 * callback for a single or repeatable events along the timeline.
 *
 * @example
 * const synth = new Tone.PolySynth().toDestination();
 * const chordEvent = new Tone.ToneEvent(((time, chord) => {
 * 	// the chord as well as the exact time of the event
 * 	// are passed in as arguments to the callback function
 * 	synth.triggerAttackRelease(chord, 0.5, time);
 * }), ["D4", "E4", "F4"]);
 * // start the chord at the beginning of the transport timeline
 * chordEvent.start();
 * // loop it every measure for 8 measures
 * chordEvent.loop = 8;
 * chordEvent.loopEnd = "1m";
 * @category Event
 */
class ToneEvent extends _ToneWithContext.ToneWithContext {
  constructor() {
    super((0, _Defaults.optionsFromArguments)(ToneEvent.getDefaults(), arguments, ["callback", "value"]));
    this.name = "ToneEvent";
    /**
     * Tracks the scheduled events
     */

    this._state = new _StateTimeline.StateTimeline("stopped");
    /**
     * A delay time from when the event is scheduled to start
     */

    this._startOffset = 0;
    const options = (0, _Defaults.optionsFromArguments)(ToneEvent.getDefaults(), arguments, ["callback", "value"]);
    this._loop = options.loop;
    this.callback = options.callback;
    this.value = options.value;
    this._loopStart = this.toTicks(options.loopStart);
    this._loopEnd = this.toTicks(options.loopEnd);
    this._playbackRate = options.playbackRate;
    this._probability = options.probability;
    this._humanize = options.humanize;
    this.mute = options.mute;
    this._playbackRate = options.playbackRate;
    this._state.increasing = true; // schedule the events for the first time

    this._rescheduleEvents();
  }

  static getDefaults() {
    return Object.assign(_ToneWithContext.ToneWithContext.getDefaults(), {
      callback: _Interface.noOp,
      humanize: false,
      loop: false,
      loopEnd: "1m",
      loopStart: 0,
      mute: false,
      playbackRate: 1,
      probability: 1,
      value: null
    });
  }
  /**
   * Reschedule all of the events along the timeline
   * with the updated values.
   * @param after Only reschedules events after the given time.
   */


  _rescheduleEvents(after = -1) {
    // if no argument is given, schedules all of the events
    this._state.forEachFrom(after, event => {
      let duration;

      if (event.state === "started") {
        if (event.id !== -1) {
          this.context.transport.clear(event.id);
        }

        const startTick = event.time + Math.round(this.startOffset / this._playbackRate);

        if (this._loop === true || (0, _TypeCheck.isNumber)(this._loop) && this._loop > 1) {
          duration = Infinity;

          if ((0, _TypeCheck.isNumber)(this._loop)) {
            duration = this._loop * this._getLoopDuration();
          }

          const nextEvent = this._state.getAfter(startTick);

          if (nextEvent !== null) {
            duration = Math.min(duration, nextEvent.time - startTick);
          }

          if (duration !== Infinity) {
            // schedule a stop since it's finite duration
            this._state.setStateAtTime("stopped", startTick + duration + 1, {
              id: -1
            });

            duration = new _Ticks.TicksClass(this.context, duration);
          }

          const interval = new _Ticks.TicksClass(this.context, this._getLoopDuration());
          event.id = this.context.transport.scheduleRepeat(this._tick.bind(this), interval, new _Ticks.TicksClass(this.context, startTick), duration);
        } else {
          event.id = this.context.transport.schedule(this._tick.bind(this), new _Ticks.TicksClass(this.context, startTick));
        }
      }
    });
  }
  /**
   * Returns the playback state of the note, either "started" or "stopped".
   */


  get state() {
    return this._state.getValueAtTime(this.context.transport.ticks);
  }
  /**
   * The start from the scheduled start time.
   */


  get startOffset() {
    return this._startOffset;
  }

  set startOffset(offset) {
    this._startOffset = offset;
  }
  /**
   * The probability of the notes being triggered.
   */


  get probability() {
    return this._probability;
  }

  set probability(prob) {
    this._probability = prob;
  }
  /**
   * If set to true, will apply small random variation
   * to the callback time. If the value is given as a time, it will randomize
   * by that amount.
   * @example
   * const event = new Tone.ToneEvent();
   * event.humanize = true;
   */


  get humanize() {
    return this._humanize;
  }

  set humanize(variation) {
    this._humanize = variation;
  }
  /**
   * Start the note at the given time.
   * @param  time  When the event should start.
   */


  start(time) {
    const ticks = this.toTicks(time);

    if (this._state.getValueAtTime(ticks) === "stopped") {
      this._state.add({
        id: -1,
        state: "started",
        time: ticks
      });

      this._rescheduleEvents(ticks);
    }

    return this;
  }
  /**
   * Stop the Event at the given time.
   * @param  time  When the event should stop.
   */


  stop(time) {
    this.cancel(time);
    const ticks = this.toTicks(time);

    if (this._state.getValueAtTime(ticks) === "started") {
      this._state.setStateAtTime("stopped", ticks, {
        id: -1
      });

      const previousEvent = this._state.getBefore(ticks);

      let reschedulTime = ticks;

      if (previousEvent !== null) {
        reschedulTime = previousEvent.time;
      }

      this._rescheduleEvents(reschedulTime);
    }

    return this;
  }
  /**
   * Cancel all scheduled events greater than or equal to the given time
   * @param  time  The time after which events will be cancel.
   */


  cancel(time) {
    time = (0, _Defaults.defaultArg)(time, -Infinity);
    const ticks = this.toTicks(time);

    this._state.forEachFrom(ticks, event => {
      this.context.transport.clear(event.id);
    });

    this._state.cancel(ticks);

    return this;
  }
  /**
   * The callback function invoker. Also
   * checks if the Event is done playing
   * @param  time  The time of the event in seconds
   */


  _tick(time) {
    const ticks = this.context.transport.getTicksAtTime(time);

    if (!this.mute && this._state.getValueAtTime(ticks) === "started") {
      if (this.probability < 1 && Math.random() > this.probability) {
        return;
      }

      if (this.humanize) {
        let variation = 0.02;

        if (!(0, _TypeCheck.isBoolean)(this.humanize)) {
          variation = this.toSeconds(this.humanize);
        }

        time += (Math.random() * 2 - 1) * variation;
      }

      this.callback(time, this.value);
    }
  }
  /**
   * Get the duration of the loop.
   */


  _getLoopDuration() {
    return Math.round((this._loopEnd - this._loopStart) / this._playbackRate);
  }
  /**
   * If the note should loop or not
   * between ToneEvent.loopStart and
   * ToneEvent.loopEnd. If set to true,
   * the event will loop indefinitely,
   * if set to a number greater than 1
   * it will play a specific number of
   * times, if set to false, 0 or 1, the
   * part will only play once.
   */


  get loop() {
    return this._loop;
  }

  set loop(loop) {
    this._loop = loop;

    this._rescheduleEvents();
  }
  /**
   * The playback rate of the note. Defaults to 1.
   * @example
   * const note = new Tone.ToneEvent();
   * note.loop = true;
   * // repeat the note twice as fast
   * note.playbackRate = 2;
   */


  get playbackRate() {
    return this._playbackRate;
  }

  set playbackRate(rate) {
    this._playbackRate = rate;

    this._rescheduleEvents();
  }
  /**
   * The loopEnd point is the time the event will loop
   * if ToneEvent.loop is true.
   */


  get loopEnd() {
    return new _Ticks.TicksClass(this.context, this._loopEnd).toSeconds();
  }

  set loopEnd(loopEnd) {
    this._loopEnd = this.toTicks(loopEnd);

    if (this._loop) {
      this._rescheduleEvents();
    }
  }
  /**
   * The time when the loop should start.
   */


  get loopStart() {
    return new _Ticks.TicksClass(this.context, this._loopStart).toSeconds();
  }

  set loopStart(loopStart) {
    this._loopStart = this.toTicks(loopStart);

    if (this._loop) {
      this._rescheduleEvents();
    }
  }
  /**
   * The current progress of the loop interval.
   * Returns 0 if the event is not started yet or
   * it is not set to loop.
   */


  get progress() {
    if (this._loop) {
      const ticks = this.context.transport.ticks;

      const lastEvent = this._state.get(ticks);

      if (lastEvent !== null && lastEvent.state === "started") {
        const loopDuration = this._getLoopDuration();

        const progress = (ticks - lastEvent.time) % loopDuration;
        return progress / loopDuration;
      } else {
        return 0;
      }
    } else {
      return 0;
    }
  }

  dispose() {
    super.dispose();
    this.cancel();

    this._state.dispose();

    return this;
  }

}

exports.ToneEvent = ToneEvent;
},{"../core/clock/Transport":"../node_modules/tone/build/esm/core/clock/Transport.js","../core/context/ToneWithContext":"../node_modules/tone/build/esm/core/context/ToneWithContext.js","../core/type/Ticks":"../node_modules/tone/build/esm/core/type/Ticks.js","../core/util/Defaults":"../node_modules/tone/build/esm/core/util/Defaults.js","../core/util/Interface":"../node_modules/tone/build/esm/core/util/Interface.js","../core/util/StateTimeline":"../node_modules/tone/build/esm/core/util/StateTimeline.js","../core/util/TypeCheck":"../node_modules/tone/build/esm/core/util/TypeCheck.js"}],"../node_modules/tone/build/esm/event/Loop.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Loop = void 0;

var _ToneEvent = require("./ToneEvent");

var _ToneWithContext = require("../core/context/ToneWithContext");

var _Defaults = require("../core/util/Defaults");

var _Interface = require("../core/util/Interface");

/**
 * Loop creates a looped callback at the
 * specified interval. The callback can be
 * started, stopped and scheduled along
 * the Transport's timeline.
 * @example
 * const loop = new Tone.Loop((time) => {
 * 	// triggered every eighth note.
 * 	console.log(time);
 * }, "8n").start(0);
 * Tone.Transport.start();
 * @category Event
 */
class Loop extends _ToneWithContext.ToneWithContext {
  constructor() {
    super((0, _Defaults.optionsFromArguments)(Loop.getDefaults(), arguments, ["callback", "interval"]));
    this.name = "Loop";
    const options = (0, _Defaults.optionsFromArguments)(Loop.getDefaults(), arguments, ["callback", "interval"]);
    this._event = new _ToneEvent.ToneEvent({
      context: this.context,
      callback: this._tick.bind(this),
      loop: true,
      loopEnd: options.interval,
      playbackRate: options.playbackRate,
      probability: options.probability
    });
    this.callback = options.callback; // set the iterations

    this.iterations = options.iterations;
  }

  static getDefaults() {
    return Object.assign(_ToneWithContext.ToneWithContext.getDefaults(), {
      interval: "4n",
      callback: _Interface.noOp,
      playbackRate: 1,
      iterations: Infinity,
      probability: 1,
      mute: false,
      humanize: false
    });
  }
  /**
   * Start the loop at the specified time along the Transport's timeline.
   * @param  time  When to start the Loop.
   */


  start(time) {
    this._event.start(time);

    return this;
  }
  /**
   * Stop the loop at the given time.
   * @param  time  When to stop the Loop.
   */


  stop(time) {
    this._event.stop(time);

    return this;
  }
  /**
   * Cancel all scheduled events greater than or equal to the given time
   * @param  time  The time after which events will be cancel.
   */


  cancel(time) {
    this._event.cancel(time);

    return this;
  }
  /**
   * Internal function called when the notes should be called
   * @param time  The time the event occurs
   */


  _tick(time) {
    this.callback(time);
  }
  /**
   * The state of the Loop, either started or stopped.
   */


  get state() {
    return this._event.state;
  }
  /**
   * The progress of the loop as a value between 0-1. 0, when the loop is stopped or done iterating.
   */


  get progress() {
    return this._event.progress;
  }
  /**
   * The time between successive callbacks.
   * @example
   * const loop = new Tone.Loop();
   * loop.interval = "8n"; // loop every 8n
   */


  get interval() {
    return this._event.loopEnd;
  }

  set interval(interval) {
    this._event.loopEnd = interval;
  }
  /**
   * The playback rate of the loop. The normal playback rate is 1 (no change).
   * A `playbackRate` of 2 would be twice as fast.
   */


  get playbackRate() {
    return this._event.playbackRate;
  }

  set playbackRate(rate) {
    this._event.playbackRate = rate;
  }
  /**
   * Random variation +/-0.01s to the scheduled time.
   * Or give it a time value which it will randomize by.
   */


  get humanize() {
    return this._event.humanize;
  }

  set humanize(variation) {
    this._event.humanize = variation;
  }
  /**
   * The probably of the callback being invoked.
   */


  get probability() {
    return this._event.probability;
  }

  set probability(prob) {
    this._event.probability = prob;
  }
  /**
   * Muting the Loop means that no callbacks are invoked.
   */


  get mute() {
    return this._event.mute;
  }

  set mute(mute) {
    this._event.mute = mute;
  }
  /**
   * The number of iterations of the loop. The default value is `Infinity` (loop forever).
   */


  get iterations() {
    if (this._event.loop === true) {
      return Infinity;
    } else {
      return this._event.loop;
    }
  }

  set iterations(iters) {
    if (iters === Infinity) {
      this._event.loop = true;
    } else {
      this._event.loop = iters;
    }
  }

  dispose() {
    super.dispose();

    this._event.dispose();

    return this;
  }

}

exports.Loop = Loop;
},{"./ToneEvent":"../node_modules/tone/build/esm/event/ToneEvent.js","../core/context/ToneWithContext":"../node_modules/tone/build/esm/core/context/ToneWithContext.js","../core/util/Defaults":"../node_modules/tone/build/esm/core/util/Defaults.js","../core/util/Interface":"../node_modules/tone/build/esm/core/util/Interface.js"}],"../node_modules/tone/build/esm/event/Part.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Part = void 0;

var _Ticks = require("../core/type/Ticks");

var _TransportTime = require("../core/type/TransportTime");

var _Defaults = require("../core/util/Defaults");

var _StateTimeline = require("../core/util/StateTimeline");

var _TypeCheck = require("../core/util/TypeCheck");

var _ToneEvent = require("./ToneEvent");

/**
 * Part is a collection ToneEvents which can be started/stopped and looped as a single unit.
 *
 * @example
 * const synth = new Tone.Synth().toDestination();
 * const part = new Tone.Part(((time, note) => {
 * 	// the notes given as the second element in the array
 * 	// will be passed in as the second argument
 * 	synth.triggerAttackRelease(note, "8n", time);
 * }), [[0, "C2"], ["0:2", "C3"], ["0:3:2", "G2"]]);
 * @example
 * const synth = new Tone.Synth().toDestination();
 * // use an array of objects as long as the object has a "time" attribute
 * const part = new Tone.Part(((time, value) => {
 * 	// the value is an object which contains both the note and the velocity
 * 	synth.triggerAttackRelease(value.note, "8n", time, value.velocity);
 * }), [{ time: 0, note: "C3", velocity: 0.9 },
 * 	{ time: "0:2", note: "C4", velocity: 0.5 }
 * ]).start(0);
 * @category Event
 */
class Part extends _ToneEvent.ToneEvent {
  constructor() {
    super((0, _Defaults.optionsFromArguments)(Part.getDefaults(), arguments, ["callback", "events"]));
    this.name = "Part";
    /**
     * Tracks the scheduled events
     */

    this._state = new _StateTimeline.StateTimeline("stopped");
    /**
     * The events that belong to this part
     */

    this._events = new Set();
    const options = (0, _Defaults.optionsFromArguments)(Part.getDefaults(), arguments, ["callback", "events"]); // make sure things are assigned in the right order

    this._state.increasing = true; // add the events

    options.events.forEach(event => {
      if ((0, _TypeCheck.isArray)(event)) {
        this.add(event[0], event[1]);
      } else {
        this.add(event);
      }
    });
  }

  static getDefaults() {
    return Object.assign(_ToneEvent.ToneEvent.getDefaults(), {
      events: []
    });
  }
  /**
   * Start the part at the given time.
   * @param  time    When to start the part.
   * @param  offset  The offset from the start of the part to begin playing at.
   */


  start(time, offset) {
    const ticks = this.toTicks(time);

    if (this._state.getValueAtTime(ticks) !== "started") {
      offset = (0, _Defaults.defaultArg)(offset, this._loop ? this._loopStart : 0);

      if (this._loop) {
        offset = (0, _Defaults.defaultArg)(offset, this._loopStart);
      } else {
        offset = (0, _Defaults.defaultArg)(offset, 0);
      }

      const computedOffset = this.toTicks(offset);

      this._state.add({
        id: -1,
        offset: computedOffset,
        state: "started",
        time: ticks
      });

      this._forEach(event => {
        this._startNote(event, ticks, computedOffset);
      });
    }

    return this;
  }
  /**
   * Start the event in the given event at the correct time given
   * the ticks and offset and looping.
   * @param  event
   * @param  ticks
   * @param  offset
   */


  _startNote(event, ticks, offset) {
    ticks -= offset;

    if (this._loop) {
      if (event.startOffset >= this._loopStart && event.startOffset < this._loopEnd) {
        if (event.startOffset < offset) {
          // start it on the next loop
          ticks += this._getLoopDuration();
        }

        event.start(new _Ticks.TicksClass(this.context, ticks));
      } else if (event.startOffset < this._loopStart && event.startOffset >= offset) {
        event.loop = false;
        event.start(new _Ticks.TicksClass(this.context, ticks));
      }
    } else if (event.startOffset >= offset) {
      event.start(new _Ticks.TicksClass(this.context, ticks));
    }
  }

  get startOffset() {
    return this._startOffset;
  }

  set startOffset(offset) {
    this._startOffset = offset;

    this._forEach(event => {
      event.startOffset += this._startOffset;
    });
  }
  /**
   * Stop the part at the given time.
   * @param  time  When to stop the part.
   */


  stop(time) {
    const ticks = this.toTicks(time);

    this._state.cancel(ticks);

    this._state.setStateAtTime("stopped", ticks);

    this._forEach(event => {
      event.stop(time);
    });

    return this;
  }
  /**
   * Get/Set an Event's value at the given time.
   * If a value is passed in and no event exists at
   * the given time, one will be created with that value.
   * If two events are at the same time, the first one will
   * be returned.
   * @example
   * const part = new Tone.Part();
   * part.at("1m"); // returns the part at the first measure
   * part.at("2m", "C2"); // set the value at "2m" to C2.
   * // if an event didn't exist at that time, it will be created.
   * @param time The time of the event to get or set.
   * @param value If a value is passed in, the value of the event at the given time will be set to it.
   */


  at(time, value) {
    const timeInTicks = new _TransportTime.TransportTimeClass(this.context, time).toTicks();
    const tickTime = new _Ticks.TicksClass(this.context, 1).toSeconds();

    const iterator = this._events.values();

    let result = iterator.next();

    while (!result.done) {
      const event = result.value;

      if (Math.abs(timeInTicks - event.startOffset) < tickTime) {
        if ((0, _TypeCheck.isDefined)(value)) {
          event.value = value;
        }

        return event;
      }

      result = iterator.next();
    } // if there was no event at that time, create one


    if ((0, _TypeCheck.isDefined)(value)) {
      this.add(time, value); // return the new event

      return this.at(time);
    } else {
      return null;
    }
  }

  add(time, value) {
    // extract the parameters
    if (time instanceof Object && Reflect.has(time, "time")) {
      value = time;
      time = value.time;
    }

    const ticks = this.toTicks(time);
    let event;

    if (value instanceof _ToneEvent.ToneEvent) {
      event = value;
      event.callback = this._tick.bind(this);
    } else {
      event = new _ToneEvent.ToneEvent({
        callback: this._tick.bind(this),
        context: this.context,
        value
      });
    } // the start offset


    event.startOffset = ticks; // initialize the values

    event.set({
      humanize: this.humanize,
      loop: this.loop,
      loopEnd: this.loopEnd,
      loopStart: this.loopStart,
      playbackRate: this.playbackRate,
      probability: this.probability
    });

    this._events.add(event); // start the note if it should be played right now


    this._restartEvent(event);

    return this;
  }
  /**
   * Restart the given event
   */


  _restartEvent(event) {
    this._state.forEach(stateEvent => {
      if (stateEvent.state === "started") {
        this._startNote(event, stateEvent.time, stateEvent.offset);
      } else {
        // stop the note
        event.stop(new _Ticks.TicksClass(this.context, stateEvent.time));
      }
    });
  }

  remove(time, value) {
    // extract the parameters
    if ((0, _TypeCheck.isObject)(time) && time.hasOwnProperty("time")) {
      value = time;
      time = value.time;
    }

    time = this.toTicks(time);

    this._events.forEach(event => {
      if (event.startOffset === time) {
        if ((0, _TypeCheck.isUndef)(value) || (0, _TypeCheck.isDefined)(value) && event.value === value) {
          this._events.delete(event);

          event.dispose();
        }
      }
    });

    return this;
  }
  /**
   * Remove all of the notes from the group.
   */


  clear() {
    this._forEach(event => event.dispose());

    this._events.clear();

    return this;
  }
  /**
   * Cancel scheduled state change events: i.e. "start" and "stop".
   * @param after The time after which to cancel the scheduled events.
   */


  cancel(after) {
    this._forEach(event => event.cancel(after));

    this._state.cancel(this.toTicks(after));

    return this;
  }
  /**
   * Iterate over all of the events
   */


  _forEach(callback) {
    if (this._events) {
      this._events.forEach(event => {
        if (event instanceof Part) {
          event._forEach(callback);
        } else {
          callback(event);
        }
      });
    }

    return this;
  }
  /**
   * Set the attribute of all of the events
   * @param  attr  the attribute to set
   * @param  value      The value to set it to
   */


  _setAll(attr, value) {
    this._forEach(event => {
      event[attr] = value;
    });
  }
  /**
   * Internal tick method
   * @param  time  The time of the event in seconds
   */


  _tick(time, value) {
    if (!this.mute) {
      this.callback(time, value);
    }
  }
  /**
   * Determine if the event should be currently looping
   * given the loop boundries of this Part.
   * @param  event  The event to test
   */


  _testLoopBoundries(event) {
    if (this._loop && (event.startOffset < this._loopStart || event.startOffset >= this._loopEnd)) {
      event.cancel(0);
    } else if (event.state === "stopped") {
      // reschedule it if it's stopped
      this._restartEvent(event);
    }
  }

  get probability() {
    return this._probability;
  }

  set probability(prob) {
    this._probability = prob;

    this._setAll("probability", prob);
  }

  get humanize() {
    return this._humanize;
  }

  set humanize(variation) {
    this._humanize = variation;

    this._setAll("humanize", variation);
  }
  /**
   * If the part should loop or not
   * between Part.loopStart and
   * Part.loopEnd. If set to true,
   * the part will loop indefinitely,
   * if set to a number greater than 1
   * it will play a specific number of
   * times, if set to false, 0 or 1, the
   * part will only play once.
   * @example
   * const part = new Tone.Part();
   * // loop the part 8 times
   * part.loop = 8;
   */


  get loop() {
    return this._loop;
  }

  set loop(loop) {
    this._loop = loop;

    this._forEach(event => {
      event.loopStart = this.loopStart;
      event.loopEnd = this.loopEnd;
      event.loop = loop;

      this._testLoopBoundries(event);
    });
  }
  /**
   * The loopEnd point determines when it will
   * loop if Part.loop is true.
   */


  get loopEnd() {
    return new _Ticks.TicksClass(this.context, this._loopEnd).toSeconds();
  }

  set loopEnd(loopEnd) {
    this._loopEnd = this.toTicks(loopEnd);

    if (this._loop) {
      this._forEach(event => {
        event.loopEnd = loopEnd;

        this._testLoopBoundries(event);
      });
    }
  }
  /**
   * The loopStart point determines when it will
   * loop if Part.loop is true.
   */


  get loopStart() {
    return new _Ticks.TicksClass(this.context, this._loopStart).toSeconds();
  }

  set loopStart(loopStart) {
    this._loopStart = this.toTicks(loopStart);

    if (this._loop) {
      this._forEach(event => {
        event.loopStart = this.loopStart;

        this._testLoopBoundries(event);
      });
    }
  }
  /**
   * The playback rate of the part
   */


  get playbackRate() {
    return this._playbackRate;
  }

  set playbackRate(rate) {
    this._playbackRate = rate;

    this._setAll("playbackRate", rate);
  }
  /**
   * The number of scheduled notes in the part.
   */


  get length() {
    return this._events.size;
  }

  dispose() {
    super.dispose();
    this.clear();
    return this;
  }

}

exports.Part = Part;
},{"../core/type/Ticks":"../node_modules/tone/build/esm/core/type/Ticks.js","../core/type/TransportTime":"../node_modules/tone/build/esm/core/type/TransportTime.js","../core/util/Defaults":"../node_modules/tone/build/esm/core/util/Defaults.js","../core/util/StateTimeline":"../node_modules/tone/build/esm/core/util/StateTimeline.js","../core/util/TypeCheck":"../node_modules/tone/build/esm/core/util/TypeCheck.js","./ToneEvent":"../node_modules/tone/build/esm/event/ToneEvent.js"}],"../node_modules/tone/build/esm/event/PatternGenerator.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PatternGenerator = PatternGenerator;

var _Debug = require("../core/util/Debug");

var _Math = require("../core/util/Math");

/**
 * Start at the first value and go up to the last
 */
function* upPatternGen(values) {
  let index = 0;

  while (index < values.length) {
    index = clampToArraySize(index, values);
    yield values[index];
    index++;
  }
}
/**
 * Start at the last value and go down to 0
 */


function* downPatternGen(values) {
  let index = values.length - 1;

  while (index >= 0) {
    index = clampToArraySize(index, values);
    yield values[index];
    index--;
  }
}
/**
 * Infinitely yield the generator
 */


function* infiniteGen(values, gen) {
  while (true) {
    yield* gen(values);
  }
}
/**
 * Make sure that the index is in the given range
 */


function clampToArraySize(index, values) {
  return (0, _Math.clamp)(index, 0, values.length - 1);
}
/**
 * Alternate between two generators
 */


function* alternatingGenerator(values, directionUp) {
  let index = directionUp ? 0 : values.length - 1;

  while (true) {
    index = clampToArraySize(index, values);
    yield values[index];

    if (directionUp) {
      index++;

      if (index >= values.length - 1) {
        directionUp = false;
      }
    } else {
      index--;

      if (index <= 0) {
        directionUp = true;
      }
    }
  }
}
/**
 * Starting from the bottom move up 2, down 1
 */


function* jumpUp(values) {
  let index = 0;
  let stepIndex = 0;

  while (index < values.length) {
    index = clampToArraySize(index, values);
    yield values[index];
    stepIndex++;
    index += stepIndex % 2 ? 2 : -1;
  }
}
/**
 * Starting from the top move down 2, up 1
 */


function* jumpDown(values) {
  let index = values.length - 1;
  let stepIndex = 0;

  while (index >= 0) {
    index = clampToArraySize(index, values);
    yield values[index];
    stepIndex++;
    index += stepIndex % 2 ? -2 : 1;
  }
}
/**
 * Choose a random index each time
 */


function* randomGen(values) {
  while (true) {
    const randomIndex = Math.floor(Math.random() * values.length);
    yield values[randomIndex];
  }
}
/**
 * Randomly go through all of the values once before choosing a new random order
 */


function* randomOnce(values) {
  // create an array of indices
  const copy = [];

  for (let i = 0; i < values.length; i++) {
    copy.push(i);
  }

  while (copy.length > 0) {
    // random choose an index, and then remove it so it's not chosen again
    const randVal = copy.splice(Math.floor(copy.length * Math.random()), 1);
    const index = clampToArraySize(randVal[0], values);
    yield values[index];
  }
}
/**
 * Randomly choose to walk up or down 1 index in the values array
 */


function* randomWalk(values) {
  // randomly choose a starting index in the values array
  let index = Math.floor(Math.random() * values.length);

  while (true) {
    if (index === 0) {
      index++; // at bottom of array, so force upward step
    } else if (index === values.length - 1) {
      index--; // at top of array, so force downward step
    } else if (Math.random() < 0.5) {
      // else choose random downward or upward step
      index--;
    } else {
      index++;
    }

    yield values[index];
  }
}
/**
 * PatternGenerator returns a generator which will iterate over the given array
 * of values and yield the items according to the passed in pattern
 * @param values An array of values to iterate over
 * @param pattern The name of the pattern use when iterating over
 * @param index Where to start in the offset of the values array
 */


function* PatternGenerator(values, pattern = "up", index = 0) {
  // safeguards
  (0, _Debug.assert)(values.length > 0, "The array must have more than one value in it");

  switch (pattern) {
    case "up":
      yield* infiniteGen(values, upPatternGen);

    case "down":
      yield* infiniteGen(values, downPatternGen);

    case "upDown":
      yield* alternatingGenerator(values, true);

    case "downUp":
      yield* alternatingGenerator(values, false);

    case "alternateUp":
      yield* infiniteGen(values, jumpUp);

    case "alternateDown":
      yield* infiniteGen(values, jumpDown);

    case "random":
      yield* randomGen(values);

    case "randomOnce":
      yield* infiniteGen(values, randomOnce);

    case "randomWalk":
      yield* randomWalk(values);
  }
}
},{"../core/util/Debug":"../node_modules/tone/build/esm/core/util/Debug.js","../core/util/Math":"../node_modules/tone/build/esm/core/util/Math.js"}],"../node_modules/tone/build/esm/event/Pattern.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Pattern = void 0;

var _Loop = require("./Loop");

var _PatternGenerator = require("./PatternGenerator");

var _Defaults = require("../core/util/Defaults");

var _Interface = require("../core/util/Interface");

/**
 * Pattern arpeggiates between the given notes
 * in a number of patterns.
 * @example
 * const pattern = new Tone.Pattern((time, note) => {
 * 	// the order of the notes passed in depends on the pattern
 * }, ["C2", "D4", "E5", "A6"], "upDown");
 * @category Event
 */
class Pattern extends _Loop.Loop {
  constructor() {
    super((0, _Defaults.optionsFromArguments)(Pattern.getDefaults(), arguments, ["callback", "values", "pattern"]));
    this.name = "Pattern";
    const options = (0, _Defaults.optionsFromArguments)(Pattern.getDefaults(), arguments, ["callback", "values", "pattern"]);
    this.callback = options.callback;
    this._values = options.values;
    this._pattern = (0, _PatternGenerator.PatternGenerator)(options.values, options.pattern);
    this._type = options.pattern;
  }

  static getDefaults() {
    return Object.assign(_Loop.Loop.getDefaults(), {
      pattern: "up",
      values: [],
      callback: _Interface.noOp
    });
  }
  /**
   * Internal function called when the notes should be called
   */


  _tick(time) {
    const value = this._pattern.next();

    this._value = value.value;
    this.callback(time, this._value);
  }
  /**
   * The array of events.
   */


  get values() {
    return this._values;
  }

  set values(val) {
    this._values = val; // reset the pattern

    this.pattern = this._type;
  }
  /**
   * The current value of the pattern.
   */


  get value() {
    return this._value;
  }
  /**
   * The pattern type. See Tone.CtrlPattern for the full list of patterns.
   */


  get pattern() {
    return this._type;
  }

  set pattern(pattern) {
    this._type = pattern;
    this._pattern = (0, _PatternGenerator.PatternGenerator)(this._values, this._type);
  }

}

exports.Pattern = Pattern;
},{"./Loop":"../node_modules/tone/build/esm/event/Loop.js","./PatternGenerator":"../node_modules/tone/build/esm/event/PatternGenerator.js","../core/util/Defaults":"../node_modules/tone/build/esm/core/util/Defaults.js","../core/util/Interface":"../node_modules/tone/build/esm/core/util/Interface.js"}],"../node_modules/tone/build/esm/event/Sequence.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Sequence = void 0;

var _Ticks = require("../core/type/Ticks");

var _Defaults = require("../core/util/Defaults");

var _TypeCheck = require("../core/util/TypeCheck");

var _Part = require("./Part");

var _ToneEvent = require("./ToneEvent");

/**
 * A sequence is an alternate notation of a part. Instead
 * of passing in an array of [time, event] pairs, pass
 * in an array of events which will be spaced at the
 * given subdivision. Sub-arrays will subdivide that beat
 * by the number of items are in the array.
 * Sequence notation inspiration from [Tidal](http://yaxu.org/tidal/)
 * @example
 * const synth = new Tone.Synth().toDestination();
 * const seq = new Tone.Sequence((time, note) => {
 * 	synth.triggerAttackRelease(note, 0.1, time);
 * 	// subdivisions are given as subarrays
 * }, ["C4", ["E4", "D4", "E4"], "G4", ["A4", "G4"]]).start(0);
 * Tone.Transport.start();
 * @category Event
 */
class Sequence extends _ToneEvent.ToneEvent {
  constructor() {
    super((0, _Defaults.optionsFromArguments)(Sequence.getDefaults(), arguments, ["callback", "events", "subdivision"]));
    this.name = "Sequence";
    /**
     * The object responsible for scheduling all of the events
     */

    this._part = new _Part.Part({
      callback: this._seqCallback.bind(this),
      context: this.context
    });
    /**
     * private reference to all of the sequence proxies
     */

    this._events = [];
    /**
     * The proxied array
     */

    this._eventsArray = [];
    const options = (0, _Defaults.optionsFromArguments)(Sequence.getDefaults(), arguments, ["callback", "events", "subdivision"]);
    this._subdivision = this.toTicks(options.subdivision);
    this.events = options.events; // set all of the values

    this.loop = options.loop;
    this.loopStart = options.loopStart;
    this.loopEnd = options.loopEnd;
    this.playbackRate = options.playbackRate;
    this.probability = options.probability;
    this.humanize = options.humanize;
    this.mute = options.mute;
    this.playbackRate = options.playbackRate;
  }

  static getDefaults() {
    return Object.assign((0, _Defaults.omitFromObject)(_ToneEvent.ToneEvent.getDefaults(), ["value"]), {
      events: [],
      loop: true,
      loopEnd: 0,
      loopStart: 0,
      subdivision: "8n"
    });
  }
  /**
   * The internal callback for when an event is invoked
   */


  _seqCallback(time, value) {
    if (value !== null) {
      this.callback(time, value);
    }
  }
  /**
   * The sequence
   */


  get events() {
    return this._events;
  }

  set events(s) {
    this.clear();
    this._eventsArray = s;
    this._events = this._createSequence(this._eventsArray);

    this._eventsUpdated();
  }
  /**
   * Start the part at the given time.
   * @param  time    When to start the part.
   * @param  offset  The offset index to start at
   */


  start(time, offset) {
    this._part.start(time, offset ? this._indexTime(offset) : offset);

    return this;
  }
  /**
   * Stop the part at the given time.
   * @param  time  When to stop the part.
   */


  stop(time) {
    this._part.stop(time);

    return this;
  }
  /**
   * The subdivision of the sequence. This can only be
   * set in the constructor. The subdivision is the
   * interval between successive steps.
   */


  get subdivision() {
    return new _Ticks.TicksClass(this.context, this._subdivision).toSeconds();
  }
  /**
   * Create a sequence proxy which can be monitored to create subsequences
   */


  _createSequence(array) {
    return new Proxy(array, {
      get: (target, property) => {
        // property is index in this case
        return target[property];
      },
      set: (target, property, value) => {
        if ((0, _TypeCheck.isString)(property) && isFinite(parseInt(property, 10))) {
          if ((0, _TypeCheck.isArray)(value)) {
            target[property] = this._createSequence(value);
          } else {
            target[property] = value;
          }
        } else {
          target[property] = value;
        }

        this._eventsUpdated(); // return true to accept the changes


        return true;
      }
    });
  }
  /**
   * When the sequence has changed, all of the events need to be recreated
   */


  _eventsUpdated() {
    this._part.clear();

    this._rescheduleSequence(this._eventsArray, this._subdivision, this.startOffset); // update the loopEnd


    this.loopEnd = this.loopEnd;
  }
  /**
   * reschedule all of the events that need to be rescheduled
   */


  _rescheduleSequence(sequence, subdivision, startOffset) {
    sequence.forEach((value, index) => {
      const eventOffset = index * subdivision + startOffset;

      if ((0, _TypeCheck.isArray)(value)) {
        this._rescheduleSequence(value, subdivision / value.length, eventOffset);
      } else {
        const startTime = new _Ticks.TicksClass(this.context, eventOffset, "i").toSeconds();

        this._part.add(startTime, value);
      }
    });
  }
  /**
   * Get the time of the index given the Sequence's subdivision
   * @param  index
   * @return The time of that index
   */


  _indexTime(index) {
    return new _Ticks.TicksClass(this.context, index * this._subdivision + this.startOffset).toSeconds();
  }
  /**
   * Clear all of the events
   */


  clear() {
    this._part.clear();

    return this;
  }

  dispose() {
    super.dispose();

    this._part.dispose();

    return this;
  } //-------------------------------------
  // PROXY CALLS
  //-------------------------------------


  get loop() {
    return this._part.loop;
  }

  set loop(l) {
    this._part.loop = l;
  }
  /**
   * The index at which the sequence should start looping
   */


  get loopStart() {
    return this._loopStart;
  }

  set loopStart(index) {
    this._loopStart = index;
    this._part.loopStart = this._indexTime(index);
  }
  /**
   * The index at which the sequence should end looping
   */


  get loopEnd() {
    return this._loopEnd;
  }

  set loopEnd(index) {
    this._loopEnd = index;

    if (index === 0) {
      this._part.loopEnd = this._indexTime(this._eventsArray.length);
    } else {
      this._part.loopEnd = this._indexTime(index);
    }
  }

  get startOffset() {
    return this._part.startOffset;
  }

  set startOffset(start) {
    this._part.startOffset = start;
  }

  get playbackRate() {
    return this._part.playbackRate;
  }

  set playbackRate(rate) {
    this._part.playbackRate = rate;
  }

  get probability() {
    return this._part.probability;
  }

  set probability(prob) {
    this._part.probability = prob;
  }

  get progress() {
    return this._part.progress;
  }

  get humanize() {
    return this._part.humanize;
  }

  set humanize(variation) {
    this._part.humanize = variation;
  }
  /**
   * The number of scheduled events
   */


  get length() {
    return this._part.length;
  }

}

exports.Sequence = Sequence;
},{"../core/type/Ticks":"../node_modules/tone/build/esm/core/type/Ticks.js","../core/util/Defaults":"../node_modules/tone/build/esm/core/util/Defaults.js","../core/util/TypeCheck":"../node_modules/tone/build/esm/core/util/TypeCheck.js","./Part":"../node_modules/tone/build/esm/event/Part.js","./ToneEvent":"../node_modules/tone/build/esm/event/ToneEvent.js"}],"../node_modules/tone/build/esm/event/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _Loop = require("./Loop");

Object.keys(_Loop).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _Loop[key];
    }
  });
});

var _Part = require("./Part");

Object.keys(_Part).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _Part[key];
    }
  });
});

var _Pattern = require("./Pattern");

Object.keys(_Pattern).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _Pattern[key];
    }
  });
});

var _Sequence = require("./Sequence");

Object.keys(_Sequence).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _Sequence[key];
    }
  });
});

var _ToneEvent = require("./ToneEvent");

Object.keys(_ToneEvent).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _ToneEvent[key];
    }
  });
});
},{"./Loop":"../node_modules/tone/build/esm/event/Loop.js","./Part":"../node_modules/tone/build/esm/event/Part.js","./Pattern":"../node_modules/tone/build/esm/event/Pattern.js","./Sequence":"../node_modules/tone/build/esm/event/Sequence.js","./ToneEvent":"../node_modules/tone/build/esm/event/ToneEvent.js"}],"../node_modules/tone/build/esm/component/channel/CrossFade.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CrossFade = void 0;

var _Gain = require("../../core/context/Gain");

var _ToneAudioNode = require("../../core/context/ToneAudioNode");

var _Defaults = require("../../core/util/Defaults");

var _Interface = require("../../core/util/Interface");

var _GainToAudio = require("../../signal/GainToAudio");

var _Signal = require("../../signal/Signal");

/**
 * Tone.Crossfade provides equal power fading between two inputs.
 * More on crossfading technique [here](https://en.wikipedia.org/wiki/Fade_(audio_engineering)#Crossfading).
 * ```
 *                                             +---------+
 *                                            +> input a +>--+
 * +-----------+   +---------------------+     |         |   |
 * | 1s signal +>--> stereoPannerNode  L +>----> gain    |   |
 * +-----------+   |                     |     +---------+   |
 *               +-> pan               R +>-+                |   +--------+
 *               | +---------------------+  |                +---> output +>
 *  +------+     |                          |  +---------+   |   +--------+
 *  | fade +>----+                          | +> input b +>--+
 *  +------+                                |  |         |
 *                                          +--> gain    |
 *                                             +---------+
 * ```
 * @example
 * const crossFade = new Tone.CrossFade().toDestination();
 * // connect two inputs Tone.to a/b
 * const inputA = new Tone.Oscillator(440, "square").connect(crossFade.a).start();
 * const inputB = new Tone.Oscillator(440, "sine").connect(crossFade.b).start();
 * // use the fade to control the mix between the two
 * crossFade.fade.value = 0.5;
 * @category Component
 */
class CrossFade extends _ToneAudioNode.ToneAudioNode {
  constructor() {
    super(Object.assign((0, _Defaults.optionsFromArguments)(CrossFade.getDefaults(), arguments, ["fade"])));
    this.name = "CrossFade";
    /**
     * The crossfading is done by a StereoPannerNode
     */

    this._panner = this.context.createStereoPanner();
    /**
     * Split the output of the panner node into two values used to control the gains.
     */

    this._split = this.context.createChannelSplitter(2);
    /**
     * Convert the fade value into an audio range value so it can be connected
     * to the panner.pan AudioParam
     */

    this._g2a = new _GainToAudio.GainToAudio({
      context: this.context
    });
    /**
     * The input which is at full level when fade = 0
     */

    this.a = new _Gain.Gain({
      context: this.context,
      gain: 0
    });
    /**
     * The input which is at full level when fade = 1
     */

    this.b = new _Gain.Gain({
      context: this.context,
      gain: 0
    });
    /**
     * The output is a mix between `a` and `b` at the ratio of `fade`
     */

    this.output = new _Gain.Gain({
      context: this.context
    });
    this._internalChannels = [this.a, this.b];
    const options = (0, _Defaults.optionsFromArguments)(CrossFade.getDefaults(), arguments, ["fade"]);
    this.fade = new _Signal.Signal({
      context: this.context,
      units: "normalRange",
      value: options.fade
    });
    (0, _Interface.readOnly)(this, "fade");
    this.context.getConstant(1).connect(this._panner);

    this._panner.connect(this._split); // this is necessary for standardized-audio-context
    // doesn't make any difference for the native AudioContext
    // https://github.com/chrisguttandin/standardized-audio-context/issues/647


    this._panner.channelCount = 1;
    this._panner.channelCountMode = "explicit";
    (0, _ToneAudioNode.connect)(this._split, this.a.gain, 0);
    (0, _ToneAudioNode.connect)(this._split, this.b.gain, 1);
    this.fade.chain(this._g2a, this._panner.pan);
    this.a.connect(this.output);
    this.b.connect(this.output);
  }

  static getDefaults() {
    return Object.assign(_ToneAudioNode.ToneAudioNode.getDefaults(), {
      fade: 0.5
    });
  }

  dispose() {
    super.dispose();
    this.a.dispose();
    this.b.dispose();
    this.output.dispose();
    this.fade.dispose();

    this._g2a.dispose();

    this._panner.disconnect();

    this._split.disconnect();

    return this;
  }

}

exports.CrossFade = CrossFade;
},{"../../core/context/Gain":"../node_modules/tone/build/esm/core/context/Gain.js","../../core/context/ToneAudioNode":"../node_modules/tone/build/esm/core/context/ToneAudioNode.js","../../core/util/Defaults":"../node_modules/tone/build/esm/core/util/Defaults.js","../../core/util/Interface":"../node_modules/tone/build/esm/core/util/Interface.js","../../signal/GainToAudio":"../node_modules/tone/build/esm/signal/GainToAudio.js","../../signal/Signal":"../node_modules/tone/build/esm/signal/Signal.js"}],"../node_modules/tone/build/esm/effect/Effect.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Effect = void 0;

var _CrossFade = require("../component/channel/CrossFade");

var _Gain = require("../core/context/Gain");

var _ToneAudioNode = require("../core/context/ToneAudioNode");

var _Interface = require("../core/util/Interface");

/**
 * Effect is the base class for effects. Connect the effect between
 * the effectSend and effectReturn GainNodes, then control the amount of
 * effect which goes to the output using the wet control.
 */
class Effect extends _ToneAudioNode.ToneAudioNode {
  constructor(options) {
    super(options);
    this.name = "Effect";
    /**
     * the drywet knob to control the amount of effect
     */

    this._dryWet = new _CrossFade.CrossFade({
      context: this.context
    });
    /**
     * The wet control is how much of the effected
     * will pass through to the output. 1 = 100% effected
     * signal, 0 = 100% dry signal.
     */

    this.wet = this._dryWet.fade;
    /**
     * connect the effectSend to the input of hte effect
     */

    this.effectSend = new _Gain.Gain({
      context: this.context
    });
    /**
     * connect the output of the effect to the effectReturn
     */

    this.effectReturn = new _Gain.Gain({
      context: this.context
    });
    /**
     * The effect input node
     */

    this.input = new _Gain.Gain({
      context: this.context
    });
    /**
     * The effect output
     */

    this.output = this._dryWet; // connections

    this.input.fan(this._dryWet.a, this.effectSend);
    this.effectReturn.connect(this._dryWet.b);
    this.wet.setValueAtTime(options.wet, 0);
    this._internalChannels = [this.effectReturn, this.effectSend];
    (0, _Interface.readOnly)(this, "wet");
  }

  static getDefaults() {
    return Object.assign(_ToneAudioNode.ToneAudioNode.getDefaults(), {
      wet: 1
    });
  }
  /**
   * chains the effect in between the effectSend and effectReturn
   */


  connectEffect(effect) {
    // add it to the internal channels
    this._internalChannels.push(effect);

    this.effectSend.chain(effect, this.effectReturn);
    return this;
  }

  dispose() {
    super.dispose();

    this._dryWet.dispose();

    this.effectSend.dispose();
    this.effectReturn.dispose();
    this.wet.dispose();
    return this;
  }

}

exports.Effect = Effect;
},{"../component/channel/CrossFade":"../node_modules/tone/build/esm/component/channel/CrossFade.js","../core/context/Gain":"../node_modules/tone/build/esm/core/context/Gain.js","../core/context/ToneAudioNode":"../node_modules/tone/build/esm/core/context/ToneAudioNode.js","../core/util/Interface":"../node_modules/tone/build/esm/core/util/Interface.js"}],"../node_modules/tone/build/esm/effect/LFOEffect.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.LFOEffect = void 0;

var _Effect = require("../effect/Effect");

var _LFO = require("../source/oscillator/LFO");

var _Interface = require("../core/util/Interface");

/**
 * Base class for LFO-based effects.
 */
class LFOEffect extends _Effect.Effect {
  constructor(options) {
    super(options);
    this.name = "LFOEffect";
    this._lfo = new _LFO.LFO({
      context: this.context,
      frequency: options.frequency,
      amplitude: options.depth
    });
    this.depth = this._lfo.amplitude;
    this.frequency = this._lfo.frequency;
    this.type = options.type;
    (0, _Interface.readOnly)(this, ["frequency", "depth"]);
  }

  static getDefaults() {
    return Object.assign(_Effect.Effect.getDefaults(), {
      frequency: 1,
      type: "sine",
      depth: 1
    });
  }
  /**
   * Start the effect.
   */


  start(time) {
    this._lfo.start(time);

    return this;
  }
  /**
   * Stop the lfo
   */


  stop(time) {
    this._lfo.stop(time);

    return this;
  }
  /**
   * Sync the filter to the transport. See [[LFO.sync]]
   */


  sync() {
    this._lfo.sync();

    return this;
  }
  /**
   * Unsync the filter from the transport.
   */


  unsync() {
    this._lfo.unsync();

    return this;
  }
  /**
   * The type of the LFO's oscillator: See [[Oscillator.type]]
   * @example
   * const autoFilter = new Tone.AutoFilter().start().toDestination();
   * const noise = new Tone.Noise().start().connect(autoFilter);
   * autoFilter.type = "square";
   */


  get type() {
    return this._lfo.type;
  }

  set type(type) {
    this._lfo.type = type;
  }

  dispose() {
    super.dispose();

    this._lfo.dispose();

    this.frequency.dispose();
    this.depth.dispose();
    return this;
  }

}

exports.LFOEffect = LFOEffect;
},{"../effect/Effect":"../node_modules/tone/build/esm/effect/Effect.js","../source/oscillator/LFO":"../node_modules/tone/build/esm/source/oscillator/LFO.js","../core/util/Interface":"../node_modules/tone/build/esm/core/util/Interface.js"}],"../node_modules/tone/build/esm/effect/AutoFilter.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AutoFilter = void 0;

var _Filter = require("../component/filter/Filter");

var _Defaults = require("../core/util/Defaults");

var _LFOEffect = require("./LFOEffect");

/**
 * AutoFilter is a Tone.Filter with a Tone.LFO connected to the filter cutoff frequency.
 * Setting the LFO rate and depth allows for control over the filter modulation rate
 * and depth.
 *
 * @example
 * // create an autofilter and start it's LFO
 * const autoFilter = new Tone.AutoFilter("4n").toDestination().start();
 * // route an oscillator through the filter and start it
 * const oscillator = new Tone.Oscillator().connect(autoFilter).start();
 * @category Effect
 */
class AutoFilter extends _LFOEffect.LFOEffect {
  constructor() {
    super((0, _Defaults.optionsFromArguments)(AutoFilter.getDefaults(), arguments, ["frequency", "baseFrequency", "octaves"]));
    this.name = "AutoFilter";
    const options = (0, _Defaults.optionsFromArguments)(AutoFilter.getDefaults(), arguments, ["frequency", "baseFrequency", "octaves"]);
    this.filter = new _Filter.Filter(Object.assign(options.filter, {
      context: this.context
    })); // connections

    this.connectEffect(this.filter);

    this._lfo.connect(this.filter.frequency);

    this.octaves = options.octaves;
    this.baseFrequency = options.baseFrequency;
  }

  static getDefaults() {
    return Object.assign(_LFOEffect.LFOEffect.getDefaults(), {
      baseFrequency: 200,
      octaves: 2.6,
      filter: {
        type: "lowpass",
        rolloff: -12,
        Q: 1
      }
    });
  }
  /**
   * The minimum value of the filter's cutoff frequency.
   */


  get baseFrequency() {
    return this._lfo.min;
  }

  set baseFrequency(freq) {
    this._lfo.min = this.toFrequency(freq); // and set the max

    this.octaves = this._octaves;
  }
  /**
   * The maximum value of the filter's cutoff frequency.
   */


  get octaves() {
    return this._octaves;
  }

  set octaves(oct) {
    this._octaves = oct;
    this._lfo.max = this._lfo.min * Math.pow(2, oct);
  }

  dispose() {
    super.dispose();
    this.filter.dispose();
    return this;
  }

}

exports.AutoFilter = AutoFilter;
},{"../component/filter/Filter":"../node_modules/tone/build/esm/component/filter/Filter.js","../core/util/Defaults":"../node_modules/tone/build/esm/core/util/Defaults.js","./LFOEffect":"../node_modules/tone/build/esm/effect/LFOEffect.js"}],"../node_modules/tone/build/esm/component/channel/Panner.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Panner = void 0;

var _Param = require("../../core/context/Param");

var _ToneAudioNode = require("../../core/context/ToneAudioNode");

var _Defaults = require("../../core/util/Defaults");

var _Interface = require("../../core/util/Interface");

/**
 * Panner is an equal power Left/Right Panner. It is a wrapper around the StereoPannerNode.
 * @example
 * return Tone.Offline(() => {
    * // move the input signal from right to left
    * const panner = new Tone.Panner(1).toDestination();
    * panner.pan.rampTo(-1, 0.5);
    * const osc = new Tone.Oscillator(100).connect(panner).start();
 * }, 0.5, 2);
 * @category Component
 */
class Panner extends _ToneAudioNode.ToneAudioNode {
  constructor() {
    super(Object.assign((0, _Defaults.optionsFromArguments)(Panner.getDefaults(), arguments, ["pan"])));
    this.name = "Panner";
    /**
     * the panner node
     */

    this._panner = this.context.createStereoPanner();
    this.input = this._panner;
    this.output = this._panner;
    const options = (0, _Defaults.optionsFromArguments)(Panner.getDefaults(), arguments, ["pan"]);
    this.pan = new _Param.Param({
      context: this.context,
      param: this._panner.pan,
      value: options.pan,
      minValue: -1,
      maxValue: 1
    }); // this is necessary for standardized-audio-context
    // doesn't make any difference for the native AudioContext
    // https://github.com/chrisguttandin/standardized-audio-context/issues/647

    this._panner.channelCount = options.channelCount;
    this._panner.channelCountMode = "explicit"; // initial value

    (0, _Interface.readOnly)(this, "pan");
  }

  static getDefaults() {
    return Object.assign(_ToneAudioNode.ToneAudioNode.getDefaults(), {
      pan: 0,
      channelCount: 1
    });
  }

  dispose() {
    super.dispose();

    this._panner.disconnect();

    this.pan.dispose();
    return this;
  }

}

exports.Panner = Panner;
},{"../../core/context/Param":"../node_modules/tone/build/esm/core/context/Param.js","../../core/context/ToneAudioNode":"../node_modules/tone/build/esm/core/context/ToneAudioNode.js","../../core/util/Defaults":"../node_modules/tone/build/esm/core/util/Defaults.js","../../core/util/Interface":"../node_modules/tone/build/esm/core/util/Interface.js"}],"../node_modules/tone/build/esm/effect/AutoPanner.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AutoPanner = void 0;

var _Panner = require("../component/channel/Panner");

var _Defaults = require("../core/util/Defaults");

var _LFOEffect = require("./LFOEffect");

/**
 * AutoPanner is a [[Panner]] with an [[LFO]] connected to the pan amount.
 * [Related Reading](https://www.ableton.com/en/blog/autopan-chopper-effect-and-more-liveschool/).
 *
 * @example
 * // create an autopanner and start it
 * const autoPanner = new Tone.AutoPanner("4n").toDestination().start();
 * // route an oscillator through the panner and start it
 * const oscillator = new Tone.Oscillator().connect(autoPanner).start();
 * @category Effect
 */
class AutoPanner extends _LFOEffect.LFOEffect {
  constructor() {
    super((0, _Defaults.optionsFromArguments)(AutoPanner.getDefaults(), arguments, ["frequency"]));
    this.name = "AutoPanner";
    const options = (0, _Defaults.optionsFromArguments)(AutoPanner.getDefaults(), arguments, ["frequency"]);
    this._panner = new _Panner.Panner({
      context: this.context,
      channelCount: options.channelCount
    }); // connections

    this.connectEffect(this._panner);

    this._lfo.connect(this._panner.pan);

    this._lfo.min = -1;
    this._lfo.max = 1;
  }

  static getDefaults() {
    return Object.assign(_LFOEffect.LFOEffect.getDefaults(), {
      channelCount: 1
    });
  }

  dispose() {
    super.dispose();

    this._panner.dispose();

    return this;
  }

}

exports.AutoPanner = AutoPanner;
},{"../component/channel/Panner":"../node_modules/tone/build/esm/component/channel/Panner.js","../core/util/Defaults":"../node_modules/tone/build/esm/core/util/Defaults.js","./LFOEffect":"../node_modules/tone/build/esm/effect/LFOEffect.js"}],"../node_modules/tone/build/esm/component/analysis/Follower.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Follower = void 0;

var _ToneAudioNode = require("../../core/context/ToneAudioNode");

var _Defaults = require("../../core/util/Defaults");

var _OnePoleFilter = require("../filter/OnePoleFilter");

var _Abs = require("../../signal/Abs");

/**
 * Follower is a simple envelope follower.
 * It's implemented by applying a lowpass filter to the absolute value of the incoming signal.
 * ```
 *          +-----+    +---------------+
 * Input +--> Abs +----> OnePoleFilter +--> Output
 *          +-----+    +---------------+
 * ```
 * @category Component
 */
class Follower extends _ToneAudioNode.ToneAudioNode {
  constructor() {
    super((0, _Defaults.optionsFromArguments)(Follower.getDefaults(), arguments, ["smoothing"]));
    this.name = "Follower";
    const options = (0, _Defaults.optionsFromArguments)(Follower.getDefaults(), arguments, ["smoothing"]);
    this._abs = this.input = new _Abs.Abs({
      context: this.context
    });
    this._lowpass = this.output = new _OnePoleFilter.OnePoleFilter({
      context: this.context,
      frequency: 1 / this.toSeconds(options.smoothing),
      type: "lowpass"
    });

    this._abs.connect(this._lowpass);

    this._smoothing = options.smoothing;
  }

  static getDefaults() {
    return Object.assign(_ToneAudioNode.ToneAudioNode.getDefaults(), {
      smoothing: 0.05
    });
  }
  /**
   * The amount of time it takes a value change to arrive at the updated value.
   */


  get smoothing() {
    return this._smoothing;
  }

  set smoothing(smoothing) {
    this._smoothing = smoothing;
    this._lowpass.frequency = 1 / this.toSeconds(this.smoothing);
  }

  dispose() {
    super.dispose();

    this._abs.dispose();

    this._lowpass.dispose();

    return this;
  }

}

exports.Follower = Follower;
},{"../../core/context/ToneAudioNode":"../node_modules/tone/build/esm/core/context/ToneAudioNode.js","../../core/util/Defaults":"../node_modules/tone/build/esm/core/util/Defaults.js","../filter/OnePoleFilter":"../node_modules/tone/build/esm/component/filter/OnePoleFilter.js","../../signal/Abs":"../node_modules/tone/build/esm/signal/Abs.js"}],"../node_modules/tone/build/esm/effect/AutoWah.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AutoWah = void 0;

var _Effect = require("./Effect");

var _Filter = require("../component/filter/Filter");

var _Follower = require("../component/analysis/Follower");

var _Defaults = require("../core/util/Defaults");

var _Gain = require("../core/context/Gain");

var _Conversions = require("../core/type/Conversions");

var _ScaleExp = require("../signal/ScaleExp");

var _Interface = require("../core/util/Interface");

/**
 * AutoWah connects a [[Follower]] to a [[Filter]].
 * The frequency of the filter, follows the input amplitude curve.
 * Inspiration from [Tuna.js](https://github.com/Dinahmoe/tuna).
 *
 * @example
 * const autoWah = new Tone.AutoWah(50, 6, -30).toDestination();
 * // initialize the synth and connect to autowah
 * const synth = new Tone.Synth().connect(autoWah);
 * // Q value influences the effect of the wah - default is 2
 * autoWah.Q.value = 6;
 * // more audible on higher notes
 * synth.triggerAttackRelease("C4", "8n");
 * @category Effect
 */
class AutoWah extends _Effect.Effect {
  constructor() {
    super((0, _Defaults.optionsFromArguments)(AutoWah.getDefaults(), arguments, ["baseFrequency", "octaves", "sensitivity"]));
    this.name = "AutoWah";
    const options = (0, _Defaults.optionsFromArguments)(AutoWah.getDefaults(), arguments, ["baseFrequency", "octaves", "sensitivity"]);
    this._follower = new _Follower.Follower({
      context: this.context,
      smoothing: options.follower
    });
    this._sweepRange = new _ScaleExp.ScaleExp({
      context: this.context,
      min: 0,
      max: 1,
      exponent: 0.5
    });
    this._baseFrequency = this.toFrequency(options.baseFrequency);
    this._octaves = options.octaves;
    this._inputBoost = new _Gain.Gain({
      context: this.context
    });
    this._bandpass = new _Filter.Filter({
      context: this.context,
      rolloff: -48,
      frequency: 0,
      Q: options.Q
    });
    this._peaking = new _Filter.Filter({
      context: this.context,
      type: "peaking"
    });
    this._peaking.gain.value = options.gain;
    this.gain = this._peaking.gain;
    this.Q = this._bandpass.Q; // the control signal path

    this.effectSend.chain(this._inputBoost, this._follower, this._sweepRange);

    this._sweepRange.connect(this._bandpass.frequency);

    this._sweepRange.connect(this._peaking.frequency); // the filtered path


    this.effectSend.chain(this._bandpass, this._peaking, this.effectReturn); // set the initial value

    this._setSweepRange();

    this.sensitivity = options.sensitivity;
    (0, _Interface.readOnly)(this, ["gain", "Q"]);
  }

  static getDefaults() {
    return Object.assign(_Effect.Effect.getDefaults(), {
      baseFrequency: 100,
      octaves: 6,
      sensitivity: 0,
      Q: 2,
      gain: 2,
      follower: 0.2
    });
  }
  /**
   * The number of octaves that the filter will sweep above the baseFrequency.
   */


  get octaves() {
    return this._octaves;
  }

  set octaves(octaves) {
    this._octaves = octaves;

    this._setSweepRange();
  }
  /**
   * The follower's smoothing time
   */


  get follower() {
    return this._follower.smoothing;
  }

  set follower(follower) {
    this._follower.smoothing = follower;
  }
  /**
   * The base frequency from which the sweep will start from.
   */


  get baseFrequency() {
    return this._baseFrequency;
  }

  set baseFrequency(baseFreq) {
    this._baseFrequency = this.toFrequency(baseFreq);

    this._setSweepRange();
  }
  /**
   * The sensitivity to control how responsive to the input signal the filter is.
   */


  get sensitivity() {
    return (0, _Conversions.gainToDb)(1 / this._inputBoost.gain.value);
  }

  set sensitivity(sensitivity) {
    this._inputBoost.gain.value = 1 / (0, _Conversions.dbToGain)(sensitivity);
  }
  /**
   * sets the sweep range of the scaler
   */


  _setSweepRange() {
    this._sweepRange.min = this._baseFrequency;
    this._sweepRange.max = Math.min(this._baseFrequency * Math.pow(2, this._octaves), this.context.sampleRate / 2);
  }

  dispose() {
    super.dispose();

    this._follower.dispose();

    this._sweepRange.dispose();

    this._bandpass.dispose();

    this._peaking.dispose();

    this._inputBoost.dispose();

    return this;
  }

}

exports.AutoWah = AutoWah;
},{"./Effect":"../node_modules/tone/build/esm/effect/Effect.js","../component/filter/Filter":"../node_modules/tone/build/esm/component/filter/Filter.js","../component/analysis/Follower":"../node_modules/tone/build/esm/component/analysis/Follower.js","../core/util/Defaults":"../node_modules/tone/build/esm/core/util/Defaults.js","../core/context/Gain":"../node_modules/tone/build/esm/core/context/Gain.js","../core/type/Conversions":"../node_modules/tone/build/esm/core/type/Conversions.js","../signal/ScaleExp":"../node_modules/tone/build/esm/signal/ScaleExp.js","../core/util/Interface":"../node_modules/tone/build/esm/core/util/Interface.js"}],"../node_modules/tone/build/esm/effect/BitCrusher.worklet.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.bitCrusherWorklet = exports.workletName = void 0;

require("../core/worklet/SingleIOProcessor.worklet");

var _WorkletGlobalScope = require("../core/worklet/WorkletGlobalScope");

const workletName = "bit-crusher";
exports.workletName = workletName;
const bitCrusherWorklet =
/* javascript */
`
	class BitCrusherWorklet extends SingleIOProcessor {

		static get parameterDescriptors() {
			return [{
				name: "bits",
				defaultValue: 12,
				minValue: 1,
				maxValue: 16,
				automationRate: 'k-rate'
			}];
		}

		generate(input, _channel, parameters) {
			const step = Math.pow(0.5, parameters.bits - 1);
			const val = step * Math.floor(input / step + 0.5);
			return val;
		}
	}
`;
exports.bitCrusherWorklet = bitCrusherWorklet;
(0, _WorkletGlobalScope.registerProcessor)(workletName, bitCrusherWorklet);
},{"../core/worklet/SingleIOProcessor.worklet":"../node_modules/tone/build/esm/core/worklet/SingleIOProcessor.worklet.js","../core/worklet/WorkletGlobalScope":"../node_modules/tone/build/esm/core/worklet/WorkletGlobalScope.js"}],"../node_modules/tone/build/esm/effect/BitCrusher.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BitCrusher = void 0;

var _ToneAudioWorklet = require("../core/worklet/ToneAudioWorklet");

var _Effect = require("./Effect");

var _Gain = require("../core/context/Gain");

var _Defaults = require("../core/util/Defaults");

var _ToneAudioNode = require("../core/context/ToneAudioNode");

var _Param = require("../core/context/Param");

var _BitCrusher = require("./BitCrusher.worklet");

/**
 * BitCrusher down-samples the incoming signal to a different bit depth.
 * Lowering the bit depth of the signal creates distortion. Read more about BitCrushing
 * on [Wikipedia](https://en.wikipedia.org/wiki/Bitcrusher).
 * @example
 * // initialize crusher and route a synth through it
 * const crusher = new Tone.BitCrusher(4).toDestination();
 * const synth = new Tone.Synth().connect(crusher);
 * synth.triggerAttackRelease("C2", 2);
 *
 * @category Effect
 */
class BitCrusher extends _Effect.Effect {
  constructor() {
    super((0, _Defaults.optionsFromArguments)(BitCrusher.getDefaults(), arguments, ["bits"]));
    this.name = "BitCrusher";
    const options = (0, _Defaults.optionsFromArguments)(BitCrusher.getDefaults(), arguments, ["bits"]);
    this._bitCrusherWorklet = new BitCrusherWorklet({
      context: this.context,
      bits: options.bits
    }); // connect it up

    this.connectEffect(this._bitCrusherWorklet);
    this.bits = this._bitCrusherWorklet.bits;
  }

  static getDefaults() {
    return Object.assign(_Effect.Effect.getDefaults(), {
      bits: 4
    });
  }

  dispose() {
    super.dispose();

    this._bitCrusherWorklet.dispose();

    return this;
  }

}
/**
 * Internal class which creates an AudioWorklet to do the bit crushing
 */


exports.BitCrusher = BitCrusher;

class BitCrusherWorklet extends _ToneAudioWorklet.ToneAudioWorklet {
  constructor() {
    super((0, _Defaults.optionsFromArguments)(BitCrusherWorklet.getDefaults(), arguments));
    this.name = "BitCrusherWorklet";
    const options = (0, _Defaults.optionsFromArguments)(BitCrusherWorklet.getDefaults(), arguments);
    this.input = new _Gain.Gain({
      context: this.context
    });
    this.output = new _Gain.Gain({
      context: this.context
    });
    this.bits = new _Param.Param({
      context: this.context,
      value: options.bits,
      units: "positive",
      minValue: 1,
      maxValue: 16,
      param: this._dummyParam,
      swappable: true
    });
  }

  static getDefaults() {
    return Object.assign(_ToneAudioWorklet.ToneAudioWorklet.getDefaults(), {
      bits: 12
    });
  }

  _audioWorkletName() {
    return _BitCrusher.workletName;
  }

  onReady(node) {
    (0, _ToneAudioNode.connectSeries)(this.input, node, this.output);
    const bits = node.parameters.get("bits");
    this.bits.setParam(bits);
  }

  dispose() {
    super.dispose();
    this.input.dispose();
    this.output.dispose();
    this.bits.dispose();
    return this;
  }

}
},{"../core/worklet/ToneAudioWorklet":"../node_modules/tone/build/esm/core/worklet/ToneAudioWorklet.js","./Effect":"../node_modules/tone/build/esm/effect/Effect.js","../core/context/Gain":"../node_modules/tone/build/esm/core/context/Gain.js","../core/util/Defaults":"../node_modules/tone/build/esm/core/util/Defaults.js","../core/context/ToneAudioNode":"../node_modules/tone/build/esm/core/context/ToneAudioNode.js","../core/context/Param":"../node_modules/tone/build/esm/core/context/Param.js","./BitCrusher.worklet":"../node_modules/tone/build/esm/effect/BitCrusher.worklet.js"}],"../node_modules/tone/build/esm/effect/Chebyshev.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Chebyshev = void 0;

var _Effect = require("./Effect");

var _Defaults = require("../core/util/Defaults");

var _WaveShaper = require("../signal/WaveShaper");

/**
 * Chebyshev is a waveshaper which is good
 * for making different types of distortion sounds.
 * Note that odd orders sound very different from even ones,
 * and order = 1 is no change.
 * Read more at [music.columbia.edu](http://music.columbia.edu/cmc/musicandcomputers/chapter4/04_06.php).
 * @example
 * // create a new cheby
 * const cheby = new Tone.Chebyshev(50).toDestination();
 * // create a monosynth connected to our cheby
 * const synth = new Tone.MonoSynth().connect(cheby);
 * synth.triggerAttackRelease("C2", 0.4);
 * @category Effect
 */
class Chebyshev extends _Effect.Effect {
  constructor() {
    super((0, _Defaults.optionsFromArguments)(Chebyshev.getDefaults(), arguments, ["order"]));
    this.name = "Chebyshev";
    const options = (0, _Defaults.optionsFromArguments)(Chebyshev.getDefaults(), arguments, ["order"]);
    this._shaper = new _WaveShaper.WaveShaper({
      context: this.context,
      length: 4096
    });
    this._order = options.order;
    this.connectEffect(this._shaper);
    this.order = options.order;
    this.oversample = options.oversample;
  }

  static getDefaults() {
    return Object.assign(_Effect.Effect.getDefaults(), {
      order: 1,
      oversample: "none"
    });
  }
  /**
   * get the coefficient for that degree
   * @param  x the x value
   * @param  degree
   * @param  memo memoize the computed value. this speeds up computation greatly.
   */


  _getCoefficient(x, degree, memo) {
    if (memo.has(degree)) {
      return memo.get(degree);
    } else if (degree === 0) {
      memo.set(degree, 0);
    } else if (degree === 1) {
      memo.set(degree, x);
    } else {
      memo.set(degree, 2 * x * this._getCoefficient(x, degree - 1, memo) - this._getCoefficient(x, degree - 2, memo));
    }

    return memo.get(degree);
  }
  /**
   * The order of the Chebyshev polynomial which creates the equation which is applied to the incoming
   * signal through a Tone.WaveShaper. The equations are in the form:
   * ```
   * order 2: 2x^2 + 1
   * order 3: 4x^3 + 3x
   * ```
   * @min 1
   * @max 100
   */


  get order() {
    return this._order;
  }

  set order(order) {
    this._order = order;

    this._shaper.setMap(x => {
      return this._getCoefficient(x, order, new Map());
    });
  }
  /**
   * The oversampling of the effect. Can either be "none", "2x" or "4x".
   */


  get oversample() {
    return this._shaper.oversample;
  }

  set oversample(oversampling) {
    this._shaper.oversample = oversampling;
  }

  dispose() {
    super.dispose();

    this._shaper.dispose();

    return this;
  }

}

exports.Chebyshev = Chebyshev;
},{"./Effect":"../node_modules/tone/build/esm/effect/Effect.js","../core/util/Defaults":"../node_modules/tone/build/esm/core/util/Defaults.js","../signal/WaveShaper":"../node_modules/tone/build/esm/signal/WaveShaper.js"}],"../node_modules/tone/build/esm/component/channel/Split.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Split = void 0;

var _ToneAudioNode = require("../../core/context/ToneAudioNode");

var _Defaults = require("../../core/util/Defaults");

/**
 * Split splits an incoming signal into the number of given channels.
 *
 * @example
 * const split = new Tone.Split();
 * // stereoSignal.connect(split);
 * @category Component
 */
class Split extends _ToneAudioNode.ToneAudioNode {
  constructor() {
    super((0, _Defaults.optionsFromArguments)(Split.getDefaults(), arguments, ["channels"]));
    this.name = "Split";
    const options = (0, _Defaults.optionsFromArguments)(Split.getDefaults(), arguments, ["channels"]);
    this._splitter = this.input = this.output = this.context.createChannelSplitter(options.channels);
    this._internalChannels = [this._splitter];
  }

  static getDefaults() {
    return Object.assign(_ToneAudioNode.ToneAudioNode.getDefaults(), {
      channels: 2
    });
  }

  dispose() {
    super.dispose();

    this._splitter.disconnect();

    return this;
  }

}

exports.Split = Split;
},{"../../core/context/ToneAudioNode":"../node_modules/tone/build/esm/core/context/ToneAudioNode.js","../../core/util/Defaults":"../node_modules/tone/build/esm/core/util/Defaults.js"}],"../node_modules/tone/build/esm/component/channel/Merge.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Merge = void 0;

var _ToneAudioNode = require("../../core/context/ToneAudioNode");

var _Defaults = require("../../core/util/Defaults");

/**
 * Merge brings multiple mono input channels into a single multichannel output channel.
 *
 * @example
 * const merge = new Tone.Merge().toDestination();
 * // routing a sine tone in the left channel
 * const osc = new Tone.Oscillator().connect(merge, 0, 0).start();
 * // and noise in the right channel
 * const noise = new Tone.Noise().connect(merge, 0, 1).start();;
 * @category Component
 */
class Merge extends _ToneAudioNode.ToneAudioNode {
  constructor() {
    super((0, _Defaults.optionsFromArguments)(Merge.getDefaults(), arguments, ["channels"]));
    this.name = "Merge";
    const options = (0, _Defaults.optionsFromArguments)(Merge.getDefaults(), arguments, ["channels"]);
    this._merger = this.output = this.input = this.context.createChannelMerger(options.channels);
  }

  static getDefaults() {
    return Object.assign(_ToneAudioNode.ToneAudioNode.getDefaults(), {
      channels: 2
    });
  }

  dispose() {
    super.dispose();

    this._merger.disconnect();

    return this;
  }

}

exports.Merge = Merge;
},{"../../core/context/ToneAudioNode":"../node_modules/tone/build/esm/core/context/ToneAudioNode.js","../../core/util/Defaults":"../node_modules/tone/build/esm/core/util/Defaults.js"}],"../node_modules/tone/build/esm/effect/StereoEffect.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.StereoEffect = void 0;

var _ToneAudioNode = require("../core/context/ToneAudioNode");

var _CrossFade = require("../component/channel/CrossFade");

var _Split = require("../component/channel/Split");

var _Gain = require("../core/context/Gain");

var _Merge = require("../component/channel/Merge");

var _Interface = require("../core/util/Interface");

/**
 * Base class for Stereo effects.
 */
class StereoEffect extends _ToneAudioNode.ToneAudioNode {
  constructor(options) {
    super(options);
    this.name = "StereoEffect";
    this.input = new _Gain.Gain({
      context: this.context
    }); // force mono sources to be stereo

    this.input.channelCount = 2;
    this.input.channelCountMode = "explicit";
    this._dryWet = this.output = new _CrossFade.CrossFade({
      context: this.context,
      fade: options.wet
    });
    this.wet = this._dryWet.fade;
    this._split = new _Split.Split({
      context: this.context,
      channels: 2
    });
    this._merge = new _Merge.Merge({
      context: this.context,
      channels: 2
    }); // connections

    this.input.connect(this._split); // dry wet connections

    this.input.connect(this._dryWet.a);

    this._merge.connect(this._dryWet.b);

    (0, _Interface.readOnly)(this, ["wet"]);
  }
  /**
   * Connect the left part of the effect
   */


  connectEffectLeft(...nodes) {
    this._split.connect(nodes[0], 0, 0);

    (0, _ToneAudioNode.connectSeries)(...nodes);
    (0, _ToneAudioNode.connect)(nodes[nodes.length - 1], this._merge, 0, 0);
  }
  /**
   * Connect the right part of the effect
   */


  connectEffectRight(...nodes) {
    this._split.connect(nodes[0], 1, 0);

    (0, _ToneAudioNode.connectSeries)(...nodes);
    (0, _ToneAudioNode.connect)(nodes[nodes.length - 1], this._merge, 0, 1);
  }

  static getDefaults() {
    return Object.assign(_ToneAudioNode.ToneAudioNode.getDefaults(), {
      wet: 1
    });
  }

  dispose() {
    super.dispose();

    this._dryWet.dispose();

    this._split.dispose();

    this._merge.dispose();

    return this;
  }

}

exports.StereoEffect = StereoEffect;
},{"../core/context/ToneAudioNode":"../node_modules/tone/build/esm/core/context/ToneAudioNode.js","../component/channel/CrossFade":"../node_modules/tone/build/esm/component/channel/CrossFade.js","../component/channel/Split":"../node_modules/tone/build/esm/component/channel/Split.js","../core/context/Gain":"../node_modules/tone/build/esm/core/context/Gain.js","../component/channel/Merge":"../node_modules/tone/build/esm/component/channel/Merge.js","../core/util/Interface":"../node_modules/tone/build/esm/core/util/Interface.js"}],"../node_modules/tone/build/esm/effect/StereoFeedbackEffect.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.StereoFeedbackEffect = void 0;

var _StereoEffect = require("./StereoEffect");

var _Signal = require("../signal/Signal");

var _Gain = require("../core/context/Gain");

var _Interface = require("../core/util/Interface");

var _Split = require("../component/channel/Split");

var _Merge = require("../component/channel/Merge");

/**
 * Just like a stereo feedback effect, but the feedback is routed from left to right
 * and right to left instead of on the same channel.
 * ```
 * +--------------------------------+ feedbackL <-----------------------------------+
 * |                                                                                |
 * +-->                          +----->        +---->                          +---+
 *      feedbackMerge +--> split        (EFFECT)       merge +--> feedbackSplit
 * +-->                          +----->        +---->                          +---+
 * |                                                                                |
 * +--------------------------------+ feedbackR <-----------------------------------+
 * ```
 */
class StereoFeedbackEffect extends _StereoEffect.StereoEffect {
  constructor(options) {
    super(options);
    this.feedback = new _Signal.Signal({
      context: this.context,
      value: options.feedback,
      units: "normalRange"
    });
    this._feedbackL = new _Gain.Gain({
      context: this.context
    });
    this._feedbackR = new _Gain.Gain({
      context: this.context
    });
    this._feedbackSplit = new _Split.Split({
      context: this.context,
      channels: 2
    });
    this._feedbackMerge = new _Merge.Merge({
      context: this.context,
      channels: 2
    });

    this._merge.connect(this._feedbackSplit);

    this._feedbackMerge.connect(this._split); // the left output connected to the left input


    this._feedbackSplit.connect(this._feedbackL, 0, 0);

    this._feedbackL.connect(this._feedbackMerge, 0, 0); // the right output connected to the right input


    this._feedbackSplit.connect(this._feedbackR, 1, 0);

    this._feedbackR.connect(this._feedbackMerge, 0, 1); // the feedback control


    this.feedback.fan(this._feedbackL.gain, this._feedbackR.gain);
    (0, _Interface.readOnly)(this, ["feedback"]);
  }

  static getDefaults() {
    return Object.assign(_StereoEffect.StereoEffect.getDefaults(), {
      feedback: 0.5
    });
  }

  dispose() {
    super.dispose();
    this.feedback.dispose();

    this._feedbackL.dispose();

    this._feedbackR.dispose();

    this._feedbackSplit.dispose();

    this._feedbackMerge.dispose();

    return this;
  }

}

exports.StereoFeedbackEffect = StereoFeedbackEffect;
},{"./StereoEffect":"../node_modules/tone/build/esm/effect/StereoEffect.js","../signal/Signal":"../node_modules/tone/build/esm/signal/Signal.js","../core/context/Gain":"../node_modules/tone/build/esm/core/context/Gain.js","../core/util/Interface":"../node_modules/tone/build/esm/core/util/Interface.js","../component/channel/Split":"../node_modules/tone/build/esm/component/channel/Split.js","../component/channel/Merge":"../node_modules/tone/build/esm/component/channel/Merge.js"}],"../node_modules/tone/build/esm/effect/Chorus.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Chorus = void 0;

var _StereoFeedbackEffect = require("../effect/StereoFeedbackEffect");

var _Defaults = require("../core/util/Defaults");

var _LFO = require("../source/oscillator/LFO");

var _Delay = require("../core/context/Delay");

var _Interface = require("../core/util/Interface");

/**
 * Chorus is a stereo chorus effect composed of a left and right delay with an [[LFO]] applied to the delayTime of each channel.
 * When [[feedback]] is set to a value larger than 0, you also get Flanger-type effects.
 * Inspiration from [Tuna.js](https://github.com/Dinahmoe/tuna/blob/master/tuna.js).
 * Read more on the chorus effect on [SoundOnSound](http://www.soundonsound.com/sos/jun04/articles/synthsecrets.htm).
 *
 * @example
 * const chorus = new Tone.Chorus(4, 2.5, 0.5);
 * const synth = new Tone.PolySynth().connect(chorus);
 * synth.triggerAttackRelease(["C3", "E3", "G3"], "8n");
 *
 * @category Effect
 */
class Chorus extends _StereoFeedbackEffect.StereoFeedbackEffect {
  constructor() {
    super((0, _Defaults.optionsFromArguments)(Chorus.getDefaults(), arguments, ["frequency", "delayTime", "depth"]));
    this.name = "Chorus";
    const options = (0, _Defaults.optionsFromArguments)(Chorus.getDefaults(), arguments, ["frequency", "delayTime", "depth"]);
    this._depth = options.depth;
    this._delayTime = options.delayTime / 1000;
    this._lfoL = new _LFO.LFO({
      context: this.context,
      frequency: options.frequency,
      min: 0,
      max: 1
    });
    this._lfoR = new _LFO.LFO({
      context: this.context,
      frequency: options.frequency,
      min: 0,
      max: 1,
      phase: 180
    });
    this._delayNodeL = new _Delay.Delay({
      context: this.context
    });
    this._delayNodeR = new _Delay.Delay({
      context: this.context
    });
    this.frequency = this._lfoL.frequency;
    (0, _Interface.readOnly)(this, ["frequency"]); // have one LFO frequency control the other

    this._lfoL.frequency.connect(this._lfoR.frequency); // connections


    this.connectEffectLeft(this._delayNodeL);
    this.connectEffectRight(this._delayNodeR); // lfo setup

    this._lfoL.connect(this._delayNodeL.delayTime);

    this._lfoR.connect(this._delayNodeR.delayTime); // set the initial values


    this.depth = this._depth;
    this.type = options.type;
    this.spread = options.spread;
  }

  static getDefaults() {
    return Object.assign(_StereoFeedbackEffect.StereoFeedbackEffect.getDefaults(), {
      frequency: 1.5,
      delayTime: 3.5,
      depth: 0.7,
      type: "sine",
      spread: 180,
      feedback: 0,
      wet: 0.5
    });
  }
  /**
   * The depth of the effect. A depth of 1 makes the delayTime
   * modulate between 0 and 2*delayTime (centered around the delayTime).
   */


  get depth() {
    return this._depth;
  }

  set depth(depth) {
    this._depth = depth;
    const deviation = this._delayTime * depth;
    this._lfoL.min = Math.max(this._delayTime - deviation, 0);
    this._lfoL.max = this._delayTime + deviation;
    this._lfoR.min = Math.max(this._delayTime - deviation, 0);
    this._lfoR.max = this._delayTime + deviation;
  }
  /**
   * The delayTime in milliseconds of the chorus. A larger delayTime
   * will give a more pronounced effect. Nominal range a delayTime
   * is between 2 and 20ms.
   */


  get delayTime() {
    return this._delayTime * 1000;
  }

  set delayTime(delayTime) {
    this._delayTime = delayTime / 1000;
    this.depth = this._depth;
  }
  /**
   * The oscillator type of the LFO.
   */


  get type() {
    return this._lfoL.type;
  }

  set type(type) {
    this._lfoL.type = type;
    this._lfoR.type = type;
  }
  /**
   * Amount of stereo spread. When set to 0, both LFO's will be panned centrally.
   * When set to 180, LFO's will be panned hard left and right respectively.
   */


  get spread() {
    return this._lfoR.phase - this._lfoL.phase;
  }

  set spread(spread) {
    this._lfoL.phase = 90 - spread / 2;
    this._lfoR.phase = spread / 2 + 90;
  }
  /**
   * Start the effect.
   */


  start(time) {
    this._lfoL.start(time);

    this._lfoR.start(time);

    return this;
  }
  /**
   * Stop the lfo
   */


  stop(time) {
    this._lfoL.stop(time);

    this._lfoR.stop(time);

    return this;
  }
  /**
   * Sync the filter to the transport. See [[LFO.sync]]
   */


  sync() {
    this._lfoL.sync();

    this._lfoR.sync();

    return this;
  }
  /**
   * Unsync the filter from the transport.
   */


  unsync() {
    this._lfoL.unsync();

    this._lfoR.unsync();

    return this;
  }

  dispose() {
    super.dispose();

    this._lfoL.dispose();

    this._lfoR.dispose();

    this._delayNodeL.dispose();

    this._delayNodeR.dispose();

    this.frequency.dispose();
    return this;
  }

}

exports.Chorus = Chorus;
},{"../effect/StereoFeedbackEffect":"../node_modules/tone/build/esm/effect/StereoFeedbackEffect.js","../core/util/Defaults":"../node_modules/tone/build/esm/core/util/Defaults.js","../source/oscillator/LFO":"../node_modules/tone/build/esm/source/oscillator/LFO.js","../core/context/Delay":"../node_modules/tone/build/esm/core/context/Delay.js","../core/util/Interface":"../node_modules/tone/build/esm/core/util/Interface.js"}],"../node_modules/tone/build/esm/effect/Distortion.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Distortion = void 0;

var _Defaults = require("../core/util/Defaults");

var _WaveShaper = require("../signal/WaveShaper");

var _Effect = require("./Effect");

/**
 * A simple distortion effect using Tone.WaveShaper.
 * Algorithm from [this stackoverflow answer](http://stackoverflow.com/a/22313408).
 *
 * @example
 * const dist = new Tone.Distortion(0.8).toDestination();
 * const fm = new Tone.FMSynth().connect(dist);
 * fm.triggerAttackRelease("A1", "8n");
 * @category Effect
 */
class Distortion extends _Effect.Effect {
  constructor() {
    super((0, _Defaults.optionsFromArguments)(Distortion.getDefaults(), arguments, ["distortion"]));
    this.name = "Distortion";
    const options = (0, _Defaults.optionsFromArguments)(Distortion.getDefaults(), arguments, ["distortion"]);
    this._shaper = new _WaveShaper.WaveShaper({
      context: this.context,
      length: 4096
    });
    this._distortion = options.distortion;
    this.connectEffect(this._shaper);
    this.distortion = options.distortion;
    this.oversample = options.oversample;
  }

  static getDefaults() {
    return Object.assign(_Effect.Effect.getDefaults(), {
      distortion: 0.4,
      oversample: "none"
    });
  }
  /**
   * The amount of distortion. Nominal range is between 0 and 1.
   */


  get distortion() {
    return this._distortion;
  }

  set distortion(amount) {
    this._distortion = amount;
    const k = amount * 100;
    const deg = Math.PI / 180;

    this._shaper.setMap(x => {
      if (Math.abs(x) < 0.001) {
        // should output 0 when input is 0
        return 0;
      } else {
        return (3 + k) * x * 20 * deg / (Math.PI + k * Math.abs(x));
      }
    });
  }
  /**
   * The oversampling of the effect. Can either be "none", "2x" or "4x".
   */


  get oversample() {
    return this._shaper.oversample;
  }

  set oversample(oversampling) {
    this._shaper.oversample = oversampling;
  }

  dispose() {
    super.dispose();

    this._shaper.dispose();

    return this;
  }

}

exports.Distortion = Distortion;
},{"../core/util/Defaults":"../node_modules/tone/build/esm/core/util/Defaults.js","../signal/WaveShaper":"../node_modules/tone/build/esm/signal/WaveShaper.js","./Effect":"../node_modules/tone/build/esm/effect/Effect.js"}],"../node_modules/tone/build/esm/effect/FeedbackEffect.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FeedbackEffect = void 0;

var _Gain = require("../core/context/Gain");

var _Interface = require("../core/util/Interface");

var _Effect = require("./Effect");

/**
 * FeedbackEffect provides a loop between an audio source and its own output.
 * This is a base-class for feedback effects.
 */
class FeedbackEffect extends _Effect.Effect {
  constructor(options) {
    super(options);
    this.name = "FeedbackEffect";
    this._feedbackGain = new _Gain.Gain({
      context: this.context,
      gain: options.feedback,
      units: "normalRange"
    });
    this.feedback = this._feedbackGain.gain;
    (0, _Interface.readOnly)(this, "feedback"); // the feedback loop

    this.effectReturn.chain(this._feedbackGain, this.effectSend);
  }

  static getDefaults() {
    return Object.assign(_Effect.Effect.getDefaults(), {
      feedback: 0.125
    });
  }

  dispose() {
    super.dispose();

    this._feedbackGain.dispose();

    this.feedback.dispose();
    return this;
  }

}

exports.FeedbackEffect = FeedbackEffect;
},{"../core/context/Gain":"../node_modules/tone/build/esm/core/context/Gain.js","../core/util/Interface":"../node_modules/tone/build/esm/core/util/Interface.js","./Effect":"../node_modules/tone/build/esm/effect/Effect.js"}],"../node_modules/tone/build/esm/effect/FeedbackDelay.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FeedbackDelay = void 0;

var _Delay = require("../core/context/Delay");

var _Defaults = require("../core/util/Defaults");

var _Interface = require("../core/util/Interface");

var _FeedbackEffect = require("./FeedbackEffect");

/**
 * FeedbackDelay is a DelayNode in which part of output signal is fed back into the delay.
 *
 * @param delayTime The delay applied to the incoming signal.
 * @param feedback The amount of the effected signal which is fed back through the delay.
 * @example
 * const feedbackDelay = new Tone.FeedbackDelay("8n", 0.5).toDestination();
 * const tom = new Tone.MembraneSynth({
 * 	octaves: 4,
 * 	pitchDecay: 0.1
 * }).connect(feedbackDelay);
 * tom.triggerAttackRelease("A2", "32n");
 * @category Effect
 */
class FeedbackDelay extends _FeedbackEffect.FeedbackEffect {
  constructor() {
    super((0, _Defaults.optionsFromArguments)(FeedbackDelay.getDefaults(), arguments, ["delayTime", "feedback"]));
    this.name = "FeedbackDelay";
    const options = (0, _Defaults.optionsFromArguments)(FeedbackDelay.getDefaults(), arguments, ["delayTime", "feedback"]);
    this._delayNode = new _Delay.Delay({
      context: this.context,
      delayTime: options.delayTime,
      maxDelay: options.maxDelay
    });
    this.delayTime = this._delayNode.delayTime; // connect it up

    this.connectEffect(this._delayNode);
    (0, _Interface.readOnly)(this, "delayTime");
  }

  static getDefaults() {
    return Object.assign(_FeedbackEffect.FeedbackEffect.getDefaults(), {
      delayTime: 0.25,
      maxDelay: 1
    });
  }

  dispose() {
    super.dispose();

    this._delayNode.dispose();

    this.delayTime.dispose();
    return this;
  }

}

exports.FeedbackDelay = FeedbackDelay;
},{"../core/context/Delay":"../node_modules/tone/build/esm/core/context/Delay.js","../core/util/Defaults":"../node_modules/tone/build/esm/core/util/Defaults.js","../core/util/Interface":"../node_modules/tone/build/esm/core/util/Interface.js","./FeedbackEffect":"../node_modules/tone/build/esm/effect/FeedbackEffect.js"}],"../node_modules/tone/build/esm/component/filter/PhaseShiftAllpass.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PhaseShiftAllpass = void 0;

var _Gain = require("../../core/context/Gain");

var _ToneAudioNode = require("../../core/context/ToneAudioNode");

/**
 * PhaseShiftAllpass is an very efficient implementation of a Hilbert Transform
 * using two Allpass filter banks whose outputs have a phase difference of 90°.
 * Here the `offset90` phase is offset by +90° in relation to `output`.
 * Coefficients and structure was developed by Olli Niemitalo.
 * For more details see: http://yehar.com/blog/?p=368
 * @category Component
 */
class PhaseShiftAllpass extends _ToneAudioNode.ToneAudioNode {
  constructor(options) {
    super(options);
    this.name = "PhaseShiftAllpass";
    this.input = new _Gain.Gain({
      context: this.context
    });
    /**
     * The phase shifted output
     */

    this.output = new _Gain.Gain({
      context: this.context
    });
    /**
     * The PhaseShifted allpass output
     */

    this.offset90 = new _Gain.Gain({
      context: this.context
    });
    const allpassBank1Values = [0.6923878, 0.9360654322959, 0.9882295226860, 0.9987488452737];
    const allpassBank2Values = [0.4021921162426, 0.8561710882420, 0.9722909545651, 0.9952884791278];
    this._bank0 = this._createAllPassFilterBank(allpassBank1Values);
    this._bank1 = this._createAllPassFilterBank(allpassBank2Values);
    this._oneSampleDelay = this.context.createIIRFilter([0.0, 1.0], [1.0, 0.0]); // connect Allpass filter banks

    (0, _ToneAudioNode.connectSeries)(this.input, ...this._bank0, this._oneSampleDelay, this.output);
    (0, _ToneAudioNode.connectSeries)(this.input, ...this._bank1, this.offset90);
  }
  /**
   * Create all of the IIR filters from an array of values using the coefficient calculation.
   */


  _createAllPassFilterBank(bankValues) {
    const nodes = bankValues.map(value => {
      const coefficients = [[value * value, 0, -1], [1, 0, -(value * value)]];
      return this.context.createIIRFilter(coefficients[0], coefficients[1]);
    });
    return nodes;
  }

  dispose() {
    super.dispose();
    this.input.dispose();
    this.output.dispose();
    this.offset90.dispose();

    this._bank0.forEach(f => f.disconnect());

    this._bank1.forEach(f => f.disconnect());

    this._oneSampleDelay.disconnect();

    return this;
  }

}

exports.PhaseShiftAllpass = PhaseShiftAllpass;
},{"../../core/context/Gain":"../node_modules/tone/build/esm/core/context/Gain.js","../../core/context/ToneAudioNode":"../node_modules/tone/build/esm/core/context/ToneAudioNode.js"}],"../node_modules/tone/build/esm/effect/FrequencyShifter.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FrequencyShifter = void 0;

var _PhaseShiftAllpass = require("../component/filter/PhaseShiftAllpass");

var _Defaults = require("../core/util/Defaults");

var _Effect = require("../effect/Effect");

var _Add = require("../signal/Add");

var _Multiply = require("../signal/Multiply");

var _Negate = require("../signal/Negate");

var _Signal = require("../signal/Signal");

var _Oscillator = require("../source/oscillator/Oscillator");

var _ToneOscillatorNode = require("../source/oscillator/ToneOscillatorNode");

/**
 * FrequencyShifter can be used to shift all frequencies of a signal by a fixed amount.
 * The amount can be changed at audio rate and the effect is applied in real time.
 * The frequency shifting is implemented with a technique called single side band modulation using a ring modulator.
 * Note: Contrary to pitch shifting, all frequencies are shifted by the same amount,
 * destroying the harmonic relationship between them. This leads to the classic ring modulator timbre distortion.
 * The algorithm will produces some aliasing towards the high end, especially if your source material
 * contains a lot of high frequencies. Unfortunatelly the webaudio API does not support resampling
 * buffers in real time, so it is not possible to fix it properly. Depending on the use case it might
 * be an option to low pass filter your input before frequency shifting it to get ride of the aliasing.
 * You can find a very detailed description of the algorithm here: https://larzeitlin.github.io/RMFS/
 *
 * @example
 * const input = new Tone.Oscillator(230, "sawtooth").start();
 * const shift = new Tone.FrequencyShifter(42).toDestination();
 * input.connect(shift);
 * @category Effect
 */
class FrequencyShifter extends _Effect.Effect {
  constructor() {
    super((0, _Defaults.optionsFromArguments)(FrequencyShifter.getDefaults(), arguments, ["frequency"]));
    this.name = "FrequencyShifter";
    const options = (0, _Defaults.optionsFromArguments)(FrequencyShifter.getDefaults(), arguments, ["frequency"]);
    this.frequency = new _Signal.Signal({
      context: this.context,
      units: "frequency",
      value: options.frequency,
      minValue: -this.context.sampleRate / 2,
      maxValue: this.context.sampleRate / 2
    });
    this._sine = new _ToneOscillatorNode.ToneOscillatorNode({
      context: this.context,
      type: "sine"
    });
    this._cosine = new _Oscillator.Oscillator({
      context: this.context,
      phase: -90,
      type: "sine"
    });
    this._sineMultiply = new _Multiply.Multiply({
      context: this.context
    });
    this._cosineMultiply = new _Multiply.Multiply({
      context: this.context
    });
    this._negate = new _Negate.Negate({
      context: this.context
    });
    this._add = new _Add.Add({
      context: this.context
    });
    this._phaseShifter = new _PhaseShiftAllpass.PhaseShiftAllpass({
      context: this.context
    });
    this.effectSend.connect(this._phaseShifter); // connect the carrier frequency signal to the two oscillators

    this.frequency.fan(this._sine.frequency, this._cosine.frequency);

    this._phaseShifter.offset90.connect(this._cosineMultiply);

    this._cosine.connect(this._cosineMultiply.factor);

    this._phaseShifter.connect(this._sineMultiply);

    this._sine.connect(this._sineMultiply.factor);

    this._sineMultiply.connect(this._negate);

    this._cosineMultiply.connect(this._add);

    this._negate.connect(this._add.addend);

    this._add.connect(this.effectReturn); // start the oscillators at the same time


    const now = this.immediate();

    this._sine.start(now);

    this._cosine.start(now);
  }

  static getDefaults() {
    return Object.assign(_Effect.Effect.getDefaults(), {
      frequency: 0
    });
  }

  dispose() {
    super.dispose();
    this.frequency.dispose();

    this._add.dispose();

    this._cosine.dispose();

    this._cosineMultiply.dispose();

    this._negate.dispose();

    this._phaseShifter.dispose();

    this._sine.dispose();

    this._sineMultiply.dispose();

    return this;
  }

}

exports.FrequencyShifter = FrequencyShifter;
},{"../component/filter/PhaseShiftAllpass":"../node_modules/tone/build/esm/component/filter/PhaseShiftAllpass.js","../core/util/Defaults":"../node_modules/tone/build/esm/core/util/Defaults.js","../effect/Effect":"../node_modules/tone/build/esm/effect/Effect.js","../signal/Add":"../node_modules/tone/build/esm/signal/Add.js","../signal/Multiply":"../node_modules/tone/build/esm/signal/Multiply.js","../signal/Negate":"../node_modules/tone/build/esm/signal/Negate.js","../signal/Signal":"../node_modules/tone/build/esm/signal/Signal.js","../source/oscillator/Oscillator":"../node_modules/tone/build/esm/source/oscillator/Oscillator.js","../source/oscillator/ToneOscillatorNode":"../node_modules/tone/build/esm/source/oscillator/ToneOscillatorNode.js"}],"../node_modules/tone/build/esm/effect/Freeverb.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Freeverb = void 0;

var _StereoEffect = require("./StereoEffect");

var _Defaults = require("../core/util/Defaults");

var _Interface = require("../core/util/Interface");

var _Signal = require("../signal/Signal");

var _LowpassCombFilter = require("../component/filter/LowpassCombFilter");

/**
 * An array of comb filter delay values from Freeverb implementation
 */
const combFilterTunings = [1557 / 44100, 1617 / 44100, 1491 / 44100, 1422 / 44100, 1277 / 44100, 1356 / 44100, 1188 / 44100, 1116 / 44100];
/**
 * An array of allpass filter frequency values from Freeverb implementation
 */

const allpassFilterFrequencies = [225, 556, 441, 341];
/**
 * Freeverb is a reverb based on [Freeverb](https://ccrma.stanford.edu/~jos/pasp/Freeverb.html).
 * Read more on reverb on [Sound On Sound](https://web.archive.org/web/20160404083902/http://www.soundonsound.com:80/sos/feb01/articles/synthsecrets.asp).
 * Freeverb is now implemented with an AudioWorkletNode which may result on performance degradation on some platforms. Consider using [[Reverb]].
 * @example
 * const freeverb = new Tone.Freeverb().toDestination();
 * freeverb.dampening = 1000;
 * // routing synth through the reverb
 * const synth = new Tone.NoiseSynth().connect(freeverb);
 * synth.triggerAttackRelease(0.05);
 * @category Effect
 */

class Freeverb extends _StereoEffect.StereoEffect {
  constructor() {
    super((0, _Defaults.optionsFromArguments)(Freeverb.getDefaults(), arguments, ["roomSize", "dampening"]));
    this.name = "Freeverb";
    /**
     * the comb filters
     */

    this._combFilters = [];
    /**
     * the allpass filters on the left
     */

    this._allpassFiltersL = [];
    /**
     * the allpass filters on the right
     */

    this._allpassFiltersR = [];
    const options = (0, _Defaults.optionsFromArguments)(Freeverb.getDefaults(), arguments, ["roomSize", "dampening"]);
    this.roomSize = new _Signal.Signal({
      context: this.context,
      value: options.roomSize,
      units: "normalRange"
    }); // make the allpass filters on the right

    this._allpassFiltersL = allpassFilterFrequencies.map(freq => {
      const allpassL = this.context.createBiquadFilter();
      allpassL.type = "allpass";
      allpassL.frequency.value = freq;
      return allpassL;
    }); // make the allpass filters on the left

    this._allpassFiltersR = allpassFilterFrequencies.map(freq => {
      const allpassR = this.context.createBiquadFilter();
      allpassR.type = "allpass";
      allpassR.frequency.value = freq;
      return allpassR;
    }); // make the comb filters

    this._combFilters = combFilterTunings.map((delayTime, index) => {
      const lfpf = new _LowpassCombFilter.LowpassCombFilter({
        context: this.context,
        dampening: options.dampening,
        delayTime
      });

      if (index < combFilterTunings.length / 2) {
        this.connectEffectLeft(lfpf, ...this._allpassFiltersL);
      } else {
        this.connectEffectRight(lfpf, ...this._allpassFiltersR);
      }

      this.roomSize.connect(lfpf.resonance);
      return lfpf;
    });
    (0, _Interface.readOnly)(this, ["roomSize"]);
  }

  static getDefaults() {
    return Object.assign(_StereoEffect.StereoEffect.getDefaults(), {
      roomSize: 0.7,
      dampening: 3000
    });
  }
  /**
   * The amount of dampening of the reverberant signal.
   */


  get dampening() {
    return this._combFilters[0].dampening;
  }

  set dampening(d) {
    this._combFilters.forEach(c => c.dampening = d);
  }

  dispose() {
    super.dispose();

    this._allpassFiltersL.forEach(al => al.disconnect());

    this._allpassFiltersR.forEach(ar => ar.disconnect());

    this._combFilters.forEach(cf => cf.dispose());

    this.roomSize.dispose();
    return this;
  }

}

exports.Freeverb = Freeverb;
},{"./StereoEffect":"../node_modules/tone/build/esm/effect/StereoEffect.js","../core/util/Defaults":"../node_modules/tone/build/esm/core/util/Defaults.js","../core/util/Interface":"../node_modules/tone/build/esm/core/util/Interface.js","../signal/Signal":"../node_modules/tone/build/esm/signal/Signal.js","../component/filter/LowpassCombFilter":"../node_modules/tone/build/esm/component/filter/LowpassCombFilter.js"}],"../node_modules/tone/build/esm/effect/JCReverb.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.JCReverb = void 0;

var _StereoEffect = require("./StereoEffect");

var _Defaults = require("../core/util/Defaults");

var _Scale = require("../signal/Scale");

var _Signal = require("../signal/Signal");

var _FeedbackCombFilter = require("../component/filter/FeedbackCombFilter");

var _Interface = require("../core/util/Interface");

/**
 * an array of the comb filter delay time values
 */
const combFilterDelayTimes = [1687 / 25000, 1601 / 25000, 2053 / 25000, 2251 / 25000];
/**
 * the resonances of each of the comb filters
 */

const combFilterResonances = [0.773, 0.802, 0.753, 0.733];
/**
 * the allpass filter frequencies
 */

const allpassFilterFreqs = [347, 113, 37];
/**
 * JCReverb is a simple [Schroeder Reverberator](https://ccrma.stanford.edu/~jos/pasp/Schroeder_Reverberators.html)
 * tuned by John Chowning in 1970.
 * It is made up of three allpass filters and four [[FeedbackCombFilter]].
 * JCReverb is now implemented with an AudioWorkletNode which may result on performance degradation on some platforms. Consider using [[Reverb]].
 * @example
 * const reverb = new Tone.JCReverb(0.4).toDestination();
 * const delay = new Tone.FeedbackDelay(0.5);
 * // connecting the synth to reverb through delay
 * const synth = new Tone.DuoSynth().chain(delay, reverb);
 * synth.triggerAttackRelease("A4", "8n");
 *
 * @category Effect
 */

class JCReverb extends _StereoEffect.StereoEffect {
  constructor() {
    super((0, _Defaults.optionsFromArguments)(JCReverb.getDefaults(), arguments, ["roomSize"]));
    this.name = "JCReverb";
    /**
     * a series of allpass filters
     */

    this._allpassFilters = [];
    /**
     * parallel feedback comb filters
     */

    this._feedbackCombFilters = [];
    const options = (0, _Defaults.optionsFromArguments)(JCReverb.getDefaults(), arguments, ["roomSize"]);
    this.roomSize = new _Signal.Signal({
      context: this.context,
      value: options.roomSize,
      units: "normalRange"
    });
    this._scaleRoomSize = new _Scale.Scale({
      context: this.context,
      min: -0.733,
      max: 0.197
    }); // make the allpass filters

    this._allpassFilters = allpassFilterFreqs.map(freq => {
      const allpass = this.context.createBiquadFilter();
      allpass.type = "allpass";
      allpass.frequency.value = freq;
      return allpass;
    }); // and the comb filters

    this._feedbackCombFilters = combFilterDelayTimes.map((delayTime, index) => {
      const fbcf = new _FeedbackCombFilter.FeedbackCombFilter({
        context: this.context,
        delayTime
      });

      this._scaleRoomSize.connect(fbcf.resonance);

      fbcf.resonance.value = combFilterResonances[index];

      if (index < combFilterDelayTimes.length / 2) {
        this.connectEffectLeft(...this._allpassFilters, fbcf);
      } else {
        this.connectEffectRight(...this._allpassFilters, fbcf);
      }

      return fbcf;
    }); // chain the allpass filters together

    this.roomSize.connect(this._scaleRoomSize);
    (0, _Interface.readOnly)(this, ["roomSize"]);
  }

  static getDefaults() {
    return Object.assign(_StereoEffect.StereoEffect.getDefaults(), {
      roomSize: 0.5
    });
  }

  dispose() {
    super.dispose();

    this._allpassFilters.forEach(apf => apf.disconnect());

    this._feedbackCombFilters.forEach(fbcf => fbcf.dispose());

    this.roomSize.dispose();

    this._scaleRoomSize.dispose();

    return this;
  }

}

exports.JCReverb = JCReverb;
},{"./StereoEffect":"../node_modules/tone/build/esm/effect/StereoEffect.js","../core/util/Defaults":"../node_modules/tone/build/esm/core/util/Defaults.js","../signal/Scale":"../node_modules/tone/build/esm/signal/Scale.js","../signal/Signal":"../node_modules/tone/build/esm/signal/Signal.js","../component/filter/FeedbackCombFilter":"../node_modules/tone/build/esm/component/filter/FeedbackCombFilter.js","../core/util/Interface":"../node_modules/tone/build/esm/core/util/Interface.js"}],"../node_modules/tone/build/esm/effect/StereoXFeedbackEffect.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.StereoXFeedbackEffect = void 0;

var _StereoFeedbackEffect = require("./StereoFeedbackEffect");

var _Interface = require("../core/util/Interface");

/**
 * Just like a [[StereoFeedbackEffect]], but the feedback is routed from left to right
 * and right to left instead of on the same channel.
 * ```
 * +--------------------------------+ feedbackL <-----------------------------------+
 * |                                                                                |
 * +-->                          +----->        +---->                          +-----+
 *      feedbackMerge +--> split        (EFFECT)       merge +--> feedbackSplit     | |
 * +-->                          +----->        +---->                          +---+ |
 * |                                                                                  |
 * +--------------------------------+ feedbackR <-------------------------------------+
 * ```
 */
class StereoXFeedbackEffect extends _StereoFeedbackEffect.StereoFeedbackEffect {
  constructor(options) {
    super(options); // the left output connected to the right input

    this._feedbackL.disconnect();

    this._feedbackL.connect(this._feedbackMerge, 0, 1); // the left output connected to the right input


    this._feedbackR.disconnect();

    this._feedbackR.connect(this._feedbackMerge, 0, 0);

    (0, _Interface.readOnly)(this, ["feedback"]);
  }

}

exports.StereoXFeedbackEffect = StereoXFeedbackEffect;
},{"./StereoFeedbackEffect":"../node_modules/tone/build/esm/effect/StereoFeedbackEffect.js","../core/util/Interface":"../node_modules/tone/build/esm/core/util/Interface.js"}],"../node_modules/tone/build/esm/effect/PingPongDelay.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PingPongDelay = void 0;

var _StereoXFeedbackEffect = require("./StereoXFeedbackEffect");

var _Defaults = require("../core/util/Defaults");

var _Delay = require("../core/context/Delay");

var _Signal = require("../signal/Signal");

var _Interface = require("../core/util/Interface");

/**
 * PingPongDelay is a feedback delay effect where the echo is heard
 * first in one channel and next in the opposite channel. In a stereo
 * system these are the right and left channels.
 * PingPongDelay in more simplified terms is two Tone.FeedbackDelays
 * with independent delay values. Each delay is routed to one channel
 * (left or right), and the channel triggered second will always
 * trigger at the same interval after the first.
 * @example
 * const pingPong = new Tone.PingPongDelay("4n", 0.2).toDestination();
 * const drum = new Tone.MembraneSynth().connect(pingPong);
 * drum.triggerAttackRelease("C4", "32n");
 * @category Effect
 */
class PingPongDelay extends _StereoXFeedbackEffect.StereoXFeedbackEffect {
  constructor() {
    super((0, _Defaults.optionsFromArguments)(PingPongDelay.getDefaults(), arguments, ["delayTime", "feedback"]));
    this.name = "PingPongDelay";
    const options = (0, _Defaults.optionsFromArguments)(PingPongDelay.getDefaults(), arguments, ["delayTime", "feedback"]);
    this._leftDelay = new _Delay.Delay({
      context: this.context,
      maxDelay: options.maxDelay
    });
    this._rightDelay = new _Delay.Delay({
      context: this.context,
      maxDelay: options.maxDelay
    });
    this._rightPreDelay = new _Delay.Delay({
      context: this.context,
      maxDelay: options.maxDelay
    });
    this.delayTime = new _Signal.Signal({
      context: this.context,
      units: "time",
      value: options.delayTime
    }); // connect it up

    this.connectEffectLeft(this._leftDelay);
    this.connectEffectRight(this._rightPreDelay, this._rightDelay);
    this.delayTime.fan(this._leftDelay.delayTime, this._rightDelay.delayTime, this._rightPreDelay.delayTime); // rearranged the feedback to be after the rightPreDelay

    this._feedbackL.disconnect();

    this._feedbackL.connect(this._rightDelay);

    (0, _Interface.readOnly)(this, ["delayTime"]);
  }

  static getDefaults() {
    return Object.assign(_StereoXFeedbackEffect.StereoXFeedbackEffect.getDefaults(), {
      delayTime: 0.25,
      maxDelay: 1
    });
  }

  dispose() {
    super.dispose();

    this._leftDelay.dispose();

    this._rightDelay.dispose();

    this._rightPreDelay.dispose();

    this.delayTime.dispose();
    return this;
  }

}

exports.PingPongDelay = PingPongDelay;
},{"./StereoXFeedbackEffect":"../node_modules/tone/build/esm/effect/StereoXFeedbackEffect.js","../core/util/Defaults":"../node_modules/tone/build/esm/core/util/Defaults.js","../core/context/Delay":"../node_modules/tone/build/esm/core/context/Delay.js","../signal/Signal":"../node_modules/tone/build/esm/signal/Signal.js","../core/util/Interface":"../node_modules/tone/build/esm/core/util/Interface.js"}],"../node_modules/tone/build/esm/effect/PitchShift.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PitchShift = void 0;

var _FeedbackEffect = require("./FeedbackEffect");

var _Defaults = require("../core/util/Defaults");

var _LFO = require("../source/oscillator/LFO");

var _Delay = require("../core/context/Delay");

var _CrossFade = require("../component/channel/CrossFade");

var _Signal = require("../signal/Signal");

var _Interface = require("../core/util/Interface");

var _Conversions = require("../core/type/Conversions");

/**
 * PitchShift does near-realtime pitch shifting to the incoming signal.
 * The effect is achieved by speeding up or slowing down the delayTime
 * of a DelayNode using a sawtooth wave.
 * Algorithm found in [this pdf](http://dsp-book.narod.ru/soundproc.pdf).
 * Additional reference by [Miller Pucket](http://msp.ucsd.edu/techniques/v0.11/book-html/node115.html).
 * @category Effect
 */
class PitchShift extends _FeedbackEffect.FeedbackEffect {
  constructor() {
    super((0, _Defaults.optionsFromArguments)(PitchShift.getDefaults(), arguments, ["pitch"]));
    this.name = "PitchShift";
    const options = (0, _Defaults.optionsFromArguments)(PitchShift.getDefaults(), arguments, ["pitch"]);
    this._frequency = new _Signal.Signal({
      context: this.context
    });
    this._delayA = new _Delay.Delay({
      maxDelay: 1,
      context: this.context
    });
    this._lfoA = new _LFO.LFO({
      context: this.context,
      min: 0,
      max: 0.1,
      type: "sawtooth"
    }).connect(this._delayA.delayTime);
    this._delayB = new _Delay.Delay({
      maxDelay: 1,
      context: this.context
    });
    this._lfoB = new _LFO.LFO({
      context: this.context,
      min: 0,
      max: 0.1,
      type: "sawtooth",
      phase: 180
    }).connect(this._delayB.delayTime);
    this._crossFade = new _CrossFade.CrossFade({
      context: this.context
    });
    this._crossFadeLFO = new _LFO.LFO({
      context: this.context,
      min: 0,
      max: 1,
      type: "triangle",
      phase: 90
    }).connect(this._crossFade.fade);
    this._feedbackDelay = new _Delay.Delay({
      delayTime: options.delayTime,
      context: this.context
    });
    this.delayTime = this._feedbackDelay.delayTime;
    (0, _Interface.readOnly)(this, "delayTime");
    this._pitch = options.pitch;
    this._windowSize = options.windowSize; // connect the two delay lines up

    this._delayA.connect(this._crossFade.a);

    this._delayB.connect(this._crossFade.b); // connect the frequency


    this._frequency.fan(this._lfoA.frequency, this._lfoB.frequency, this._crossFadeLFO.frequency); // route the input


    this.effectSend.fan(this._delayA, this._delayB);

    this._crossFade.chain(this._feedbackDelay, this.effectReturn); // start the LFOs at the same time


    const now = this.now();

    this._lfoA.start(now);

    this._lfoB.start(now);

    this._crossFadeLFO.start(now); // set the initial value


    this.windowSize = this._windowSize;
  }

  static getDefaults() {
    return Object.assign(_FeedbackEffect.FeedbackEffect.getDefaults(), {
      pitch: 0,
      windowSize: 0.1,
      delayTime: 0,
      feedback: 0
    });
  }
  /**
   * Repitch the incoming signal by some interval (measured in semi-tones).
   * @example
   * const pitchShift = new Tone.PitchShift().toDestination();
   * const osc = new Tone.Oscillator().connect(pitchShift).start().toDestination();
   * pitchShift.pitch = -12; // down one octave
   * pitchShift.pitch = 7; // up a fifth
   */


  get pitch() {
    return this._pitch;
  }

  set pitch(interval) {
    this._pitch = interval;
    let factor = 0;

    if (interval < 0) {
      this._lfoA.min = 0;
      this._lfoA.max = this._windowSize;
      this._lfoB.min = 0;
      this._lfoB.max = this._windowSize;
      factor = (0, _Conversions.intervalToFrequencyRatio)(interval - 1) + 1;
    } else {
      this._lfoA.min = this._windowSize;
      this._lfoA.max = 0;
      this._lfoB.min = this._windowSize;
      this._lfoB.max = 0;
      factor = (0, _Conversions.intervalToFrequencyRatio)(interval) - 1;
    }

    this._frequency.value = factor * (1.2 / this._windowSize);
  }
  /**
   * The window size corresponds roughly to the sample length in a looping sampler.
   * Smaller values are desirable for a less noticeable delay time of the pitch shifted
   * signal, but larger values will result in smoother pitch shifting for larger intervals.
   * A nominal range of 0.03 to 0.1 is recommended.
   */


  get windowSize() {
    return this._windowSize;
  }

  set windowSize(size) {
    this._windowSize = this.toSeconds(size);
    this.pitch = this._pitch;
  }

  dispose() {
    super.dispose();

    this._frequency.dispose();

    this._delayA.dispose();

    this._delayB.dispose();

    this._lfoA.dispose();

    this._lfoB.dispose();

    this._crossFade.dispose();

    this._crossFadeLFO.dispose();

    this._feedbackDelay.dispose();

    return this;
  }

}

exports.PitchShift = PitchShift;
},{"./FeedbackEffect":"../node_modules/tone/build/esm/effect/FeedbackEffect.js","../core/util/Defaults":"../node_modules/tone/build/esm/core/util/Defaults.js","../source/oscillator/LFO":"../node_modules/tone/build/esm/source/oscillator/LFO.js","../core/context/Delay":"../node_modules/tone/build/esm/core/context/Delay.js","../component/channel/CrossFade":"../node_modules/tone/build/esm/component/channel/CrossFade.js","../signal/Signal":"../node_modules/tone/build/esm/signal/Signal.js","../core/util/Interface":"../node_modules/tone/build/esm/core/util/Interface.js","../core/type/Conversions":"../node_modules/tone/build/esm/core/type/Conversions.js"}],"../node_modules/tone/build/esm/effect/Phaser.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Phaser = void 0;

var _StereoEffect = require("./StereoEffect");

var _Defaults = require("../core/util/Defaults");

var _LFO = require("../source/oscillator/LFO");

var _Signal = require("../signal/Signal");

var _Interface = require("../core/util/Interface");

/**
 * Phaser is a phaser effect. Phasers work by changing the phase
 * of different frequency components of an incoming signal. Read more on
 * [Wikipedia](https://en.wikipedia.org/wiki/Phaser_(effect)).
 * Inspiration for this phaser comes from [Tuna.js](https://github.com/Dinahmoe/tuna/).
 * @example
 * const phaser = new Tone.Phaser({
 * 	frequency: 15,
 * 	octaves: 5,
 * 	baseFrequency: 1000
 * }).toDestination();
 * const synth = new Tone.FMSynth().connect(phaser);
 * synth.triggerAttackRelease("E3", "2n");
 * @category Effect
 */
class Phaser extends _StereoEffect.StereoEffect {
  constructor() {
    super((0, _Defaults.optionsFromArguments)(Phaser.getDefaults(), arguments, ["frequency", "octaves", "baseFrequency"]));
    this.name = "Phaser";
    const options = (0, _Defaults.optionsFromArguments)(Phaser.getDefaults(), arguments, ["frequency", "octaves", "baseFrequency"]);
    this._lfoL = new _LFO.LFO({
      context: this.context,
      frequency: options.frequency,
      min: 0,
      max: 1
    });
    this._lfoR = new _LFO.LFO({
      context: this.context,
      frequency: options.frequency,
      min: 0,
      max: 1,
      phase: 180
    });
    this._baseFrequency = this.toFrequency(options.baseFrequency);
    this._octaves = options.octaves;
    this.Q = new _Signal.Signal({
      context: this.context,
      value: options.Q,
      units: "positive"
    });
    this._filtersL = this._makeFilters(options.stages, this._lfoL);
    this._filtersR = this._makeFilters(options.stages, this._lfoR);
    this.frequency = this._lfoL.frequency;
    this.frequency.value = options.frequency; // connect them up

    this.connectEffectLeft(...this._filtersL);
    this.connectEffectRight(...this._filtersR); // control the frequency with one LFO

    this._lfoL.frequency.connect(this._lfoR.frequency); // set the options


    this.baseFrequency = options.baseFrequency;
    this.octaves = options.octaves; // start the lfo

    this._lfoL.start();

    this._lfoR.start();

    (0, _Interface.readOnly)(this, ["frequency", "Q"]);
  }

  static getDefaults() {
    return Object.assign(_StereoEffect.StereoEffect.getDefaults(), {
      frequency: 0.5,
      octaves: 3,
      stages: 10,
      Q: 10,
      baseFrequency: 350
    });
  }

  _makeFilters(stages, connectToFreq) {
    const filters = []; // make all the filters

    for (let i = 0; i < stages; i++) {
      const filter = this.context.createBiquadFilter();
      filter.type = "allpass";
      this.Q.connect(filter.Q);
      connectToFreq.connect(filter.frequency);
      filters.push(filter);
    }

    return filters;
  }
  /**
   * The number of octaves the phase goes above the baseFrequency
   */


  get octaves() {
    return this._octaves;
  }

  set octaves(octaves) {
    this._octaves = octaves;
    const max = this._baseFrequency * Math.pow(2, octaves);
    this._lfoL.max = max;
    this._lfoR.max = max;
  }
  /**
   * The the base frequency of the filters.
   */


  get baseFrequency() {
    return this._baseFrequency;
  }

  set baseFrequency(freq) {
    this._baseFrequency = this.toFrequency(freq);
    this._lfoL.min = this._baseFrequency;
    this._lfoR.min = this._baseFrequency;
    this.octaves = this._octaves;
  }

  dispose() {
    super.dispose();
    this.Q.dispose();

    this._lfoL.dispose();

    this._lfoR.dispose();

    this._filtersL.forEach(f => f.disconnect());

    this._filtersR.forEach(f => f.disconnect());

    this.frequency.dispose();
    return this;
  }

}

exports.Phaser = Phaser;
},{"./StereoEffect":"../node_modules/tone/build/esm/effect/StereoEffect.js","../core/util/Defaults":"../node_modules/tone/build/esm/core/util/Defaults.js","../source/oscillator/LFO":"../node_modules/tone/build/esm/source/oscillator/LFO.js","../signal/Signal":"../node_modules/tone/build/esm/signal/Signal.js","../core/util/Interface":"../node_modules/tone/build/esm/core/util/Interface.js"}],"../node_modules/tone/build/esm/effect/Reverb.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Reverb = void 0;

var _tslib = require("tslib");

var _Merge = require("../component/channel/Merge");

var _Gain = require("../core/context/Gain");

var _Defaults = require("../core/util/Defaults");

var _Noise = require("../source/Noise");

var _Effect = require("./Effect");

var _OfflineContext = require("../core/context/OfflineContext");

var _Interface = require("../core/util/Interface");

var _Debug = require("../core/util/Debug");

/**
 * Simple convolution created with decaying noise.
 * Generates an Impulse Response Buffer
 * with Tone.Offline then feeds the IR into ConvolverNode.
 * The impulse response generation is async, so you have
 * to wait until [[ready]] resolves before it will make a sound.
 *
 * Inspiration from [ReverbGen](https://github.com/adelespinasse/reverbGen).
 * Copyright (c) 2014 Alan deLespinasse Apache 2.0 License.
 *
 * @category Effect
 */
class Reverb extends _Effect.Effect {
  constructor() {
    super((0, _Defaults.optionsFromArguments)(Reverb.getDefaults(), arguments, ["decay"]));
    this.name = "Reverb";
    /**
     * Convolver node
     */

    this._convolver = this.context.createConvolver();
    /**
     * Resolves when the reverb buffer is generated. Whenever either [[decay]]
     * or [[preDelay]] are set, you have to wait until [[ready]] resolves
     * before the IR is generated with the latest values.
     */

    this.ready = Promise.resolve();
    const options = (0, _Defaults.optionsFromArguments)(Reverb.getDefaults(), arguments, ["decay"]);
    this._decay = options.decay;
    this._preDelay = options.preDelay;
    this.generate();
    this.connectEffect(this._convolver);
  }

  static getDefaults() {
    return Object.assign(_Effect.Effect.getDefaults(), {
      decay: 1.5,
      preDelay: 0.01
    });
  }
  /**
   * The duration of the reverb.
   */


  get decay() {
    return this._decay;
  }

  set decay(time) {
    time = this.toSeconds(time);
    (0, _Debug.assertRange)(time, 0.001);
    this._decay = time;
    this.generate();
  }
  /**
   * The amount of time before the reverb is fully ramped in.
   */


  get preDelay() {
    return this._preDelay;
  }

  set preDelay(time) {
    time = this.toSeconds(time);
    (0, _Debug.assertRange)(time, 0);
    this._preDelay = time;
    this.generate();
  }
  /**
   * Generate the Impulse Response. Returns a promise while the IR is being generated.
   * @return Promise which returns this object.
   */


  generate() {
    return (0, _tslib.__awaiter)(this, void 0, void 0, function* () {
      const previousReady = this.ready; // create a noise burst which decays over the duration in each channel

      const context = new _OfflineContext.OfflineContext(2, this._decay + this._preDelay, this.context.sampleRate);
      const noiseL = new _Noise.Noise({
        context
      });
      const noiseR = new _Noise.Noise({
        context
      });
      const merge = new _Merge.Merge({
        context
      });
      noiseL.connect(merge, 0, 0);
      noiseR.connect(merge, 0, 1);
      const gainNode = new _Gain.Gain({
        context
      }).toDestination();
      merge.connect(gainNode);
      noiseL.start(0);
      noiseR.start(0); // predelay

      gainNode.gain.setValueAtTime(0, 0);
      gainNode.gain.setValueAtTime(1, this._preDelay); // decay

      gainNode.gain.exponentialApproachValueAtTime(0, this._preDelay, this.decay); // render the buffer

      const renderPromise = context.render();
      this.ready = renderPromise.then(_Interface.noOp); // wait for the previous `ready` to resolve

      yield previousReady; // set the buffer

      this._convolver.buffer = (yield renderPromise).get();
      return this;
    });
  }

  dispose() {
    super.dispose();

    this._convolver.disconnect();

    return this;
  }

}

exports.Reverb = Reverb;
},{"tslib":"../node_modules/tslib/tslib.es6.js","../component/channel/Merge":"../node_modules/tone/build/esm/component/channel/Merge.js","../core/context/Gain":"../node_modules/tone/build/esm/core/context/Gain.js","../core/util/Defaults":"../node_modules/tone/build/esm/core/util/Defaults.js","../source/Noise":"../node_modules/tone/build/esm/source/Noise.js","./Effect":"../node_modules/tone/build/esm/effect/Effect.js","../core/context/OfflineContext":"../node_modules/tone/build/esm/core/context/OfflineContext.js","../core/util/Interface":"../node_modules/tone/build/esm/core/util/Interface.js","../core/util/Debug":"../node_modules/tone/build/esm/core/util/Debug.js"}],"../node_modules/tone/build/esm/component/channel/MidSideSplit.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MidSideSplit = void 0;

var _ToneAudioNode = require("../../core/context/ToneAudioNode");

var _Split = require("./Split");

var _Add = require("../../signal/Add");

var _Multiply = require("../../signal/Multiply");

var _Subtract = require("../../signal/Subtract");

var _Defaults = require("../../core/util/Defaults");

/**
 * Mid/Side processing separates the the 'mid' signal (which comes out of both the left and the right channel)
 * and the 'side' (which only comes out of the the side channels).
 * ```
 * Mid = (Left+Right)/sqrt(2);   // obtain mid-signal from left and right
 * Side = (Left-Right)/sqrt(2);   // obtain side-signal from left and right
 * ```
 */
class MidSideSplit extends _ToneAudioNode.ToneAudioNode {
  constructor() {
    super((0, _Defaults.optionsFromArguments)(MidSideSplit.getDefaults(), arguments));
    this.name = "MidSideSplit";
    this._split = this.input = new _Split.Split({
      channels: 2,
      context: this.context
    });
    this._midAdd = new _Add.Add({
      context: this.context
    });
    this.mid = new _Multiply.Multiply({
      context: this.context,
      value: Math.SQRT1_2
    });
    this._sideSubtract = new _Subtract.Subtract({
      context: this.context
    });
    this.side = new _Multiply.Multiply({
      context: this.context,
      value: Math.SQRT1_2
    });

    this._split.connect(this._midAdd, 0);

    this._split.connect(this._midAdd.addend, 1);

    this._split.connect(this._sideSubtract, 0);

    this._split.connect(this._sideSubtract.subtrahend, 1);

    this._midAdd.connect(this.mid);

    this._sideSubtract.connect(this.side);
  }

  dispose() {
    super.dispose();
    this.mid.dispose();
    this.side.dispose();

    this._midAdd.dispose();

    this._sideSubtract.dispose();

    this._split.dispose();

    return this;
  }

}

exports.MidSideSplit = MidSideSplit;
},{"../../core/context/ToneAudioNode":"../node_modules/tone/build/esm/core/context/ToneAudioNode.js","./Split":"../node_modules/tone/build/esm/component/channel/Split.js","../../signal/Add":"../node_modules/tone/build/esm/signal/Add.js","../../signal/Multiply":"../node_modules/tone/build/esm/signal/Multiply.js","../../signal/Subtract":"../node_modules/tone/build/esm/signal/Subtract.js","../../core/util/Defaults":"../node_modules/tone/build/esm/core/util/Defaults.js"}],"../node_modules/tone/build/esm/component/channel/MidSideMerge.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MidSideMerge = void 0;

var _ToneAudioNode = require("../../core/context/ToneAudioNode");

var _Merge = require("./Merge");

var _Add = require("../../signal/Add");

var _Multiply = require("../../signal/Multiply");

var _Subtract = require("../../signal/Subtract");

var _Gain = require("../../core/context/Gain");

var _Defaults = require("../../core/util/Defaults");

/**
 * MidSideMerge merges the mid and side signal after they've been separated by [[MidSideMerge]]
 * ```
 * Mid = (Left+Right)/sqrt(2);   // obtain mid-signal from left and right
 * Side = (Left-Right)/sqrt(2);   // obtain side-signal from left and righ
 * ```
 */
class MidSideMerge extends _ToneAudioNode.ToneAudioNode {
  constructor() {
    super((0, _Defaults.optionsFromArguments)(MidSideMerge.getDefaults(), arguments));
    this.name = "MidSideMerge";
    this.mid = new _Gain.Gain({
      context: this.context
    });
    this.side = new _Gain.Gain({
      context: this.context
    });
    this._left = new _Add.Add({
      context: this.context
    });
    this._leftMult = new _Multiply.Multiply({
      context: this.context,
      value: Math.SQRT1_2
    });
    this._right = new _Subtract.Subtract({
      context: this.context
    });
    this._rightMult = new _Multiply.Multiply({
      context: this.context,
      value: Math.SQRT1_2
    });
    this._merge = this.output = new _Merge.Merge({
      context: this.context
    });
    this.mid.fan(this._left);
    this.side.connect(this._left.addend);
    this.mid.connect(this._right);
    this.side.connect(this._right.subtrahend);

    this._left.connect(this._leftMult);

    this._right.connect(this._rightMult);

    this._leftMult.connect(this._merge, 0, 0);

    this._rightMult.connect(this._merge, 0, 1);
  }

  dispose() {
    super.dispose();
    this.mid.dispose();
    this.side.dispose();

    this._leftMult.dispose();

    this._rightMult.dispose();

    this._left.dispose();

    this._right.dispose();

    return this;
  }

}

exports.MidSideMerge = MidSideMerge;
},{"../../core/context/ToneAudioNode":"../node_modules/tone/build/esm/core/context/ToneAudioNode.js","./Merge":"../node_modules/tone/build/esm/component/channel/Merge.js","../../signal/Add":"../node_modules/tone/build/esm/signal/Add.js","../../signal/Multiply":"../node_modules/tone/build/esm/signal/Multiply.js","../../signal/Subtract":"../node_modules/tone/build/esm/signal/Subtract.js","../../core/context/Gain":"../node_modules/tone/build/esm/core/context/Gain.js","../../core/util/Defaults":"../node_modules/tone/build/esm/core/util/Defaults.js"}],"../node_modules/tone/build/esm/effect/MidSideEffect.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MidSideEffect = void 0;

var _Effect = require("./Effect");

var _MidSideSplit = require("../component/channel/MidSideSplit");

var _MidSideMerge = require("../component/channel/MidSideMerge");

/**
 * Mid/Side processing separates the the 'mid' signal
 * (which comes out of both the left and the right channel)
 * and the 'side' (which only comes out of the the side channels)
 * and effects them separately before being recombined.
 * Applies a Mid/Side seperation and recombination.
 * Algorithm found in [kvraudio forums](http://www.kvraudio.com/forum/viewtopic.php?t=212587).
 * This is a base-class for Mid/Side Effects.
 */
class MidSideEffect extends _Effect.Effect {
  constructor(options) {
    super(options);
    this.name = "MidSideEffect";
    this._midSideMerge = new _MidSideMerge.MidSideMerge({
      context: this.context
    });
    this._midSideSplit = new _MidSideSplit.MidSideSplit({
      context: this.context
    });
    this._midSend = this._midSideSplit.mid;
    this._sideSend = this._midSideSplit.side;
    this._midReturn = this._midSideMerge.mid;
    this._sideReturn = this._midSideMerge.side; // the connections

    this.effectSend.connect(this._midSideSplit);

    this._midSideMerge.connect(this.effectReturn);
  }
  /**
   * Connect the mid chain of the effect
   */


  connectEffectMid(...nodes) {
    this._midSend.chain(...nodes, this._midReturn);
  }
  /**
   * Connect the side chain of the effect
   */


  connectEffectSide(...nodes) {
    this._sideSend.chain(...nodes, this._sideReturn);
  }

  dispose() {
    super.dispose();

    this._midSideSplit.dispose();

    this._midSideMerge.dispose();

    this._midSend.dispose();

    this._sideSend.dispose();

    this._midReturn.dispose();

    this._sideReturn.dispose();

    return this;
  }

}

exports.MidSideEffect = MidSideEffect;
},{"./Effect":"../node_modules/tone/build/esm/effect/Effect.js","../component/channel/MidSideSplit":"../node_modules/tone/build/esm/component/channel/MidSideSplit.js","../component/channel/MidSideMerge":"../node_modules/tone/build/esm/component/channel/MidSideMerge.js"}],"../node_modules/tone/build/esm/effect/StereoWidener.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.StereoWidener = void 0;

var _MidSideEffect = require("../effect/MidSideEffect");

var _Signal = require("../signal/Signal");

var _Multiply = require("../signal/Multiply");

var _Subtract = require("../signal/Subtract");

var _Defaults = require("../core/util/Defaults");

var _Interface = require("../core/util/Interface");

var _ToneAudioNode = require("../core/context/ToneAudioNode");

/**
 * Applies a width factor to the mid/side seperation.
 * 0 is all mid and 1 is all side.
 * Algorithm found in [kvraudio forums](http://www.kvraudio.com/forum/viewtopic.php?t=212587).
 * ```
 * Mid *= 2*(1-width)<br>
 * Side *= 2*width
 * ```
 * @category Effect
 */
class StereoWidener extends _MidSideEffect.MidSideEffect {
  constructor() {
    super((0, _Defaults.optionsFromArguments)(StereoWidener.getDefaults(), arguments, ["width"]));
    this.name = "StereoWidener";
    const options = (0, _Defaults.optionsFromArguments)(StereoWidener.getDefaults(), arguments, ["width"]);
    this.width = new _Signal.Signal({
      context: this.context,
      value: options.width,
      units: "normalRange"
    });
    (0, _Interface.readOnly)(this, ["width"]);
    this._twoTimesWidthMid = new _Multiply.Multiply({
      context: this.context,
      value: 2
    });
    this._twoTimesWidthSide = new _Multiply.Multiply({
      context: this.context,
      value: 2
    });
    this._midMult = new _Multiply.Multiply({
      context: this.context
    });

    this._twoTimesWidthMid.connect(this._midMult.factor);

    this.connectEffectMid(this._midMult);
    this._oneMinusWidth = new _Subtract.Subtract({
      context: this.context
    });

    this._oneMinusWidth.connect(this._twoTimesWidthMid);

    (0, _ToneAudioNode.connect)(this.context.getConstant(1), this._oneMinusWidth);
    this.width.connect(this._oneMinusWidth.subtrahend);
    this._sideMult = new _Multiply.Multiply({
      context: this.context
    });
    this.width.connect(this._twoTimesWidthSide);

    this._twoTimesWidthSide.connect(this._sideMult.factor);

    this.connectEffectSide(this._sideMult);
  }

  static getDefaults() {
    return Object.assign(_MidSideEffect.MidSideEffect.getDefaults(), {
      width: 0.5
    });
  }

  dispose() {
    super.dispose();
    this.width.dispose();

    this._midMult.dispose();

    this._sideMult.dispose();

    this._twoTimesWidthMid.dispose();

    this._twoTimesWidthSide.dispose();

    this._oneMinusWidth.dispose();

    return this;
  }

}

exports.StereoWidener = StereoWidener;
},{"../effect/MidSideEffect":"../node_modules/tone/build/esm/effect/MidSideEffect.js","../signal/Signal":"../node_modules/tone/build/esm/signal/Signal.js","../signal/Multiply":"../node_modules/tone/build/esm/signal/Multiply.js","../signal/Subtract":"../node_modules/tone/build/esm/signal/Subtract.js","../core/util/Defaults":"../node_modules/tone/build/esm/core/util/Defaults.js","../core/util/Interface":"../node_modules/tone/build/esm/core/util/Interface.js","../core/context/ToneAudioNode":"../node_modules/tone/build/esm/core/context/ToneAudioNode.js"}],"../node_modules/tone/build/esm/effect/Tremolo.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Tremolo = void 0;

var _StereoEffect = require("./StereoEffect");

var _LFO = require("../source/oscillator/LFO");

var _Gain = require("../core/context/Gain");

var _Signal = require("../signal/Signal");

var _Defaults = require("../core/util/Defaults");

var _Interface = require("../core/util/Interface");

/**
 * Tremolo modulates the amplitude of an incoming signal using an [[LFO]].
 * The effect is a stereo effect where the modulation phase is inverted in each channel.
 *
 * @example
 * // create a tremolo and start it's LFO
 * const tremolo = new Tone.Tremolo(9, 0.75).toDestination().start();
 * // route an oscillator through the tremolo and start it
 * const oscillator = new Tone.Oscillator().connect(tremolo).start();
 *
 * @category Effect
 */
class Tremolo extends _StereoEffect.StereoEffect {
  constructor() {
    super((0, _Defaults.optionsFromArguments)(Tremolo.getDefaults(), arguments, ["frequency", "depth"]));
    this.name = "Tremolo";
    const options = (0, _Defaults.optionsFromArguments)(Tremolo.getDefaults(), arguments, ["frequency", "depth"]);
    this._lfoL = new _LFO.LFO({
      context: this.context,
      type: options.type,
      min: 1,
      max: 0
    });
    this._lfoR = new _LFO.LFO({
      context: this.context,
      type: options.type,
      min: 1,
      max: 0
    });
    this._amplitudeL = new _Gain.Gain({
      context: this.context
    });
    this._amplitudeR = new _Gain.Gain({
      context: this.context
    });
    this.frequency = new _Signal.Signal({
      context: this.context,
      value: options.frequency,
      units: "frequency"
    });
    this.depth = new _Signal.Signal({
      context: this.context,
      value: options.depth,
      units: "normalRange"
    });
    (0, _Interface.readOnly)(this, ["frequency", "depth"]);
    this.connectEffectLeft(this._amplitudeL);
    this.connectEffectRight(this._amplitudeR);

    this._lfoL.connect(this._amplitudeL.gain);

    this._lfoR.connect(this._amplitudeR.gain);

    this.frequency.fan(this._lfoL.frequency, this._lfoR.frequency);
    this.depth.fan(this._lfoR.amplitude, this._lfoL.amplitude);
    this.spread = options.spread;
  }

  static getDefaults() {
    return Object.assign(_StereoEffect.StereoEffect.getDefaults(), {
      frequency: 10,
      type: "sine",
      depth: 0.5,
      spread: 180
    });
  }
  /**
   * Start the tremolo.
   */


  start(time) {
    this._lfoL.start(time);

    this._lfoR.start(time);

    return this;
  }
  /**
   * Stop the tremolo.
   */


  stop(time) {
    this._lfoL.stop(time);

    this._lfoR.stop(time);

    return this;
  }
  /**
   * Sync the effect to the transport.
   */


  sync() {
    this._lfoL.sync();

    this._lfoR.sync();

    this.context.transport.syncSignal(this.frequency);
    return this;
  }
  /**
   * Unsync the filter from the transport
   */


  unsync() {
    this._lfoL.unsync();

    this._lfoR.unsync();

    this.context.transport.unsyncSignal(this.frequency);
    return this;
  }
  /**
   * The oscillator type.
   */


  get type() {
    return this._lfoL.type;
  }

  set type(type) {
    this._lfoL.type = type;
    this._lfoR.type = type;
  }
  /**
   * Amount of stereo spread. When set to 0, both LFO's will be panned centrally.
   * When set to 180, LFO's will be panned hard left and right respectively.
   */


  get spread() {
    return this._lfoR.phase - this._lfoL.phase; // 180
  }

  set spread(spread) {
    this._lfoL.phase = 90 - spread / 2;
    this._lfoR.phase = spread / 2 + 90;
  }

  dispose() {
    super.dispose();

    this._lfoL.dispose();

    this._lfoR.dispose();

    this._amplitudeL.dispose();

    this._amplitudeR.dispose();

    this.frequency.dispose();
    this.depth.dispose();
    return this;
  }

}

exports.Tremolo = Tremolo;
},{"./StereoEffect":"../node_modules/tone/build/esm/effect/StereoEffect.js","../source/oscillator/LFO":"../node_modules/tone/build/esm/source/oscillator/LFO.js","../core/context/Gain":"../node_modules/tone/build/esm/core/context/Gain.js","../signal/Signal":"../node_modules/tone/build/esm/signal/Signal.js","../core/util/Defaults":"../node_modules/tone/build/esm/core/util/Defaults.js","../core/util/Interface":"../node_modules/tone/build/esm/core/util/Interface.js"}],"../node_modules/tone/build/esm/effect/Vibrato.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Vibrato = void 0;

var _Effect = require("./Effect");

var _Defaults = require("../core/util/Defaults");

var _LFO = require("../source/oscillator/LFO");

var _Delay = require("../core/context/Delay");

var _Interface = require("../core/util/Interface");

/**
 * A Vibrato effect composed of a Tone.Delay and a Tone.LFO. The LFO
 * modulates the delayTime of the delay, causing the pitch to rise and fall.
 * @category Effect
 */
class Vibrato extends _Effect.Effect {
  constructor() {
    super((0, _Defaults.optionsFromArguments)(Vibrato.getDefaults(), arguments, ["frequency", "depth"]));
    this.name = "Vibrato";
    const options = (0, _Defaults.optionsFromArguments)(Vibrato.getDefaults(), arguments, ["frequency", "depth"]);
    this._delayNode = new _Delay.Delay({
      context: this.context,
      delayTime: 0,
      maxDelay: options.maxDelay
    });
    this._lfo = new _LFO.LFO({
      context: this.context,
      type: options.type,
      min: 0,
      max: options.maxDelay,
      frequency: options.frequency,
      phase: -90 // offse the phase so the resting position is in the center

    }).start().connect(this._delayNode.delayTime);
    this.frequency = this._lfo.frequency;
    this.depth = this._lfo.amplitude;
    this.depth.value = options.depth;
    (0, _Interface.readOnly)(this, ["frequency", "depth"]);
    this.effectSend.chain(this._delayNode, this.effectReturn);
  }

  static getDefaults() {
    return Object.assign(_Effect.Effect.getDefaults(), {
      maxDelay: 0.005,
      frequency: 5,
      depth: 0.1,
      type: "sine"
    });
  }
  /**
   * Type of oscillator attached to the Vibrato.
   */


  get type() {
    return this._lfo.type;
  }

  set type(type) {
    this._lfo.type = type;
  }

  dispose() {
    super.dispose();

    this._delayNode.dispose();

    this._lfo.dispose();

    this.frequency.dispose();
    this.depth.dispose();
    return this;
  }

}

exports.Vibrato = Vibrato;
},{"./Effect":"../node_modules/tone/build/esm/effect/Effect.js","../core/util/Defaults":"../node_modules/tone/build/esm/core/util/Defaults.js","../source/oscillator/LFO":"../node_modules/tone/build/esm/source/oscillator/LFO.js","../core/context/Delay":"../node_modules/tone/build/esm/core/context/Delay.js","../core/util/Interface":"../node_modules/tone/build/esm/core/util/Interface.js"}],"../node_modules/tone/build/esm/effect/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _AutoFilter = require("./AutoFilter");

Object.keys(_AutoFilter).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _AutoFilter[key];
    }
  });
});

var _AutoPanner = require("./AutoPanner");

Object.keys(_AutoPanner).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _AutoPanner[key];
    }
  });
});

var _AutoWah = require("./AutoWah");

Object.keys(_AutoWah).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _AutoWah[key];
    }
  });
});

var _BitCrusher = require("./BitCrusher");

Object.keys(_BitCrusher).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _BitCrusher[key];
    }
  });
});

var _Chebyshev = require("./Chebyshev");

Object.keys(_Chebyshev).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _Chebyshev[key];
    }
  });
});

var _Chorus = require("./Chorus");

Object.keys(_Chorus).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _Chorus[key];
    }
  });
});

var _Distortion = require("./Distortion");

Object.keys(_Distortion).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _Distortion[key];
    }
  });
});

var _FeedbackDelay = require("./FeedbackDelay");

Object.keys(_FeedbackDelay).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _FeedbackDelay[key];
    }
  });
});

var _FrequencyShifter = require("./FrequencyShifter");

Object.keys(_FrequencyShifter).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _FrequencyShifter[key];
    }
  });
});

var _Freeverb = require("./Freeverb");

Object.keys(_Freeverb).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _Freeverb[key];
    }
  });
});

var _JCReverb = require("./JCReverb");

Object.keys(_JCReverb).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _JCReverb[key];
    }
  });
});

var _PingPongDelay = require("./PingPongDelay");

Object.keys(_PingPongDelay).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _PingPongDelay[key];
    }
  });
});

var _PitchShift = require("./PitchShift");

Object.keys(_PitchShift).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _PitchShift[key];
    }
  });
});

var _Phaser = require("./Phaser");

Object.keys(_Phaser).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _Phaser[key];
    }
  });
});

var _Reverb = require("./Reverb");

Object.keys(_Reverb).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _Reverb[key];
    }
  });
});

var _StereoWidener = require("./StereoWidener");

Object.keys(_StereoWidener).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _StereoWidener[key];
    }
  });
});

var _Tremolo = require("./Tremolo");

Object.keys(_Tremolo).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _Tremolo[key];
    }
  });
});

var _Vibrato = require("./Vibrato");

Object.keys(_Vibrato).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _Vibrato[key];
    }
  });
});
},{"./AutoFilter":"../node_modules/tone/build/esm/effect/AutoFilter.js","./AutoPanner":"../node_modules/tone/build/esm/effect/AutoPanner.js","./AutoWah":"../node_modules/tone/build/esm/effect/AutoWah.js","./BitCrusher":"../node_modules/tone/build/esm/effect/BitCrusher.js","./Chebyshev":"../node_modules/tone/build/esm/effect/Chebyshev.js","./Chorus":"../node_modules/tone/build/esm/effect/Chorus.js","./Distortion":"../node_modules/tone/build/esm/effect/Distortion.js","./FeedbackDelay":"../node_modules/tone/build/esm/effect/FeedbackDelay.js","./FrequencyShifter":"../node_modules/tone/build/esm/effect/FrequencyShifter.js","./Freeverb":"../node_modules/tone/build/esm/effect/Freeverb.js","./JCReverb":"../node_modules/tone/build/esm/effect/JCReverb.js","./PingPongDelay":"../node_modules/tone/build/esm/effect/PingPongDelay.js","./PitchShift":"../node_modules/tone/build/esm/effect/PitchShift.js","./Phaser":"../node_modules/tone/build/esm/effect/Phaser.js","./Reverb":"../node_modules/tone/build/esm/effect/Reverb.js","./StereoWidener":"../node_modules/tone/build/esm/effect/StereoWidener.js","./Tremolo":"../node_modules/tone/build/esm/effect/Tremolo.js","./Vibrato":"../node_modules/tone/build/esm/effect/Vibrato.js"}],"../node_modules/tone/build/esm/component/analysis/Analyser.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Analyser = void 0;

var _ToneAudioNode = require("../../core/context/ToneAudioNode");

var _Defaults = require("../../core/util/Defaults");

var _Split = require("../channel/Split");

var _Gain = require("../../core/context/Gain");

var _Debug = require("../../core/util/Debug");

/**
 * Wrapper around the native Web Audio's [AnalyserNode](http://webaudio.github.io/web-audio-api/#idl-def-AnalyserNode).
 * Extracts FFT or Waveform data from the incoming signal.
 * @category Component
 */
class Analyser extends _ToneAudioNode.ToneAudioNode {
  constructor() {
    super((0, _Defaults.optionsFromArguments)(Analyser.getDefaults(), arguments, ["type", "size"]));
    this.name = "Analyser";
    /**
     * The analyser node.
     */

    this._analysers = [];
    /**
     * The buffer that the FFT data is written to
     */

    this._buffers = [];
    const options = (0, _Defaults.optionsFromArguments)(Analyser.getDefaults(), arguments, ["type", "size"]);
    this.input = this.output = this._gain = new _Gain.Gain({
      context: this.context
    });
    this._split = new _Split.Split({
      context: this.context,
      channels: options.channels
    });
    this.input.connect(this._split);
    (0, _Debug.assertRange)(options.channels, 1); // create the analysers

    for (let channel = 0; channel < options.channels; channel++) {
      this._analysers[channel] = this.context.createAnalyser();

      this._split.connect(this._analysers[channel], channel, 0);
    } // set the values initially


    this.size = options.size;
    this.type = options.type;
  }

  static getDefaults() {
    return Object.assign(_ToneAudioNode.ToneAudioNode.getDefaults(), {
      size: 1024,
      smoothing: 0.8,
      type: "fft",
      channels: 1
    });
  }
  /**
   * Run the analysis given the current settings. If [[channels]] = 1,
   * it will return a Float32Array. If [[channels]] > 1, it will
   * return an array of Float32Arrays where each index in the array
   * represents the analysis done on a channel.
   */


  getValue() {
    this._analysers.forEach((analyser, index) => {
      const buffer = this._buffers[index];

      if (this._type === "fft") {
        analyser.getFloatFrequencyData(buffer);
      } else if (this._type === "waveform") {
        analyser.getFloatTimeDomainData(buffer);
      }
    });

    if (this.channels === 1) {
      return this._buffers[0];
    } else {
      return this._buffers;
    }
  }
  /**
   * The size of analysis. This must be a power of two in the range 16 to 16384.
   */


  get size() {
    return this._analysers[0].frequencyBinCount;
  }

  set size(size) {
    this._analysers.forEach((analyser, index) => {
      analyser.fftSize = size * 2;
      this._buffers[index] = new Float32Array(size);
    });
  }
  /**
   * The number of channels the analyser does the analysis on. Channel
   * separation is done using [[Split]]
   */


  get channels() {
    return this._analysers.length;
  }
  /**
   * The analysis function returned by analyser.getValue(), either "fft" or "waveform".
   */


  get type() {
    return this._type;
  }

  set type(type) {
    (0, _Debug.assert)(type === "waveform" || type === "fft", `Analyser: invalid type: ${type}`);
    this._type = type;
  }
  /**
   * 0 represents no time averaging with the last analysis frame.
   */


  get smoothing() {
    return this._analysers[0].smoothingTimeConstant;
  }

  set smoothing(val) {
    this._analysers.forEach(a => a.smoothingTimeConstant = val);
  }
  /**
   * Clean up.
   */


  dispose() {
    super.dispose();

    this._analysers.forEach(a => a.disconnect());

    this._split.dispose();

    this._gain.dispose();

    return this;
  }

}

exports.Analyser = Analyser;
},{"../../core/context/ToneAudioNode":"../node_modules/tone/build/esm/core/context/ToneAudioNode.js","../../core/util/Defaults":"../node_modules/tone/build/esm/core/util/Defaults.js","../channel/Split":"../node_modules/tone/build/esm/component/channel/Split.js","../../core/context/Gain":"../node_modules/tone/build/esm/core/context/Gain.js","../../core/util/Debug":"../node_modules/tone/build/esm/core/util/Debug.js"}],"../node_modules/tone/build/esm/component/analysis/MeterBase.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MeterBase = void 0;

var _ToneAudioNode = require("../../core/context/ToneAudioNode");

var _Defaults = require("../../core/util/Defaults");

var _Analyser = require("./Analyser");

/**
 * The base class for Metering classes.
 */
class MeterBase extends _ToneAudioNode.ToneAudioNode {
  constructor() {
    super((0, _Defaults.optionsFromArguments)(MeterBase.getDefaults(), arguments));
    this.name = "MeterBase";
    this.input = this.output = this._analyser = new _Analyser.Analyser({
      context: this.context,
      size: 256,
      type: "waveform"
    });
  }

  dispose() {
    super.dispose();

    this._analyser.dispose();

    return this;
  }

}

exports.MeterBase = MeterBase;
},{"../../core/context/ToneAudioNode":"../node_modules/tone/build/esm/core/context/ToneAudioNode.js","../../core/util/Defaults":"../node_modules/tone/build/esm/core/util/Defaults.js","./Analyser":"../node_modules/tone/build/esm/component/analysis/Analyser.js"}],"../node_modules/tone/build/esm/component/analysis/Meter.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Meter = void 0;

var _Conversions = require("../../core/type/Conversions");

var _Defaults = require("../../core/util/Defaults");

var _MeterBase = require("./MeterBase");

var _Debug = require("../../core/util/Debug");

var _Analyser = require("./Analyser");

/**
 * Meter gets the [RMS](https://en.wikipedia.org/wiki/Root_mean_square)
 * of an input signal. It can also get the raw value of the input signal.
 *
 * @example
 * const meter = new Tone.Meter();
 * const mic = new Tone.UserMedia();
 * mic.open();
 * // connect mic to the meter
 * mic.connect(meter);
 * // the current level of the mic
 * setInterval(() => console.log(meter.getValue()), 100);
 * @category Component
 */
class Meter extends _MeterBase.MeterBase {
  constructor() {
    super((0, _Defaults.optionsFromArguments)(Meter.getDefaults(), arguments, ["smoothing"]));
    this.name = "Meter";
    /**
     * The previous frame's value
     */

    this._rms = 0;
    const options = (0, _Defaults.optionsFromArguments)(Meter.getDefaults(), arguments, ["smoothing"]);
    this.input = this.output = this._analyser = new _Analyser.Analyser({
      context: this.context,
      size: 256,
      type: "waveform",
      channels: options.channels
    });
    this.smoothing = options.smoothing, this.normalRange = options.normalRange;
  }

  static getDefaults() {
    return Object.assign(_MeterBase.MeterBase.getDefaults(), {
      smoothing: 0.8,
      normalRange: false,
      channels: 1
    });
  }
  /**
   * Use [[getValue]] instead. For the previous getValue behavior, use DCMeter.
   * @deprecated
   */


  getLevel() {
    (0, _Debug.warn)("'getLevel' has been changed to 'getValue'");
    return this.getValue();
  }
  /**
   * Get the current value of the incoming signal.
   * Output is in decibels when [[normalRange]] is `false`.
   * If [[channels]] = 1, then the output is a single number
   * representing the value of the input signal. When [[channels]] > 1,
   * then each channel is returned as a value in a number array.
   */


  getValue() {
    const aValues = this._analyser.getValue();

    const channelValues = this.channels === 1 ? [aValues] : aValues;
    const vals = channelValues.map(values => {
      const totalSquared = values.reduce((total, current) => total + current * current, 0);
      const rms = Math.sqrt(totalSquared / values.length); // the rms can only fall at the rate of the smoothing
      // but can jump up instantly

      this._rms = Math.max(rms, this._rms * this.smoothing);
      return this.normalRange ? this._rms : (0, _Conversions.gainToDb)(this._rms);
    });

    if (this.channels === 1) {
      return vals[0];
    } else {
      return vals;
    }
  }
  /**
   * The number of channels of analysis.
   */


  get channels() {
    return this._analyser.channels;
  }

  dispose() {
    super.dispose();

    this._analyser.dispose();

    return this;
  }

}

exports.Meter = Meter;
},{"../../core/type/Conversions":"../node_modules/tone/build/esm/core/type/Conversions.js","../../core/util/Defaults":"../node_modules/tone/build/esm/core/util/Defaults.js","./MeterBase":"../node_modules/tone/build/esm/component/analysis/MeterBase.js","../../core/util/Debug":"../node_modules/tone/build/esm/core/util/Debug.js","./Analyser":"../node_modules/tone/build/esm/component/analysis/Analyser.js"}],"../node_modules/tone/build/esm/component/analysis/FFT.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FFT = void 0;

var _ToneAudioNode = require("../../core/context/ToneAudioNode");

var _Conversions = require("../../core/type/Conversions");

var _Defaults = require("../../core/util/Defaults");

var _MeterBase = require("./MeterBase");

var _Debug = require("../../core/util/Debug");

/**
 * Get the current frequency data of the connected audio source using a fast Fourier transform.
 * @category Component
 */
class FFT extends _MeterBase.MeterBase {
  constructor() {
    super((0, _Defaults.optionsFromArguments)(FFT.getDefaults(), arguments, ["size"]));
    this.name = "FFT";
    const options = (0, _Defaults.optionsFromArguments)(FFT.getDefaults(), arguments, ["size"]);
    this.normalRange = options.normalRange;
    this._analyser.type = "fft";
    this.size = options.size;
  }

  static getDefaults() {
    return Object.assign(_ToneAudioNode.ToneAudioNode.getDefaults(), {
      normalRange: false,
      size: 1024,
      smoothing: 0.8
    });
  }
  /**
   * Gets the current frequency data from the connected audio source.
   * Returns the frequency data of length [[size]] as a Float32Array of decibel values.
   */


  getValue() {
    const values = this._analyser.getValue();

    return values.map(v => this.normalRange ? (0, _Conversions.dbToGain)(v) : v);
  }
  /**
   * The size of analysis. This must be a power of two in the range 16 to 16384.
   * Determines the size of the array returned by [[getValue]] (i.e. the number of
   * frequency bins). Large FFT sizes may be costly to compute.
   */


  get size() {
    return this._analyser.size;
  }

  set size(size) {
    this._analyser.size = size;
  }
  /**
   * 0 represents no time averaging with the last analysis frame.
   */


  get smoothing() {
    return this._analyser.smoothing;
  }

  set smoothing(val) {
    this._analyser.smoothing = val;
  }
  /**
   * Returns the frequency value in hertz of each of the indices of the FFT's [[getValue]] response.
   * @example
   * const fft = new Tone.FFT(32);
   * console.log([0, 1, 2, 3, 4].map(index => fft.getFrequencyOfIndex(index)));
   */


  getFrequencyOfIndex(index) {
    (0, _Debug.assert)(0 <= index && index < this.size, `index must be greater than or equal to 0 and less than ${this.size}`);
    return index * this.context.sampleRate / (this.size * 2);
  }

}

exports.FFT = FFT;
},{"../../core/context/ToneAudioNode":"../node_modules/tone/build/esm/core/context/ToneAudioNode.js","../../core/type/Conversions":"../node_modules/tone/build/esm/core/type/Conversions.js","../../core/util/Defaults":"../node_modules/tone/build/esm/core/util/Defaults.js","./MeterBase":"../node_modules/tone/build/esm/component/analysis/MeterBase.js","../../core/util/Debug":"../node_modules/tone/build/esm/core/util/Debug.js"}],"../node_modules/tone/build/esm/component/analysis/DCMeter.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DCMeter = void 0;

var _Defaults = require("../../core/util/Defaults");

var _MeterBase = require("./MeterBase");

/**
 * DCMeter gets the raw value of the input signal at the current time.
 *
 * @example
 * const meter = new Tone.DCMeter();
 * const mic = new Tone.UserMedia();
 * mic.open();
 * // connect mic to the meter
 * mic.connect(meter);
 * // the current level of the mic
 * const level = meter.getValue();
 * @category Component
 */
class DCMeter extends _MeterBase.MeterBase {
  constructor() {
    super((0, _Defaults.optionsFromArguments)(DCMeter.getDefaults(), arguments));
    this.name = "DCMeter";
    this._analyser.type = "waveform";
    this._analyser.size = 256;
  }
  /**
   * Get the signal value of the incoming signal
   */


  getValue() {
    const value = this._analyser.getValue();

    return value[0];
  }

}

exports.DCMeter = DCMeter;
},{"../../core/util/Defaults":"../node_modules/tone/build/esm/core/util/Defaults.js","./MeterBase":"../node_modules/tone/build/esm/component/analysis/MeterBase.js"}],"../node_modules/tone/build/esm/component/analysis/Waveform.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Waveform = void 0;

var _Defaults = require("../../core/util/Defaults");

var _MeterBase = require("./MeterBase");

/**
 * Get the current waveform data of the connected audio source.
 * @category Component
 */
class Waveform extends _MeterBase.MeterBase {
  constructor() {
    super((0, _Defaults.optionsFromArguments)(Waveform.getDefaults(), arguments, ["size"]));
    this.name = "Waveform";
    const options = (0, _Defaults.optionsFromArguments)(Waveform.getDefaults(), arguments, ["size"]);
    this._analyser.type = "waveform";
    this.size = options.size;
  }

  static getDefaults() {
    return Object.assign(_MeterBase.MeterBase.getDefaults(), {
      size: 1024
    });
  }
  /**
   * Return the waveform for the current time as a Float32Array where each value in the array
   * represents a sample in the waveform.
   */


  getValue() {
    return this._analyser.getValue();
  }
  /**
   * The size of analysis. This must be a power of two in the range 16 to 16384.
   * Determines the size of the array returned by [[getValue]].
   */


  get size() {
    return this._analyser.size;
  }

  set size(size) {
    this._analyser.size = size;
  }

}

exports.Waveform = Waveform;
},{"../../core/util/Defaults":"../node_modules/tone/build/esm/core/util/Defaults.js","./MeterBase":"../node_modules/tone/build/esm/component/analysis/MeterBase.js"}],"../node_modules/tone/build/esm/component/channel/Solo.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Solo = void 0;

var _Gain = require("../../core/context/Gain");

var _ToneAudioNode = require("../../core/context/ToneAudioNode");

var _Defaults = require("../../core/util/Defaults");

/**
 * Solo lets you isolate a specific audio stream. When an instance is set to `solo=true`,
 * it will mute all other instances of Solo.
 * @example
 * const soloA = new Tone.Solo().toDestination();
 * const oscA = new Tone.Oscillator("C4", "sawtooth").connect(soloA);
 * const soloB = new Tone.Solo().toDestination();
 * const oscB = new Tone.Oscillator("E4", "square").connect(soloB);
 * soloA.solo = true;
 * // no audio will pass through soloB
 * @category Component
 */
class Solo extends _ToneAudioNode.ToneAudioNode {
  constructor() {
    super((0, _Defaults.optionsFromArguments)(Solo.getDefaults(), arguments, ["solo"]));
    this.name = "Solo";
    const options = (0, _Defaults.optionsFromArguments)(Solo.getDefaults(), arguments, ["solo"]);
    this.input = this.output = new _Gain.Gain({
      context: this.context
    });

    if (!Solo._allSolos.has(this.context)) {
      Solo._allSolos.set(this.context, new Set());
    }

    Solo._allSolos.get(this.context).add(this); // set initially


    this.solo = options.solo;
  }

  static getDefaults() {
    return Object.assign(_ToneAudioNode.ToneAudioNode.getDefaults(), {
      solo: false
    });
  }
  /**
   * Isolates this instance and mutes all other instances of Solo.
   * Only one instance can be soloed at a time. A soloed
   * instance will report `solo=false` when another instance is soloed.
   */


  get solo() {
    return this._isSoloed();
  }

  set solo(solo) {
    if (solo) {
      this._addSolo();
    } else {
      this._removeSolo();
    }

    Solo._allSolos.get(this.context).forEach(instance => instance._updateSolo());
  }
  /**
   * If the current instance is muted, i.e. another instance is soloed
   */


  get muted() {
    return this.input.gain.value === 0;
  }
  /**
   * Add this to the soloed array
   */


  _addSolo() {
    if (!Solo._soloed.has(this.context)) {
      Solo._soloed.set(this.context, new Set());
    }

    Solo._soloed.get(this.context).add(this);
  }
  /**
   * Remove this from the soloed array
   */


  _removeSolo() {
    if (Solo._soloed.has(this.context)) {
      Solo._soloed.get(this.context).delete(this);
    }
  }
  /**
   * Is this on the soloed array
   */


  _isSoloed() {
    return Solo._soloed.has(this.context) && Solo._soloed.get(this.context).has(this);
  }
  /**
   * Returns true if no one is soloed
   */


  _noSolos() {
    // either does not have any soloed added
    return !Solo._soloed.has(this.context) || // or has a solo set but doesn't include any items
    Solo._soloed.has(this.context) && Solo._soloed.get(this.context).size === 0;
  }
  /**
   * Solo the current instance and unsolo all other instances.
   */


  _updateSolo() {
    if (this._isSoloed()) {
      this.input.gain.value = 1;
    } else if (this._noSolos()) {
      // no one is soloed
      this.input.gain.value = 1;
    } else {
      this.input.gain.value = 0;
    }
  }

  dispose() {
    super.dispose();

    Solo._allSolos.get(this.context).delete(this);

    this._removeSolo();

    return this;
  }

}
/**
 * Hold all of the solo'ed tracks belonging to a specific context
 */


exports.Solo = Solo;
Solo._allSolos = new Map();
/**
 * Hold the currently solo'ed instance(s)
 */

Solo._soloed = new Map();
},{"../../core/context/Gain":"../node_modules/tone/build/esm/core/context/Gain.js","../../core/context/ToneAudioNode":"../node_modules/tone/build/esm/core/context/ToneAudioNode.js","../../core/util/Defaults":"../node_modules/tone/build/esm/core/util/Defaults.js"}],"../node_modules/tone/build/esm/component/channel/PanVol.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PanVol = void 0;

var _Interface = require("../../core/util/Interface");

var _ToneAudioNode = require("../../core/context/ToneAudioNode");

var _Defaults = require("../../core/util/Defaults");

var _Panner = require("./Panner");

var _Volume = require("./Volume");

/**
 * PanVol is a Tone.Panner and Tone.Volume in one.
 * @example
 * // pan the incoming signal left and drop the volume
 * const panVol = new Tone.PanVol(-0.25, -12).toDestination();
 * const osc = new Tone.Oscillator().connect(panVol).start();
 * @category Component
 */
class PanVol extends _ToneAudioNode.ToneAudioNode {
  constructor() {
    super((0, _Defaults.optionsFromArguments)(PanVol.getDefaults(), arguments, ["pan", "volume"]));
    this.name = "PanVol";
    const options = (0, _Defaults.optionsFromArguments)(PanVol.getDefaults(), arguments, ["pan", "volume"]);
    this._panner = this.input = new _Panner.Panner({
      context: this.context,
      pan: options.pan,
      channelCount: options.channelCount
    });
    this.pan = this._panner.pan;
    this._volume = this.output = new _Volume.Volume({
      context: this.context,
      volume: options.volume
    });
    this.volume = this._volume.volume; // connections

    this._panner.connect(this._volume);

    this.mute = options.mute;
    (0, _Interface.readOnly)(this, ["pan", "volume"]);
  }

  static getDefaults() {
    return Object.assign(_ToneAudioNode.ToneAudioNode.getDefaults(), {
      mute: false,
      pan: 0,
      volume: 0,
      channelCount: 1
    });
  }
  /**
   * Mute/unmute the volume
   */


  get mute() {
    return this._volume.mute;
  }

  set mute(mute) {
    this._volume.mute = mute;
  }

  dispose() {
    super.dispose();

    this._panner.dispose();

    this.pan.dispose();

    this._volume.dispose();

    this.volume.dispose();
    return this;
  }

}

exports.PanVol = PanVol;
},{"../../core/util/Interface":"../node_modules/tone/build/esm/core/util/Interface.js","../../core/context/ToneAudioNode":"../node_modules/tone/build/esm/core/context/ToneAudioNode.js","../../core/util/Defaults":"../node_modules/tone/build/esm/core/util/Defaults.js","./Panner":"../node_modules/tone/build/esm/component/channel/Panner.js","./Volume":"../node_modules/tone/build/esm/component/channel/Volume.js"}],"../node_modules/tone/build/esm/component/channel/Channel.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Channel = void 0;

var _ToneAudioNode = require("../../core/context/ToneAudioNode");

var _Defaults = require("../../core/util/Defaults");

var _Solo = require("./Solo");

var _PanVol = require("./PanVol");

var _Interface = require("../../core/util/Interface");

var _Gain = require("../../core/context/Gain");

/**
 * Channel provides a channel strip interface with volume, pan, solo and mute controls.
 * See [[PanVol]] and [[Solo]]
 * @example
 * // pan the incoming signal left and drop the volume 12db
 * const channel = new Tone.Channel(-0.25, -12);
 * @category Component
 */
class Channel extends _ToneAudioNode.ToneAudioNode {
  constructor() {
    super((0, _Defaults.optionsFromArguments)(Channel.getDefaults(), arguments, ["volume", "pan"]));
    this.name = "Channel";
    const options = (0, _Defaults.optionsFromArguments)(Channel.getDefaults(), arguments, ["volume", "pan"]);
    this._solo = this.input = new _Solo.Solo({
      solo: options.solo,
      context: this.context
    });
    this._panVol = this.output = new _PanVol.PanVol({
      context: this.context,
      pan: options.pan,
      volume: options.volume,
      mute: options.mute,
      channelCount: options.channelCount
    });
    this.pan = this._panVol.pan;
    this.volume = this._panVol.volume;

    this._solo.connect(this._panVol);

    (0, _Interface.readOnly)(this, ["pan", "volume"]);
  }

  static getDefaults() {
    return Object.assign(_ToneAudioNode.ToneAudioNode.getDefaults(), {
      pan: 0,
      volume: 0,
      mute: false,
      solo: false,
      channelCount: 1
    });
  }
  /**
   * Solo/unsolo the channel. Soloing is only relative to other [[Channels]] and [[Solo]] instances
   */


  get solo() {
    return this._solo.solo;
  }

  set solo(solo) {
    this._solo.solo = solo;
  }
  /**
   * If the current instance is muted, i.e. another instance is soloed,
   * or the channel is muted
   */


  get muted() {
    return this._solo.muted || this.mute;
  }
  /**
   * Mute/unmute the volume
   */


  get mute() {
    return this._panVol.mute;
  }

  set mute(mute) {
    this._panVol.mute = mute;
  }
  /**
   * Get the gain node belonging to the bus name. Create it if
   * it doesn't exist
   * @param name The bus name
   */


  _getBus(name) {
    if (!Channel.buses.has(name)) {
      Channel.buses.set(name, new _Gain.Gain({
        context: this.context
      }));
    }

    return Channel.buses.get(name);
  }
  /**
   * Send audio to another channel using a string. `send` is a lot like
   * [[connect]], except it uses a string instead of an object. This can
   * be useful in large applications to decouple sections since [[send]]
   * and [[receive]] can be invoked separately in order to connect an object
   * @param name The channel name to send the audio
   * @param volume The amount of the signal to send.
   * 	Defaults to 0db, i.e. send the entire signal
   * @returns Returns the gain node of this connection.
   */


  send(name, volume = 0) {
    const bus = this._getBus(name);

    const sendKnob = new _Gain.Gain({
      context: this.context,
      units: "decibels",
      gain: volume
    });
    this.connect(sendKnob);
    sendKnob.connect(bus);
    return sendKnob;
  }
  /**
   * Receive audio from a channel which was connected with [[send]].
   * @param name The channel name to receive audio from.
   */


  receive(name) {
    const bus = this._getBus(name);

    bus.connect(this);
    return this;
  }

  dispose() {
    super.dispose();

    this._panVol.dispose();

    this.pan.dispose();
    this.volume.dispose();

    this._solo.dispose();

    return this;
  }

}
/**
 * Store the send/receive channels by name.
 */


exports.Channel = Channel;
Channel.buses = new Map();
},{"../../core/context/ToneAudioNode":"../node_modules/tone/build/esm/core/context/ToneAudioNode.js","../../core/util/Defaults":"../node_modules/tone/build/esm/core/util/Defaults.js","./Solo":"../node_modules/tone/build/esm/component/channel/Solo.js","./PanVol":"../node_modules/tone/build/esm/component/channel/PanVol.js","../../core/util/Interface":"../node_modules/tone/build/esm/core/util/Interface.js","../../core/context/Gain":"../node_modules/tone/build/esm/core/context/Gain.js"}],"../node_modules/tone/build/esm/component/channel/MultibandSplit.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MultibandSplit = void 0;

var _Gain = require("../../core/context/Gain");

var _ToneAudioNode = require("../../core/context/ToneAudioNode");

var _Defaults = require("../../core/util/Defaults");

var _Interface = require("../../core/util/Interface");

var _Signal = require("../../signal/Signal");

var _Filter = require("../filter/Filter");

/**
 * Split the incoming signal into three bands (low, mid, high)
 * with two crossover frequency controls.
 * ```
 *            +----------------------+
 *          +-> input < lowFrequency +------------------> low
 *          | +----------------------+
 *          |
 *          | +--------------------------------------+
 * input ---+-> lowFrequency < input < highFrequency +--> mid
 *          | +--------------------------------------+
 *          |
 *          | +-----------------------+
 *          +-> highFrequency < input +-----------------> high
 *            +-----------------------+
 * ```
 * @category Component
 */
class MultibandSplit extends _ToneAudioNode.ToneAudioNode {
  constructor() {
    super((0, _Defaults.optionsFromArguments)(MultibandSplit.getDefaults(), arguments, ["lowFrequency", "highFrequency"]));
    this.name = "MultibandSplit";
    /**
     * the input
     */

    this.input = new _Gain.Gain({
      context: this.context
    });
    /**
     * no output node, use either low, mid or high outputs
     */

    this.output = undefined;
    /**
     * The low band.
     */

    this.low = new _Filter.Filter({
      context: this.context,
      frequency: 0,
      type: "lowpass"
    });
    /**
     * the lower filter of the mid band
     */

    this._lowMidFilter = new _Filter.Filter({
      context: this.context,
      frequency: 0,
      type: "highpass"
    });
    /**
     * The mid band output.
     */

    this.mid = new _Filter.Filter({
      context: this.context,
      frequency: 0,
      type: "lowpass"
    });
    /**
     * The high band output.
     */

    this.high = new _Filter.Filter({
      context: this.context,
      frequency: 0,
      type: "highpass"
    });
    this._internalChannels = [this.low, this.mid, this.high];
    const options = (0, _Defaults.optionsFromArguments)(MultibandSplit.getDefaults(), arguments, ["lowFrequency", "highFrequency"]);
    this.lowFrequency = new _Signal.Signal({
      context: this.context,
      units: "frequency",
      value: options.lowFrequency
    });
    this.highFrequency = new _Signal.Signal({
      context: this.context,
      units: "frequency",
      value: options.highFrequency
    });
    this.Q = new _Signal.Signal({
      context: this.context,
      units: "positive",
      value: options.Q
    });
    this.input.fan(this.low, this.high);
    this.input.chain(this._lowMidFilter, this.mid); // the frequency control signal

    this.lowFrequency.fan(this.low.frequency, this._lowMidFilter.frequency);
    this.highFrequency.fan(this.mid.frequency, this.high.frequency); // the Q value

    this.Q.connect(this.low.Q);
    this.Q.connect(this._lowMidFilter.Q);
    this.Q.connect(this.mid.Q);
    this.Q.connect(this.high.Q);
    (0, _Interface.readOnly)(this, ["high", "mid", "low", "highFrequency", "lowFrequency"]);
  }

  static getDefaults() {
    return Object.assign(_ToneAudioNode.ToneAudioNode.getDefaults(), {
      Q: 1,
      highFrequency: 2500,
      lowFrequency: 400
    });
  }
  /**
   * Clean up.
   */


  dispose() {
    super.dispose();
    (0, _Interface.writable)(this, ["high", "mid", "low", "highFrequency", "lowFrequency"]);
    this.low.dispose();

    this._lowMidFilter.dispose();

    this.mid.dispose();
    this.high.dispose();
    this.lowFrequency.dispose();
    this.highFrequency.dispose();
    this.Q.dispose();
    return this;
  }

}

exports.MultibandSplit = MultibandSplit;
},{"../../core/context/Gain":"../node_modules/tone/build/esm/core/context/Gain.js","../../core/context/ToneAudioNode":"../node_modules/tone/build/esm/core/context/ToneAudioNode.js","../../core/util/Defaults":"../node_modules/tone/build/esm/core/util/Defaults.js","../../core/util/Interface":"../node_modules/tone/build/esm/core/util/Interface.js","../../signal/Signal":"../node_modules/tone/build/esm/signal/Signal.js","../filter/Filter":"../node_modules/tone/build/esm/component/filter/Filter.js"}],"../node_modules/tone/build/esm/core/context/Listener.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Listener = void 0;

var _ToneAudioNode = require("./ToneAudioNode");

var _Param = require("./Param");

var _ContextInitialization = require("./ContextInitialization");

/**
 * Tone.Listener is a thin wrapper around the AudioListener. Listener combined
 * with [[Panner3D]] makes up the Web Audio API's 3D panning system. Panner3D allows you
 * to place sounds in 3D and Listener allows you to navigate the 3D sound environment from
 * a first-person perspective. There is only one listener per audio context.
 */
class Listener extends _ToneAudioNode.ToneAudioNode {
  constructor() {
    super(...arguments);
    this.name = "Listener";
    this.positionX = new _Param.Param({
      context: this.context,
      param: this.context.rawContext.listener.positionX
    });
    this.positionY = new _Param.Param({
      context: this.context,
      param: this.context.rawContext.listener.positionY
    });
    this.positionZ = new _Param.Param({
      context: this.context,
      param: this.context.rawContext.listener.positionZ
    });
    this.forwardX = new _Param.Param({
      context: this.context,
      param: this.context.rawContext.listener.forwardX
    });
    this.forwardY = new _Param.Param({
      context: this.context,
      param: this.context.rawContext.listener.forwardY
    });
    this.forwardZ = new _Param.Param({
      context: this.context,
      param: this.context.rawContext.listener.forwardZ
    });
    this.upX = new _Param.Param({
      context: this.context,
      param: this.context.rawContext.listener.upX
    });
    this.upY = new _Param.Param({
      context: this.context,
      param: this.context.rawContext.listener.upY
    });
    this.upZ = new _Param.Param({
      context: this.context,
      param: this.context.rawContext.listener.upZ
    });
  }

  static getDefaults() {
    return Object.assign(_ToneAudioNode.ToneAudioNode.getDefaults(), {
      positionX: 0,
      positionY: 0,
      positionZ: 0,
      forwardX: 0,
      forwardY: 0,
      forwardZ: -1,
      upX: 0,
      upY: 1,
      upZ: 0
    });
  }

  dispose() {
    super.dispose();
    this.positionX.dispose();
    this.positionY.dispose();
    this.positionZ.dispose();
    this.forwardX.dispose();
    this.forwardY.dispose();
    this.forwardZ.dispose();
    this.upX.dispose();
    this.upY.dispose();
    this.upZ.dispose();
    return this;
  }

} //-------------------------------------
// 	INITIALIZATION
//-------------------------------------


exports.Listener = Listener;
(0, _ContextInitialization.onContextInit)(context => {
  context.listener = new Listener({
    context
  });
});
(0, _ContextInitialization.onContextClose)(context => {
  context.listener.dispose();
});
},{"./ToneAudioNode":"../node_modules/tone/build/esm/core/context/ToneAudioNode.js","./Param":"../node_modules/tone/build/esm/core/context/Param.js","./ContextInitialization":"../node_modules/tone/build/esm/core/context/ContextInitialization.js"}],"../node_modules/tone/build/esm/component/channel/Panner3D.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Panner3D = void 0;

var _Param = require("../../core/context/Param");

var _ToneAudioNode = require("../../core/context/ToneAudioNode");

var _Defaults = require("../../core/util/Defaults");

require("../../core/context/Listener");

/**
 * A spatialized panner node which supports equalpower or HRTF panning.
 * @category Component
 */
class Panner3D extends _ToneAudioNode.ToneAudioNode {
  constructor() {
    super((0, _Defaults.optionsFromArguments)(Panner3D.getDefaults(), arguments, ["positionX", "positionY", "positionZ"]));
    this.name = "Panner3D";
    const options = (0, _Defaults.optionsFromArguments)(Panner3D.getDefaults(), arguments, ["positionX", "positionY", "positionZ"]);
    this._panner = this.input = this.output = this.context.createPanner(); // set some values

    this.panningModel = options.panningModel;
    this.maxDistance = options.maxDistance;
    this.distanceModel = options.distanceModel;
    this.coneOuterGain = options.coneOuterGain;
    this.coneOuterAngle = options.coneOuterAngle;
    this.coneInnerAngle = options.coneInnerAngle;
    this.refDistance = options.refDistance;
    this.rolloffFactor = options.rolloffFactor;
    this.positionX = new _Param.Param({
      context: this.context,
      param: this._panner.positionX,
      value: options.positionX
    });
    this.positionY = new _Param.Param({
      context: this.context,
      param: this._panner.positionY,
      value: options.positionY
    });
    this.positionZ = new _Param.Param({
      context: this.context,
      param: this._panner.positionZ,
      value: options.positionZ
    });
    this.orientationX = new _Param.Param({
      context: this.context,
      param: this._panner.orientationX,
      value: options.orientationX
    });
    this.orientationY = new _Param.Param({
      context: this.context,
      param: this._panner.orientationY,
      value: options.orientationY
    });
    this.orientationZ = new _Param.Param({
      context: this.context,
      param: this._panner.orientationZ,
      value: options.orientationZ
    });
  }

  static getDefaults() {
    return Object.assign(_ToneAudioNode.ToneAudioNode.getDefaults(), {
      coneInnerAngle: 360,
      coneOuterAngle: 360,
      coneOuterGain: 0,
      distanceModel: "inverse",
      maxDistance: 10000,
      orientationX: 0,
      orientationY: 0,
      orientationZ: 0,
      panningModel: "equalpower",
      positionX: 0,
      positionY: 0,
      positionZ: 0,
      refDistance: 1,
      rolloffFactor: 1
    });
  }
  /**
   * Sets the position of the source in 3d space.
   */


  setPosition(x, y, z) {
    this.positionX.value = x;
    this.positionY.value = y;
    this.positionZ.value = z;
    return this;
  }
  /**
   * Sets the orientation of the source in 3d space.
   */


  setOrientation(x, y, z) {
    this.orientationX.value = x;
    this.orientationY.value = y;
    this.orientationZ.value = z;
    return this;
  }
  /**
   * The panning model. Either "equalpower" or "HRTF".
   */


  get panningModel() {
    return this._panner.panningModel;
  }

  set panningModel(val) {
    this._panner.panningModel = val;
  }
  /**
   * A reference distance for reducing volume as source move further from the listener
   */


  get refDistance() {
    return this._panner.refDistance;
  }

  set refDistance(val) {
    this._panner.refDistance = val;
  }
  /**
   * Describes how quickly the volume is reduced as source moves away from listener.
   */


  get rolloffFactor() {
    return this._panner.rolloffFactor;
  }

  set rolloffFactor(val) {
    this._panner.rolloffFactor = val;
  }
  /**
   * The distance model used by,  "linear", "inverse", or "exponential".
   */


  get distanceModel() {
    return this._panner.distanceModel;
  }

  set distanceModel(val) {
    this._panner.distanceModel = val;
  }
  /**
   * The angle, in degrees, inside of which there will be no volume reduction
   */


  get coneInnerAngle() {
    return this._panner.coneInnerAngle;
  }

  set coneInnerAngle(val) {
    this._panner.coneInnerAngle = val;
  }
  /**
   * The angle, in degrees, outside of which the volume will be reduced
   * to a constant value of coneOuterGain
   */


  get coneOuterAngle() {
    return this._panner.coneOuterAngle;
  }

  set coneOuterAngle(val) {
    this._panner.coneOuterAngle = val;
  }
  /**
   * The gain outside of the coneOuterAngle
   */


  get coneOuterGain() {
    return this._panner.coneOuterGain;
  }

  set coneOuterGain(val) {
    this._panner.coneOuterGain = val;
  }
  /**
   * The maximum distance between source and listener,
   * after which the volume will not be reduced any further.
   */


  get maxDistance() {
    return this._panner.maxDistance;
  }

  set maxDistance(val) {
    this._panner.maxDistance = val;
  }

  dispose() {
    super.dispose();

    this._panner.disconnect();

    this.orientationX.dispose();
    this.orientationY.dispose();
    this.orientationZ.dispose();
    this.positionX.dispose();
    this.positionY.dispose();
    this.positionZ.dispose();
    return this;
  }

}

exports.Panner3D = Panner3D;
},{"../../core/context/Param":"../node_modules/tone/build/esm/core/context/Param.js","../../core/context/ToneAudioNode":"../node_modules/tone/build/esm/core/context/ToneAudioNode.js","../../core/util/Defaults":"../node_modules/tone/build/esm/core/util/Defaults.js","../../core/context/Listener":"../node_modules/tone/build/esm/core/context/Listener.js"}],"../node_modules/tone/build/esm/component/channel/Recorder.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Recorder = void 0;

var _tslib = require("tslib");

var _ToneAudioNode = require("../../core/context/ToneAudioNode");

var _Gain = require("../../core/context/Gain");

var _Debug = require("../../core/util/Debug");

var _AudioContext = require("../../core/context/AudioContext");

var _Defaults = require("../../core/util/Defaults");

/**
 * A wrapper around the MediaRecorder API. Unlike the rest of Tone.js, this module does not offer
 * any sample-accurate scheduling because it is not a feature of the MediaRecorder API.
 * This is only natively supported in Chrome and Firefox.
 * For a cross-browser shim, install (audio-recorder-polyfill)[https://www.npmjs.com/package/audio-recorder-polyfill].
 * @example
 * const recorder = new Tone.Recorder();
 * const synth = new Tone.Synth().connect(recorder);
 * // start recording
 * recorder.start();
 * // generate a few notes
 * synth.triggerAttackRelease("C3", 0.5);
 * synth.triggerAttackRelease("C4", 0.5, "+1");
 * synth.triggerAttackRelease("C5", 0.5, "+2");
 * // wait for the notes to end and stop the recording
 * setTimeout(async () => {
 * 	// the recorded audio is returned as a blob
 * 	const recording = await recorder.stop();
 * 	// download the recording by creating an anchor element and blob url
 * 	const url = URL.createObjectURL(recording);
 * 	const anchor = document.createElement("a");
 * 	anchor.download = "recording.webm";
 * 	anchor.href = url;
 * 	anchor.click();
 * }, 4000);
 */
class Recorder extends _ToneAudioNode.ToneAudioNode {
  constructor() {
    super((0, _Defaults.optionsFromArguments)(Recorder.getDefaults(), arguments));
    this.name = "Recorder";
    const options = (0, _Defaults.optionsFromArguments)(Recorder.getDefaults(), arguments);
    this.input = new _Gain.Gain({
      context: this.context
    });
    (0, _Debug.assert)(Recorder.supported, "Media Recorder API is not available");
    this._stream = this.context.createMediaStreamDestination();
    this.input.connect(this._stream);
    this._recorder = new MediaRecorder(this._stream.stream, {
      mimeType: options.mimeType
    });
  }

  static getDefaults() {
    return _ToneAudioNode.ToneAudioNode.getDefaults();
  }
  /**
   * The mime type is the format that the audio is encoded in. For Chrome
   * that is typically webm encoded as "vorbis".
   */


  get mimeType() {
    return this._recorder.mimeType;
  }
  /**
   * Test if your platform supports the Media Recorder API. If it's not available,
   * try installing this (polyfill)[https://www.npmjs.com/package/audio-recorder-polyfill].
   */


  static get supported() {
    return _AudioContext.theWindow !== null && Reflect.has(_AudioContext.theWindow, "MediaRecorder");
  }
  /**
   * Get the playback state of the Recorder, either "started", "stopped" or "paused"
   */


  get state() {
    if (this._recorder.state === "inactive") {
      return "stopped";
    } else if (this._recorder.state === "paused") {
      return "paused";
    } else {
      return "started";
    }
  }
  /**
   * Start the Recorder. Returns a promise which resolves
   * when the recorder has started.
   */


  start() {
    return (0, _tslib.__awaiter)(this, void 0, void 0, function* () {
      (0, _Debug.assert)(this.state !== "started", "Recorder is already started");
      const startPromise = new Promise(done => {
        const handleStart = () => {
          this._recorder.removeEventListener("start", handleStart, false);

          done();
        };

        this._recorder.addEventListener("start", handleStart, false);
      });

      this._recorder.start();

      return yield startPromise;
    });
  }
  /**
   * Stop the recorder. Returns a promise with the recorded content until this point
   * encoded as [[mimeType]]
   */


  stop() {
    return (0, _tslib.__awaiter)(this, void 0, void 0, function* () {
      (0, _Debug.assert)(this.state !== "stopped", "Recorder is not started");
      const dataPromise = new Promise(done => {
        const handleData = e => {
          this._recorder.removeEventListener("dataavailable", handleData, false);

          done(e.data);
        };

        this._recorder.addEventListener("dataavailable", handleData, false);
      });

      this._recorder.stop();

      return yield dataPromise;
    });
  }
  /**
   * Pause the recorder
   */


  pause() {
    (0, _Debug.assert)(this.state === "started", "Recorder must be started");

    this._recorder.pause();

    return this;
  }

  dispose() {
    super.dispose();
    this.input.dispose();

    this._stream.disconnect();

    return this;
  }

}

exports.Recorder = Recorder;
},{"tslib":"../node_modules/tslib/tslib.es6.js","../../core/context/ToneAudioNode":"../node_modules/tone/build/esm/core/context/ToneAudioNode.js","../../core/context/Gain":"../node_modules/tone/build/esm/core/context/Gain.js","../../core/util/Debug":"../node_modules/tone/build/esm/core/util/Debug.js","../../core/context/AudioContext":"../node_modules/tone/build/esm/core/context/AudioContext.js","../../core/util/Defaults":"../node_modules/tone/build/esm/core/util/Defaults.js"}],"../node_modules/tone/build/esm/component/dynamics/Compressor.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Compressor = void 0;

var _Param = require("../../core/context/Param");

var _ToneAudioNode = require("../../core/context/ToneAudioNode");

var _Defaults = require("../../core/util/Defaults");

var _Interface = require("../../core/util/Interface");

/**
 * Compressor is a thin wrapper around the Web Audio
 * [DynamicsCompressorNode](http://webaudio.github.io/web-audio-api/#the-dynamicscompressornode-interface).
 * Compression reduces the volume of loud sounds or amplifies quiet sounds
 * by narrowing or "compressing" an audio signal's dynamic range.
 * Read more on [Wikipedia](https://en.wikipedia.org/wiki/Dynamic_range_compression).
 * @example
 * const comp = new Tone.Compressor(-30, 3);
 * @category Component
 */
class Compressor extends _ToneAudioNode.ToneAudioNode {
  constructor() {
    super((0, _Defaults.optionsFromArguments)(Compressor.getDefaults(), arguments, ["threshold", "ratio"]));
    this.name = "Compressor";
    /**
     * the compressor node
     */

    this._compressor = this.context.createDynamicsCompressor();
    this.input = this._compressor;
    this.output = this._compressor;
    const options = (0, _Defaults.optionsFromArguments)(Compressor.getDefaults(), arguments, ["threshold", "ratio"]);
    this.threshold = new _Param.Param({
      minValue: this._compressor.threshold.minValue,
      maxValue: this._compressor.threshold.maxValue,
      context: this.context,
      convert: false,
      param: this._compressor.threshold,
      units: "decibels",
      value: options.threshold
    });
    this.attack = new _Param.Param({
      minValue: this._compressor.attack.minValue,
      maxValue: this._compressor.attack.maxValue,
      context: this.context,
      param: this._compressor.attack,
      units: "time",
      value: options.attack
    });
    this.release = new _Param.Param({
      minValue: this._compressor.release.minValue,
      maxValue: this._compressor.release.maxValue,
      context: this.context,
      param: this._compressor.release,
      units: "time",
      value: options.release
    });
    this.knee = new _Param.Param({
      minValue: this._compressor.knee.minValue,
      maxValue: this._compressor.knee.maxValue,
      context: this.context,
      convert: false,
      param: this._compressor.knee,
      units: "decibels",
      value: options.knee
    });
    this.ratio = new _Param.Param({
      minValue: this._compressor.ratio.minValue,
      maxValue: this._compressor.ratio.maxValue,
      context: this.context,
      convert: false,
      param: this._compressor.ratio,
      units: "positive",
      value: options.ratio
    }); // set the defaults

    (0, _Interface.readOnly)(this, ["knee", "release", "attack", "ratio", "threshold"]);
  }

  static getDefaults() {
    return Object.assign(_ToneAudioNode.ToneAudioNode.getDefaults(), {
      attack: 0.003,
      knee: 30,
      ratio: 12,
      release: 0.25,
      threshold: -24
    });
  }
  /**
   * A read-only decibel value for metering purposes, representing the current amount of gain
   * reduction that the compressor is applying to the signal. If fed no signal the value will be 0 (no gain reduction).
   */


  get reduction() {
    return this._compressor.reduction;
  }

  dispose() {
    super.dispose();

    this._compressor.disconnect();

    this.attack.dispose();
    this.release.dispose();
    this.threshold.dispose();
    this.ratio.dispose();
    this.knee.dispose();
    return this;
  }

}

exports.Compressor = Compressor;
},{"../../core/context/Param":"../node_modules/tone/build/esm/core/context/Param.js","../../core/context/ToneAudioNode":"../node_modules/tone/build/esm/core/context/ToneAudioNode.js","../../core/util/Defaults":"../node_modules/tone/build/esm/core/util/Defaults.js","../../core/util/Interface":"../node_modules/tone/build/esm/core/util/Interface.js"}],"../node_modules/tone/build/esm/component/dynamics/Gate.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Gate = void 0;

var _ToneAudioNode = require("../../core/context/ToneAudioNode");

var _GreaterThan = require("../../signal/GreaterThan");

var _Gain = require("../../core/context/Gain");

var _Follower = require("../analysis/Follower");

var _Defaults = require("../../core/util/Defaults");

var _Conversions = require("../../core/type/Conversions");

/**
 * Gate only passes a signal through when the incoming
 * signal exceeds a specified threshold. It uses [[Follower]] to follow the ampltiude
 * of the incoming signal and compares it to the [[threshold]] value using [[GreaterThan]].
 *
 * @example
 * const gate = new Tone.Gate(-30, 0.2).toDestination();
 * const mic = new Tone.UserMedia().connect(gate);
 * // the gate will only pass through the incoming
 * // signal when it's louder than -30db
 */
class Gate extends _ToneAudioNode.ToneAudioNode {
  constructor() {
    super(Object.assign((0, _Defaults.optionsFromArguments)(Gate.getDefaults(), arguments, ["threshold", "smoothing"])));
    this.name = "Gate";
    const options = (0, _Defaults.optionsFromArguments)(Gate.getDefaults(), arguments, ["threshold", "smoothing"]);
    this._follower = new _Follower.Follower({
      context: this.context,
      smoothing: options.smoothing
    });
    this._gt = new _GreaterThan.GreaterThan({
      context: this.context,
      value: (0, _Conversions.dbToGain)(options.threshold)
    });
    this.input = new _Gain.Gain({
      context: this.context
    });
    this._gate = this.output = new _Gain.Gain({
      context: this.context
    }); // connections

    this.input.connect(this._gate); // the control signal

    this.input.chain(this._follower, this._gt, this._gate.gain);
  }

  static getDefaults() {
    return Object.assign(_ToneAudioNode.ToneAudioNode.getDefaults(), {
      smoothing: 0.1,
      threshold: -40
    });
  }
  /**
   * The threshold of the gate in decibels
   */


  get threshold() {
    return (0, _Conversions.gainToDb)(this._gt.value);
  }

  set threshold(thresh) {
    this._gt.value = (0, _Conversions.dbToGain)(thresh);
  }
  /**
   * The attack/decay speed of the gate. See [[Follower.smoothing]]
   */


  get smoothing() {
    return this._follower.smoothing;
  }

  set smoothing(smoothingTime) {
    this._follower.smoothing = smoothingTime;
  }

  dispose() {
    super.dispose();
    this.input.dispose();

    this._follower.dispose();

    this._gt.dispose();

    this._gate.dispose();

    return this;
  }

}

exports.Gate = Gate;
},{"../../core/context/ToneAudioNode":"../node_modules/tone/build/esm/core/context/ToneAudioNode.js","../../signal/GreaterThan":"../node_modules/tone/build/esm/signal/GreaterThan.js","../../core/context/Gain":"../node_modules/tone/build/esm/core/context/Gain.js","../analysis/Follower":"../node_modules/tone/build/esm/component/analysis/Follower.js","../../core/util/Defaults":"../node_modules/tone/build/esm/core/util/Defaults.js","../../core/type/Conversions":"../node_modules/tone/build/esm/core/type/Conversions.js"}],"../node_modules/tone/build/esm/component/dynamics/Limiter.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Limiter = void 0;

var _ToneAudioNode = require("../../core/context/ToneAudioNode");

var _Defaults = require("../../core/util/Defaults");

var _Compressor = require("./Compressor");

var _Interface = require("../../core/util/Interface");

;
/**
 * Limiter will limit the loudness of an incoming signal.
 * It is composed of a [[Compressor]] with a fast attack
 * and release and max ratio. Limiters are commonly used to safeguard against
 * signal clipping. Unlike a compressor, limiters do not provide
 * smooth gain reduction and almost completely prevent
 * additional gain above the threshold.
 *
 * @example
 * const limiter = new Tone.Limiter(-20).toDestination();
 * const oscillator = new Tone.Oscillator().connect(limiter);
 * oscillator.start();
 */

class Limiter extends _ToneAudioNode.ToneAudioNode {
  constructor() {
    super(Object.assign((0, _Defaults.optionsFromArguments)(Limiter.getDefaults(), arguments, ["threshold"])));
    this.name = "Limiter";
    const options = (0, _Defaults.optionsFromArguments)(Limiter.getDefaults(), arguments, ["threshold"]);
    this._compressor = this.input = this.output = new _Compressor.Compressor({
      context: this.context,
      ratio: 20,
      attack: 0,
      release: 0,
      threshold: options.threshold
    });
    this.threshold = this._compressor.threshold;
    (0, _Interface.readOnly)(this, "threshold");
  }

  static getDefaults() {
    return Object.assign(_ToneAudioNode.ToneAudioNode.getDefaults(), {
      threshold: -12
    });
  }
  /**
   * A read-only decibel value for metering purposes, representing the current amount of gain
   * reduction that the compressor is applying to the signal.
   */


  get reduction() {
    return this._compressor.reduction;
  }

  dispose() {
    super.dispose();

    this._compressor.dispose();

    this.threshold.dispose();
    return this;
  }

}

exports.Limiter = Limiter;
},{"../../core/context/ToneAudioNode":"../node_modules/tone/build/esm/core/context/ToneAudioNode.js","../../core/util/Defaults":"../node_modules/tone/build/esm/core/util/Defaults.js","./Compressor":"../node_modules/tone/build/esm/component/dynamics/Compressor.js","../../core/util/Interface":"../node_modules/tone/build/esm/core/util/Interface.js"}],"../node_modules/tone/build/esm/component/dynamics/MidSideCompressor.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MidSideCompressor = void 0;

var _ToneAudioNode = require("../../core/context/ToneAudioNode");

var _Compressor = require("./Compressor");

var _Defaults = require("../../core/util/Defaults");

var _MidSideSplit = require("../channel/MidSideSplit");

var _MidSideMerge = require("../channel/MidSideMerge");

var _Interface = require("../../core/util/Interface");

/**
 * MidSideCompressor applies two different compressors to the [[mid]]
 * and [[side]] signal components of the input. See [[MidSideSplit]] and [[MidSideMerge]].
 */
class MidSideCompressor extends _ToneAudioNode.ToneAudioNode {
  constructor() {
    super(Object.assign((0, _Defaults.optionsFromArguments)(MidSideCompressor.getDefaults(), arguments)));
    this.name = "MidSideCompressor";
    const options = (0, _Defaults.optionsFromArguments)(MidSideCompressor.getDefaults(), arguments);
    this._midSideSplit = this.input = new _MidSideSplit.MidSideSplit({
      context: this.context
    });
    this._midSideMerge = this.output = new _MidSideMerge.MidSideMerge({
      context: this.context
    });
    this.mid = new _Compressor.Compressor(Object.assign(options.mid, {
      context: this.context
    }));
    this.side = new _Compressor.Compressor(Object.assign(options.side, {
      context: this.context
    }));

    this._midSideSplit.mid.chain(this.mid, this._midSideMerge.mid);

    this._midSideSplit.side.chain(this.side, this._midSideMerge.side);

    (0, _Interface.readOnly)(this, ["mid", "side"]);
  }

  static getDefaults() {
    return Object.assign(_ToneAudioNode.ToneAudioNode.getDefaults(), {
      mid: {
        ratio: 3,
        threshold: -24,
        release: 0.03,
        attack: 0.02,
        knee: 16
      },
      side: {
        ratio: 6,
        threshold: -30,
        release: 0.25,
        attack: 0.03,
        knee: 10
      }
    });
  }

  dispose() {
    super.dispose();
    this.mid.dispose();
    this.side.dispose();

    this._midSideSplit.dispose();

    this._midSideMerge.dispose();

    return this;
  }

}

exports.MidSideCompressor = MidSideCompressor;
},{"../../core/context/ToneAudioNode":"../node_modules/tone/build/esm/core/context/ToneAudioNode.js","./Compressor":"../node_modules/tone/build/esm/component/dynamics/Compressor.js","../../core/util/Defaults":"../node_modules/tone/build/esm/core/util/Defaults.js","../channel/MidSideSplit":"../node_modules/tone/build/esm/component/channel/MidSideSplit.js","../channel/MidSideMerge":"../node_modules/tone/build/esm/component/channel/MidSideMerge.js","../../core/util/Interface":"../node_modules/tone/build/esm/core/util/Interface.js"}],"../node_modules/tone/build/esm/component/dynamics/MultibandCompressor.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.MultibandCompressor = void 0;

var _ToneAudioNode = require("../../core/context/ToneAudioNode");

var _Compressor = require("./Compressor");

var _Defaults = require("../../core/util/Defaults");

var _Interface = require("../../core/util/Interface");

var _MultibandSplit = require("../channel/MultibandSplit");

var _Gain = require("../../core/context/Gain");

/**
 * A compressor with separate controls over low/mid/high dynamics. See [[Compressor]] and [[MultibandSplit]]
 *
 * @example
 * const multiband = new Tone.MultibandCompressor({
 * 	lowFrequency: 200,
 * 	highFrequency: 1300,
 * 	low: {
 * 		threshold: -12
 * 	}
 * });
 */
class MultibandCompressor extends _ToneAudioNode.ToneAudioNode {
  constructor() {
    super(Object.assign((0, _Defaults.optionsFromArguments)(MultibandCompressor.getDefaults(), arguments)));
    this.name = "MultibandCompressor";
    const options = (0, _Defaults.optionsFromArguments)(MultibandCompressor.getDefaults(), arguments);
    this._splitter = this.input = new _MultibandSplit.MultibandSplit({
      context: this.context,
      lowFrequency: options.lowFrequency,
      highFrequency: options.highFrequency
    });
    this.lowFrequency = this._splitter.lowFrequency;
    this.highFrequency = this._splitter.highFrequency;
    this.output = new _Gain.Gain({
      context: this.context
    });
    this.low = new _Compressor.Compressor(Object.assign(options.low, {
      context: this.context
    }));
    this.mid = new _Compressor.Compressor(Object.assign(options.mid, {
      context: this.context
    }));
    this.high = new _Compressor.Compressor(Object.assign(options.high, {
      context: this.context
    })); // connect the compressor

    this._splitter.low.chain(this.low, this.output);

    this._splitter.mid.chain(this.mid, this.output);

    this._splitter.high.chain(this.high, this.output);

    (0, _Interface.readOnly)(this, ["high", "mid", "low", "highFrequency", "lowFrequency"]);
  }

  static getDefaults() {
    return Object.assign(_ToneAudioNode.ToneAudioNode.getDefaults(), {
      lowFrequency: 250,
      highFrequency: 2000,
      low: {
        ratio: 6,
        threshold: -30,
        release: 0.25,
        attack: 0.03,
        knee: 10
      },
      mid: {
        ratio: 3,
        threshold: -24,
        release: 0.03,
        attack: 0.02,
        knee: 16
      },
      high: {
        ratio: 3,
        threshold: -24,
        release: 0.03,
        attack: 0.02,
        knee: 16
      }
    });
  }

  dispose() {
    super.dispose();

    this._splitter.dispose();

    this.low.dispose();
    this.mid.dispose();
    this.high.dispose();
    this.output.dispose();
    return this;
  }

}

exports.MultibandCompressor = MultibandCompressor;
},{"../../core/context/ToneAudioNode":"../node_modules/tone/build/esm/core/context/ToneAudioNode.js","./Compressor":"../node_modules/tone/build/esm/component/dynamics/Compressor.js","../../core/util/Defaults":"../node_modules/tone/build/esm/core/util/Defaults.js","../../core/util/Interface":"../node_modules/tone/build/esm/core/util/Interface.js","../channel/MultibandSplit":"../node_modules/tone/build/esm/component/channel/MultibandSplit.js","../../core/context/Gain":"../node_modules/tone/build/esm/core/context/Gain.js"}],"../node_modules/tone/build/esm/component/filter/EQ3.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.EQ3 = void 0;

var _Gain = require("../../core/context/Gain");

var _ToneAudioNode = require("../../core/context/ToneAudioNode");

var _Defaults = require("../../core/util/Defaults");

var _Interface = require("../../core/util/Interface");

var _MultibandSplit = require("../channel/MultibandSplit");

/**
 * EQ3 provides 3 equalizer bins: Low/Mid/High.
 * @category Component
 */
class EQ3 extends _ToneAudioNode.ToneAudioNode {
  constructor() {
    super((0, _Defaults.optionsFromArguments)(EQ3.getDefaults(), arguments, ["low", "mid", "high"]));
    this.name = "EQ3";
    /**
     * the output
     */

    this.output = new _Gain.Gain({
      context: this.context
    });
    this._internalChannels = [];
    const options = (0, _Defaults.optionsFromArguments)(EQ3.getDefaults(), arguments, ["low", "mid", "high"]);
    this.input = this._multibandSplit = new _MultibandSplit.MultibandSplit({
      context: this.context,
      highFrequency: options.highFrequency,
      lowFrequency: options.lowFrequency
    });
    this._lowGain = new _Gain.Gain({
      context: this.context,
      gain: options.low,
      units: "decibels"
    });
    this._midGain = new _Gain.Gain({
      context: this.context,
      gain: options.mid,
      units: "decibels"
    });
    this._highGain = new _Gain.Gain({
      context: this.context,
      gain: options.high,
      units: "decibels"
    });
    this.low = this._lowGain.gain;
    this.mid = this._midGain.gain;
    this.high = this._highGain.gain;
    this.Q = this._multibandSplit.Q;
    this.lowFrequency = this._multibandSplit.lowFrequency;
    this.highFrequency = this._multibandSplit.highFrequency; // the frequency bands

    this._multibandSplit.low.chain(this._lowGain, this.output);

    this._multibandSplit.mid.chain(this._midGain, this.output);

    this._multibandSplit.high.chain(this._highGain, this.output);

    (0, _Interface.readOnly)(this, ["low", "mid", "high", "lowFrequency", "highFrequency"]);
    this._internalChannels = [this._multibandSplit];
  }

  static getDefaults() {
    return Object.assign(_ToneAudioNode.ToneAudioNode.getDefaults(), {
      high: 0,
      highFrequency: 2500,
      low: 0,
      lowFrequency: 400,
      mid: 0
    });
  }
  /**
   * Clean up.
   */


  dispose() {
    super.dispose();
    (0, _Interface.writable)(this, ["low", "mid", "high", "lowFrequency", "highFrequency"]);

    this._multibandSplit.dispose();

    this.lowFrequency.dispose();
    this.highFrequency.dispose();

    this._lowGain.dispose();

    this._midGain.dispose();

    this._highGain.dispose();

    this.low.dispose();
    this.mid.dispose();
    this.high.dispose();
    this.Q.dispose();
    return this;
  }

}

exports.EQ3 = EQ3;
},{"../../core/context/Gain":"../node_modules/tone/build/esm/core/context/Gain.js","../../core/context/ToneAudioNode":"../node_modules/tone/build/esm/core/context/ToneAudioNode.js","../../core/util/Defaults":"../node_modules/tone/build/esm/core/util/Defaults.js","../../core/util/Interface":"../node_modules/tone/build/esm/core/util/Interface.js","../channel/MultibandSplit":"../node_modules/tone/build/esm/component/channel/MultibandSplit.js"}],"../node_modules/tone/build/esm/component/filter/Convolver.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Convolver = void 0;

var _tslib = require("tslib");

var _ToneAudioNode = require("../../core/context/ToneAudioNode");

var _ToneAudioBuffer = require("../../core/context/ToneAudioBuffer");

var _Defaults = require("../../core/util/Defaults");

var _Gain = require("../../core/context/Gain");

var _Interface = require("../../core/util/Interface");

/**
 * Convolver is a wrapper around the Native Web Audio
 * [ConvolverNode](http://webaudio.github.io/web-audio-api/#the-convolvernode-interface).
 * Convolution is useful for reverb and filter emulation. Read more about convolution reverb on
 * [Wikipedia](https://en.wikipedia.org/wiki/Convolution_reverb).
 *
 * @example
 * // initializing the convolver with an impulse response
 * const convolver = new Tone.Convolver("./path/to/ir.wav").toDestination();
 * @category Component
 */
class Convolver extends _ToneAudioNode.ToneAudioNode {
  constructor() {
    super((0, _Defaults.optionsFromArguments)(Convolver.getDefaults(), arguments, ["url", "onload"]));
    this.name = "Convolver";
    /**
     * The native ConvolverNode
     */

    this._convolver = this.context.createConvolver();
    const options = (0, _Defaults.optionsFromArguments)(Convolver.getDefaults(), arguments, ["url", "onload"]);
    this._buffer = new _ToneAudioBuffer.ToneAudioBuffer(options.url, buffer => {
      this.buffer = buffer;
      options.onload();
    });
    this.input = new _Gain.Gain({
      context: this.context
    });
    this.output = new _Gain.Gain({
      context: this.context
    }); // set if it's already loaded, set it immediately

    if (this._buffer.loaded) {
      this.buffer = this._buffer;
    } // initially set normalization


    this.normalize = options.normalize; // connect it up

    this.input.chain(this._convolver, this.output);
  }

  static getDefaults() {
    return Object.assign(_ToneAudioNode.ToneAudioNode.getDefaults(), {
      normalize: true,
      onload: _Interface.noOp
    });
  }
  /**
   * Load an impulse response url as an audio buffer.
   * Decodes the audio asynchronously and invokes
   * the callback once the audio buffer loads.
   * @param url The url of the buffer to load. filetype support depends on the browser.
   */


  load(url) {
    return (0, _tslib.__awaiter)(this, void 0, void 0, function* () {
      this.buffer = yield this._buffer.load(url);
    });
  }
  /**
   * The convolver's buffer
   */


  get buffer() {
    if (this._buffer.length) {
      return this._buffer;
    } else {
      return null;
    }
  }

  set buffer(buffer) {
    if (buffer) {
      this._buffer.set(buffer);
    } // if it's already got a buffer, create a new one


    if (this._convolver.buffer) {
      // disconnect the old one
      this.input.disconnect();

      this._convolver.disconnect(); // create and connect a new one


      this._convolver = this.context.createConvolver();
      this.input.chain(this._convolver, this.output);
    }

    const buff = this._buffer.get();

    this._convolver.buffer = buff ? buff : null;
  }
  /**
   * The normalize property of the ConvolverNode interface is a boolean that
   * controls whether the impulse response from the buffer will be scaled by
   * an equal-power normalization when the buffer attribute is set, or not.
   */


  get normalize() {
    return this._convolver.normalize;
  }

  set normalize(norm) {
    this._convolver.normalize = norm;
  }

  dispose() {
    super.dispose();

    this._buffer.dispose();

    this._convolver.disconnect();

    return this;
  }

}

exports.Convolver = Convolver;
},{"tslib":"../node_modules/tslib/tslib.es6.js","../../core/context/ToneAudioNode":"../node_modules/tone/build/esm/core/context/ToneAudioNode.js","../../core/context/ToneAudioBuffer":"../node_modules/tone/build/esm/core/context/ToneAudioBuffer.js","../../core/util/Defaults":"../node_modules/tone/build/esm/core/util/Defaults.js","../../core/context/Gain":"../node_modules/tone/build/esm/core/context/Gain.js","../../core/util/Interface":"../node_modules/tone/build/esm/core/util/Interface.js"}],"../node_modules/tone/build/esm/component/index.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _Analyser = require("./analysis/Analyser");

Object.keys(_Analyser).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _Analyser[key];
    }
  });
});

var _Meter = require("./analysis/Meter");

Object.keys(_Meter).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _Meter[key];
    }
  });
});

var _FFT = require("./analysis/FFT");

Object.keys(_FFT).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _FFT[key];
    }
  });
});

var _DCMeter = require("./analysis/DCMeter");

Object.keys(_DCMeter).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _DCMeter[key];
    }
  });
});

var _Waveform = require("./analysis/Waveform");

Object.keys(_Waveform).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _Waveform[key];
    }
  });
});

var _Follower = require("./analysis/Follower");

Object.keys(_Follower).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _Follower[key];
    }
  });
});

var _Channel = require("./channel/Channel");

Object.keys(_Channel).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _Channel[key];
    }
  });
});

var _CrossFade = require("./channel/CrossFade");

Object.keys(_CrossFade).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _CrossFade[key];
    }
  });
});

var _Merge = require("./channel/Merge");

Object.keys(_Merge).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _Merge[key];
    }
  });
});

var _MidSideMerge = require("./channel/MidSideMerge");

Object.keys(_MidSideMerge).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _MidSideMerge[key];
    }
  });
});

var _MidSideSplit = require("./channel/MidSideSplit");

Object.keys(_MidSideSplit).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _MidSideSplit[key];
    }
  });
});

var _MultibandSplit = require("./channel/MultibandSplit");

Object.keys(_MultibandSplit).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _MultibandSplit[key];
    }
  });
});

var _Panner = require("./channel/Panner");

Object.keys(_Panner).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _Panner[key];
    }
  });
});

var _Panner3D = require("./channel/Panner3D");

Object.keys(_Panner3D).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _Panner3D[key];
    }
  });
});

var _PanVol = require("./channel/PanVol");

Object.keys(_PanVol).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _PanVol[key];
    }
  });
});

var _Recorder = require("./channel/Recorder");

Object.keys(_Recorder).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _Recorder[key];
    }
  });
});

var _Solo = require("./channel/Solo");

Object.keys(_Solo).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _Solo[key];
    }
  });
});

var _Split = require("./channel/Split");

Object.keys(_Split).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _Split[key];
    }
  });
});

var _Volume = require("./channel/Volume");

Object.keys(_Volume).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _Volume[key];
    }
  });
});

var _Compressor = require("./dynamics/Compressor");

Object.keys(_Compressor).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _Compressor[key];
    }
  });
});

var _Gate = require("./dynamics/Gate");

Object.keys(_Gate).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _Gate[key];
    }
  });
});

var _Limiter = require("./dynamics/Limiter");

Object.keys(_Limiter).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _Limiter[key];
    }
  });
});

var _MidSideCompressor = require("./dynamics/MidSideCompressor");

Object.keys(_MidSideCompressor).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _MidSideCompressor[key];
    }
  });
});

var _MultibandCompressor = require("./dynamics/MultibandCompressor");

Object.keys(_MultibandCompressor).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _MultibandCompressor[key];
    }
  });
});

var _AmplitudeEnvelope = require("./envelope/AmplitudeEnvelope");

Object.keys(_AmplitudeEnvelope).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _AmplitudeEnvelope[key];
    }
  });
});

var _Envelope = require("./envelope/Envelope");

Object.keys(_Envelope).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _Envelope[key];
    }
  });
});

var _FrequencyEnvelope = require("./envelope/FrequencyEnvelope");

Object.keys(_FrequencyEnvelope).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _FrequencyEnvelope[key];
    }
  });
});

var _EQ = require("./filter/EQ3");

Object.keys(_EQ).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _EQ[key];
    }
  });
});

var _Filter = require("./filter/Filter");

Object.keys(_Filter).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _Filter[key];
    }
  });
});

var _OnePoleFilter = require("./filter/OnePoleFilter");

Object.keys(_OnePoleFilter).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _OnePoleFilter[key];
    }
  });
});

var _FeedbackCombFilter = require("./filter/FeedbackCombFilter");

Object.keys(_FeedbackCombFilter).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _FeedbackCombFilter[key];
    }
  });
});

var _LowpassCombFilter = require("./filter/LowpassCombFilter");

Object.keys(_LowpassCombFilter).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _LowpassCombFilter[key];
    }
  });
});

var _Convolver = require("./filter/Convolver");

Object.keys(_Convolver).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _Convolver[key];
    }
  });
});

var _BiquadFilter = require("./filter/BiquadFilter");

Object.keys(_BiquadFilter).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _BiquadFilter[key];
    }
  });
});
},{"./analysis/Analyser":"../node_modules/tone/build/esm/component/analysis/Analyser.js","./analysis/Meter":"../node_modules/tone/build/esm/component/analysis/Meter.js","./analysis/FFT":"../node_modules/tone/build/esm/component/analysis/FFT.js","./analysis/DCMeter":"../node_modules/tone/build/esm/component/analysis/DCMeter.js","./analysis/Waveform":"../node_modules/tone/build/esm/component/analysis/Waveform.js","./analysis/Follower":"../node_modules/tone/build/esm/component/analysis/Follower.js","./channel/Channel":"../node_modules/tone/build/esm/component/channel/Channel.js","./channel/CrossFade":"../node_modules/tone/build/esm/component/channel/CrossFade.js","./channel/Merge":"../node_modules/tone/build/esm/component/channel/Merge.js","./channel/MidSideMerge":"../node_modules/tone/build/esm/component/channel/MidSideMerge.js","./channel/MidSideSplit":"../node_modules/tone/build/esm/component/channel/MidSideSplit.js","./channel/MultibandSplit":"../node_modules/tone/build/esm/component/channel/MultibandSplit.js","./channel/Panner":"../node_modules/tone/build/esm/component/channel/Panner.js","./channel/Panner3D":"../node_modules/tone/build/esm/component/channel/Panner3D.js","./channel/PanVol":"../node_modules/tone/build/esm/component/channel/PanVol.js","./channel/Recorder":"../node_modules/tone/build/esm/component/channel/Recorder.js","./channel/Solo":"../node_modules/tone/build/esm/component/channel/Solo.js","./channel/Split":"../node_modules/tone/build/esm/component/channel/Split.js","./channel/Volume":"../node_modules/tone/build/esm/component/channel/Volume.js","./dynamics/Compressor":"../node_modules/tone/build/esm/component/dynamics/Compressor.js","./dynamics/Gate":"../node_modules/tone/build/esm/component/dynamics/Gate.js","./dynamics/Limiter":"../node_modules/tone/build/esm/component/dynamics/Limiter.js","./dynamics/MidSideCompressor":"../node_modules/tone/build/esm/component/dynamics/MidSideCompressor.js","./dynamics/MultibandCompressor":"../node_modules/tone/build/esm/component/dynamics/MultibandCompressor.js","./envelope/AmplitudeEnvelope":"../node_modules/tone/build/esm/component/envelope/AmplitudeEnvelope.js","./envelope/Envelope":"../node_modules/tone/build/esm/component/envelope/Envelope.js","./envelope/FrequencyEnvelope":"../node_modules/tone/build/esm/component/envelope/FrequencyEnvelope.js","./filter/EQ3":"../node_modules/tone/build/esm/component/filter/EQ3.js","./filter/Filter":"../node_modules/tone/build/esm/component/filter/Filter.js","./filter/OnePoleFilter":"../node_modules/tone/build/esm/component/filter/OnePoleFilter.js","./filter/FeedbackCombFilter":"../node_modules/tone/build/esm/component/filter/FeedbackCombFilter.js","./filter/LowpassCombFilter":"../node_modules/tone/build/esm/component/filter/LowpassCombFilter.js","./filter/Convolver":"../node_modules/tone/build/esm/component/filter/Convolver.js","./filter/BiquadFilter":"../node_modules/tone/build/esm/component/filter/BiquadFilter.js"}],"../node_modules/tone/build/esm/classes.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _index = require("./core/index");

Object.keys(_index).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index[key];
    }
  });
});

var _index2 = require("./source/index");

Object.keys(_index2).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index2[key];
    }
  });
});

var _index3 = require("./signal/index");

Object.keys(_index3).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index3[key];
    }
  });
});

var _index4 = require("./instrument/index");

Object.keys(_index4).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index4[key];
    }
  });
});

var _index5 = require("./event/index");

Object.keys(_index5).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index5[key];
    }
  });
});

var _index6 = require("./effect/index");

Object.keys(_index6).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index6[key];
    }
  });
});

var _index7 = require("./component/index");

Object.keys(_index7).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _index7[key];
    }
  });
});
},{"./core/index":"../node_modules/tone/build/esm/core/index.js","./source/index":"../node_modules/tone/build/esm/source/index.js","./signal/index":"../node_modules/tone/build/esm/signal/index.js","./instrument/index":"../node_modules/tone/build/esm/instrument/index.js","./event/index":"../node_modules/tone/build/esm/event/index.js","./effect/index":"../node_modules/tone/build/esm/effect/index.js","./component/index":"../node_modules/tone/build/esm/component/index.js"}],"../node_modules/tone/build/esm/index.js":[function(require,module,exports) {

"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
var _exportNames = {
  now: true,
  immediate: true,
  Transport: true,
  getTransport: true,
  Destination: true,
  Master: true,
  getDestination: true,
  Listener: true,
  getListener: true,
  Draw: true,
  getDraw: true,
  context: true,
  loaded: true,
  Buffer: true,
  Buffers: true,
  BufferSource: true,
  getContext: true,
  setContext: true,
  start: true,
  supported: true
};
exports.now = now;
exports.immediate = immediate;
exports.getTransport = getTransport;
exports.getDestination = getDestination;
exports.getListener = getListener;
exports.getDraw = getDraw;
exports.loaded = loaded;
Object.defineProperty(exports, "getContext", {
  enumerable: true,
  get: function () {
    return _Global.getContext;
  }
});
Object.defineProperty(exports, "setContext", {
  enumerable: true,
  get: function () {
    return _Global.setContext;
  }
});
Object.defineProperty(exports, "start", {
  enumerable: true,
  get: function () {
    return _Global.start;
  }
});
Object.defineProperty(exports, "supported", {
  enumerable: true,
  get: function () {
    return _AudioContext.supported;
  }
});
exports.BufferSource = exports.Buffers = exports.Buffer = exports.context = exports.Draw = exports.Listener = exports.Master = exports.Destination = exports.Transport = void 0;

var _Global = require("./core/Global");

var _classes = require("./classes");

Object.keys(_classes).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _classes[key];
    }
  });
});

var _version = require("./version");

Object.keys(_version).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _version[key];
    }
  });
});

var _ToneAudioBuffer = require("./core/context/ToneAudioBuffer");

var _AudioContext = require("./core/context/AudioContext");

var _ToneAudioBuffers = require("./core/context/ToneAudioBuffers");

var _ToneBufferSource = require("./source/buffer/ToneBufferSource");

/**
 * The current audio context time of the global [[Context]].
 * See [[Context.now]]
 * @category Core
 */
function now() {
  return (0, _Global.getContext)().now();
}
/**
 * The current audio context time of the global [[Context]] without the [[Context.lookAhead]]
 * See [[Context.immediate]]
 * @category Core
 */


function immediate() {
  return (0, _Global.getContext)().immediate();
}
/**
 * The Transport object belonging to the global Tone.js Context.
 * See [[Transport]]
 * @category Core
 */


const Transport = (0, _Global.getContext)().transport;
/**
 * The Transport object belonging to the global Tone.js Context.
 * See [[Transport]]
 * @category Core
 */

exports.Transport = Transport;

function getTransport() {
  return (0, _Global.getContext)().transport;
}
/**
 * The Destination (output) belonging to the global Tone.js Context.
 * See [[Destination]]
 * @category Core
 */


const Destination = (0, _Global.getContext)().destination;
/**
 * @deprecated Use [[Destination]]
 */

exports.Destination = Destination;
const Master = (0, _Global.getContext)().destination;
/**
 * The Destination (output) belonging to the global Tone.js Context.
 * See [[Destination]]
 * @category Core
 */

exports.Master = Master;

function getDestination() {
  return (0, _Global.getContext)().destination;
}
/**
 * The [[Listener]] belonging to the global Tone.js Context.
 * @category Core
 */


const Listener = (0, _Global.getContext)().listener;
/**
 * The [[Listener]] belonging to the global Tone.js Context.
 * @category Core
 */

exports.Listener = Listener;

function getListener() {
  return (0, _Global.getContext)().listener;
}
/**
 * Draw is used to synchronize the draw frame with the Transport's callbacks.
 * See [[Draw]]
 * @category Core
 */


const Draw = (0, _Global.getContext)().draw;
/**
 * Get the singleton attached to the global context.
 * Draw is used to synchronize the draw frame with the Transport's callbacks.
 * See [[Draw]]
 * @category Core
 */

exports.Draw = Draw;

function getDraw() {
  return (0, _Global.getContext)().draw;
}
/**
 * A reference to the global context
 * See [[Context]]
 */


const context = (0, _Global.getContext)();
/**
 * Promise which resolves when all of the loading promises are resolved.
 * Alias for static [[ToneAudioBuffer.loaded]] method.
 * @category Core
 */

exports.context = context;

function loaded() {
  return _ToneAudioBuffer.ToneAudioBuffer.loaded();
} // this fills in name changes from 13.x to 14.x


const Buffer = _ToneAudioBuffer.ToneAudioBuffer;
exports.Buffer = Buffer;
const Buffers = _ToneAudioBuffers.ToneAudioBuffers;
exports.Buffers = Buffers;
const BufferSource = _ToneBufferSource.ToneBufferSource;
exports.BufferSource = BufferSource;
},{"./core/Global":"../node_modules/tone/build/esm/core/Global.js","./classes":"../node_modules/tone/build/esm/classes.js","./version":"../node_modules/tone/build/esm/version.js","./core/context/ToneAudioBuffer":"../node_modules/tone/build/esm/core/context/ToneAudioBuffer.js","./core/context/AudioContext":"../node_modules/tone/build/esm/core/context/AudioContext.js","./core/context/ToneAudioBuffers":"../node_modules/tone/build/esm/core/context/ToneAudioBuffers.js","./source/buffer/ToneBufferSource":"../node_modules/tone/build/esm/source/buffer/ToneBufferSource.js"}],"initParams.js":[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.initParams = void 0;

var initParams = function initParams(innerWidth, innerHeight) {
  var windowSize = function windowSize(innerWidth, innerHeight) {
    return innerWidth < innerHeight ? innerWidth : innerHeight;
  };

  var canvasSize = function canvasSize(windowSize) {
    return windowSize < 500 ? windowSize : Math.round(windowSize * 0.6);
  };

  var params = {};
  params.windowSize = windowSize(innerWidth, innerHeight);
  params.canvasSize = canvasSize(params.windowSize);
  params.ballNum = 5;
  params.isStart = confirm("Trun sound on?");
  return params;
};

exports.initParams = initParams;
},{}],"initBall.js":[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.initBall = void 0;

var _p = _interopRequireDefault(require("p5"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var initBall = function initBall(index) {
  return function (params) {
    var ball = {};
    ball.cycleLength = 60 + 10 * index;
    ball.frameVal = 0;
    ball.angle = 0;
    ball.marginRate = new _p.default.Vector(0.2, 0.2);

    var calcLeftEdge = function calcLeftEdge() {
      var x = params.canvasSize * ball.marginRate.x;
      var y = params.canvasSize / 2;
      return new _p.default.Vector(x, y);
    };

    ball.leftEdge = calcLeftEdge();

    var calcRightEdge = function calcRightEdge() {
      var margin = params.canvasSize * ball.marginRate.x;
      var x = params.canvasSize - margin;
      var y = params.canvasSize / 2;
      return new _p.default.Vector(x, y);
    };

    ball.rightEdge = calcRightEdge();

    var calcAmp = function calcAmp() {
      var margin = params.canvasSize * ball.marginRate.y;
      var effectiveHeight = params.canvasSize - margin * 2;
      return effectiveHeight;
    };

    ball.amp = calcAmp();

    var calcPos = function calcPos() {
      var margin = params.canvasSize * ball.marginRate.x;
      var effectiveWidth = params.canvasSize - margin * 2;
      var eachWidth = effectiveWidth / (params.ballNum + 1);
      var x = margin + eachWidth * (index + 1);
      var y = 0;
      return new _p.default.Vector(x, y);
    };

    ball.pos = calcPos();
    return ball;
  };
};

exports.initBall = initBall;
},{"p5":"../node_modules/p5/lib/p5.min.js"}],"updateBall.js":[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.updateBall = void 0;

var _p = _interopRequireDefault(require("p5"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var updateBall = function updateBall(ball) {
  return function (params, frameCount) {
    var updatedBall = {};
    updatedBall.cycleLength = ball.cycleLength;
    updatedBall.frameVal = frameCount % ball.cycleLength;
    updatedBall.angle = ball.frameVal * 2 * Math.PI / ball.cycleLength;
    updatedBall.marginRate = ball.marginRate;
    updatedBall.leftEdge = ball.leftEdge;
    updatedBall.rightEdge = ball.rightEdge;
    updatedBall.amp = ball.amp;

    var calcPos = function calcPos() {
      var x = ball.pos.x;
      var margin = params.canvasSize * updatedBall.marginRate.y;
      var y = margin + updatedBall.amp * (Math.sin(updatedBall.angle) + 1) / 2;
      return new _p.default.Vector(x, y);
    };

    updatedBall.pos = calcPos();
    return updatedBall;
  };
};

exports.updateBall = updateBall;
},{"p5":"../node_modules/p5/lib/p5.min.js"}],"index.js":[function(require,module,exports) {
'use strict';

var _p = _interopRequireDefault(require("p5"));

var Tone = _interopRequireWildcard(require("tone"));

var _initParams = require("./initParams.js");

var _initBall = require("./initBall.js");

var _updateBall = require("./updateBall.js");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var sketch = function sketch(s) {
  var params = (0, _initParams.initParams)(window.innerWidth, window.innerHeight);
  var balls = Array.from(Array(params.ballNum), function (ball, index) {
    return (0, _initBall.initBall)(index)(params);
  });

  var drawFrame = function drawFrame(params) {
    s.push();
    s.stroke('black');
    s.strokeWeight(1);
    s.noFill();
    s.rect(0, 0, params.canvasSize, params.canvasSize);
    s.pop();
  };

  var drawBalls = function drawBalls(balls) {
    var edgeBall = balls[0];
    s.push();
    s.fill(0);
    s.noStroke();
    s.beginShape();
    s.curveVertex(edgeBall.leftEdge.x, edgeBall.leftEdge.y);
    s.curveVertex(edgeBall.leftEdge.x, edgeBall.leftEdge.y);
    balls.forEach(function (ball) {
      s.curveVertex(ball.pos.x, ball.pos.y);
    });
    s.curveVertex(edgeBall.rightEdge.x, edgeBall.rightEdge.y);
    s.curveVertex(edgeBall.rightEdge.x, edgeBall.rightEdge.y);
    s.endShape();
    s.pop();
  };

  var confirmFunc = function confirmFunc(params) {
    if (params.isStart) {
      Tone.start();
      s.loop();
    } else {
      s.loop();
      Tone.Master.mute = true;
    }
  };

  s.setup = function () {
    s.createCanvas(params.canvasSize, params.canvasSize);
    s.noLoop();
    confirmFunc(params);
  };

  s.draw = function () {
    balls = balls.map(function (ball) {
      return (0, _updateBall.updateBall)(ball)(params, s.frameCount);
    });
    s.background(255);
    drawFrame(params);
    drawBalls(balls);
  };
};

new _p.default(sketch, 'p5js');
},{"p5":"../node_modules/p5/lib/p5.min.js","tone":"../node_modules/tone/build/esm/index.js","./initParams.js":"initParams.js","./initBall.js":"initBall.js","./updateBall.js":"updateBall.js"}],"../node_modules/parcel-bundler/src/builtins/hmr-runtime.js":[function(require,module,exports) {
var global = arguments[3];
var OVERLAY_ID = '__parcel__error__overlay__';
var OldModule = module.bundle.Module;

function Module(moduleName) {
  OldModule.call(this, moduleName);
  this.hot = {
    data: module.bundle.hotData,
    _acceptCallbacks: [],
    _disposeCallbacks: [],
    accept: function (fn) {
      this._acceptCallbacks.push(fn || function () {});
    },
    dispose: function (fn) {
      this._disposeCallbacks.push(fn);
    }
  };
  module.bundle.hotData = null;
}

module.bundle.Module = Module;
var checkedAssets, assetsToAccept;
var parent = module.bundle.parent;

if ((!parent || !parent.isParcelRequire) && typeof WebSocket !== 'undefined') {
  var hostname = "" || location.hostname;
  var protocol = location.protocol === 'https:' ? 'wss' : 'ws';
  var ws = new WebSocket(protocol + '://' + hostname + ':' + "60797" + '/');

  ws.onmessage = function (event) {
    checkedAssets = {};
    assetsToAccept = [];
    var data = JSON.parse(event.data);

    if (data.type === 'update') {
      var handled = false;
      data.assets.forEach(function (asset) {
        if (!asset.isNew) {
          var didAccept = hmrAcceptCheck(global.parcelRequire, asset.id);

          if (didAccept) {
            handled = true;
          }
        }
      }); // Enable HMR for CSS by default.

      handled = handled || data.assets.every(function (asset) {
        return asset.type === 'css' && asset.generated.js;
      });

      if (handled) {
        console.clear();
        data.assets.forEach(function (asset) {
          hmrApply(global.parcelRequire, asset);
        });
        assetsToAccept.forEach(function (v) {
          hmrAcceptRun(v[0], v[1]);
        });
      } else if (location.reload) {
        // `location` global exists in a web worker context but lacks `.reload()` function.
        location.reload();
      }
    }

    if (data.type === 'reload') {
      ws.close();

      ws.onclose = function () {
        location.reload();
      };
    }

    if (data.type === 'error-resolved') {
      console.log('[parcel] ✨ Error resolved');
      removeErrorOverlay();
    }

    if (data.type === 'error') {
      console.error('[parcel] 🚨  ' + data.error.message + '\n' + data.error.stack);
      removeErrorOverlay();
      var overlay = createErrorOverlay(data);
      document.body.appendChild(overlay);
    }
  };
}

function removeErrorOverlay() {
  var overlay = document.getElementById(OVERLAY_ID);

  if (overlay) {
    overlay.remove();
  }
}

function createErrorOverlay(data) {
  var overlay = document.createElement('div');
  overlay.id = OVERLAY_ID; // html encode message and stack trace

  var message = document.createElement('div');
  var stackTrace = document.createElement('pre');
  message.innerText = data.error.message;
  stackTrace.innerText = data.error.stack;
  overlay.innerHTML = '<div style="background: black; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; opacity: 0.85; font-family: Menlo, Consolas, monospace; z-index: 9999;">' + '<span style="background: red; padding: 2px 4px; border-radius: 2px;">ERROR</span>' + '<span style="top: 2px; margin-left: 5px; position: relative;">🚨</span>' + '<div style="font-size: 18px; font-weight: bold; margin-top: 20px;">' + message.innerHTML + '</div>' + '<pre>' + stackTrace.innerHTML + '</pre>' + '</div>';
  return overlay;
}

function getParents(bundle, id) {
  var modules = bundle.modules;

  if (!modules) {
    return [];
  }

  var parents = [];
  var k, d, dep;

  for (k in modules) {
    for (d in modules[k][1]) {
      dep = modules[k][1][d];

      if (dep === id || Array.isArray(dep) && dep[dep.length - 1] === id) {
        parents.push(k);
      }
    }
  }

  if (bundle.parent) {
    parents = parents.concat(getParents(bundle.parent, id));
  }

  return parents;
}

function hmrApply(bundle, asset) {
  var modules = bundle.modules;

  if (!modules) {
    return;
  }

  if (modules[asset.id] || !bundle.parent) {
    var fn = new Function('require', 'module', 'exports', asset.generated.js);
    asset.isNew = !modules[asset.id];
    modules[asset.id] = [fn, asset.deps];
  } else if (bundle.parent) {
    hmrApply(bundle.parent, asset);
  }
}

function hmrAcceptCheck(bundle, id) {
  var modules = bundle.modules;

  if (!modules) {
    return;
  }

  if (!modules[id] && bundle.parent) {
    return hmrAcceptCheck(bundle.parent, id);
  }

  if (checkedAssets[id]) {
    return;
  }

  checkedAssets[id] = true;
  var cached = bundle.cache[id];
  assetsToAccept.push([bundle, id]);

  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {
    return true;
  }

  return getParents(global.parcelRequire, id).some(function (id) {
    return hmrAcceptCheck(global.parcelRequire, id);
  });
}

function hmrAcceptRun(bundle, id) {
  var cached = bundle.cache[id];
  bundle.hotData = {};

  if (cached) {
    cached.hot.data = bundle.hotData;
  }

  if (cached && cached.hot && cached.hot._disposeCallbacks.length) {
    cached.hot._disposeCallbacks.forEach(function (cb) {
      cb(bundle.hotData);
    });
  }

  delete bundle.cache[id];
  bundle(id);
  cached = bundle.cache[id];

  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {
    cached.hot._acceptCallbacks.forEach(function (cb) {
      cb();
    });

    return true;
  }
}
},{}]},{},["../node_modules/parcel-bundler/src/builtins/hmr-runtime.js","index.js"], null)
//# sourceMappingURL=src.e31bb0bc.js.map